>>> one-context: Validating /home/packager/oily-pine/main/one-context/APKBUILD...
>>> one-context: Cleaning up srcdir
>>> one-context: Cleaning up pkgdir
>>> one-context: Cleaning up tmpdir
>>> one-context: Fetching https://github.com/jirutka/one-context/archive/v0.9.0/one-context-0.9.0.tar.gz
>>> one-context: Fetching https://github.com/jirutka/one-context/archive/v0.9.0/one-context-0.9.0.tar.gz
>>> one-context: Checking sha512sums...
one-context-0.9.0.tar.gz: OK
>>> one-context: Preparing build chroot...
installing oils!
fetch http://dl-cdn.alpinelinux.org/alpine/edge/main/x86_64/APKINDEX.tar.gz
WARNING: opening /home/packager/packages//# for oils: No such file or directory
(1/80) Installing musl (1.2.5-r13)
(2/80) Installing libcrypto3 (3.5.1-r0)
(3/80) Installing libssl3 (3.5.1-r0)
(4/80) Installing zlib (1.3.1-r2)
(5/80) Installing zstd-libs (1.5.7-r1)
(6/80) Installing libapk (3.0.0_rc5_git20250613-r0)
(7/80) Installing ca-certificates-bundle (20241121-r2)
(8/80) Installing apk-tools (3.0.0_rc5_git20250613-r0)
(9/80) Installing libcap2 (2.76-r0)
(10/80) Installing libcap-getcap (2.76-r0)
(11/80) Installing fakeroot (1.37.1.2-r0)
(12/80) Installing scanelf (1.3.8-r1)
(13/80) Installing musl-utils (1.2.5-r13)
(14/80) Installing libgcc (14.3.0-r5)
(15/80) Installing libstdc++ (14.3.0-r5)
(16/80) Installing lzip (1.25-r0)
(17/80) Installing openssl (3.5.1-r0)
(18/80) Installing patch (2.8-r0)
(19/80) Installing pkgconf (2.5.1-r0)
(20/80) Installing acl-libs (2.3.2-r1)
(21/80) Installing tar (1.35-r4)
(22/80) Installing alpine-baselayout-data (3.7.0-r0)
(23/80) Installing busybox (1.37.0-r18)
Executing busybox-1.37.0-r18.post-install
(24/80) Installing ssl_client (1.37.0-r18)
(25/80) Installing ncurses-terminfo-base (6.5_p20250705-r0)
(26/80) Installing libncursesw (6.5_p20250705-r0)
(27/80) Installing readline (8.3.0-r1)
(28/80) Installing oils-for-unix (0.28.0-r0)
(29/80) Installing oils-for-unix-binsh (0.28.0-r0)
(30/80) Installing abuild (3.15.0-r2)
Executing abuild-3.15.0-r2.pre-install
(31/80) Installing abuild-sudo (3.15.0-r2)
(32/80) Installing alpine-baselayout (3.7.0-r0)
Executing alpine-baselayout-3.7.0-r0.pre-install
Executing alpine-baselayout-3.7.0-r0.post-install
(33/80) Installing bridge (1.5-r5)
(34/80) Installing ifupdown-ng (0.12.1-r7)
(35/80) Installing openrc-user (0.62.5-r0)
(36/80) Installing openrc (0.62.5-r0)
Executing openrc-0.62.5-r0.post-install
(37/80) Installing mdev-conf (4.8-r0)
(38/80) Installing busybox-mdev-openrc (1.37.0-r18)
(39/80) Installing alpine-conf (3.20.0-r0)
(40/80) Installing alpine-keys (2.5-r0)
(41/80) Installing alpine-release (3.23.0_alpha20250612-r0)
(42/80) Installing busybox-openrc (1.37.0-r18)
(43/80) Installing busybox-suid (1.37.0-r18)
(44/80) Installing alpine-base (3.23.0_alpha20250612-r0)
(45/80) Installing libeconf (0.7.9-r0)
(46/80) Installing libblkid (2.41.1-r0)
(47/80) Installing blkid (2.41.1-r0)
(48/80) Installing jansson (2.14.1-r0)
(49/80) Installing binutils (2.44-r0)
(50/80) Installing libmagic (5.46-r2)
(51/80) Installing file (5.46-r2)
(52/80) Installing libgomp (14.3.0-r5)
(53/80) Installing libatomic (14.3.0-r5)
(54/80) Installing gmp (6.3.0-r4)
(55/80) Installing isl26 (0.26-r1)
(56/80) Installing mpfr4 (4.2.2-r0)
(57/80) Installing mpc1 (1.3.1-r1)
(58/80) Installing gcc (14.3.0-r5)
(59/80) Installing libstdc++-dev (14.3.0-r5)
(60/80) Installing musl-dev (1.2.5-r13)
(61/80) Installing g++ (14.3.0-r5)
(62/80) Installing make (4.4.1-r3)
(63/80) Installing fortify-headers (1.1-r5)
(64/80) Installing build-base (0.5-r3)
(65/80) Installing brotli-libs (1.1.0-r2)
(66/80) Installing c-ares (1.34.5-r0)
(67/80) Installing libunistring (1.3-r0)
(68/80) Installing libidn2 (2.3.8-r0)
(69/80) Installing nghttp2-libs (1.66.0-r0)
(70/80) Installing libpsl (0.21.5-r3)
(71/80) Installing libcurl (8.14.1-r2)
(72/80) Installing libexpat (2.7.1-r0)
(73/80) Installing pcre2 (10.43-r1)
(74/80) Installing git (2.50.1-r0)
(75/80) Installing git-init-template (2.50.1-r0)
(76/80) Installing libsmartcols (2.41.1-r0)
(77/80) Installing partx (2.41.1-r0)
(78/80) Installing libuuid (2.41.1-r0)
(79/80) Installing libfdisk (2.41.1-r0)
(80/80) Installing sfdisk (2.41.1-r0)
Executing busybox-1.37.0-r18.trigger
OK: 276 MiB in 80 packages
>>> one-context: Fetching https://github.com/jirutka/one-context/archive/v0.9.0/one-context-0.9.0.tar.gz
>>> one-context: Checking sha512sums...
one-context-0.9.0.tar.gz: OK
>>> one-context: Unpacking /var/cache/distfiles/one-context-0.9.0.tar.gz...
(command.CommandList
  children:[
    (C (w <Lit_Chars set>) (w <Lit_Chars -eu>))
    (command.If
      if_kw:<KW_If if>
      arms:[
        (IfArm
          keyword:...0x11aa
          cond:[
            (command.Sentence
              child:(C
                (w <Lit_LBracket "[">)
                (w
                  (DQ
                    (BracedVarSub
                      left:<Left_DollarBrace "${">
                      name_tok:<VSub_Name SET_HOSTNAME>
                      var_name:SET_HOSTNAME
                      suffix_op:(suffix_op.Unary
                        op:<VTest_ColonHyphen ":-">
                        arg_word:(rhs_word.Empty)
                      )
                      right:<Right_DollarBrace "}">
                    )
                  )
                )
                (w <Lit_RBracket "]">)
              )
              terminator:<Op_Semi ";">
            )
          ]
          then_kw:<KW_Then then>
          action:[
            (command.Pipeline
              children:[
                (C
                  (w <Lit_Chars printf>)
                  (w (SQ "%s\\n"))
                  (w
                    (DQ
                      (BracedVarSub
                        left:<Left_DollarBrace "${">
                        name_tok:<VSub_Name SET_HOSTNAME>
                        var_name:SET_HOSTNAME
                        suffix_op:(suffix_op.Unary
                          op:<VOp1_DPercent "%%">
                          arg_word:(w <Lit_Chars .> <Lit_Other "*">)
                        )
                        right:<Right_DollarBrace "}">
                      )
                    )
                  )
                )
                (command.Redirect
                  child:(C
                    (w <Lit_Chars sed>)
                    (w (SQ "s/[^-a-zA-Z0-9]/-/g; s/^-*//g; s/-*$//g"))
                  )
                  redirects:[
                    (Redir
                      op:<Redir_Great ">">
                      loc:(redir_loc.Fd fd:1)
                      arg:(w
                        <Lit_Slash />
                        <Lit_Chars etc>
                        <Lit_Slash />
                        <Lit_Chars hostname>
                      )
                    )
                  ]
                )
              ]
              ops:[<Op_Pipe "|">]
            )
            (C
              (w <Lit_Chars hostname>)
              (w
                (DQ
                  (CommandSub
                    left_token:<Left_DollarParen "$(">
                    child:(C
                      (w <Lit_Chars cat>)
                      (w
                        <Lit_Slash />
                        <Lit_Chars etc>
                        <Lit_Slash />
                        <Lit_Chars hostname>
                      )
                    )
                    right:<Eof_RParen ")">
                  )
                )
              )
            )
          ]
          then_tok:...0x112e
        )
      ]
      else_action:[]
      fi_kw:<KW_Fi fi>
    )
  ]
)
scripts/hostname                  PASS
(command.CommandList
  children:[
    (C (w <Lit_Chars set>) (w <Lit_Chars -eu>))
    (C
      (w <Lit_Chars .>)
      (w
        (DQ
          (CommandSub
            left_token:<Left_DollarParen "$(">
            child:(C
              (w <Lit_Chars dirname>)
              (w
                (DQ
                  (CommandSub
                    left_token:<Left_DollarParen "$(">
                    child:(C
                      (w <Lit_Chars readlink>)
                      (w <Lit_Chars -f>)
                      (w (DQ ($ 0)))
                    )
                    right:<Eof_RParen ")">
                  )
                )
              )
            )
            right:<Eof_RParen ")">
          )
        )
        <Lit_Slash />
        <Lit_Chars utils.sh>
      )
    )
    (command.ShAssignment
      left:<Lit_VarLike "hostname=">
      pairs:[
        (AssignPair
          left:...0x107a
          lhs:(sh_lhs.Name left:...0x107a name:hostname)
          op:assign_op.Equal
          rhs:(w
            (DQ
              (CommandSub
                left_token:<Left_DollarParen "$(">
                child:(C (w <Lit_Chars hostname>) (w <Lit_Chars -s>))
                right:<Eof_RParen ")">
              )
            )
          )
        )
      ]
    )
    (command.ShAssignment
      left:<Lit_VarLike "fqdn=">
      pairs:[
        (AssignPair
          left:...0x1a52
          lhs:(sh_lhs.Name left:...0x1a52 name:fqdn)
          op:assign_op.Equal
          rhs:(w
            (DQ
              (CommandSub
                left_token:<Left_DollarParen "$(">
                child:(command.Pipeline
                  children:[
                    (C
                      (w <Lit_Chars printf>)
                      (w (SQ "%s\\n"))
                      (w
                        (DQ
                          (BracedVarSub
                            left:<Left_DollarBrace "${">
                            name_tok:<VSub_Name SET_FQDN>
                            var_name:SET_FQDN
                            suffix_op:(suffix_op.Unary
                              op:<VTest_ColonHyphen ":-">
                              arg_word:(w
                                (BracedVarSub
                                  left:<Left_DollarBrace "${">
                                  name_tok:<VSub_Name SET_HOSTNAME>
                                  var_name:SET_HOSTNAME
                                  suffix_op:(suffix_op.Unary
                                    op:<VTest_ColonHyphen ":-">
                                    arg_word:(w)
                                  )
                                  right:<Right_DollarBrace "}">
                                )
                              )
                            )
                            right:<Right_DollarBrace "}">
                          )
                        )
                      )
                    )
                    (C
                      (w <Lit_Chars sed>)
                      (w
                        (SQ "s/[^-a-zA-Z0-9\\.]/-/g; s/^[.-]*//g; s/[.-]*$//g")
                      )
                    )
                  ]
                  ops:[<Op_Pipe "|">]
                )
                right:<Eof_RParen ")">
              )
            )
          )
        )
      ]
    )
    (command.Case
      case_kw:<KW_Case case>
      to_match:(case_arg.Word w:(w (DQ ($ fqdn))))
      arms_start:<KW_In in>
      arms:[
        (CaseArm
          left:<Lit_Star "*">
          pattern:(pat.Words
            words:[(w <Lit_Star "*"> <Lit_Chars .> <Lit_Star "*">)]
          )
          middle:<Right_CasePat ")">
          action:[]
          right:<Op_DSemi ";;">
        )
        (CaseArm
          left:<Lit_Star "*">
          pattern:(pat.Words words:[(w <Lit_Star "*">)])
          middle:<Right_CasePat ")">
          action:[
            (command.ShAssignment
              left:<Lit_VarLike "fqdn=">
              pairs:[
                (AssignPair
                  left:...0x1862
                  lhs:(sh_lhs.Name left:...0x1862 name:fqdn)
                  op:assign_op.Equal
                  rhs:(w (DQ ($ hostname) <Lit_Chars .local>))
                )
              ]
            )
          ]
          right:<Op_DSemi ";;">
        )
      ]
      arms_end:<KW_Esac esac>
    )
    (command.Redirect
      child:(C
        (w <Lit_Chars update_config>)
        (w (SQ /etc/hosts))
        (w
          (DQ
            (CommandSub
              left_token:<Left_DollarParen "$(">
              child:(C
                (w <Lit_Chars readlink>)
                (w <Lit_Chars -f>)
                (w (DQ ($ 0)))
              )
              right:<Eof_RParen ")">
            )
          )
        )
      )
      redirects:[
        (Redir
          op:<Redir_DLessDash "<<-">
          loc:(redir_loc.Fd fd:0)
          arg:(redir_param.HereDoc
            here_begin:(w <Lit_Chars EOF>)
            here_end_tok:<Undefined_Tok "EOF\n">
            stdin_parts:[
              <Lit_Chars "127.0.0.1\t">
              (${ VSub_Name fqdn)
              <Lit_Chars " ">
              (${ VSub_Name hostname)
              <Lit_Chars " localhost\n">
              <Lit_Chars "::1\t\t">
              (${ VSub_Name fqdn)
              <Lit_Chars " ">
              (${ VSub_Name hostname)
              <Lit_Chars " localhost\n">
            ]
          )
        )
      ]
    )
  ]
)
scripts/hosts                     PASS
(command.CommandList
  children:[
    (C (w <Lit_Chars set>) (w <Lit_Chars -eu>))
    (C
      (w <Lit_Chars readonly>)
      (w <Lit_VarLike "CONF_FILES="> (SQ "/etc/ntpd.conf /etc/ntp.conf"))
    )
    (command.If
      if_kw:<KW_If if>
      arms:[
        (IfArm
          keyword:...0x1126
          cond:[
            (command.Sentence
              child:(C
                (w <Lit_LBracket "[">)
                (w <Lit_Chars -z>)
                (w
                  (DQ
                    (BracedVarSub
                      left:<Left_DollarBrace "${">
                      name_tok:<VSub_Name NTP>
                      var_name:NTP
                      suffix_op:(suffix_op.Unary
                        op:<VTest_ColonHyphen ":-">
                        arg_word:(rhs_word.Empty)
                      )
                      right:<Right_DollarBrace "}">
                    )
                  )
                )
                (w <Lit_RBracket "]">)
              )
              terminator:<Op_Semi ";">
            )
          ]
          then_kw:<KW_Then then>
          action:[
            (command.ControlFlow
              keyword:<ControlFlow_Exit exit>
              arg_word:(w <Lit_Chars 0>)
            )
          ]
          then_tok:...0x10a2
        )
      ]
      else_action:[]
      fi_kw:<KW_Fi fi>
    )
    (C
      (w <Lit_Chars .>)
      (w
        (DQ
          (CommandSub
            left_token:<Left_DollarParen "$(">
            child:(C
              (w <Lit_Chars dirname>)
              (w
                (DQ
                  (CommandSub
                    left_token:<Left_DollarParen "$(">
                    child:(C
                      (w <Lit_Chars readlink>)
                      (w <Lit_Chars -f>)
                      (w (DQ ($ 0)))
                    )
                    right:<Eof_RParen ")">
                  )
                )
              )
            )
            right:<Eof_RParen ")">
          )
        )
        <Lit_Slash />
        <Lit_Chars utils.sh>
      )
    )
    (command.ShAssignment
      left:<Lit_VarLike "ntp_conf=">
      pairs:[
        (AssignPair
          left:...0x19a2
          lhs:(sh_lhs.Name left:...0x19a2 name:ntp_conf)
          op:assign_op.Equal
          rhs:(w
            (CommandSub
              left_token:<Left_DollarParen "$(">
              child:(command.Pipeline
                children:[
                  (C (w <Lit_Chars echo>) (w (DQ ($ NTP))))
                  (C
                    (w <Lit_Chars tr>)
                    (w <Lit_Chars -s>)
                    (w (SQ " \\t"))
                    (w (SQ "\\n\\n"))
                  )
                  (C
                    (w <Lit_Chars xargs>)
                    (w <Lit_Chars -I> <Lit_Other "%">)
                    (w <Lit_Chars printf>)
                    (w (SQ "server %\\n"))
                  )
                ]
                ops:[<Op_Pipe "|"> <Op_Pipe "|">]
              )
              right:<Eof_RParen ")">
            )
          )
        )
      ]
    )
    (command.ForEach
      keyword:<KW_For for>
      iter_names:[file]
      iterable:(for_iter.Words words:[(w ($ CONF_FILES))])
      semi_tok:<Op_Semi ";">
      body:(command.DoGroup
        left:<KW_Do do>
        children:[
          (command.If
            if_kw:<KW_If if>
            arms:[
              (IfArm
                keyword:...0x177a
                cond:[
                  (command.Sentence
                    child:(C
                      (w <Lit_LBracket "[">)
                      (w <Lit_Chars -e>)
                      (w (DQ ($ file)))
                      (w <Lit_RBracket "]">)
                    )
                    terminator:<Op_Semi ";">
                  )
                ]
                then_kw:<KW_Then then>
                action:[
                  (C
                    (w <Lit_Chars update_config>)
                    (w (DQ ($ file)))
                    (w
                      (DQ
                        (CommandSub
                          left_token:<Left_DollarParen "$(">
                          child:(C
                            (w <Lit_Chars readlink>)
                            (w <Lit_Chars -f>)
                            (w (DQ ($ 0)))
                          )
                          right:<Eof_RParen ")">
                        )
                      )
                    )
                    (w (DQ ($ ntp_conf)))
                  )
                ]
                then_tok:...0x1706
              )
            ]
            else_action:[]
            fi_kw:<KW_Fi fi>
          )
        ]
        right:<KW_Done done>
      )
    )
  ]
)
scripts/ntp                       PASS
(command.CommandList
  children:[
    (C (w <Lit_Chars set>) (w <Lit_Chars -eu>))
    (command.If
      if_kw:<KW_If if>
      arms:[
        (IfArm
          keyword:...0x11ae
          cond:[
            (command.Sentence
              child:(C
                (w <Lit_LBracket "[">)
                (w <Lit_Chars -z>)
                (w
                  (DQ
                    (BracedVarSub
                      left:<Left_DollarBrace "${">
                      name_tok:<VSub_Name SSH_PUBLIC_KEY>
                      var_name:SSH_PUBLIC_KEY
                      suffix_op:(suffix_op.Unary
                        op:<VTest_ColonHyphen ":-">
                        arg_word:(rhs_word.Empty)
                      )
                      right:<Right_DollarBrace "}">
                    )
                  )
                )
                (w <Lit_RBracket "]">)
              )
              terminator:<Op_Semi ";">
            )
          ]
          then_kw:<KW_Then then>
          action:[
            (command.ControlFlow
              keyword:<ControlFlow_Exit exit>
              arg_word:(w <Lit_Chars 0>)
            )
          ]
          then_tok:...0x1126
        )
      ]
      else_action:[]
      fi_kw:<KW_Fi fi>
    )
    (command.If
      if_kw:<KW_If if>
      arms:[
        (IfArm
          keyword:...0x10ae
          cond:[
            (command.Sentence
              child:(command.Pipeline
                negated:<KW_Bang "!">
                children:[
                  (command.Redirect
                    child:(C
                      (w <Lit_Chars id>)
                      (w
                        (DQ
                          (BracedVarSub
                            left:<Left_DollarBrace "${">
                            name_tok:<VSub_Name USERNAME>
                            var_name:USERNAME
                            suffix_op:(suffix_op.Unary
                              op:<VTest_ColonHyphen ":-">
                              arg_word:(rhs_word.Empty)
                            )
                            right:<Right_DollarBrace "}">
                          )
                        )
                      )
                    )
                    redirects:[
                      (Redir
                        op:<Redir_Great ">">
                        loc:(redir_loc.Fd fd:1)
                        arg:(w
                          <Lit_Slash />
                          <Lit_Chars dev>
                          <Lit_Slash />
                          <Lit_Chars "null">
                        )
                      )
                      (Redir
                        op:<Redir_GreatAnd "2>&">
                        loc:(redir_loc.Fd fd:2)
                        arg:(w <Lit_Chars 1>)
                      )
                    ]
                  )
                ]
                ops:[]
              )
              terminator:<Op_Semi ";">
            )
          ]
          then_kw:<KW_Then then>
          action:[
            (command.ShAssignment
              left:<Lit_VarLike "USERNAME=">
              pairs:[
                (AssignPair
                  left:...0x1a7e
                  lhs:(sh_lhs.Name left:...0x1a7e name:USERNAME)
                  op:assign_op.Equal
                  rhs:(w (SQ root))
                )
              ]
            )
          ]
          then_tok:...0x1a9e
        )
      ]
      else_action:[]
      fi_kw:<KW_Fi fi>
    )
    (command.ShAssignment
      left:<Lit_VarLike "user_home=">
      pairs:[
        (AssignPair
          left:...0x19fa
          lhs:(sh_lhs.Name left:...0x19fa name:user_home)
          op:assign_op.Equal
          rhs:(w
            (DQ
              (CommandSub
                left_token:<Left_DollarParen "$(">
                child:(command.Pipeline
                  children:[
                    (C
                      (w <Lit_Chars getent>)
                      (w <Lit_Chars passwd>)
                      (w (DQ ($ USERNAME)))
                    )
                    (C
                      (w <Lit_Chars cut>)
                      (w <Lit_Chars -d> <Lit_Colon ":">)
                      (w <Lit_Chars -f6>)
                    )
                  ]
                  ops:[<Op_Pipe "|">]
                )
                right:<Eof_RParen ")">
              )
            )
          )
        )
      ]
    )
    (command.ShAssignment
      left:<Lit_VarLike "auth_file=">
      pairs:[
        (AssignPair
          left:...0x18ee
          lhs:(sh_lhs.Name left:...0x18ee name:auth_file)
          op:assign_op.Equal
          rhs:(w
            (DQ
              (BracedVarSub
                left:<Left_DollarBrace "${">
                name_tok:<VSub_Name user_home>
                var_name:user_home
                suffix_op:(suffix_op.Unary
                  op:<VTest_ColonHyphen ":-">
                  arg_word:(w <Lit_Slash /> <Lit_Chars root>)
                )
                right:<Right_DollarBrace "}">
              )
              <Lit_Chars /.ssh/authorized_keys>
            )
          )
        )
      ]
    )
    (C
      (w <Lit_Chars install>)
      (w <Lit_Chars -m0700>)
      (w <Lit_Chars -o>)
      (w (DQ ($ USERNAME)))
      (w <Lit_Chars -d>)
      (w
        (DQ
          (CommandSub
            left_token:<Left_DollarParen "$(">
            child:(C (w <Lit_Chars dirname>) (w (DQ ($ auth_file))))
            right:<Eof_RParen ")">
          )
        )
      )
    )
    (C (w <Lit_Chars touch>) (w (DQ ($ auth_file))))
    (C (w <Lit_Chars chmod>) (w <Lit_Chars 0600>) (w (DQ ($ auth_file))))
    (C (w <Lit_Chars chown>) (w (DQ ($ USERNAME))) (w (DQ ($ auth_file))))
    (command.Pipeline
      children:[
        (C (w <Lit_Chars echo>) (w (DQ ($ SSH_PUBLIC_KEY))))
        (command.WhileUntil
          keyword:<KW_While while>
          cond:[
            (command.Sentence
              child:(C
                (w <Lit_Chars read>)
                (w <Lit_Chars -r>)
                (w <Lit_Chars pubkey>)
              )
              terminator:<Op_Semi ";">
            )
          ]
          body:(command.DoGroup
            left:<KW_Do do>
            children:[
              (command.If
                if_kw:<KW_If if>
                arms:[
                  (IfArm
                    keyword:...0x1592
                    cond:[
                      (command.Sentence
                        child:(command.Pipeline
                          negated:<KW_Bang "!">
                          children:[
                            (C
                              (w <Lit_Chars grep>)
                              (w <Lit_Chars -Fq>)
                              (w (DQ ($ pubkey)))
                              (w (DQ ($ auth_file)))
                            )
                          ]
                          ops:[]
                        )
                        terminator:<Op_Semi ";">
                      )
                    ]
                    then_kw:<KW_Then then>
                    action:[
                      (command.Redirect
                        child:(C (w <Lit_Chars echo>) (w (DQ ($ pubkey))))
                        redirects:[
                          (Redir
                            op:<Redir_DGreat ">>">
                            loc:(redir_loc.Fd fd:1)
                            arg:(w (DQ ($ auth_file)))
                          )
                        ]
                      )
                    ]
                    then_tok:...0x1fa6
                  )
                ]
                else_action:[]
                fi_kw:<KW_Fi fi>
              )
            ]
            right:<KW_Done done>
          )
        )
      ]
      ops:[<Op_Pipe "|">]
    )
  ]
)
scripts/ssh-public-key            PASS
(command.CommandList
  children:[
    (C (w <Lit_Chars set>) (w <Lit_Chars -eu>))
    (C
      (w <Lit_Chars readonly>)
      (w <Lit_VarLike "SSMTP_CONF="> (SQ /etc/ssmtp/ssmtp.conf))
    )
    (command.If
      if_kw:<KW_If if>
      arms:[
        (IfArm
          keyword:...0x113a
          cond:[
            (command.Sentence
              child:(C
                (w <Lit_LBracket "[">)
                (w <KW_Bang "!">)
                (w <Lit_Chars -f>)
                (w (DQ ($ SSMTP_CONF)))
                (w <Lit_RBracket "]">)
              )
              terminator:<Op_Semi ";">
            )
          ]
          then_kw:<KW_Then then>
          action:[
            (command.ControlFlow
              keyword:<ControlFlow_Exit exit>
              arg_word:(w <Lit_Chars 0>)
            )
          ]
          then_tok:...0x10b6
        )
      ]
      else_action:[]
      fi_kw:<KW_Fi fi>
    )
    (command.If
      if_kw:<KW_If if>
      arms:[
        (IfArm
          keyword:...0x103a
          cond:[
            (command.Sentence
              child:(C
                (w <Lit_LBracket "[">)
                (w
                  (DQ
                    (BracedVarSub
                      left:<Left_DollarBrace "${">
                      name_tok:<VSub_Name ROOT_EMAIL>
                      var_name:ROOT_EMAIL
                      suffix_op:(suffix_op.Unary
                        op:<VTest_ColonHyphen ":-">
                        arg_word:(rhs_word.Empty)
                      )
                      right:<Right_DollarBrace "}">
                    )
                  )
                )
                (w <Lit_RBracket "]">)
              )
              terminator:<Op_Semi ";">
            )
          ]
          then_kw:<KW_Then then>
          action:[
            (C
              (w <Lit_Chars sed>)
              (w <Lit_Chars -i>)
              (w
                (DQ
                  <Lit_Chars "s/^[# ]*Root=.*/Root=">
                  ($ ROOT_EMAIL)
                  <Lit_Chars /i>
                )
              )
              (w (DQ ($ SSMTP_CONF)))
            )
          ]
          then_tok:...0x1a66
        )
      ]
      else_action:[]
      fi_kw:<KW_Fi fi>
    )
    (command.If
      if_kw:<KW_If if>
      arms:[
        (IfArm
          keyword:...0x19a2
          cond:[
            (command.Sentence
              child:(C
                (w <Lit_LBracket "[">)
                (w
                  (DQ
                    (BracedVarSub
                      left:<Left_DollarBrace "${">
                      name_tok:<VSub_Name SMTP>
                      var_name:SMTP
                      suffix_op:(suffix_op.Unary
                        op:<VTest_ColonHyphen ":-">
                        arg_word:(rhs_word.Empty)
                      )
                      right:<Right_DollarBrace "}">
                    )
                  )
                )
                (w <Lit_RBracket "]">)
              )
              terminator:<Op_Semi ";">
            )
          ]
          then_kw:<KW_Then then>
          action:[
            (C
              (w <Lit_Chars sed>)
              (w <Lit_Chars -i>)
              (w
                (DQ
                  <Lit_Chars "s/^[# ]*Mailhub=.*/Mailhub=">
                  ($ SMTP)
                  <Lit_Chars /i>
                )
              )
              (w (DQ ($ SSMTP_CONF)))
            )
          ]
          then_tok:...0x192a
        )
      ]
      else_action:[]
      fi_kw:<KW_Fi fi>
    )
  ]
)
scripts/ssmtp                     PASS
(command.CommandList
  children:[
    (C (w <Lit_Chars set>) (w <Lit_Chars -eu>))
    (command.AndOr
      children:[
        (C
          (w <Lit_LBracket "[">)
          (w
            (DQ
              (BracedVarSub
                left:<Left_DollarBrace "${">
                name_tok:<VSub_Name START_SCRIPT_BASE64>
                var_name:START_SCRIPT_BASE64
                suffix_op:(suffix_op.Unary
                  op:<VTest_ColonHyphen ":-">
                  arg_word:(rhs_word.Empty)
                )
                right:<Right_DollarBrace "}">
              )
            )
          )
          (w <Lit_RBracket "]">)
        )
        (C
          (w <Lit_LBracket "[">)
          (w
            (DQ
              (BracedVarSub
                left:<Left_DollarBrace "${">
                name_tok:<VSub_Name START_SCRIPT>
                var_name:START_SCRIPT
                suffix_op:(suffix_op.Unary
                  op:<VTest_ColonHyphen ":-">
                  arg_word:(rhs_word.Empty)
                )
                right:<Right_DollarBrace "}">
              )
            )
          )
          (w <Lit_RBracket "]">)
        )
        (command.ControlFlow
          keyword:<ControlFlow_Exit exit>
          arg_word:(w <Lit_Chars 0>)
        )
      ]
      ops:[<Op_DPipe "||"> <Op_DPipe "||">]
    )
    (command.ShAssignment
      left:<Lit_VarLike "tmpfile=">
      pairs:[
        (AssignPair
          left:...0x1092
          lhs:(sh_lhs.Name left:...0x1092 name:tmpfile)
          op:assign_op.Equal
          rhs:(w
            (DQ
              (CommandSub
                left_token:<Left_DollarParen "$(">
                child:(C (w <Lit_Chars mktemp>))
                right:<Eof_RParen ")">
              )
            )
          )
        )
      ]
    )
    (C
      (w <Lit_Chars trap>)
      (w (DQ <Lit_Chars "rm -f '"> ($ tmpfile) <Lit_Chars "'">))
      (w <Lit_Chars EXIT>)
      (w <Lit_Chars HUP>)
      (w <Lit_Chars INT>)
      (w <Lit_Chars TERM>)
    )
    (command.If
      if_kw:<KW_If if>
      arms:[
        (IfArm
          keyword:...0x1a1a
          cond:[
            (command.Sentence
              child:(C
                (w <Lit_LBracket "[">)
                (w
                  (DQ
                    (BracedVarSub
                      left:<Left_DollarBrace "${">
                      name_tok:<VSub_Name START_SCRIPT_BASE64>
                      var_name:START_SCRIPT_BASE64
                      suffix_op:(suffix_op.Unary
                        op:<VTest_ColonHyphen ":-">
                        arg_word:(rhs_word.Empty)
                      )
                      right:<Right_DollarBrace "}">
                    )
                  )
                )
                (w <Lit_RBracket "]">)
              )
              terminator:<Op_Semi ";">
            )
          ]
          then_kw:<KW_Then then>
          action:[
            (command.Pipeline
              children:[
                (C
                  (w <Lit_Chars printf>)
                  (w (SQ "%s\\n"))
                  (w (DQ ($ START_SCRIPT_BASE64)))
                )
                (command.Redirect
                  child:(C (w <Lit_Chars base64>) (w <Lit_Chars -d>))
                  redirects:[
                    (Redir
                      op:<Redir_Great ">">
                      loc:(redir_loc.Fd fd:1)
                      arg:(w (DQ ($ tmpfile)))
                    )
                  ]
                )
              ]
              ops:[<Op_Pipe "|">]
            )
          ]
          then_tok:...0x199e
        )
        (IfArm
          keyword:<KW_Elif elif>
          cond:[
            (command.Sentence
              child:(C
                (w <Lit_LBracket "[">)
                (w
                  (DQ
                    (BracedVarSub
                      left:<Left_DollarBrace "${">
                      name_tok:<VSub_Name START_SCRIPT>
                      var_name:START_SCRIPT
                      suffix_op:(suffix_op.Unary
                        op:<VTest_ColonHyphen ":-">
                        arg_word:(rhs_word.Empty)
                      )
                      right:<Right_DollarBrace "}">
                    )
                  )
                )
                (w <Lit_RBracket "]">)
              )
              terminator:<Op_Semi ";">
            )
          ]
          then_kw:<KW_Then then>
          action:[
            (command.Redirect
              child:(C
                (w <Lit_Chars printf>)
                (w (SQ "%s\\n"))
                (w (DQ ($ START_SCRIPT)))
              )
              redirects:[
                (Redir
                  op:<Redir_Great ">">
                  loc:(redir_loc.Fd fd:1)
                  arg:(w (DQ ($ tmpfile)))
                )
              ]
            )
          ]
          then_tok:...0x182a
        )
      ]
      else_action:[]
      fi_kw:<KW_Fi fi>
    )
    (C (w <Lit_Chars cd>) (w (DQ ($ MOUNT_DIR))))
    (command.Redirect
      child:(C (w <Lit_Chars echo>) (w (SQ "Executing start script")))
      redirects:[
        (Redir
          op:<Redir_GreatAnd ">&">
          loc:(redir_loc.Fd fd:1)
          arg:(w <Lit_Chars 2>)
        )
      ]
    )
    (command.If
      if_kw:<KW_If if>
      arms:[
        (IfArm
          keyword:...0x167e
          cond:[
            (command.Sentence
              child:(command.Pipeline
                children:[
                  (C
                    (w <Lit_Chars head>)
                    (w <Lit_Chars -n1>)
                    (w (DQ ($ tmpfile)))
                  )
                  (C
                    (w <Lit_Chars grep>)
                    (w <Lit_Chars -q>)
                    (w (SQ "^#!\\s*\\w\\+"))
                  )
                ]
                ops:[<Op_Pipe "|">]
              )
              terminator:<Op_Semi ";">
            )
          ]
          then_kw:<KW_Then then>
          action:[
            (C
              (w <Lit_Chars chmod>)
              (w <Lit_Other "+"> <Lit_Chars x>)
              (w (DQ ($ tmpfile)))
            )
            (C (w (DQ ($ tmpfile))))
          ]
          then_tok:...0x15aa
        )
      ]
      else_kw:<KW_Else else>
      else_action:[
        (C
          (w <Lit_Slash /> <Lit_Chars bin> <Lit_Slash /> <Lit_Chars sh>)
          (w (DQ ($ tmpfile)))
        )
      ]
      fi_kw:<KW_Fi fi>
    )
  ]
)
scripts/start-script              PASS
(command.CommandList
  children:[
    (C (w <Lit_Chars set>) (w <Lit_Chars -eu>))
    (C (w <Lit_Chars readonly>) (w <Lit_VarLike "ADMIN_GROUP="> (SQ wheel)))
    (C
      (w <Lit_Colon ":">)
      (w
        (BracedVarSub
          left:<Left_DollarBrace "${">
          name_tok:<VSub_Name USER_SHELL>
          var_name:USER_SHELL
          suffix_op:(suffix_op.Unary
            op:<VTest_ColonEquals ":=">
            arg_word:(w
              (BracedVarSub
                left:<Left_DollarBrace "${">
                name_tok:<VSub_Name USERNAME_SHELL>
                var_name:USERNAME_SHELL
                suffix_op:(suffix_op.Unary
                  op:<VTest_ColonHyphen ":-">
                  arg_word:(w (DQ <Lit_Chars /bin/sh>))
                )
                right:<Right_DollarBrace "}">
              )
            )
          )
          right:<Right_DollarBrace "}">
        )
      )
    )
    (command.If
      if_kw:<KW_If if>
      arms:[
        (IfArm
          keyword:...0x10b2
          cond:[
            (command.Sentence
              child:(C
                (w <Lit_LBracket "[">)
                (w <Lit_Chars -z>)
                (w
                  (DQ
                    (BracedVarSub
                      left:<Left_DollarBrace "${">
                      name_tok:<VSub_Name USERNAME>
                      var_name:USERNAME
                      suffix_op:(suffix_op.Unary
                        op:<VTest_ColonHyphen ":-">
                        arg_word:(rhs_word.Empty)
                      )
                      right:<Right_DollarBrace "}">
                    )
                  )
                )
                (w <Lit_RBracket "]">)
              )
              terminator:<Op_Semi ";">
            )
          ]
          then_kw:<KW_Then then>
          action:[
            (command.ControlFlow
              keyword:<ControlFlow_Exit exit>
              arg_word:(w <Lit_Chars 0>)
            )
          ]
          then_tok:...0x102a
        )
      ]
      else_action:[]
      fi_kw:<KW_Fi fi>
    )
    (C
      (w <Lit_Chars .>)
      (w
        (DQ
          (CommandSub
            left_token:<Left_DollarParen "$(">
            child:(C
              (w <Lit_Chars dirname>)
              (w
                (DQ
                  (CommandSub
                    left_token:<Left_DollarParen "$(">
                    child:(C
                      (w <Lit_Chars readlink>)
                      (w <Lit_Chars -f>)
                      (w (DQ ($ 0)))
                    )
                    right:<Eof_RParen ")">
                  )
                )
              )
            )
            right:<Eof_RParen ")">
          )
        )
        <Lit_Slash />
        <Lit_Chars utils.sh>
      )
    )
    (command.If
      if_kw:<KW_If if>
      arms:[
        (IfArm
          keyword:...0x192e
          cond:[
            (command.Sentence
              child:(command.Pipeline
                negated:<KW_Bang "!">
                children:[
                  (command.Redirect
                    child:(C (w <Lit_Chars id>) (w (DQ ($ USERNAME))))
                    redirects:[
                      (Redir
                        op:<Redir_Great ">">
                        loc:(redir_loc.Fd fd:1)
                        arg:(w
                          <Lit_Slash />
                          <Lit_Chars dev>
                          <Lit_Slash />
                          <Lit_Chars "null">
                        )
                      )
                      (Redir
                        op:<Redir_GreatAnd "2>&">
                        loc:(redir_loc.Fd fd:2)
                        arg:(w <Lit_Chars 1>)
                      )
                    ]
                  )
                ]
                ops:[]
              )
              terminator:<Op_Semi ";">
            )
          ]
          then_kw:<KW_Then then>
          action:[
            (command.Redirect
              child:(C
                (w <Lit_Chars echo>)
                (w (DQ <Lit_Chars "Creating user "> ($ USERNAME)))
              )
              redirects:[
                (Redir
                  op:<Redir_GreatAnd ">&">
                  loc:(redir_loc.Fd fd:1)
                  arg:(w <Lit_Chars 2>)
                )
              ]
            )
            (command.If
              if_kw:<KW_If if>
              arms:[
                (IfArm
                  keyword:...0x17fa
                  cond:[
                    (command.Sentence
                      child:(command.Redirect
                        child:(C
                          (w <Lit_Chars command>)
                          (w <Lit_Chars -v>)
                          (w <Lit_Chars useradd>)
                        )
                        redirects:[
                          (Redir
                            op:<Redir_Great ">">
                            loc:(redir_loc.Fd fd:1)
                            arg:(w
                              <Lit_Slash />
                              <Lit_Chars dev>
                              <Lit_Slash />
                              <Lit_Chars "null">
                            )
                          )
                        ]
                      )
                      terminator:<Op_Semi ";">
                    )
                  ]
                  then_kw:<KW_Then then>
                  action:[
                    (C
                      (w <Lit_Chars useradd>)
                      (w <Lit_Chars --create-home>)
                      (w <Lit_Chars --no-user-group>)
                      (w <Lit_Chars --shell>)
                      (w (DQ ($ USER_SHELL)))
                      (w
                        (BracedVarSub
                          left:<Left_DollarBrace "${">
                          name_tok:<VSub_Name USER_UID>
                          var_name:USER_UID
                          suffix_op:(suffix_op.Unary
                            op:<VTest_ColonPlus ":+">
                            arg_word:(w (DQ <Lit_Chars "-u "> ($ USER_UID)))
                          )
                          right:<Right_DollarBrace "}">
                        )
                      )
                      (w (DQ ($ USERNAME)))
                    )
                  ]
                  then_tok:...0x177a
                )
              ]
              else_kw:<KW_Else else>
              else_action:[
                (C
                  (w <Lit_Chars adduser>)
                  (w <Lit_Chars -D>)
                  (w <Lit_Chars -G>)
                  (w <Lit_Chars users>)
                  (w <Lit_Chars -s>)
                  (w (DQ ($ USER_SHELL)))
                  (w
                    (BracedVarSub
                      left:<Left_DollarBrace "${">
                      name_tok:<VSub_Name USER_UID>
                      var_name:USER_UID
                      suffix_op:(suffix_op.Unary
                        op:<VTest_ColonPlus ":+">
                        arg_word:(w (DQ <Lit_Chars "-u "> ($ USER_UID)))
                      )
                      right:<Right_DollarBrace "}">
                    )
                  )
                  (w (DQ ($ USERNAME)))
                )
                (command.Redirect
                  child:(C
                    (w <Lit_Chars passwd>)
                    (w <Lit_Chars -u>)
                    (w (DQ ($ USERNAME)))
                  )
                  redirects:[
                    (Redir
                      op:<Redir_Great ">">
                      loc:(redir_loc.Fd fd:1)
                      arg:(w
                        <Lit_Slash />
                        <Lit_Chars dev>
                        <Lit_Slash />
                        <Lit_Chars "null">
                      )
                    )
                  ]
                )
              ]
              fi_kw:<KW_Fi fi>
            )
          ]
          then_tok:...0x1886
        )
      ]
      else_action:[]
      fi_kw:<KW_Fi fi>
    )
    (command.If
      if_kw:<KW_If if>
      arms:[
        (IfArm
          keyword:...0x1f4a
          cond:[
            (command.Sentence
              child:(command.Pipeline
                negated:<KW_Bang "!">
                children:[
                  (command.Redirect
                    child:(C
                      (w <Lit_Chars id>)
                      (w <Lit_Chars -Gn>)
                      (w (DQ ($ USERNAME)))
                    )
                    redirects:[
                      (Redir
                        op:<Redir_Great "2>">
                        loc:(redir_loc.Fd fd:2)
                        arg:(w
                          <Lit_Slash />
                          <Lit_Chars dev>
                          <Lit_Slash />
                          <Lit_Chars "null">
                        )
                      )
                    ]
                  )
                  (C
                    (w <Lit_Chars grep>)
                    (w <Lit_Chars -Fq>)
                    (w ($ ADMIN_GROUP))
                  )
                ]
                ops:[<Op_Pipe "|">]
              )
              terminator:<Op_Semi ";">
            )
          ]
          then_kw:<KW_Then then>
          action:[
            (command.Redirect
              child:(C
                (w <Lit_Chars echo>)
                (w
                  (DQ
                    <Lit_Chars "Adding user ">
                    ($ USERNAME)
                    <Lit_Chars " to group ">
                    ($ ADMIN_GROUP)
                  )
                )
              )
              redirects:[
                (Redir
                  op:<Redir_GreatAnd ">&">
                  loc:(redir_loc.Fd fd:1)
                  arg:(w <Lit_Chars 2>)
                )
              ]
            )
            (command.If
              if_kw:<KW_If if>
              arms:[
                (IfArm
                  keyword:...0x1dce
                  cond:[
                    (command.Sentence
                      child:(command.Redirect
                        child:(C
                          (w <Lit_Chars command>)
                          (w <Lit_Chars -v>)
                          (w <Lit_Chars usermod>)
                        )
                        redirects:[
                          (Redir
                            op:<Redir_Great ">">
                            loc:(redir_loc.Fd fd:1)
                            arg:(w
                              <Lit_Slash />
                              <Lit_Chars dev>
                              <Lit_Slash />
                              <Lit_Chars "null">
                            )
                          )
                        ]
                      )
                      terminator:<Op_Semi ";">
                    )
                  ]
                  then_kw:<KW_Then then>
                  action:[
                    (C
                      (w <Lit_Chars usermod>)
                      (w <Lit_Chars --append>)
                      (w <Lit_Chars --groups>)
                      (w ($ ADMIN_GROUP))
                      (w (DQ ($ USERNAME)))
                    )
                  ]
                  then_tok:...0x1d4e
                )
              ]
              else_kw:<KW_Else else>
              else_action:[
                (C
                  (w <Lit_Chars addgroup>)
                  (w (DQ ($ USERNAME)))
                  (w ($ ADMIN_GROUP))
                )
              ]
              fi_kw:<KW_Fi fi>
            )
          ]
          then_tok:...0x1e62
        )
      ]
      else_action:[]
      fi_kw:<KW_Fi fi>
    )
    (command.If
      if_kw:<KW_If if>
      arms:[
        (IfArm
          keyword:...0x1bfe
          cond:[
            (command.Sentence
              child:(C
                (w <Lit_Chars yesno>)
                (w
                  (DQ
                    (BracedVarSub
                      left:<Left_DollarBrace "${">
                      name_tok:<VSub_Name USERNAME_SUDO>
                      var_name:USERNAME_SUDO
                      suffix_op:(suffix_op.Unary
                        op:<VTest_ColonHyphen ":-">
                        arg_word:(w <Lit_Chars YES>)
                      )
                      right:<Right_DollarBrace "}">
                    )
                  )
                )
              )
              terminator:<Op_Semi ";">
            )
          ]
          then_kw:<KW_Then then>
          action:[
            (command.If
              if_kw:<KW_If if>
              arms:[
                (IfArm
                  keyword:...0x1b6a
                  cond:[
                    (command.Sentence
                      child:(command.Redirect
                        child:(C
                          (w <Lit_Chars command>)
                          (w <Lit_Chars -v>)
                          (w <Lit_Chars doas>)
                        )
                        redirects:[
                          (Redir
                            op:<Redir_Great ">">
                            loc:(redir_loc.Fd fd:1)
                            arg:(w
                              <Lit_Slash />
                              <Lit_Chars dev>
                              <Lit_Slash />
                              <Lit_Chars "null">
                            )
                          )
                        ]
                      )
                      terminator:<Op_Semi ";">
                    )
                  ]
                  then_kw:<KW_Then then>
                  action:[
                    (command.ShAssignment
                      left:<Lit_VarLike "cfgfile=">
                      pairs:[
                        (AssignPair
                          left:...0x1ad2
                          lhs:(sh_lhs.Name left:...0x1ad2 name:cfgfile)
                          op:assign_op.Equal
                          rhs:(w
                            (DQ
                              <Lit_Chars /etc/doas.d/>
                              ($ ADMIN_GROUP)
                              <Lit_Chars .conf>
                            )
                          )
                        )
                      ]
                    )
                    (command.ShAssignment
                      left:<Lit_VarLike "rule=">
                      pairs:[
                        (AssignPair
                          left:...0x251e
                          lhs:(sh_lhs.Name left:...0x251e name:rule)
                          op:assign_op.Equal
                          rhs:(w
                            (DQ <Lit_Chars "permit nopass :"> ($ ADMIN_GROUP))
                          )
                        )
                      ]
                    )
                  ]
                  then_tok:...0x1aee
                )
                (IfArm
                  keyword:<KW_Elif elif>
                  cond:[
                    (command.Sentence
                      child:(command.Redirect
                        child:(C
                          (w <Lit_Chars command>)
                          (w <Lit_Chars -v>)
                          (w <Lit_Chars sudo>)
                        )
                        redirects:[
                          (Redir
                            op:<Redir_Great ">">
                            loc:(redir_loc.Fd fd:1)
                            arg:(w
                              <Lit_Slash />
                              <Lit_Chars dev>
                              <Lit_Slash />
                              <Lit_Chars "null">
                            )
                          )
                        ]
                      )
                      terminator:<Op_Semi ";">
                    )
                  ]
                  then_kw:<KW_Then then>
                  action:[
                    (command.ShAssignment
                      left:<Lit_VarLike "cfgfile=">
                      pairs:[
                        (AssignPair
                          left:...0x242a
                          lhs:(sh_lhs.Name left:...0x242a name:cfgfile)
                          op:assign_op.Equal
                          rhs:(w
                            (DQ <Lit_Chars /etc/sudoers.d/> ($ ADMIN_GROUP))
                          )
                        )
                      ]
                    )
                    (command.ShAssignment
                      left:<Lit_VarLike "rule=">
                      pairs:[
                        (AssignPair
                          left:...0x23d2
                          lhs:(sh_lhs.Name left:...0x23d2 name:rule)
                          op:assign_op.Equal
                          rhs:(w
                            (DQ
                              <Lit_Chars "%">
                              ($ ADMIN_GROUP)
                              <Lit_Chars " ALL=(ALL) NOPASSWD: ALL">
                            )
                          )
                        )
                      ]
                    )
                  ]
                  then_tok:...0x2446
                )
              ]
              else_kw:<KW_Else else>
              else_action:[
                (command.Redirect
                  child:(C
                    (w <Lit_Chars echo>)
                    (w
                      (DQ
                        <
                          Lit_Chars
                          "WARNING: neither doas nor sudo is installed, doas/sudo rule for "
                        >
                        ($ ADMIN_GROUP)
                        <Lit_Chars " will not be added">
                      )
                    )
                  )
                  redirects:[
                    (Redir
                      op:<Redir_GreatAnd ">&">
                      loc:(redir_loc.Fd fd:1)
                      arg:(w <Lit_Chars 2>)
                    )
                  ]
                )
                (command.ControlFlow
                  keyword:<ControlFlow_Exit exit>
                  arg_word:(w <Lit_Chars 0>)
                )
              ]
              fi_kw:<KW_Fi fi>
            )
            (command.If
              if_kw:<KW_If if>
              arms:[
                (IfArm
                  keyword:...0x2296
                  cond:[
                    (command.Sentence
                      child:(command.Pipeline
                        negated:<KW_Bang "!">
                        children:[
                          (C
                            (w <Lit_LBracket "[">)
                            (w <Lit_Chars -f>)
                            (w (DQ ($ cfgfile)))
                            (w <Lit_RBracket "]">)
                          )
                        ]
                        ops:[]
                      )
                      terminator:<Op_Semi ";">
                    )
                  ]
                  then_kw:<KW_Then then>
                  action:[
                    (command.Redirect
                      child:(C
                        (w <Lit_Chars echo>)
                        (w (DQ <Lit_Chars "Creating "> ($ cfgfile)))
                      )
                      redirects:[
                        (Redir
                          op:<Redir_GreatAnd ">&">
                          loc:(redir_loc.Fd fd:1)
                          arg:(w <Lit_Chars 2>)
                        )
                      ]
                    )
                    (command.Redirect
                      child:(C (w <Lit_Chars cat>))
                      redirects:[
                        (Redir
                          op:<Redir_Great ">">
                          loc:(redir_loc.Fd fd:1)
                          arg:(w (DQ ($ cfgfile)))
                        )
                        (Redir
                          op:<Redir_DLessDash "<<-">
                          loc:(redir_loc.Fd fd:0)
                          arg:(redir_param.HereDoc
                            here_begin:(w <Lit_Chars EOF>)
                            here_end_tok:<Undefined_Tok "EOF\n">
                            stdin_parts:[
                              <Lit_Chars "# Added by ">
                              (CommandSub
                                left_token:<Left_DollarParen "$(">
                                child:(C
                                  (w <Lit_Chars readlink>)
                                  (w <Lit_Chars -f>)
                                  (w (DQ ($ 0)))
                                )
                                right:<Eof_RParen ")">
                              )
                              <Lit_Chars "\n">
                              ($ rule)
                              <Lit_Chars "\n">
                            ]
                          )
                        )
                      ]
                    )
                    (C
                      (w <Lit_Chars chmod>)
                      (w <Lit_Chars 640>)
                      (w (DQ ($ cfgfile)))
                    )
                  ]
                  then_tok:...0x220e
                )
              ]
              else_action:[]
              fi_kw:<KW_Fi fi>
            )
          ]
          then_tok:...0x1b86
        )
      ]
      else_action:[]
      fi_kw:<KW_Fi fi>
    )
  ]
)
scripts/sudo-user                 PASS
(command.CommandList
  children:[
    (C (w <Lit_Chars set>) (w <Lit_Chars -eu>))
    (command.If
      if_kw:<KW_If if>
      arms:[
        (IfArm
          keyword:...0x11aa
          cond:[
            (command.Sentence
              child:(C
                (w <Lit_LBracket "[">)
                (w <Lit_Chars -z>)
                (w
                  (DQ
                    (BracedVarSub
                      left:<Left_DollarBrace "${">
                      name_tok:<VSub_Name TIMEZONE>
                      var_name:TIMEZONE
                      suffix_op:(suffix_op.Unary
                        op:<VTest_ColonHyphen ":-">
                        arg_word:(rhs_word.Empty)
                      )
                      right:<Right_DollarBrace "}">
                    )
                  )
                )
                (w <Lit_RBracket "]">)
              )
              terminator:<Op_Semi ";">
            )
          ]
          then_kw:<KW_Then then>
          action:[
            (command.ControlFlow
              keyword:<ControlFlow_Exit exit>
              arg_word:(w <Lit_Chars 0>)
            )
          ]
          then_tok:...0x1122
        )
      ]
      else_action:[]
      fi_kw:<KW_Fi fi>
    )
    (command.AndOr
      children:[
        (command.ShAssignment
          left:<Lit_VarLike "timezone=">
          pairs:[
            (AssignPair
              left:...0x10aa
              lhs:(sh_lhs.Name left:...0x10aa name:timezone)
              op:assign_op.Equal
              rhs:(w
                (CommandSub
                  left_token:<Left_DollarParen "$(">
                  child:(C
                    (w <Lit_Chars readlink>)
                    (w
                      <Lit_Slash />
                      <Lit_Chars etc>
                      <Lit_Slash />
                      <Lit_Chars localtime>
                    )
                  )
                  right:<Eof_RParen ")">
                )
              )
            )
          ]
        )
        (C (w <Lit_Chars "true">))
      ]
      ops:[<Op_DPipe "||">]
    )
    (command.ShAssignment
      left:<Lit_VarLike "timezone=">
      pairs:[
        (AssignPair
          left:...0x1a72
          lhs:(sh_lhs.Name left:...0x1a72 name:timezone)
          op:assign_op.Equal
          rhs:(w
            (BracedVarSub
              left:<Left_DollarBrace "${">
              name_tok:<VSub_Name timezone>
              var_name:timezone
              suffix_op:(suffix_op.Unary
                op:<VOp1_Pound "#">
                arg_word:(w
                  <Lit_Other "*">
                  <Lit_Slash />
                  <Lit_Chars zoneinfo>
                  <Lit_Slash />
                )
              )
              right:<Right_DollarBrace "}">
            )
          )
        )
      ]
    )
    (command.If
      if_kw:<KW_If if>
      arms:[
        (IfArm
          keyword:...0x1a02
          cond:[
            (command.Sentence
              child:(C
                (w <Lit_LBracket "[">)
                (w (DQ ($ timezone)))
                (w <Lit_Equals "=">)
                (w (DQ ($ TIMEZONE)))
                (w <Lit_RBracket "]">)
              )
              terminator:<Op_Semi ";">
            )
          ]
          then_kw:<KW_Then then>
          action:[
            (command.ControlFlow
              keyword:<ControlFlow_Exit exit>
              arg_word:(w <Lit_Chars 0>)
            )
          ]
          then_tok:...0x196e
        )
      ]
      else_action:[]
      fi_kw:<KW_Fi fi>
    )
    (C (w <Lit_Chars setup-timezone>) (w (DQ ($ TIMEZONE))))
  ]
)
scripts/timezone                  PASS
(command.CommandList
  children:[
    (C (w <Lit_Chars readonly>) (w <Lit_VarLike "VERSION="> (SQ 0.9.0)))
    (command.If
      if_kw:<KW_If if>
      arms:[
        (IfArm
          keyword:...0x1162
          cond:[
            (command.Sentence
              child:(command.Subshell
                left:<Op_LParen "(">
                child:(command.Redirect
                  child:(C
                    (w <Lit_Chars set>)
                    (w <Lit_Chars -o>)
                    (w <Lit_Chars pipefail>)
                  )
                  redirects:[
                    (Redir
                      op:<Redir_Great "2>">
                      loc:(redir_loc.Fd fd:2)
                      arg:(w
                        <Lit_Slash />
                        <Lit_Chars dev>
                        <Lit_Slash />
                        <Lit_Chars "null">
                      )
                    )
                  ]
                )
                right:<Right_Subshell ")">
                is_last_cmd:F
              )
              terminator:<Op_Semi ";">
            )
          ]
          then_kw:<KW_Then then>
          action:[
            (C (w <Lit_Chars set>) (w <Lit_Chars -o>) (w <Lit_Chars pipefail>))
          ]
          then_tok:...0x10be
        )
      ]
      else_action:[]
      fi_kw:<KW_Fi fi>
    )
    (ShFunction
      name_tok:<Lit_Chars update_config>
      name:update_config
      body:(BraceGroup
        left:<Lit_LBrace "{">
        children:[
          (C (w <Lit_Chars local>) (w <Lit_VarLike "conf_file="> (DQ ($ 1))))
          (C (w <Lit_Chars local>) (w <Lit_VarLike "generated_by="> (DQ ($ 2))))
          (C
            (w <Lit_Chars local>)
            (w
              <Lit_VarLike "content=">
              (DQ
                (BracedVarSub
                  left:<Left_DollarBrace "${">
                  name_tok:<VSub_Number 3>
                  var_name:3
                  suffix_op:(suffix_op.Unary
                    op:<VTest_Hyphen ->
                    arg_word:(w
                      (DQ
                        (CommandSub
                          left_token:<Left_DollarParen "$(">
                          child:(C (w <Lit_Chars cat>) (w <Lit_Chars ->))
                          right:<Eof_RParen ")">
                        )
                      )
                    )
                  )
                  right:<Right_DollarBrace "}">
                )
              )
            )
          )
          (C
            (w <Lit_Chars local>)
            (w <Lit_VarLike "start_tag="> (SQ "# BEGIN generated"))
          )
          (C
            (w <Lit_Chars local>)
            (w <Lit_VarLike "end_tag="> (SQ "# END generated"))
          )
          (command.AndOr
            children:[
              (C
                (w <Lit_LBracket "[">)
                (w <Lit_Chars -z>)
                (w (DQ ($ content)))
                (w <Lit_RBracket "]">)
              )
              (command.ShAssignment
                left:<Lit_VarLike "content=">
                pairs:[
                  (AssignPair
                    left:...0x1772
                    lhs:(sh_lhs.Name left:...0x1772 name:content)
                    op:assign_op.Equal
                    rhs:(w
                      (CommandSub
                        left_token:<Left_DollarParen "$(">
                        child:(command.Redirect
                          child:(C (w <Lit_Chars cat>))
                          redirects:[
                            (Redir
                              op:<Redir_DLessDash "<<-">
                              loc:(redir_loc.Fd fd:0)
                              arg:(redir_param.HereDoc
                                here_begin:(w <Lit_Chars EOF>)
                                here_end_tok:<Undefined_Tok "EOF\n">
                                stdin_parts:[
                                  ($ start_tag)
                                  <Lit_Chars " by ">
                                  ($ generated_by)
                                  <Lit_Chars "\n">
                                  <
                                    Lit_Chars
                                    "# Do not modify this block, any modifications will be lost after reboot!\n"
                                  >
                                  ($ content)
                                  <Lit_Chars "\n">
                                  ($ end_tag)
                                  <Lit_Chars "\n">
                                ]
                              )
                            )
                          ]
                        )
                        right:<Eof_RParen ")">
                      )
                    )
                  )
                ]
              )
            ]
            ops:[<Op_DPipe "||">]
          )
          (command.If
            if_kw:<KW_If if>
            arms:[
              (IfArm
                keyword:...0x1636
                cond:[
                  (command.Sentence
                    child:(command.AndOr
                      children:[
                        (C
                          (w <Lit_LBracket "[">)
                          (w <Lit_Chars -f>)
                          (w (DQ ($ conf_file)))
                          (w <Lit_RBracket "]">)
                        )
                        (C
                          (w <Lit_Chars grep>)
                          (w <Lit_Chars -q>)
                          (w (DQ <Lit_Chars "^"> ($ start_tag)))
                          (w (DQ ($ conf_file)))
                        )
                      ]
                      ops:[<Op_DAmp "&&">]
                    )
                    terminator:<Op_Semi ";">
                  )
                ]
                then_kw:<KW_Then then>
                action:[
                  (command.If
                    if_kw:<KW_If if>
                    arms:[
                      (IfArm
                        keyword:...0x1fc2
                        cond:[
                          (command.Sentence
                            child:(C
                              (w <Lit_LBracket "[">)
                              (w (DQ ($ content)))
                              (w <Lit_RBracket "]">)
                            )
                            terminator:<Op_Semi ";">
                          )
                        ]
                        then_kw:<KW_Then then>
                        action:[
                          (command.ShAssignment
                            left:<Lit_VarLike "content=">
                            pairs:[
                              (AssignPair
                                left:...0x1f3e
                                lhs:(sh_lhs.Name left:...0x1f3e name:content)
                                op:assign_op.Equal
                                rhs:(w
                                  (BracedVarSub
                                    left:<Left_DollarBrace "${">
                                    name_tok:<VSub_Name content>
                                    var_name:content
                                    suffix_op:(suffix_op.PatSub
                                      pat:(w
                                        (SingleQuoted
                                          left:<Left_DollarSingleQuote "$'">
                                          sval:"\n"
                                          right:<Right_SingleQuote "'">
                                        )
                                      )
                                      replace:(w
                                        (word_part.EscapedLiteral
                                          token:<Lit_EscapedChar "\\\\">
                                          ch:"\\"
                                        )
                                        (SingleQuoted
                                          left:<Left_DollarSingleQuote "$'">
                                          sval:"\n"
                                          right:<Right_SingleQuote "'">
                                        )
                                      )
                                      replace_mode:Lit_Slash
                                      slash_tok:<VOp2_Slash />
                                    )
                                    right:<Right_DollarBrace "}">
                                  )
                                )
                              )
                            ]
                          )
                          (C
                            (w <Lit_Chars sed>)
                            (w <Lit_Chars -ni>)
                            (w
                              (DQ
                                <Lit_Chars "/^">
                                ($ start_tag)
                                <Lit_Chars "/ {\n">
                                <Lit_Chars "\t\t\t\t\ta">
                                (word_part.EscapedLiteral
                                  token:<Lit_EscapedChar "\\\\">
                                  ch:"\\"
                                )
                                ($ content)
                                <Lit_Chars "\n">
                                <
                                  Lit_Chars
                                  "\t\t\t\t\t# read and discard next line and repeat until "
                                >
                                ($ end_tag)
                                <Lit_Chars " or EOF\n">
                                <Lit_Chars "\t\t\t\t\t:a; n; /^">
                                ($ end_tag)
                                <Lit_Chars "/!ba; n\n">
                                <Lit_Chars "\t\t\t\t}; p">
                              )
                            )
                            (w (DQ ($ conf_file)))
                          )
                        ]
                        then_tok:...0x1f5a
                      )
                    ]
                    else_kw:<KW_Else else>
                    else_action:[
                      (C
                        (w <Lit_Chars sed>)
                        (w <Lit_Chars -i>)
                        (w
                          (DQ
                            <Lit_Chars "/^">
                            ($ start_tag)
                            <Lit_Chars "/,/^">
                            ($ end_tag)
                            <Lit_Chars /d>
                          )
                        )
                        (w (DQ ($ conf_file)))
                      )
                    ]
                    fi_kw:<KW_Fi fi>
                  )
                ]
                then_tok:...0x1fea
              )
              (IfArm
                keyword:<KW_Elif elif>
                cond:[
                  (command.Sentence
                    child:(C
                      (w <Lit_LBracket "[">)
                      (w (DQ ($ content)))
                      (w <Lit_RBracket "]">)
                    )
                    terminator:<Op_Semi ";">
                  )
                ]
                then_kw:<KW_Then then>
                action:[
                  (command.Redirect
                    child:(C
                      (w <Lit_Chars printf>)
                      (w (SQ "\\n%s\\n"))
                      (w (DQ ($ content)))
                    )
                    redirects:[
                      (Redir
                        op:<Redir_DGreat ">>">
                        loc:(redir_loc.Fd fd:1)
                        arg:(w (DQ ($ conf_file)))
                      )
                    ]
                  )
                ]
                then_tok:...0x1c7e
              )
            ]
            else_action:[]
            fi_kw:<KW_Fi fi>
          )
        ]
        right:<Lit_RBrace "}">
      )
      code_str:"update_config() {\n\tlocal conf_file=\"$1\"\n\tlocal generated_by=\"$2\"\n\tlocal content=\"${3-\"$(cat -)\"}\"  # if $3 is *not set*, read from STDIN\n\n\tlocal start_tag='# BEGIN generated'\n\tlocal end_tag='# END generated'\n\n\t[ -z \"$content\" ] || content=$(\n\t\tcat <<-EOF\n\t\t\t$start_tag by $generated_by\n\t\t\t# Do not modify this block, any modifications will be lost after reboot!\n\t\t\t$content\n\t\t\t$end_tag\n\t\tEOF\n\t)\n\n\tif [ -f \"$conf_file\" ] && grep -q \"^$start_tag\" \"$conf_file\"; then\n\n\t\tif [ \"$content\" ]; then\n\t\t\tcontent=${content//$'\\n'/\\\\$'\\n'}  # escape \\n, busybox sed doesn't like them\n\t\t\tsed -ni \"/^$start_tag/ {\n\t\t\t\t\ta\\\\$content\n\t\t\t\t\t# read and discard next line and repeat until $end_tag or EOF\n\t\t\t\t\t:a; n; /^$end_tag/!ba; n\n\t\t\t\t}; p\" \"$conf_file\"\n\t\telse\n\t\t\t# Remove start/end tags and everything between them.\n\t\t\tsed -i \"/^$start_tag/,/^$end_tag/d\" \"$conf_file\"\n\t\tfi\n\n\telif [ \"$content\" ]; then\n\t\tprintf '\\n%s\\n' \"$content\" >> \"$conf_file\"\n\tfi\n}"
    )
    (ShFunction
      name_tok:<Lit_Chars getval>
      name:getval
      body:(BraceGroup
        left:<Lit_LBrace "{">
        children:[
          (C (w <Lit_Chars local>) (w <Lit_VarLike "var_name="> (DQ ($ 1))))
          (C
            (w <Lit_Chars local>)
            (w
              <Lit_VarLike "default=">
              (DQ
                (BracedVarSub
                  left:<Left_DollarBrace "${">
                  name_tok:<VSub_Number 2>
                  var_name:2
                  suffix_op:(suffix_op.Unary
                    op:<VTest_ColonHyphen ":-">
                    arg_word:(rhs_word.Empty)
                  )
                  right:<Right_DollarBrace "}">
                )
              )
            )
          )
          (C
            (w <Lit_Chars eval>)
            (w
              (DQ
                <Lit_Chars "printf '%s">
                <Lit_BadBackslash "\\">
                <Lit_Chars "n' ">
                (word_part.EscapedLiteral token:<Lit_EscapedChar "\\$"> ch:"$")
                <Lit_Chars "{">
                ($ var_name)
                <Lit_Chars ":-">
                ($ default)
                <Lit_Chars "}">
              )
            )
          )
        ]
        right:<Lit_RBrace "}">
      )
      code_str:"getval() {\n\tlocal var_name=\"$1\"\n\tlocal default=\"${2:-}\"\n\n\teval \"printf '%s\\n' \\${$var_name:-$default}\"\n}"
    )
    (ShFunction
      name_tok:<Lit_Chars yesno>
      name:yesno
      body:(BraceGroup
        left:<Lit_LBrace "{">
        children:[
          (command.Case
            case_kw:<KW_Case case>
            to_match:(case_arg.Word w:(w (DQ ($ 1))))
            arms_start:<KW_In in>
            arms:[
              (CaseArm
                left:<Lit_LBracket "[">
                pattern:(pat.Words
                  words:[
                    (w
                      <Lit_LBracket "[">
                      <Lit_Chars yY>
                      <Lit_RBracket "]">
                      <Lit_LBracket "[">
                      <Lit_Chars eE>
                      <Lit_RBracket "]">
                      <Lit_LBracket "[">
                      <Lit_Chars sS>
                      <Lit_RBracket "]">
                    )
                  ]
                )
                middle:<Right_CasePat ")">
                action:[
                  (command.ControlFlow
                    keyword:<ControlFlow_Return return>
                    arg_word:(w <Lit_Chars 0>)
                  )
                ]
                right:<Op_DSemi ";;">
              )
              (CaseArm
                left:<Lit_Star "*">
                pattern:(pat.Words words:[(w <Lit_Star "*">)])
                middle:<Right_CasePat ")">
                action:[
                  (command.ControlFlow
                    keyword:<ControlFlow_Return return>
                    arg_word:(w <Lit_Chars 1>)
                  )
                ]
                right:<Op_DSemi ";;">
              )
            ]
            arms_end:<KW_Esac esac>
          )
        ]
        right:<Lit_RBrace "}">
      )
      code_str:"yesno() {\n\tcase \"$1\" in\n\t\t[yY][eE][sS]) return 0;;\n\t\t*) return 1;;\n\tesac\n}"
    )
  ]
)
scripts/utils.sh                  PASS
make: *** [Makefile:28: check] Error 1
>>> ERROR: one-context: check failed
>>> ERROR: one-context: rootbld failed
>>> one-context: Cleaning up build chroot
