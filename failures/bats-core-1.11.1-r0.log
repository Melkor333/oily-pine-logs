>>> bats-core: Validating /home/packager/oily-pine/main/bats-core/APKBUILD...
>>> bats-core: Cleaning up srcdir
>>> bats-core: Cleaning up pkgdir
>>> bats-core: Cleaning up tmpdir
>>> bats-core: Fetching bats-core-1.11.1.zip::https://github.com/bats-core/bats-core/archive/v1.11.1.zip
>>> bats-core: Fetching bats-core-1.11.1.zip::https://github.com/bats-core/bats-core/archive/v1.11.1.zip
>>> bats-core: Checking sha512sums...
bats-core-1.11.1.zip: OK
>>> bats-core: Preparing build chroot...
installing oils!
fetch http://dl-cdn.alpinelinux.org/alpine/edge/main/x86_64/APKINDEX.tar.gz
WARNING: opening /home/packager/packages//# for oils: No such file or directory
(1/73) Installing musl (1.2.5-r13)
(2/73) Installing libcrypto3 (3.5.1-r0)
(3/73) Installing libssl3 (3.5.1-r0)
(4/73) Installing zlib (1.3.1-r2)
(5/73) Installing zstd-libs (1.5.7-r1)
(6/73) Installing libapk (3.0.0_rc5_git20250613-r0)
(7/73) Installing ca-certificates-bundle (20241121-r2)
(8/73) Installing apk-tools (3.0.0_rc5_git20250613-r0)
(9/73) Installing libcap2 (2.76-r0)
(10/73) Installing libcap-getcap (2.76-r0)
(11/73) Installing fakeroot (1.37.1.2-r0)
(12/73) Installing scanelf (1.3.8-r1)
(13/73) Installing musl-utils (1.2.5-r13)
(14/73) Installing libgcc (14.3.0-r5)
(15/73) Installing libstdc++ (14.3.0-r5)
(16/73) Installing lzip (1.25-r0)
(17/73) Installing openssl (3.5.1-r0)
(18/73) Installing patch (2.8-r0)
(19/73) Installing pkgconf (2.5.1-r0)
(20/73) Installing acl-libs (2.3.2-r1)
(21/73) Installing tar (1.35-r4)
(22/73) Installing alpine-baselayout-data (3.7.0-r0)
(23/73) Installing busybox (1.37.0-r18)
Executing busybox-1.37.0-r18.post-install
(24/73) Installing ssl_client (1.37.0-r18)
(25/73) Installing ncurses-terminfo-base (6.5_p20250705-r0)
(26/73) Installing libncursesw (6.5_p20250705-r0)
(27/73) Installing readline (8.3.0-r1)
(28/73) Installing oils-for-unix (0.28.0-r0)
(29/73) Installing oils-for-unix-binsh (0.28.0-r0)
(30/73) Installing abuild (3.15.0-r2)
Executing abuild-3.15.0-r2.pre-install
(31/73) Installing abuild-sudo (3.15.0-r2)
(32/73) Installing alpine-baselayout (3.7.0-r0)
Executing alpine-baselayout-3.7.0-r0.pre-install
Executing alpine-baselayout-3.7.0-r0.post-install
(33/73) Installing bridge (1.5-r5)
(34/73) Installing ifupdown-ng (0.12.1-r7)
(35/73) Installing openrc-user (0.62.5-r0)
(36/73) Installing openrc (0.62.5-r0)
Executing openrc-0.62.5-r0.post-install
(37/73) Installing mdev-conf (4.8-r0)
(38/73) Installing busybox-mdev-openrc (1.37.0-r18)
(39/73) Installing alpine-conf (3.20.0-r0)
(40/73) Installing alpine-keys (2.5-r0)
(41/73) Installing alpine-release (3.23.0_alpha20250612-r0)
(42/73) Installing busybox-openrc (1.37.0-r18)
(43/73) Installing busybox-suid (1.37.0-r18)
(44/73) Installing alpine-base (3.23.0_alpha20250612-r0)
(45/73) Installing jansson (2.14.1-r0)
(46/73) Installing binutils (2.44-r0)
(47/73) Installing libmagic (5.46-r2)
(48/73) Installing file (5.46-r2)
(49/73) Installing libgomp (14.3.0-r5)
(50/73) Installing libatomic (14.3.0-r5)
(51/73) Installing gmp (6.3.0-r4)
(52/73) Installing isl26 (0.26-r1)
(53/73) Installing mpfr4 (4.2.2-r0)
(54/73) Installing mpc1 (1.3.1-r1)
(55/73) Installing gcc (14.3.0-r5)
(56/73) Installing libstdc++-dev (14.3.0-r5)
(57/73) Installing musl-dev (1.2.5-r13)
(58/73) Installing g++ (14.3.0-r5)
(59/73) Installing make (4.4.1-r3)
(60/73) Installing fortify-headers (1.1-r5)
(61/73) Installing build-base (0.5-r3)
(62/73) Installing bash (5.3.0-r0)
Executing bash-5.3.0-r0.post-install
(63/73) Installing brotli-libs (1.1.0-r2)
(64/73) Installing c-ares (1.34.5-r0)
(65/73) Installing libunistring (1.3-r0)
(66/73) Installing libidn2 (2.3.8-r0)
(67/73) Installing nghttp2-libs (1.66.0-r0)
(68/73) Installing libpsl (0.21.5-r3)
(69/73) Installing libcurl (8.14.1-r2)
(70/73) Installing libexpat (2.7.1-r0)
(71/73) Installing pcre2 (10.43-r1)
(72/73) Installing git (2.50.1-r0)
(73/73) Installing git-init-template (2.50.1-r0)
Executing busybox-1.37.0-r18.trigger
OK: 276 MiB in 73 packages
>>> bats-core: Fetching bats-core-1.11.1.zip::https://github.com/bats-core/bats-core/archive/v1.11.1.zip
>>> bats-core: Checking sha512sums...
bats-core-1.11.1.zip: OK
>>> bats-core: Unpacking /var/cache/distfiles/bats-core-1.11.1.zip...
1..455
ok 1 no arguments prints message and usage instructions
ok 2 invalid option prints message and usage instructions
ok 3 -v and --version print version number
ok 4 -h and --help print help
ok 5 invalid filename prints an error
ok 6 empty test file runs zero tests
ok 7 one passing test
ok 8 summary passing tests
ok 9 summary passing and skipping tests
ok 10 summary passing and failing tests
ok 11 summary passing, failing and skipping tests
ok 12 BATS_CWD is correctly set to PWD as validated by bats_trim_filename
ok 13 one failing test
ok 14 one failing and one passing test
ok 15 failing test with significant status
ok 16 failing helper function logs the test case's line number
ok 17 failing bash condition logs correct line number
ok 18 failing bash expression logs correct line number
ok 19 failing negated command logs correct line number
ok 20 test environments are isolated
ok 21 setup is run once before each test
ok 22 teardown is run once after each test, even if it fails
ok 23 setup failure
ok 24 passing test with teardown failure
ok 25 failing test with teardown failure
ok 26 teardown failure with significant status
ok 27 failing test file outside of BATS_CWD
ok 28 output is discarded for passing tests and printed for failing tests
ok 29 -c prints the number of tests
ok 30 dash-e is not mangled on beginning of line
ok 31 dos line endings are stripped before testing
ok 32 test file without trailing newline
ok 33 skipped tests
ok 34 extended syntax
ok 35 timing syntax
ok 36 extended timing syntax
ok 37 time is greater than 0ms for long test
ok 38 single-line tests
ok 39 testing IFS not modified by run
ok 40 expand variables in test name
ok 41 handle quoted and unquoted test names
ok 42 ensure compatibility with unofficial Bash strict mode
ok 43 parse @test lines with various whitespace combinations
ok 44 duplicate tests error and generate a warning on stderr
ok 45 sourcing a nonexistent file in setup produces error output
ok 46 referencing unset parameter in setup produces error output
ok 47 sourcing a nonexistent file in test produces error output
ok 48 referencing unset parameter in test produces error output
ok 49 sourcing a nonexistent file in teardown produces error output
ok 50 referencing unset parameter in teardown produces error output
ok 51 execute exported function without breaking failing test output
ok 52 output printed even when no final newline
ok 53 run tests which consume stdin (see #197)
ok 54 report correct line on unset variables
ok 55 report correct line on external function calls
ok 56 test count validator catches mismatch and returns non zero
ok 57 running the same file twice runs its tests twice without errors
ok 58 Don't use unbound variables inside bats (issue #340)
ok 59 filenames with tab can be used
ok 60 each file is evaluated n+1 times
ok 61 Don't hang on CTRL-C (issue #353)
ok 62 test comment style
ok 63 test works even if PATH is reset
ok 64 Test nounset does not trip up bats' internals (see #385)
ok 65 run tmpdir is cleaned up by default
ok 66 run tmpdir is not cleanup up with --no-cleanup-tempdir
ok 67 run should exit if tmpdir exist
ok 68 run should exit if TMPDIR can't be created
ok 69 Fail if BATS_TMPDIR does not exist or is not writable
ok 70 Setting BATS_TMPDIR is ignored
ok 71 Parallel mode works on MacOS with over subscription (issue #433) # skip --jobs requires GNU parallel
ok 72 Failure in free code (see #399)
ok 73 CTRL-C aborts and fails the current test
ok 74 CTRL-C aborts and fails the current run
ok 75 CTRL-C aborts and fails after run
ok 76 CTRL-C aborts and fails the current teardown
ok 77 CTRL-C aborts and fails the current setup_file
ok 78 CTRL-C aborts and fails the current teardown_file
ok 79 single star in output is not treated as a glob
ok 80 multiple stars in output are not treated as a glob
ok 81 ensure all folders are shellchecked
ok 82 BATS_RUN_COMMAND: test content of variable
ok 83 --print-output-on-failure works as expected
ok 84 --print-output-on-failure also shows stderr (for run --separate-stderr)
ok 85 --show-output-of-passing-tests works as expected
ok 86 --verbose-run prints output
ok 87 BATS_VERBOSE_RUN=1 also prints output
ok 88 --gather-test-outputs-in gathers outputs of all tests (even succeeding!)
ok 89 --gather-test-outputs-in allows directory to exist (only if empty)
ok 90 --gather-test-output-in works with slashes in test names
ok 91 Tell about missing flock and shlock # skip this test requires GNU parallel to be installed
ok 92 Test with a name that is waaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaay too long # skip This test should only check if the long name chokes bats' internals during execution
ok 93 BATS_CODE_QUOTE_STYLE works with any two characters (even unicode)
ok 94 BATS_CODE_QUOTE_STYLE=custom requires BATS_CODE_QUOTE_BEGIN/END
ok 95 Warn about invalid BATS_CODE_QUOTE_STYLE
ok 96 Debug trap must only override variables that are prefixed with BATS_ (issue #519)
ok 97 Don't wait for disowned background jobs to finish because of open FDs (#205)
ok 98 Allow for prefixing tests' names with BATS_TEST_NAME_PREFIX
ok 99 Setting status in teardown* does not override exit code (see issue #575)
ok 100 BATS_* variables don't contain double slashes
ok 101 BATS_TEST_RETRIES allows for retrying tests
ok 102 Exit code is zero after successful retry (see #660)
ok 103 Error on invalid --line-reference-format
ok 104 --line-reference-format switches format
ok 105 Focus tests filter out other tests and override exit code for -c flag
ok 106 Focus tests filter out other tests and override exit code
ok 107 Focus tests with BATS_NO_FAIL_FOCUS_RUN=1 does not override exit code
ok 108 Bats waits for report formatter to finish
ok 109 Failing report formatter fails test run
ok 110 Short opt unpacker rejects valued options
ok 111 Test timing does not break when overriding date on path
ok 112 dynamic test registration
ok 113 IFS is preserved in all contexts
ok 114 run bats_pipe with no commands
ok 115 run bats_pipe with single command with no args
ok 116 run bats_pipe with single command with no args with arg separator
ok 117 run bats_pipe with single command with one arg
ok 118 run bats_pipe with single command with two args
ok 119 run bats_pipe with single command with two args with arg separator
ok 120 run bats_pipe piping between two command with zero and zero args
ok 121 run bats_pipe piping between two command with zero and zero args with arg separator
ok 122 run bats_pipe piping between two command with zero and one args
ok 123 run bats_pipe piping between two command with zero and two args
ok 124 run bats_pipe piping between two command with zero and two args with arg separator
ok 125 run bats_pipe piping between two command with one and zero args
ok 126 run bats_pipe piping between two command with one and zero args with arg separator
ok 127 run bats_pipe piping between two command with one with spaces and zero args
ok 128 run bats_pipe piping between two command with one and one arg
ok 129 run bats_pipe piping between two command with one with space and one arg with spaces
ok 130 run bats_pipe piping between two command with one and two args
ok 131 run bats_pipe piping between two command with one and two args with spaces
ok 132 run bats_pipe piping between two command with two and zero args
ok 133 run bats_pipe piping between two command with two and one args
ok 134 run bats_pipe piping between two command with two and one args with spaces
ok 135 run bats_pipe piping between two command with two and two args
ok 136 run bats_pipe piping between two command with two and two args with spaces
ok 137 run bats_pipe piping between three command with zero args each
ok 138 run bats_pipe piping between three command with one arg each
ok 139 run bats_pipe piping between three command with one arg each with arg separator
ok 140 run bats_pipe piping between three command with two args each
ok 141 run bats_pipe with leading | on single command
ok 142 run bats_pipe with leading | on two piped commands
ok 143 run bats_pipe with trailing | on single command
ok 144 run bats_pipe with trailing | on two piped commands
ok 145 run bats_pipe with consecutive |s after single command
ok 146 run bats_pipe with consecutive |s between two piped commands
ok 147 run bats_pipe with consecutive |s after two piped commands
ok 148 run bats_pipe with consecutive |s between first pair of three piped commands
ok 149 run bats_pipe with consecutive |s between second pair of three piped commands
ok 150 run bats_pipe with consecutive |s after three piped commands
ok 151 run bats_pipe with unknown arg
ok 152 run bats_pipe for last error status and fail on first of two
ok 153 run bats_pipe for last error status and fail on second of two
ok 154 run bats_pipe for last error status and fail on both of two
ok 155 run bats_pipe for last error status and fail on first of three
ok 156 run bats_pipe for last error status and fail on second of three
ok 157 run bats_pipe for last error status and fail on third of three
ok 158 run bats_pipe for last error status and fail on first pair of three
ok 159 run bats_pipe for last error status and fail on second pair of three
ok 160 run bats_pipe for last error status and fail on all of three
ok 161 run bats_pipe for 0th error status and fail on first of two
ok 162 run bats_pipe for 0th error status and fail on first of two. using --returned-status
ok 163 run bats_pipe for 0th error status and fail on first of two. using --returned-status=
ok 164 run bats_pipe for 0th error status and fail on first of two. using --returned-status neg
ok 165 run bats_pipe for 0th error status and fail on first of two. using --returned-status=neg
ok 166 run bats_pipe for 0th error status and fail on first of two with arg separator
ok 167 run bats_pipe for 0th error status and fail on first of two with arg separator. using --returned-status
ok 168 run bats_pipe for 0th error status and fail on first of two with arg separator. using --returned-status=
ok 169 run bats_pipe for 0th error status and fail on first of two with arg separator. using --returned-status neg
ok 170 run bats_pipe for 0th error status and fail on first of two with arg separator. using --returned-status=neg
ok 171 run bats_pipe for 0th error status and fail on second of two
ok 172 run bats_pipe for 0th error status and fail on second of two. using --returned-status
ok 173 run bats_pipe for 0th error status and fail on second of two. using --returned-status=
ok 174 run bats_pipe for 0th error status and fail on second of two. using --returned-status neg
ok 175 run bats_pipe for 0th error status and fail on second of two. using --returned-status=neg
ok 176 run bats_pipe for 0th error status and fail on both of two
ok 177 run bats_pipe for 0th error status and fail on first of three
ok 178 run bats_pipe for 0th error status and fail on first of three. using --returned-status
ok 179 run bats_pipe for 0th error status and fail on first of three. using --returned-status=
ok 180 run bats_pipe for 0th error status and fail on first of three. using --returned-status neg
ok 181 run bats_pipe for 0th error status and fail on first of three. using --returned-status=neg
ok 182 run bats_pipe for 0th error status and fail on second of three
ok 183 run bats_pipe for 0th error status and fail on second of three. using --returned-status
ok 184 run bats_pipe for 0th error status and fail on second of three. using --returned-status=
ok 185 run bats_pipe for 0th error status and fail on second of three. using --returned-status neg
ok 186 run bats_pipe for 0th error status and fail on second of three. using --returned-status=neg
ok 187 run bats_pipe for 0th error status and fail on third of three
ok 188 run bats_pipe for 0th error status and fail on third of three. using --returned-status
ok 189 run bats_pipe for 0th error status and fail on third of three. using --returned-status=
ok 190 run bats_pipe for 0th error status and fail on third of three. using --returned-status neg
ok 191 run bats_pipe for 0th error status and fail on third of three. using --returned-status=neg
ok 192 run bats_pipe for 0th error status and fail on all of three
ok 193 run bats_pipe for 0th error status and fail on all of three. using --returned-status
ok 194 run bats_pipe for 0th error status and fail on all of three. using --returned-status=
ok 195 run bats_pipe for 0th error status and fail on all of three. using --returned-status neg
ok 196 run bats_pipe for 0th error status and fail on all of three. using --returned-status=neg
ok 197 run bats_pipe for 1st error status and fail on first of two
ok 198 run bats_pipe for 1st error status and fail on first of two. using --returned-status
ok 199 run bats_pipe for 1st error status and fail on first of two. using --returned-status=
ok 200 run bats_pipe for 1st error status and fail on first of two. using --returned-status neg
ok 201 run bats_pipe for 1st error status and fail on first of two. using --returned-status=neg
ok 202 run bats_pipe for 1st error status and fail on first of two with arg separator
ok 203 run bats_pipe for 1st error status and fail on first of two with arg separator. using --returned-status
ok 204 run bats_pipe for 1st error status and fail on first of two with arg separator. using --returned-status=
ok 205 run bats_pipe for 1st error status and fail on first of two with arg separator. using --returned-status neg
ok 206 run bats_pipe for 1st error status and fail on first of two with arg separator. using --returned-status=neg
ok 207 run bats_pipe for 1st error status and fail on second of two
ok 208 run bats_pipe for 1st error status and fail on second of two. using --returned-status
ok 209 run bats_pipe for 1st error status and fail on second of two. using --returned-status=
ok 210 run bats_pipe for 1st error status and fail on second of two. using --returned-status neg
ok 211 run bats_pipe for 1st error status and fail on second of two. using --returned-status=neg
ok 212 run bats_pipe for 1st error status and fail on both of two
ok 213 run bats_pipe for 1st error status and fail on both of two. using --returned-status
ok 214 run bats_pipe for 1st error status and fail on both of two. using --returned-status=
ok 215 run bats_pipe for 1st error status and fail on both of two. using --returned-status neg
ok 216 run bats_pipe for 1st error status and fail on both of two. using --returned-status=neg
ok 217 run bats_pipe for 1st error status and fail on first of three
ok 218 run bats_pipe for 1st error status and fail on first of three. using --returned-status
ok 219 run bats_pipe for 1st error status and fail on first of three. using --returned-status=
ok 220 run bats_pipe for 1st error status and fail on first of three. using --returned-status neg
ok 221 run bats_pipe for 1st error status and fail on first of three. using --returned-status=neg
ok 222 run bats_pipe for 1st error status and fail on second of three
ok 223 run bats_pipe for 1st error status and fail on second of three. using --returned-status
ok 224 run bats_pipe for 1st error status and fail on second of three. using --returned-status=
ok 225 run bats_pipe for 1st error status and fail on second of three. using --returned-status neg
ok 226 run bats_pipe for 1st error status and fail on second of three. using --returned-status=neg
ok 227 run bats_pipe for 1st error status and fail on third of three
ok 228 run bats_pipe for 1st error status and fail on third of three. using --returned-status
ok 229 run bats_pipe for 1st error status and fail on third of three. using --returned-status=
ok 230 run bats_pipe for 1st error status and fail on third of three. using --returned-status neg
ok 231 run bats_pipe for 1st error status and fail on third of three. using --returned-status=neg
ok 232 run bats_pipe for 1st error status and fail on all of three
ok 233 run bats_pipe for 1st error status and fail on all of three. using --returned-status
ok 234 run bats_pipe for 1st error status and fail on all of three. using --returned-status=
ok 235 run bats_pipe for 1st error status and fail on all of three. using --returned-status neg
ok 236 run bats_pipe for 1st error status and fail on all of three. using --returned-status=neg
ok 237 run bats_pipe for 2nd error status and fail on first of three
ok 238 run bats_pipe for 2nd error status and fail on first of three. using --returned-status
ok 239 run bats_pipe for 2nd error status and fail on first of three. using --returned-status=
ok 240 run bats_pipe for 2nd error status and fail on first of three. using --returned-status neg
ok 241 run bats_pipe for 2nd error status and fail on first of three. using --returned-status=neg
ok 242 run bats_pipe for 2nd error status and fail on first of three with arg separator
ok 243 run bats_pipe for 2nd error status and fail on first of three with arg separator. using --returned-status
ok 244 run bats_pipe for 2nd error status and fail on first of three with arg separator. using --returned-status=
ok 245 run bats_pipe for 2nd error status and fail on first of three with arg separator. using --returned-status neg
ok 246 run bats_pipe for 2nd error status and fail on first of three with arg separator. using --returned-status=neg
ok 247 run bats_pipe for 2nd error status and fail on second of three
ok 248 run bats_pipe for 2nd error status and fail on second of three. using --returned-status
ok 249 run bats_pipe for 2nd error status and fail on second of three. using --returned-status=
ok 250 run bats_pipe for 2nd error status and fail on second of three. using --returned-status neg
ok 251 run bats_pipe for 2nd error status and fail on second of three. using --returned-status=neg
ok 252 run bats_pipe for 2nd error status and fail on third of three
ok 253 run bats_pipe for 2nd error status and fail on third of three. using --returned-status
ok 254 run bats_pipe for 2nd error status and fail on third of three. using --returned-status=
ok 255 run bats_pipe for 2nd error status and fail on third of three. using --returned-status neg
ok 256 run bats_pipe for 2nd error status and fail on third of three. using --returned-status=neg
ok 257 run bats_pipe for 2nd error status and fail on all of three
ok 258 run bats_pipe for 2nd error status and fail on all of three. using --returned-status
ok 259 run bats_pipe for 2nd error status and fail on all of three. using --returned-status=
ok 260 run bats_pipe for 2nd error status and fail on all of three. using --returned-status neg
ok 261 run bats_pipe for 2nd error status and fail on all of three. using --returned-status=neg
ok 262 run bats_pipe for Nth error status too large
ok 263 run bats_pipe for Nth error status too large. using --returned-status
ok 264 run bats_pipe for Nth error status too large. using --returned-status=
ok 265 run bats_pipe for Nth error status too large. using --returned-status neg
ok 266 run bats_pipe for Nth error status too large. using --returned-status=neg
ok 267 run bats_pipe with stdout as binary data
ok 268 run bats_pipe with stdout as binary data with non-zero status
ok 269 passing test
ok 270 failing test
ok 271 passing test with timing
ok 272 failing test with timing
ok 273 Cat formatter prints the extended tap stream
ok 274 bats_version_lt
ok 275 bats_require_minimum_version
ok 276 bats_binary_search
ok 277 bats_sort
ok 278 bats_all_in
ok 279 bats_any_in
ok 280 bats_trim
ok 281 bats_append_arrays_as_args
ok 282 setup_file is run once per file
ok 283 teardown_file is run once per file
ok 284 setup_file is called correctly in multi file suite
ok 285 teardown_file is called correctly in multi file suite
ok 286 setup_file failure aborts tests for this file
ok 287 teardown_file failure fails at least one test from the file
ok 288 teardown_file runs even if any test in the file failed
ok 289 teardown_file should run even after user abort via CTRL-C
ok 290 setup_file runs even if all tests in the file are skipped
ok 291 teardown_file runs even if all tests in the file are skipped
ok 292 setup_file must not leak context between tests in the same suite
ok 293 teardown_file must not leak context between tests in the same suite
ok 294 halfway setup_file errors are caught and reported
ok 295 halfway teardown_file errors are ignored
ok 296 variables exported in setup_file are visible in tests
ok 297 Don't run setup_file for files without tests
ok 298 Failure in setup_file and teardown_file still prints error message
ok 299 Without .bats/run-logs --filter-status failed returns an error
ok 300 Without previous recording --filter-status failed runs all tests and then runs only failed and missed tests
ok 301 Without previous recording --filter-status passed runs all tests and then runs only passed and missed tests
ok 302 Without previous recording --filter-status missed runs all tests and then runs only missed tests
ok 303 --filter-status failed gives warning on empty failed test list
ok 304 --filter-status failed does not update list when run is aborted
ok 305 tap passing and skipping tests
ok 306 tap passing, failing and skipping tests
ok 307 skipped test with parens (pretty formatter)
ok 308 pretty and tap formats
ok 309 pretty formatter bails on invalid tap
ok 310 All formatters (except cat) implement the callback interface
ok 311 absolute paths load external formatters
ok 312 specifying nonexistent external formatter is an error
ok 313 specifying non executable external formatter is an error
ok 314 retrying tests does not mess up test names
ok 315 install.sh creates a valid installation, and uninstall.sh undos it
ok 316 install.sh creates a multilib valid installation, and uninstall.sh undos it
ok 317 uninstall.sh works even if nothing is installed
ok 318 install.sh only updates permissions for Bats files
ok 319 bin/bats is resilient to symbolic links
ok 320 junit formatter with skipped test does not fail
ok 321 junit formatter: escapes xml special chars
ok 322 junit formatter: test suites
ok 323 junit formatter: test suites relative path
ok 324 junit formatter: files with the same name are distinguishable
ok 325 junit formatter as report formatter creates report.xml
ok 326 junit does not mark tests with FD 3 output as failed (issue #360)
ok 327 junit does not mark tests with FD 3 output in teardown_file as failed (issue #531)
ok 328 don't choke on setup_file errors
ok 329 find_in_bats_lib_path recognizes files relative to test file
ok 330 find_in_bats_lib_path recognizes files in BATS_LIB_PATH
ok 331 find_in_bats_lib_path returns 1 if no load path is found
ok 332 find_in_bats_lib_path follows the priority of BATS_LIB_PATH
ok 333 load sources scripts relative to the current test file
ok 334 load sources relative scripts with filename extension
ok 335 load aborts if the specified script does not exist
ok 336 load sources scripts by absolute path
ok 337 load aborts if the script, specified by an absolute path, does not exist
ok 338 load relative script with ambiguous name
ok 339 load does not use the BATS_LIB_PATH
ok 340 load supports plain symbols
ok 341 load doesn't support _declare_d symbols
ok 342 load supports scripts on the PATH
ok 343 bats_load_library supports libraries with loaders on the BATS_LIB_PATH
ok 344 bats_load_library supports libraries with loaders on the BATS_LIB_PATH with multiple libraries
ok 345 bats_load_library can handle whitespaces in BATS_LIB_PATH
ok 346 bats_load_library errors when a library errors while sourcing
ok 347 load in teardown after failure does not prevent test from being counted (see #609)
ok 348 parallel test execution with --jobs # skip --jobs requires GNU parallel
ok 349 parallel can preserve environment variables # skip --jobs requires GNU parallel
ok 350 parallel suite execution with --jobs # skip --jobs requires GNU parallel
ok 351 setup_file is not over parallelized # skip --jobs requires GNU parallel
ok 352 running the same file twice runs its tests twice without errors # skip --jobs requires GNU parallel
ok 353 parallelity factor is met exactly # skip --jobs requires GNU parallel
ok 354 parallel mode correctly forwards failure return code # skip --jobs requires GNU parallel
ok 355 --no-parallelize-across-files test file detects parallel execution # skip --jobs requires GNU parallel
ok 356 --no-parallelize-across-files prevents parallelization across files # skip --jobs requires GNU parallel
ok 357 --no-parallelize-across-files does not prevent parallelization within files # skip --jobs requires GNU parallel
ok 358 --no-parallelize-within-files test file detects parallel execution # skip --jobs requires GNU parallel
ok 359 --no-parallelize-within-files prevents parallelization within files # skip --jobs requires GNU parallel
ok 360 --no-parallelize-within-files does not prevent parallelization across files # skip --jobs requires GNU parallel
ok 361 BATS_NO_PARALLELIZE_WITHIN_FILE works from inside setup_file() # skip --jobs requires GNU parallel
ok 362 BATS_NO_PARALLELIZE_WITHIN_FILE works from outside all functions # skip --jobs requires GNU parallel
ok 363 BATS_NO_PARALLELIZE_WITHIN_FILE does not work from inside setup() # skip --jobs requires GNU parallel
ok 364 BATS_NO_PARALLELIZE_WITHIN_FILE does not work from inside test function # skip --jobs requires GNU parallel
ok 365 Negative jobs number does not run endlessly # skip --jobs requires GNU parallel
ok 366 Timing printout shows milliseconds
ok 367 pretty formatter summary is colorized red on failure
ok 368 pretty formatter summary is colorized green on success
ok 369 Mixing timing and timeout
ok 370 #113: set BATS_ROOT when /bin is a symlink to /usr/bin
ok 371 set BATS_ROOT with extreme symlink resolution
ok 372 set BATS_ROOT when calling from same dir
ok 373 set BATS_ROOT from PATH
ok 374 #182 and probably #184 as well
ok 375 run --keep-empty-lines preserves leading empty lines
ok 376 run --keep-empty-lines preserves inner empty lines
ok 377 run --keep-empty-lines does not count trailing newline as extra line (see #708)
ok 378 run --keep-empty-lines preserves trailing empty line
ok 379 run --keep-empty-lines preserves non-empty trailing line
ok 380 --keep-empty-lines has zero lines for empty output (see #573)
ok 381 run --separate-stderr splits output
ok 382 run does not change set flags
ok 383 basic return-code checking
ok 384 run exit code check output 
ok 385 run invalid exit code check error message
ok 386 run is not affected by IFS
ok 387 run does not change IFS
ok 388 running a suite with no test files
ok 389 running a suite with one test file
ok 390 counting tests in a suite
ok 391 aggregated output of multiple tests in a suite
ok 392 aggregated output of multiple tests in a suite loading common constants
ok 393 a failing test in a suite results in an error exit code
ok 394 errors when loading common helper from multiple tests in a suite
ok 395 running an ad-hoc suite by specifying multiple test files
ok 396 extended syntax in suite
ok 397 timing syntax in suite
ok 398 extended timing syntax in suite
ok 399 recursive support (short option)
ok 400 recursive support (long option)
ok 401 recursive support with symlinks
ok 402 run entire suite when --filter isn't set
ok 403 use --filter to run subset of test cases from across the suite
ok 404 --filter can handle regular expressions that contain [_- ]
ok 405 --filter can handle regular expressions that start with ^
ok 406 skip is handled correctly in setup, test, and teardown
ok 407 BATS_TEST_NUMBER starts at 1 in each individual test file
ok 408 Override BATS_FILE_EXTENSION with suite
ok 409 Override BATS_FILE_EXTENSION with suite recursive
ok 410 setup_suite.bash is picked up in toplevel folder of suite
ok 411 setup_suite.bash is picked up in folder of first test file
ok 412 setup_suite is not picked up from wrongly named file
ok 413 setup_suite is picked up from --setup-suite-file
ok 414 --setup-suite-file takes precedence over convention
ok 415 passing a nonexisting file to --setup-suite-file prints an error message
ok 416 setup_suite.bash without setup_suite() is an error
ok 417 exported variables from setup_suite are visible in setup_file, setup and @test
not ok 418 syntax errors in setup_suite.bash are reported and lead to non zero exit code
# (in test file test/suite_setup_teardown.bats, line 69)
#   `[ "${lines[1]}" == "$FIXTURE_ROOT/syntax_error/setup_suite_no_shellcheck: line 2: syntax error: unexpected end of file" ]' failed
ok 419 errors in setup_suite.bash's free code reported correctly
ok 420 errors in setup_suite reported correctly
ok 421 errors in teardown_suite reported correctly
ok 422 failure in setup_suite skips further setup and suite but runs teardown_suite
ok 423 midway failure in teardown_suite does not fail test suite, remaining code is executed
ok 424 nonzero return in teardown_suite does fails test suite
ok 425 stderr from setup/teardown_suite does not overtake stdout
ok 426 load is available in setup_suite
ok 427 output frorm setup_suite is only visible on failure
ok 428 skip in setup_file skips all tests in file
ok 429 No tag filter runs all tests
ok 430 Empty tag filter runs tests without tag
ok 431 --filter-tags (also) selects tests that contain additional tags
ok 432 --filter-tags only selects tests that match all tags (logic and)
ok 433 multiple --filter-tags work as logical or
ok 434 --filter-tags order of tags does not matter
ok 435 exit with error on invalid tags in .bats file
ok 436 --filter-tags allows for negation via !
ok 437 BATS_TEST_TAGS are set correctly
ok 438 Print tags on error
ok 439 passing test
ok 440 failing test
ok 441 passing test with timing
ok 442 failing test with timing
ok 443 test faster than timeout
ok 444 test longer than timeout
ok 445 sleep in run
ok 446 no --trace doesn't show anything on failure
ok 447 --trace recurses into functions but not into run
ok 448 invalid warning is an error
ok 449 BW01 is printed when `run`ing a (non-existent) command with exit code 127 without exit code check
ok 450 BW01 is not printed when `run`ing a (non-existent) command with exit code 127 with exit code check
ok 451 BW01 is not printed when `run`ing a command with exit code !=127 without exit code check
ok 452 BW02 is printed when run uses parameters without guaranteed version >= 1.5.0
ok 453 BW03 is printed when a test file defines setup_suite and setup_suite is not defined
ok 454 BW03 is not printed when a test file defines setup_suite but setup_suite was completed
ok 455 BW03 can be suppressed by setting BATS_SETUP_SUITE_COMPLETED
>>> ERROR: bats-core: check failed
>>> ERROR: bats-core: rootbld failed
>>> bats-core: Cleaning up build chroot
