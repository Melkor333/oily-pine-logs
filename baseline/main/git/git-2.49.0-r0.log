>>> git: Validating /home/packager/oily-pine/main/git/APKBUILD...
>>> git: Cleaning up srcdir
>>> git: Cleaning up pkgdir
>>> git: Cleaning up tmpdir
>>> git: Fetching https://www.kernel.org/pub/software/scm/git/git-2.49.0.tar.xz
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0100 7589k  100 7589k    0     0  18.4M      0 --:--:-- --:--:-- --:--:-- 18.3M
>>> git: Fetching https://www.kernel.org/pub/software/scm/git/git-2.49.0.tar.xz
>>> git: Checking sha512sums...
git-2.49.0.tar.xz: OK
git-daemon.initd: OK
git-daemon.confd: OK
fix-t4219-with-sticky-bit.patch: OK
>>> git: Preparing build chroot...
fetch http://dl-cdn.alpinelinux.org/alpine/edge/main/x86_64/APKINDEX.tar.gz
(1/172) Installing musl (1.2.5-r10)
(2/172) Installing libcrypto3 (3.5.0-r0)
(3/172) Installing ca-certificates-bundle (20241121-r2)
(4/172) Installing libssl3 (3.5.0-r0)
(5/172) Installing zlib (1.3.1-r2)
(6/172) Installing libapk2 (2.14.9-r2)
(7/172) Installing apk-tools (2.14.9-r2)
(8/172) Installing libcap2 (2.76-r0)
(9/172) Installing libcap-getcap (2.76-r0)
(10/172) Installing fakeroot (1.37.1.1-r0)
(11/172) Installing scanelf (1.3.8-r1)
(12/172) Installing musl-utils (1.2.5-r10)
(13/172) Installing libgcc (14.3.0-r0)
(14/172) Installing libstdc++ (14.3.0-r0)
(15/172) Installing lzip (1.25-r0)
(16/172) Installing openssl (3.5.0-r0)
(17/172) Installing patch (2.8-r0)
(18/172) Installing pkgconf (2.4.3-r0)
(19/172) Installing acl-libs (2.3.2-r1)
(20/172) Installing tar (1.35-r3)
(21/172) Installing busybox (1.37.0-r18)
Executing busybox-1.37.0-r18.post-install
(22/172) Installing ssl_client (1.37.0-r18)
(23/172) Installing busybox-binsh (1.37.0-r18)
(24/172) Installing abuild (3.15.0-r0)
Executing abuild-3.15.0-r0.pre-install
(25/172) Installing abuild-sudo (3.15.0-r0)
(26/172) Installing alpine-baselayout-data (3.7.0-r0)
(27/172) Installing alpine-baselayout (3.7.0-r0)
Executing alpine-baselayout-3.7.0-r0.pre-install
Executing alpine-baselayout-3.7.0-r0.post-install
(28/172) Installing bridge (1.5-r5)
(29/172) Installing ifupdown-ng (0.12.1-r7)
(30/172) Installing openrc-user (0.62.2-r2)
(31/172) Installing openrc (0.62.2-r2)
Executing openrc-0.62.2-r2.post-install
(32/172) Installing mdev-conf (4.8-r0)
(33/172) Installing busybox-mdev-openrc (1.37.0-r18)
(34/172) Installing alpine-conf (3.20.0-r0)
(35/172) Installing alpine-keys (2.5-r0)
(36/172) Installing alpine-release (3.22.0-r0)
(37/172) Installing busybox-openrc (1.37.0-r18)
(38/172) Installing busybox-suid (1.37.0-r18)
(39/172) Installing alpine-base (3.22.0-r0)
(40/172) Installing libbz2 (1.0.8-r6)
(41/172) Installing libexpat (2.7.1-r0)
(42/172) Installing libffi (3.4.8-r0)
(43/172) Installing gdbm (1.24-r0)
(44/172) Installing xz-libs (5.8.1-r0)
(45/172) Installing mpdecimal (4.0.1-r0)
(46/172) Installing ncurses-terminfo-base (6.5_p20250503-r0)
(47/172) Installing libncursesw (6.5_p20250503-r0)
(48/172) Installing libpanelw (6.5_p20250503-r0)
(49/172) Installing readline (8.2.13-r1)
(50/172) Installing sqlite-libs (3.50.0-r0)
(51/172) Installing python3 (3.12.10-r1)
(52/172) Installing python3-pycache-pyc0 (3.12.10-r1)
(53/172) Installing pyc (3.12.10-r1)
(54/172) Installing libxml2 (2.13.8-r0)
(55/172) Installing libxml2-utils (2.13.8-r0)
(56/172) Installing docbook-xml (4.5-r10)
Executing docbook-xml-4.5-r10.post-install
(57/172) Installing libxslt (1.1.43-r3)
(58/172) Installing docbook-xsl-ns (1.79.2-r11)
Executing docbook-xsl-ns-1.79.2-r11.post-install
(59/172) Installing docbook-xsl-nons (1.79.2-r11)
Executing docbook-xsl-nons-1.79.2-r11.post-install
(60/172) Installing docbook-xsl (1.79.2-r11)
(61/172) Installing asciidoc-pyc (10.2.1-r0)
(62/172) Installing python3-pyc (3.12.10-r1)
(63/172) Installing asciidoc (10.2.1-r0)
(64/172) Installing jansson (2.14.1-r0)
(65/172) Installing zstd-libs (1.5.7-r0)
(66/172) Installing binutils (2.44-r0)
(67/172) Installing libmagic (5.46-r2)
(68/172) Installing file (5.46-r2)
(69/172) Installing libgomp (14.3.0-r0)
(70/172) Installing libatomic (14.3.0-r0)
(71/172) Installing gmp (6.3.0-r3)
(72/172) Installing isl26 (0.26-r1)
(73/172) Installing mpfr4 (4.2.1_p1-r0)
(74/172) Installing mpc1 (1.3.1-r1)
(75/172) Installing gcc (14.3.0-r0)
(76/172) Installing libstdc++-dev (14.3.0-r0)
(77/172) Installing musl-dev (1.2.5-r10)
(78/172) Installing g++ (14.3.0-r0)
(79/172) Installing make (4.4.1-r3)
(80/172) Installing fortify-headers (1.1-r5)
(81/172) Installing build-base (0.5-r3)
(82/172) Installing brotli-libs (1.1.0-r2)
(83/172) Installing brotli (1.1.0-r2)
(84/172) Installing brotli-dev (1.1.0-r2)
(85/172) Installing c-ares (1.34.5-r0)
(86/172) Installing c-ares-dev (1.34.5-r0)
(87/172) Installing libunistring (1.3-r0)
(88/172) Installing libidn2 (2.3.7-r0)
(89/172) Installing libidn2-dev (2.3.7-r0)
(90/172) Installing libpsl (0.21.5-r3)
(91/172) Installing libpsl-utils (0.21.5-r3)
(92/172) Installing libpsl-dev (0.21.5-r3)
(93/172) Installing nghttp2-libs (1.65.0-r0)
(94/172) Installing nghttp2-dev (1.65.0-r0)
(95/172) Installing openssl-dev (3.5.0-r0)
(96/172) Installing zlib-dev (1.3.1-r2)
(97/172) Installing zstd (1.5.7-r0)
(98/172) Installing zstd-dev (1.5.7-r0)
(99/172) Installing libcurl (8.14.0-r2)
(100/172) Installing curl-dev (8.14.0-r2)
(101/172) Installing expat (2.7.1-r0)
(102/172) Installing expat-dev (2.7.1-r0)
(103/172) Installing pcre2 (10.43-r1)
(104/172) Installing git (2.49.0-r0)
(105/172) Installing git-init-template (2.49.0-r0)
(106/172) Installing bzip2-dev (1.0.8-r6)
(107/172) Installing xz (5.8.1-r0)
(108/172) Installing gettext-asprintf (0.24.1-r0)
(109/172) Installing libintl (0.24.1-r0)
(110/172) Installing gettext-libs (0.24.1-r0)
(111/172) Installing gettext-envsubst (0.24.1-r0)
(112/172) Installing gettext (0.24.1-r0)
(113/172) Installing gettext-dev (0.24.1-r0)
(114/172) Installing py3-parsing (3.2.3-r0)
(115/172) Installing py3-parsing-pyc (3.2.3-r0)
(116/172) Installing py3-packaging (25.0-r0)
(117/172) Installing py3-packaging-pyc (25.0-r0)
(118/172) Installing libeconf (0.6.3-r0)
(119/172) Installing libblkid (2.41-r9)
(120/172) Installing libmount (2.41-r9)
(121/172) Installing glib (2.84.2-r1)
(122/172) Installing linux-headers (6.14.2-r0)
(123/172) Installing libffi-dev (3.4.8-r0)
(124/172) Installing bsd-compat-headers (0.7.2-r6)
(125/172) Installing libformw (6.5_p20250503-r0)
(126/172) Installing libmenuw (6.5_p20250503-r0)
(127/172) Installing libncurses++ (6.5_p20250503-r0)
(128/172) Installing ncurses-dev (6.5_p20250503-r0)
(129/172) Installing libedit (20250104.3.1-r1)
(130/172) Installing libedit-dev (20250104.3.1-r1)
(131/172) Installing libpcre2-16 (10.43-r1)
(132/172) Installing libpcre2-32 (10.43-r1)
(133/172) Installing pcre2-dev (10.43-r1)
(134/172) Installing libuuid (2.41-r9)
(135/172) Installing libfdisk (2.41-r9)
(136/172) Installing liblastlog2 (2.41-r9)
(137/172) Installing libsmartcols (2.41-r9)
(138/172) Installing sqlite (3.50.0-r0)
(139/172) Installing sqlite-dev (3.50.0-r0)
(140/172) Installing util-linux-dev (2.41-r9)
(141/172) Installing glib-dev (2.84.2-r1)
(142/172) Installing libgpg-error (1.55-r0)
(143/172) Installing libgcrypt (1.10.3-r1)
(144/172) Installing libsecret (0.21.7-r0)
(145/172) Installing libgpg-error-dev (1.55-r0)
(146/172) Installing libgcrypt-dev (1.10.3-r1)
(147/172) Installing libsecret-dev (0.21.7-r0)
(148/172) Installing perl (5.40.2-r0)
(149/172) Installing perl-error (0.17030-r0)
(150/172) Installing perl-git (2.49.0-r0)
(151/172) Installing git-perl (2.49.0-r0)
(152/172) Installing perl-utils (5.40.2-r0)
(153/172) Installing perl-dev (5.40.2-r0)
(154/172) Installing python3-dev (3.12.10-r1)
(155/172) Installing tzdata (2025b-r0)
(156/172) Installing tcl (8.6.16-r0)
(157/172) Installing libxau (1.0.12-r0)
(158/172) Installing libmd (1.1.0-r0)
(159/172) Installing libbsd (0.12.2-r0)
(160/172) Installing libxdmcp (1.1.5-r1)
(161/172) Installing libxcb (1.17.0-r0)
(162/172) Installing libx11 (1.8.11-r0)
(163/172) Installing libxrender (0.9.12-r0)
(164/172) Installing libpng (1.6.47-r0)
(165/172) Installing freetype (2.13.3-r0)
(166/172) Installing fontconfig (2.15.0-r3)
(167/172) Installing libxft (2.3.8-r3)
(168/172) Installing tk (8.6.16-r0)
(169/172) Installing perl-yaml-syck (1.34-r5)
(170/172) Installing perl-test-pod (1.52-r4)
(171/172) Installing bash (5.2.37-r0)
Executing bash-5.2.37-r0.post-install
(172/172) Installing xmlto (0.0.29-r0)
Executing busybox-1.37.0-r18.trigger
Executing glib-2.84.2-r1.trigger
No schema files found: doing nothing.
OK: 475 MiB in 172 packages
>>> git: Fetching https://www.kernel.org/pub/software/scm/git/git-2.49.0.tar.xz
>>> git: Checking sha512sums...
git-2.49.0.tar.xz: OK
git-daemon.initd: OK
git-daemon.confd: OK
fix-t4219-with-sticky-bit.patch: OK
>>> git: Unpacking /var/cache/distfiles/git-2.49.0.tar.xz...
>>> git: fix-t4219-with-sticky-bit.patch
patching file t/t4129-apply-samemode.sh
Hunk #1 succeeded at 93 (offset 3 lines).
GIT_VERSION=2.49.0
    * new build flags
    * new link flags
    CC base85.o
    * new prefix flags
    CC bisect.o
    CC blame.o
    CC blob.o
    CC bloom.o
    CC branch.o
    CC bulk-checkin.o
    CC bundle-uri.o
    CC bundle.o
    CC cache-tree.o
    CC cbtree.o
    CC chdir-notify.o
    CC checkout.o
    CC chunk-format.o
    CC color.o
    CC column.o
    CC combine-diff.o
    CC commit-graph.o
    CC commit-reach.o
    CC commit.o
    CC common-exit.o
    CC common-init.o
    CC compat/nonblock.o
    CC compat/obstack.o
    CC compat/terminal.o
    CC config.o
    CC connect.o
    CC connected.o
    CC convert.o
    CC copy.o
    CC credential.o
    CC csum-file.o
    CC ctype.o
    CC date.o
    CC decorate.o
    CC delta-islands.o
    CC diagnose.o
    CC diff-delta.o
    CC diff-merges.o
    CC diff-lib.o
    CC diff-no-index.o
    CC diff.o
    CC diffcore-break.o
    CC diffcore-delta.o
    CC diffcore-order.o
    CC diffcore-pickaxe.o
    CC diffcore-rename.o
    CC diffcore-rotate.o
    CC dir-iterator.o
    CC dir.o
    CC editor.o
    CC entry.o
    CC environment.o
    CC ewah/bitmap.o
    CC ewah/ewah_bitmap.o
    CC ewah/ewah_io.o
    CC ewah/ewah_rlw.o
    CC exec-cmd.o
    CC fetch-negotiator.o
    CC fetch-pack.o
    CC fmt-merge-msg.o
    CC fsck.o
    CC fsmonitor-ipc.o
    CC fsmonitor.o
    CC fsmonitor-settings.o
    CC gettext.o
    CC git-zlib.o
    CC gpg-interface.o
    CC graph.o
    CC grep.o
    CC hash-lookup.o
    CC hashmap.o
    GEN command-list.h
    CC hex.o
    CC hex-ll.o
    CC hook.o
    CC ident.o
    CC json-writer.o
    CC kwset.o
    CC levenshtein.o
    CC line-log.o
    CC line-range.o
    CC linear-assignment.o
    CC list-objects-filter-options.o
    CC list-objects-filter.o
    CC list-objects.o
    CC lockfile.o
    CC log-tree.o
    CC loose.o
    CC ls-refs.o
    CC mailinfo.o
    CC mailmap.o
    CC match-trees.o
    CC mem-pool.o
    CC merge-blobs.o
    CC merge-ll.o
    CC merge-ort.o
    CC merge-ort-wrappers.o
    CC merge-recursive.o
    CC merge.o
    CC midx.o
    CC name-hash.o
    CC midx-write.o
    CC negotiator/default.o
    CC negotiator/noop.o
    CC negotiator/skipping.o
    CC notes-cache.o
    CC notes-merge.o
    CC notes-utils.o
    CC notes.o
    CC object-file-convert.o
    CC object-file.o
    CC object-name.o
    CC object.o
    CC oidmap.o
    CC oid-array.o
    CC oidset.o
    CC oidtree.o
    CC pack-bitmap-write.o
    CC pack-bitmap.o
    CC pack-check.o
    CC pack-mtimes.o
    CC pack-objects.o
    CC pack-revindex.o
    CC pack-write.o
    CC packfile.o
    CC pager.o
    CC parallel-checkout.o
    CC parse.o
    CC parse-options-cb.o
    CC parse-options.o
    CC patch-delta.o
    CC patch-ids.o
    CC path.o
    CC path-walk.o
    CC pathspec.o
    CC pkt-line.o
    CC preload-index.o
    CC pretty.o
    CC prio-queue.o
    CC progress.o
    CC promisor-remote.o
    CC prompt.o
    CC protocol.o
    CC protocol-caps.o
    CC pseudo-merge.o
    CC prune-packed.o
    CC quote.o
    CC range-diff.o
    CC reachable.o
    CC read-cache.o
    CC rebase-interactive.o
    CC rebase.o
    CC ref-filter.o
    CC reflog-walk.o
    CC reflog.o
    CC refs.o
    CC refs/debug.o
    CC refs/files-backend.o
    CC refs/reftable-backend.o
    CC refs/iterator.o
    CC refs/packed-backend.o
    CC refs/ref-cache.o
    CC refspec.o
    CC remote.o
    CC replace-object.o
    CC repo-settings.o
    CC repository.o
    CC rerere.o
    CC reset.o
    CC resolve-undo.o
    CC revision.o
    CC run-command.o
    CC send-pack.o
    CC serve.o
    CC sequencer.o
    CC server-info.o
    CC setup.o
    CC shallow.o
    CC sideband.o
    CC sigchain.o
    CC sparse-index.o
    CC split-index.o
    CC stable-qsort.o
    CC statinfo.o
    CC strbuf.o
    CC streaming.o
    CC string-list.o
    CC strmap.o
    CC strvec.o
    CC sub-process.o
    CC submodule-config.o
    CC submodule.o
    CC symlinks.o
    CC tag.o
    CC tempfile.o
    CC thread-utils.o
    CC tmp-objdir.o
    CC trace.o
    CC trace2.o
    CC trace2/tr2_cfg.o
    CC trace2/tr2_cmd_name.o
    CC trace2/tr2_ctr.o
    CC trace2/tr2_dst.o
    CC trace2/tr2_sid.o
    CC trace2/tr2_sysenv.o
    CC trace2/tr2_tbuf.o
    CC trace2/tr2_tgt_event.o
    CC trace2/tr2_tgt_normal.o
    CC trace2/tr2_tgt_perf.o
    CC trace2/tr2_tls.o
    CC trace2/tr2_tmr.o
    CC trailer.o
    CC transport-helper.o
    CC transport.o
    CC tree-diff.o
    CC tree-walk.o
    CC tree.o
    CC unpack-trees.o
    CC upload-pack.o
    CC url.o
    CC usage.o
    CC urlmatch.o
    CC userdiff.o
    CC utf8.o
    CC varint.o
    CC versioncmp.o
    CC walker.o
    CC wildmatch.o
    CC worktree.o
    CC wrapper.o
    CC write-or-die.o
    CC wt-status.o
    CC xdiff-interface.o
    CC ws.o
    CC unix-socket.o
    CC unix-stream-server.o
    CC compat/simple-ipc/ipc-shared.o
    CC compat/simple-ipc/ipc-unix-socket.o
    CC sha1dc_git.o
    CC sha1dc/sha1.o
    CC sha1dc/ubc_check.o
    CC sha256/block/sha256.o
    CC compat/linux/procinfo.o
    CC compat/fopen.o
    CC compat/strlcpy.o
    CC compat/qsort_s.o
    CC compat/regex/regex.o
    CC xdiff/xdiffi.o
    CC xdiff/xemit.o
    CC xdiff/xhistogram.o
    CC xdiff/xmerge.o
    CC xdiff/xpatience.o
    CC xdiff/xprepare.o
    CC xdiff/xutils.o
    CC reftable/basics.o
    CC reftable/error.o
    CC reftable/block.o
    CC reftable/blocksource.o
    CC reftable/iter.o
    CC reftable/merged.o
    CC reftable/pq.o
    CC reftable/reader.o
    CC reftable/record.o
    CC reftable/stack.o
    CC reftable/system.o
    CC reftable/tree.o
    CC reftable/writer.o
    CC http-backend.o
    CC http.o
    CC sh-i18n--envsubst.o
    CC imap-send.o
    CC shell.o
    CC http-walker.o
    CC http-fetch.o
    CC http-push.o
    CC remote-curl.o
    * new script parameters
    CC git.o
    CC builtin/add.o
    * new perl-specific parameters
    CC builtin/am.o
    CC builtin/annotate.o
    CC builtin/apply.o
    CC builtin/archive.o
    CC builtin/backfill.o
    CC builtin/bisect.o
    CC builtin/blame.o
    CC builtin/branch.o
    GEN hook-list.h
    CC builtin/bundle.o
    CC builtin/cat-file.o
    CC builtin/check-attr.o
    CC builtin/check-ignore.o
    CC builtin/check-mailmap.o
    CC builtin/check-ref-format.o
    CC builtin/checkout--worker.o
    CC builtin/checkout-index.o
    CC builtin/checkout.o
    CC builtin/clean.o
    CC builtin/clone.o
    CC builtin/column.o
    CC builtin/commit-graph.o
    CC builtin/commit-tree.o
    CC builtin/commit.o
    CC builtin/config.o
    CC builtin/count-objects.o
    CC builtin/credential-cache--daemon.o
    CC builtin/credential-cache.o
    CC builtin/credential-store.o
    CC builtin/credential.o
    CC builtin/describe.o
    CC builtin/diagnose.o
    CC builtin/diff-files.o
    CC builtin/diff-index.o
    CC builtin/diff-tree.o
    CC builtin/diff.o
    CC builtin/difftool.o
    CC builtin/fast-export.o
    CC builtin/fast-import.o
    CC builtin/fetch-pack.o
    CC builtin/fetch.o
    CC builtin/fmt-merge-msg.o
    CC builtin/for-each-ref.o
    CC builtin/for-each-repo.o
    CC builtin/fsck.o
    CC builtin/fsmonitor--daemon.o
    CC builtin/gc.o
    CC builtin/get-tar-commit-id.o
    CC builtin/grep.o
    CC builtin/hash-object.o
    GEN config-list.h
    CC builtin/hook.o
    CC builtin/index-pack.o
    CC builtin/init-db.o
    CC builtin/log.o
    CC builtin/interpret-trailers.o
    CC builtin/ls-files.o
    CC builtin/ls-remote.o
    CC builtin/ls-tree.o
    CC builtin/mailinfo.o
    CC builtin/mailsplit.o
    CC builtin/merge-base.o
    CC builtin/merge-file.o
    CC builtin/merge-index.o
    CC builtin/merge-ours.o
    CC builtin/merge-recursive.o
    CC builtin/merge-tree.o
    CC builtin/merge.o
    CC builtin/mktag.o
    CC builtin/mktree.o
    CC builtin/multi-pack-index.o
    CC builtin/mv.o
    CC builtin/name-rev.o
    CC builtin/notes.o
    CC builtin/pack-objects.o
    CC builtin/pack-redundant.o
    CC builtin/pack-refs.o
    CC builtin/patch-id.o
    CC builtin/prune-packed.o
    CC builtin/prune.o
    CC builtin/pull.o
    CC builtin/push.o
    CC builtin/range-diff.o
    CC builtin/read-tree.o
    CC builtin/rebase.o
    CC builtin/receive-pack.o
    CC builtin/reflog.o
    CC builtin/refs.o
    CC builtin/remote-ext.o
    CC builtin/remote-fd.o
    CC builtin/remote.o
    CC builtin/repack.o
    CC builtin/replace.o
    CC builtin/replay.o
    CC builtin/rerere.o
    CC builtin/reset.o
    CC builtin/rev-list.o
    CC builtin/rev-parse.o
    CC builtin/revert.o
    CC builtin/rm.o
    CC builtin/send-pack.o
    CC builtin/shortlog.o
    CC builtin/show-branch.o
    CC builtin/show-index.o
    CC builtin/show-ref.o
    CC builtin/sparse-checkout.o
    CC builtin/stash.o
    CC builtin/stripspace.o
    CC builtin/submodule--helper.o
    CC builtin/symbolic-ref.o
    CC builtin/tag.o
    CC builtin/unpack-file.o
    CC builtin/unpack-objects.o
    CC builtin/update-index.o
    CC builtin/update-ref.o
    CC builtin/update-server-info.o
    CC builtin/upload-archive.o
    CC builtin/upload-pack.o
    CC builtin/var.o
    CC builtin/verify-commit.o
    CC builtin/verify-pack.o
    CC builtin/verify-tag.o
    CC builtin/worktree.o
    CC builtin/write-tree.o
    GEN git-mergetool--lib
    GEN git-sh-i18n
    GEN git-sh-setup
    CC scalar.o
    CC daemon.o
    CC common-main.o
    CC abspath.o
    CC add-interactive.o
    CC add-patch.o
    CC advice.o
    CC alias.o
    CC alloc.o
    CC apply.o
    CC archive-tar.o
    CC archive-zip.o
    CC archive.o
    CC attr.o
    CC help.o
    GEN version-def.h
    AR xdiff/lib.a
    AR reftable/libreftable.a
    GEN git-difftool--helper
    GEN git-filter-branch
    GEN git-merge-octopus
    GEN git-merge-one-file
    GEN git-merge-resolve
    GEN git-mergetool
    GEN git-quiltimport
    GEN git-request-pull
    GEN git-submodule
    GEN git-web--browse
    GEN GIT-PERL-HEADER
    GEN git-p4
    GEN git-instaweb
    CC builtin/bugreport.o
    CC builtin/help.o
    CC version.o
    GEN git-archimport
    GEN git-cvsexportcommit
    GEN git-cvsimport
    GEN git-cvsserver
    GEN git-send-email
    GEN git-svn
    AR libgit.a
    LINK git-daemon
    LINK git-http-backend
    LINK git-imap-send
    LINK git-sh-i18n--envsubst
    LINK git-shell
    LINK git-http-fetch
    LINK git-http-push
    LINK git-remote-http
    LINK git
    LINK scalar
http.c: In function 'get_curl_handle':
http.c:1010:17: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 1010 |                 curl_easy_setopt(result, CURLOPT_SSL_VERIFYPEER, 0);
      |                 ^
http.c:1011:17: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 1011 |                 curl_easy_setopt(result, CURLOPT_SSL_VERIFYHOST, 0);
      |                 ^
http.c:1014:17: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 1014 |                 curl_easy_setopt(result, CURLOPT_SSL_VERIFYPEER, 1);
      |                 ^
http.c:1016:17: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 1016 |                 curl_easy_setopt(result, CURLOPT_SSL_VERIFYHOST, 2);
      |                 ^
http.c:1048:17: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 1048 |                 curl_easy_setopt(result, CURLOPT_SSL_OPTIONS, CURLSSLOPT_NO_REVOKE);
      |                 ^
http.c:1108:9: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 1108 |         curl_easy_setopt(result, CURLOPT_MAXREDIRS, 20);
      |         ^
http.c:1109:9: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 1109 |         curl_easy_setopt(result, CURLOPT_POSTREDIR, CURL_REDIR_POST_ALL);
      |         ^
http.c:1142:17: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 1142 |                 curl_easy_setopt(result, CURLOPT_FTP_USE_EPSV, 0);
      |                 ^
http.c:1183:25: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 1183 |                         curl_easy_setopt(result,
      |                         ^
http.c:1186:25: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 1186 |                         curl_easy_setopt(result,
      |                         ^
http.c:1189:25: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 1189 |                         curl_easy_setopt(result,
      |                         ^
http.c:1192:25: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 1192 |                         curl_easy_setopt(result,
      |                         ^
http.c:1195:25: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 1195 |                         curl_easy_setopt(result, CURLOPT_PROXYTYPE, CURLPROXY_HTTPS);
      |                         ^
In function 'set_curl_keepalive',
    inlined from 'get_curl_handle' at http.c:1245:2:
http.c:709:9: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
  709 |         curl_easy_setopt(c, CURLOPT_TCP_KEEPALIVE, 1);
      |         ^
http.c: In function 'get_active_slot':
http.c:1500:9: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 1500 |         curl_easy_setopt(slot->curl, CURLOPT_UPLOAD, 0);
      |         ^
http.c:1501:9: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 1501 |         curl_easy_setopt(slot->curl, CURLOPT_HTTPGET, 1);
      |         ^
http.c:1502:9: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 1502 |         curl_easy_setopt(slot->curl, CURLOPT_FAILONERROR, 1);
      |         ^
http.c:1511:17: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 1511 |                 curl_easy_setopt(slot->curl, CURLOPT_FOLLOWLOCATION, 1);
      |                 ^
http.c:1513:17: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 1513 |                 curl_easy_setopt(slot->curl, CURLOPT_FOLLOWLOCATION, 0);
      |                 ^
http.c: In function 'http_request':
http.c:2080:9: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 2080 |         curl_easy_setopt(slot->curl, CURLOPT_HTTPGET, 1);
      |         ^
http.c:2083:17: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 2083 |                 curl_easy_setopt(slot->curl, CURLOPT_NOBODY, 1);
      |                 ^
http.c:2085:17: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 2085 |                 curl_easy_setopt(slot->curl, CURLOPT_NOBODY, 0);
      |                 ^
http.c:2111:17: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 2111 |                 curl_easy_setopt(slot->curl, CURLOPT_FOLLOWLOCATION, 1);
      |                 ^
http.c:2130:9: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 2130 |         curl_easy_setopt(slot->curl, CURLOPT_FAILONERROR, 0);
      |         ^
http.c: In function 'new_http_object_request':
http.c:2710:9: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 2710 |         curl_easy_setopt(freq->slot->curl, CURLOPT_FAILONERROR, 0);
      |         ^
http-push.c: In function 'curl_setup_http_get':
http-push.c:197:9: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
  197 |         curl_easy_setopt(curl, CURLOPT_HTTPGET, 1);
      |         ^
http-push.c: In function 'curl_setup_http':
http-push.c:207:9: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
  207 |         curl_easy_setopt(curl, CURLOPT_UPLOAD, 1);
      |         ^
http-push.c:215:9: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
  215 |         curl_easy_setopt(curl, CURLOPT_NOBODY, 0);
      |         ^
http-push.c:217:9: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
  217 |         curl_easy_setopt(curl, CURLOPT_UPLOAD, 1);
      |         ^
In function 'setup_curl',
    inlined from 'curl_append_msgs_to_imap' at imap-send.c:1458:9,
    inlined from 'cmd_main' at imap-send.c:1579:9:
imap-send.c:1421:9: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 1421 |         curl_easy_setopt(curl, CURLOPT_PORT, srvc->port);
      |         ^
imap-send.c:1434:9: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 1434 |         curl_easy_setopt(curl, CURLOPT_SSL_VERIFYPEER, srvc->ssl_verify);
      |         ^
imap-send.c:1435:9: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 1435 |         curl_easy_setopt(curl, CURLOPT_SSL_VERIFYHOST, srvc->ssl_verify);
      |         ^
http.c: In function 'get_active_slot':
http.c:1500:9: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 1500 |         curl_easy_setopt(slot->curl, CURLOPT_UPLOAD, 0);
      |         ^
http.c:1501:9: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 1501 |         curl_easy_setopt(slot->curl, CURLOPT_HTTPGET, 1);
      |         ^
http.c:1502:9: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 1502 |         curl_easy_setopt(slot->curl, CURLOPT_FAILONERROR, 1);
      |         ^
http.c:1511:17: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 1511 |                 curl_easy_setopt(slot->curl, CURLOPT_FOLLOWLOCATION, 1);
      |                 ^
http.c:1513:17: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 1513 |                 curl_easy_setopt(slot->curl, CURLOPT_FOLLOWLOCATION, 0);
      |                 ^
http.c: In function 'http_request':
http.c:2080:9: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 2080 |         curl_easy_setopt(slot->curl, CURLOPT_HTTPGET, 1);
      |         ^
http.c:2085:17: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 2085 |                 curl_easy_setopt(slot->curl, CURLOPT_NOBODY, 0);
      |                 ^
http.c:2111:17: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 2111 |                 curl_easy_setopt(slot->curl, CURLOPT_FOLLOWLOCATION, 1);
      |                 ^
http.c:2130:9: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 2130 |         curl_easy_setopt(slot->curl, CURLOPT_FAILONERROR, 0);
      |         ^
http.c: In function 'new_http_object_request':
http.c:2710:9: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 2710 |         curl_easy_setopt(freq->slot->curl, CURLOPT_FAILONERROR, 0);
      |         ^
http.c: In function 'get_active_slot':
http.c:1500:9: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 1500 |         curl_easy_setopt(slot->curl, CURLOPT_UPLOAD, 0);
      |         ^
http.c:1501:9: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 1501 |         curl_easy_setopt(slot->curl, CURLOPT_HTTPGET, 1);
      |         ^
http.c:1502:9: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 1502 |         curl_easy_setopt(slot->curl, CURLOPT_FAILONERROR, 1);
      |         ^
http.c:1511:17: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 1511 |                 curl_easy_setopt(slot->curl, CURLOPT_FOLLOWLOCATION, 1);
      |                 ^
http.c:1513:17: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 1513 |                 curl_easy_setopt(slot->curl, CURLOPT_FOLLOWLOCATION, 0);
      |                 ^
In function 'probe_rpc',
    inlined from 'post_rpc' at remote-curl.c:943:10:
remote-curl.c:880:9: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
  880 |         curl_easy_setopt(slot->curl, CURLOPT_NOBODY, 0);
      |         ^
remote-curl.c:881:9: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
  881 |         curl_easy_setopt(slot->curl, CURLOPT_POST, 1);
      |         ^
remote-curl.c:885:9: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
  885 |         curl_easy_setopt(slot->curl, CURLOPT_POSTFIELDSIZE, 4);
      |         ^
remote-curl.c: In function 'post_rpc':
remote-curl.c:973:9: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
  973 |         curl_easy_setopt(slot->curl, CURLOPT_NOBODY, 0);
      |         ^
remote-curl.c:974:9: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
  974 |         curl_easy_setopt(slot->curl, CURLOPT_POST, 1);
      |         ^
remote-curl.c:1061:9: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 1061 |         curl_easy_setopt(slot->curl, CURLOPT_FAILONERROR, 0);
      |         ^
http.c: In function 'http_request':
http.c:2080:9: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 2080 |         curl_easy_setopt(slot->curl, CURLOPT_HTTPGET, 1);
      |         ^
http.c:2085:17: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 2085 |                 curl_easy_setopt(slot->curl, CURLOPT_NOBODY, 0);
      |                 ^
http.c:2111:17: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 2111 |                 curl_easy_setopt(slot->curl, CURLOPT_FOLLOWLOCATION, 1);
      |                 ^
http.c:2130:9: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 2130 |         curl_easy_setopt(slot->curl, CURLOPT_FAILONERROR, 0);
      |         ^
http.c: In function 'new_http_object_request':
http.c:2710:9: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 2710 |         curl_easy_setopt(freq->slot->curl, CURLOPT_FAILONERROR, 0);
      |         ^
In function 'get_curl_handle',
    inlined from 'http_init' at http.c:1373:17,
    inlined from 'cmd_main' at remote-curl.c:1583:2:
http.c:1010:17: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 1010 |                 curl_easy_setopt(result, CURLOPT_SSL_VERIFYPEER, 0);
      |                 ^
http.c:1011:17: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 1011 |                 curl_easy_setopt(result, CURLOPT_SSL_VERIFYHOST, 0);
      |                 ^
http.c:1014:17: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 1014 |                 curl_easy_setopt(result, CURLOPT_SSL_VERIFYPEER, 1);
      |                 ^
http.c:1016:17: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 1016 |                 curl_easy_setopt(result, CURLOPT_SSL_VERIFYHOST, 2);
      |                 ^
http.c:1048:17: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 1048 |                 curl_easy_setopt(result, CURLOPT_SSL_OPTIONS, CURLSSLOPT_NO_REVOKE);
      |                 ^
http.c:1108:9: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 1108 |         curl_easy_setopt(result, CURLOPT_MAXREDIRS, 20);
      |         ^
http.c:1109:9: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 1109 |         curl_easy_setopt(result, CURLOPT_POSTREDIR, CURL_REDIR_POST_ALL);
      |         ^
http.c:1142:17: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 1142 |                 curl_easy_setopt(result, CURLOPT_FTP_USE_EPSV, 0);
      |                 ^
http.c:1183:25: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 1183 |                         curl_easy_setopt(result,
      |                         ^
http.c:1186:25: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 1186 |                         curl_easy_setopt(result,
      |                         ^
http.c:1189:25: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 1189 |                         curl_easy_setopt(result,
      |                         ^
http.c:1192:25: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 1192 |                         curl_easy_setopt(result,
      |                         ^
http.c:1195:25: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 1195 |                         curl_easy_setopt(result, CURLOPT_PROXYTYPE, CURLPROXY_HTTPS);
      |                         ^
In function 'set_curl_keepalive',
    inlined from 'get_curl_handle' at http.c:1245:2,
    inlined from 'http_init' at http.c:1373:17,
    inlined from 'cmd_main' at remote-curl.c:1583:2:
http.c:709:9: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
  709 |         curl_easy_setopt(c, CURLOPT_TCP_KEEPALIVE, 1);
      |         ^
In function 'memcpy',
    inlined from 'git_regerror.constprop.isra' at compat/regex/regcomp.c:577:4:
/usr/include/fortify/string.h:55:16: warning: '__builtin_memcpy' reading 1023 bytes from a region of size 369 [-Wstringop-overread]
   55 |         return __builtin_memcpy(__od, __os, __n);
      |                ^
compat/regex/regcomp.c: In function 'git_regerror.constprop.isra':
compat/regex/regcomp.c:138:12: note: source object '__re_error_msgid' of size 369
  138 | const char __re_error_msgid[] attribute_hidden =
      |            ^
In function 'get_curl_handle',
    inlined from 'http_init.constprop' at http.c:1373:17:
http.c:1010:17: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 1010 |                 curl_easy_setopt(result, CURLOPT_SSL_VERIFYPEER, 0);
      |                 ^
http.c:1011:17: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 1011 |                 curl_easy_setopt(result, CURLOPT_SSL_VERIFYHOST, 0);
      |                 ^
http.c:1014:17: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 1014 |                 curl_easy_setopt(result, CURLOPT_SSL_VERIFYPEER, 1);
      |                 ^
http.c:1016:17: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 1016 |                 curl_easy_setopt(result, CURLOPT_SSL_VERIFYHOST, 2);
      |                 ^
http.c:1048:17: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 1048 |                 curl_easy_setopt(result, CURLOPT_SSL_OPTIONS, CURLSSLOPT_NO_REVOKE);
      |                 ^
http.c:1108:9: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 1108 |         curl_easy_setopt(result, CURLOPT_MAXREDIRS, 20);
      |         ^
http.c:1109:9: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 1109 |         curl_easy_setopt(result, CURLOPT_POSTREDIR, CURL_REDIR_POST_ALL);
      |         ^
http.c:1142:17: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 1142 |                 curl_easy_setopt(result, CURLOPT_FTP_USE_EPSV, 0);
      |                 ^
http.c:1183:25: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 1183 |                         curl_easy_setopt(result,
      |                         ^
http.c:1186:25: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 1186 |                         curl_easy_setopt(result,
      |                         ^
http.c:1189:25: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 1189 |                         curl_easy_setopt(result,
      |                         ^
http.c:1192:25: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 1192 |                         curl_easy_setopt(result,
      |                         ^
http.c:1195:25: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
 1195 |                         curl_easy_setopt(result, CURLOPT_PROXYTYPE, CURLPROXY_HTTPS);
      |                         ^
In function 'set_curl_keepalive',
    inlined from 'get_curl_handle' at http.c:1245:2,
    inlined from 'http_init.constprop' at http.c:1373:17:
http.c:709:9: warning: call to '_curl_easy_setopt_err_long' declared with attribute warning: curl_easy_setopt expects a long argument [-Wattribute-warning]
  709 |         curl_easy_setopt(c, CURLOPT_TCP_KEEPALIVE, 1);
      |         ^
    LN/CP git-remote-https
    LN/CP git-remote-ftp
    LN/CP git-remote-ftps
In function 'memcpy',
    inlined from 'git_regerror.constprop.isra' at compat/regex/regcomp.c:577:4:
/usr/include/fortify/string.h:55:16: warning: '__builtin_memcpy' reading 1023 bytes from a region of size 369 [-Wstringop-overread]
   55 |         return __builtin_memcpy(__od, __os, __n);
      |                ^
compat/regex/regcomp.c: In function 'git_regerror.constprop.isra':
compat/regex/regcomp.c:138:12: note: source object '__re_error_msgid' of size 369
  138 | const char __re_error_msgid[] attribute_hidden =
      |            ^
    BUILTIN git-add
    BUILTIN git-am
    BUILTIN git-annotate
    BUILTIN git-apply
    BUILTIN git-archive
    BUILTIN git-backfill
    BUILTIN git-bisect
    BUILTIN git-blame
    BUILTIN git-branch
    BUILTIN git-bundle
    BUILTIN git-bugreport
    BUILTIN git-cat-file
    BUILTIN git-check-attr
    BUILTIN git-check-ignore
    BUILTIN git-check-mailmap
    BUILTIN git-check-ref-format
    BUILTIN git-checkout--worker
    BUILTIN git-checkout-index
    BUILTIN git-checkout
    BUILTIN git-clean
    BUILTIN git-clone
    BUILTIN git-column
    BUILTIN git-commit-graph
    BUILTIN git-commit-tree
    BUILTIN git-commit
    BUILTIN git-config
    BUILTIN git-count-objects
    BUILTIN git-credential-cache--daemon
    BUILTIN git-credential-cache
    BUILTIN git-credential-store
    BUILTIN git-credential
    BUILTIN git-describe
    BUILTIN git-diagnose
    BUILTIN git-diff-files
    BUILTIN git-diff-index
    BUILTIN git-diff-tree
    BUILTIN git-diff
    BUILTIN git-difftool
    BUILTIN git-fast-export
    BUILTIN git-fast-import
    BUILTIN git-fetch-pack
    BUILTIN git-fetch
    BUILTIN git-fmt-merge-msg
    BUILTIN git-for-each-ref
    BUILTIN git-for-each-repo
    BUILTIN git-fsck
    BUILTIN git-fsmonitor--daemon
    BUILTIN git-gc
    BUILTIN git-get-tar-commit-id
    BUILTIN git-grep
    BUILTIN git-hash-object
    BUILTIN git-help
    BUILTIN git-hook
    BUILTIN git-index-pack
    BUILTIN git-init-db
    BUILTIN git-interpret-trailers
    BUILTIN git-log
    BUILTIN git-ls-files
    BUILTIN git-ls-remote
    BUILTIN git-ls-tree
    BUILTIN git-mailinfo
    BUILTIN git-mailsplit
    BUILTIN git-merge-base
    BUILTIN git-merge-file
    BUILTIN git-merge-index
    BUILTIN git-merge-ours
    BUILTIN git-merge-recursive
    BUILTIN git-merge-tree
    BUILTIN git-merge
    BUILTIN git-mktag
    BUILTIN git-mktree
    BUILTIN git-multi-pack-index
    BUILTIN git-mv
    BUILTIN git-name-rev
    BUILTIN git-notes
    BUILTIN git-pack-objects
    BUILTIN git-pack-redundant
    BUILTIN git-pack-refs
    BUILTIN git-patch-id
    BUILTIN git-prune-packed
    BUILTIN git-prune
    BUILTIN git-pull
    BUILTIN git-push
    BUILTIN git-range-diff
    BUILTIN git-read-tree
    BUILTIN git-rebase
    BUILTIN git-receive-pack
    BUILTIN git-reflog
    BUILTIN git-refs
    BUILTIN git-remote-ext
    BUILTIN git-remote-fd
    BUILTIN git-remote
    BUILTIN git-repack
    BUILTIN git-replace
    BUILTIN git-replay
    BUILTIN git-rerere
    BUILTIN git-reset
    BUILTIN git-rev-list
    BUILTIN git-rev-parse
    BUILTIN git-revert
    BUILTIN git-rm
    BUILTIN git-send-pack
    BUILTIN git-shortlog
    BUILTIN git-show-branch
    BUILTIN git-show-index
    BUILTIN git-show-ref
    BUILTIN git-sparse-checkout
    BUILTIN git-stash
    BUILTIN git-stripspace
    BUILTIN git-submodule--helper
    BUILTIN git-symbolic-ref
    BUILTIN git-tag
    BUILTIN git-unpack-file
    BUILTIN git-unpack-objects
    BUILTIN git-update-index
    BUILTIN git-update-ref
    BUILTIN git-update-server-info
    BUILTIN git-upload-archive
    BUILTIN git-upload-pack
    BUILTIN git-var
    BUILTIN git-verify-commit
    BUILTIN git-verify-pack
    BUILTIN git-verify-tag
    BUILTIN git-worktree
    BUILTIN git-cherry
    BUILTIN git-write-tree
    BUILTIN git-cherry-pick
    BUILTIN git-format-patch
    BUILTIN git-fsck-objects
    BUILTIN git-init
    BUILTIN git-maintenance
    BUILTIN git-merge-subtree
    BUILTIN git-restore
    BUILTIN git-stage
    BUILTIN git-show
    BUILTIN git-status
    BUILTIN git-switch
    BUILTIN git-version
    BUILTIN git-whatchanged
    SUBDIR git-gui
GITGUI_VERSION = 0.21.GITGUI
    * new locations or Tcl/Tk interpreter
    MSGFMT    po/bg.msg     MSGFMT    po/de.msg     MSGFMT    po/el.msg     MSGFMT    po/fr.msg     MSGFMT    po/hu.msg     MSGFMT    po/it.msg     MSGFMT    po/ja.msg     MSGFMT    po/nb.msg     MSGFMT po/pt_br.msg     MSGFMT po/pt_pt.msg     MSGFMT    po/ru.msg     MSGFMT    po/sv.msg     MSGFMT    po/vi.msg     MSGFMT po/zh_cn.msg     GEN git-gui
    INDEX lib/
579 translated.
514 translated.
520 translated.
550 translated.
381 translated, 4 fuzzy, 6 untranslated.
546 translated, 1 untranslated.
520 translated.
474 translated, 39 untranslated.
519 translated, 1 untranslated.
543 translated.
576 translated.
366 translated, 7 fuzzy, 17 untranslated.
579 translated.
579 translated.
    SUBDIR gitk-git
Generating catalog po/bg.msg
    * new Tcl/Tk interpreter location
msgfmt --statistics --tcl po/bg.po -l bg -d po/
Generating catalog po/ca.msg
msgfmt --statistics --tcl po/ca.po -l ca -d po/
Generating catalog po/de.msg
msgfmt --statistics --tcl po/de.po -l de -d po/
Generating catalog po/es.msg
msgfmt --statistics --tcl po/es.po -l es -d po/
Generating catalog po/fr.msg
msgfmt --statistics --tcl po/fr.po -l fr -d po/
Generating catalog po/hu.msg
Generating catalog po/it.msg
msgfmt --statistics --tcl po/hu.po -l hu -d po/
msgfmt --statistics --tcl po/it.po -l it -d po/
Generating catalog po/ja.msg
msgfmt --statistics --tcl po/ja.po -l ja -d po/
Generating catalog po/pt_br.msg
307 translated messages.
msgfmt --statistics --tcl po/pt_br.po -l pt_br -d po/
184 translated messages, 46 fuzzy translations, 77 untranslated messages.
Generating catalog po/pt_pt.msg
msgfmt --statistics --tcl po/pt_pt.po -l pt_pt -d po/
Generating catalog po/ru.msg
msgfmt --statistics --tcl po/ru.po -l ru -d po/
311 translated messages.
Generating catalog po/sv.msg
307 translated messages.
274 translated messages, 17 fuzzy translations, 16 untranslated messages.
Generating catalog po/vi.msg
msgfmt --statistics --tcl po/sv.po -l sv -d po/
msgfmt --statistics --tcl po/vi.po -l vi -d po/
Generating catalog po/zh_cn.msg
279 translated messages, 16 fuzzy translations, 12 untranslated messages.
msgfmt --statistics --tcl po/zh_cn.po -l zh_cn -d po/
    GEN gitk-wish
327 translated messages.
277 translated messages, 18 fuzzy translations, 12 untranslated messages.
311 translated messages.
323 translated messages.
311 translated messages.
307 translated messages.
317 translated messages.
317 translated messages.
    SUBDIR templates
    CC oss-fuzz/dummy-cmd-main.o
    CC oss-fuzz/fuzz-commit-graph.o
    CC oss-fuzz/fuzz-config.o
    CC oss-fuzz/fuzz-credential-from-url-gently.o
    CC oss-fuzz/fuzz-date.o
    CC oss-fuzz/fuzz-pack-headers.o
    CC oss-fuzz/fuzz-pack-idx.o
    CC oss-fuzz/fuzz-parse-attr-line.o
    CC oss-fuzz/fuzz-url-decode-mem.o
    LINK oss-fuzz/fuzz-commit-graph
    LINK oss-fuzz/fuzz-config
    LINK oss-fuzz/fuzz-credential-from-url-gently
    LINK oss-fuzz/fuzz-date
    LINK oss-fuzz/fuzz-pack-headers
    LINK oss-fuzz/fuzz-pack-idx
    LINK oss-fuzz/fuzz-parse-attr-line
    LINK oss-fuzz/fuzz-url-decode-mem
    MKDIR -p perl/build/lib
    GEN perl/build/lib/Git.pm
    MKDIR -p perl/build/lib/Git
    GEN perl/build/lib/Git/IndexInfo.pm
    GEN perl/build/lib/Git/I18N.pm
    GEN perl/build/lib/Git/LoadCPAN.pm
    GEN perl/build/lib/Git/Packet.pm
    GEN perl/build/lib/Git/SVN.pm
    MKDIR -p perl/build/lib/Git/LoadCPAN
    GEN perl/build/lib/Git/LoadCPAN/Error.pm
    MKDIR -p perl/build/lib/Git/SVN
    GEN perl/build/lib/Git/SVN/Fetcher.pm
    GEN perl/build/lib/Git/SVN/Editor.pm
    GEN perl/build/lib/Git/SVN/GlobSpec.pm
    GEN perl/build/lib/Git/SVN/Log.pm
    GEN perl/build/lib/Git/SVN/Migration.pm
    GEN perl/build/lib/Git/SVN/Prompt.pm
    GEN perl/build/lib/Git/SVN/Ra.pm
    GEN perl/build/lib/Git/SVN/Utils.pm
    MKDIR -p perl/build/lib/Git/LoadCPAN/Mail
    GEN perl/build/lib/Git/LoadCPAN/Mail/Address.pm
    MKDIR -p perl/build/lib/Git/SVN/Memoize
    GEN perl/build/lib/Git/SVN/Memoize/YAML.pm
    MKDIR -p perl/build/lib/FromCPAN
    GEN perl/build/lib/FromCPAN/Error.pm
    MKDIR -p perl/build/lib/FromCPAN/Mail
    GEN perl/build/lib/FromCPAN/Mail/Address.pm
    CC t/helper/test-fake-ssh.o
    CC t/helper/test-tool.o
    CC t/helper/test-advise.o
    CC t/helper/test-bitmap.o
    CC t/helper/test-bloom.o
    CC t/helper/test-bundle-uri.o
    CC t/helper/test-cache-tree.o
    CC t/helper/test-chmtime.o
    CC t/helper/test-config.o
    CC t/helper/test-crontab.o
    CC t/helper/test-csprng.o
    CC t/helper/test-date.o
    CC t/helper/test-delete-gpgsig.o
    CC t/helper/test-delta.o
    CC t/helper/test-dir-iterator.o
    CC t/helper/test-drop-caches.o
    CC t/helper/test-dump-cache-tree.o
    CC t/helper/test-dump-fsmonitor.o
    CC t/helper/test-dump-split-index.o
    CC t/helper/test-dump-untracked-cache.o
    CC t/helper/test-env-helper.o
    CC t/helper/test-example-tap.o
    CC t/helper/test-find-pack.o
    CC t/helper/test-fsmonitor-client.o
    CC t/helper/test-genrandom.o
    CC t/helper/test-genzeros.o
    CC t/helper/test-getcwd.o
    CC t/helper/test-hash-speed.o
    CC t/helper/test-hash.o
    CC t/helper/test-hashmap.o
    CC t/helper/test-hexdump.o
    CC t/helper/test-json-writer.o
    CC t/helper/test-lazy-init-name-hash.o
    CC t/helper/test-match-trees.o
    CC t/helper/test-mergesort.o
    CC t/helper/test-mktemp.o
    CC t/helper/test-name-hash.o
    CC t/helper/test-online-cpus.o
    CC t/helper/test-pack-mtimes.o
    CC t/helper/test-parse-options.o
    CC t/helper/test-parse-pathspec-file.o
    CC t/helper/test-partial-clone.o
    CC t/helper/test-path-utils.o
    CC t/helper/test-path-walk.o
    CC t/helper/test-pcre2-config.o
    CC t/helper/test-pkt-line.o
    CC t/helper/test-proc-receive.o
    CC t/helper/test-progress.o
    CC t/helper/test-reach.o
    CC t/helper/test-read-cache.o
    CC t/helper/test-read-graph.o
    CC t/helper/test-read-midx.o
    CC t/helper/test-ref-store.o
    CC t/helper/test-reftable.o
    CC t/helper/test-regex.o
    CC t/helper/test-rot13-filter.o
    CC t/helper/test-repository.o
    CC t/helper/test-run-command.o
    CC t/helper/test-revision-walking.o
    CC t/helper/test-scrap-cache-tree.o
    CC t/helper/test-serve-v2.o
    CC t/helper/test-sha1.o
    CC t/helper/test-sha256.o
    CC t/helper/test-sigchain.o
    CC t/helper/test-simple-ipc.o
    CC t/helper/test-string-list.o
    CC t/helper/test-submodule-config.o
    CC t/helper/test-submodule-nested-repo-config.o
    CC t/helper/test-submodule.o
    CC t/helper/test-subprocess.o
    CC t/helper/test-trace2.o
    CC t/helper/test-truncate.o
    CC t/helper/test-userdiff.o
    CC t/helper/test-wildmatch.o
    CC t/helper/test-windows-named-pipe.o
    CC t/helper/test-write-cache.o
    CC t/helper/test-xml-encode.o
    CC t/unit-tests/test-lib.o
    GEN bin-wrappers/git
    GEN bin-wrappers/scalar
    GEN bin-wrappers/git-receive-pack
    GEN bin-wrappers/git-shell
    GEN bin-wrappers/git-upload-archive
    GEN bin-wrappers/git-upload-pack
    GEN bin-wrappers/git-cvsserver
    GEN bin-wrappers/test-fake-ssh
    GEN bin-wrappers/test-tool
    CC t/unit-tests/t-reftable-basics.o
    CC t/unit-tests/lib-reftable.o
    CC t/unit-tests/t-reftable-block.o
    CC t/unit-tests/t-reftable-merged.o
    CC t/unit-tests/t-reftable-pq.o
    CC t/unit-tests/t-reftable-reader.o
    CC t/unit-tests/t-reftable-readwrite.o
    CC t/unit-tests/t-reftable-record.o
    CC t/unit-tests/t-reftable-stack.o
    CC t/unit-tests/t-trailer.o
    CC t/unit-tests/t-urlmatch-normalization.o
    LINK t/helper/test-fake-ssh
    * new test suites
    GEN t/unit-tests/clar-decls.h
    GEN t/unit-tests/clar.suite
    CC t/unit-tests/u-ctype.o
    CC t/unit-tests/u-example-decorate.o
    CC t/unit-tests/u-hash.o
    CC t/unit-tests/u-hashmap.o
    CC t/unit-tests/u-mem-pool.o
    CC t/unit-tests/u-oid-array.o
    CC t/unit-tests/u-oidmap.o
    CC t/unit-tests/u-oidtree.o
    CC t/unit-tests/u-prio-queue.o
    CC t/unit-tests/u-reftable-tree.o
    CC t/unit-tests/u-strbuf.o
    CC t/unit-tests/u-strcmp-offset.o
    CC t/unit-tests/u-strvec.o
    CC t/unit-tests/clar/clar.o
    CC t/unit-tests/unit-test.o
    CC t/unit-tests/lib-oid.o
    LINK t/helper/test-tool
    MKDIR -p t/unit-tests/bin
    LINK t/unit-tests/bin/t-reftable-basics
    LINK t/unit-tests/bin/t-reftable-block
    LINK t/unit-tests/bin/t-reftable-merged
    LINK t/unit-tests/bin/t-reftable-pq
    LINK t/unit-tests/bin/t-reftable-reader
    LINK t/unit-tests/bin/t-reftable-readwrite
    LINK t/unit-tests/bin/t-reftable-record
    LINK t/unit-tests/bin/t-trailer
    LINK t/unit-tests/bin/t-urlmatch-normalization
    LINK t/unit-tests/bin/t-reftable-stack
    LINK t/unit-tests/bin/unit-tests
    GEN gitweb/static/gitweb.js
    GEN gitweb/gitweb.cgi
make: Entering directory '/tmp/src/git-2.49.0/contrib/subtree'
sed -e '1s|#!.*/sh|#!/bin/sh|' git-subtree.sh >git-subtree
chmod +x git-subtree
make: Leaving directory '/tmp/src/git-2.49.0/contrib/subtree'
make: Entering directory '/tmp/src/git-2.49.0/contrib/diff-highlight'
cat shebang.perl DiffHighlight.pm diff-highlight.perl >diff-highlight+
chmod +x diff-highlight+
mv diff-highlight+ diff-highlight
make: Leaving directory '/tmp/src/git-2.49.0/contrib/diff-highlight'
    MKDIR -p perl/build/man/man3
    GEN perl/build/man/man3/Git.3pm
make -C Documentation man
make[1]: Entering directory '/tmp/src/git-2.49.0/Documentation'
    GEN mergetools-diff.adoc
    GEN mergetools-merge.adoc
    GEN cmd-list.made
    GEN doc.dep
    GEN asciidoc.conf
    GEN docinfo.html
    * new asciidoc flags
    ASCIIDOC git-add.xml
    ASCIIDOC git-am.xml
    ASCIIDOC git-annotate.xml
    ASCIIDOC git-apply.xml
    ASCIIDOC git-archimport.xml
    ASCIIDOC git-archive.xml
    ASCIIDOC git-backfill.xml
    ASCIIDOC git-bisect.xml
    ASCIIDOC git-blame.xml
    ASCIIDOC git-branch.xml
    ASCIIDOC git-bugreport.xml
    ASCIIDOC git-bundle.xml
    ASCIIDOC git-cat-file.xml
    ASCIIDOC git-check-attr.xml
    ASCIIDOC git-check-ignore.xml
    ASCIIDOC git-check-mailmap.xml
    ASCIIDOC git-check-ref-format.xml
    ASCIIDOC git-checkout-index.xml
    ASCIIDOC git-checkout.xml
    ASCIIDOC git-cherry-pick.xml
    ASCIIDOC git-cherry.xml
    ASCIIDOC git-citool.xml
    ASCIIDOC git-clean.xml
    ASCIIDOC git-clone.xml
    ASCIIDOC git-column.xml
    ASCIIDOC git-commit-graph.xml
    ASCIIDOC git-commit-tree.xml
    ASCIIDOC git-commit.xml
    ASCIIDOC git-config.xml
    ASCIIDOC git-count-objects.xml
    ASCIIDOC git-credential-cache--daemon.xml
    ASCIIDOC git-credential-cache.xml
    ASCIIDOC git-credential-store.xml
    ASCIIDOC git-credential.xml
    ASCIIDOC git-cvsexportcommit.xml
    ASCIIDOC git-cvsimport.xml
    ASCIIDOC git-cvsserver.xml
    ASCIIDOC git-daemon.xml
    ASCIIDOC git-describe.xml
    ASCIIDOC git-diagnose.xml
    ASCIIDOC git-diff-files.xml
    ASCIIDOC git-diff-index.xml
    ASCIIDOC git-diff-tree.xml
    ASCIIDOC git-diff.xml
    ASCIIDOC git-difftool.xml
    ASCIIDOC git-fast-export.xml
    ASCIIDOC git-fast-import.xml
    ASCIIDOC git-fetch-pack.xml
    ASCIIDOC git-fetch.xml
    ASCIIDOC git-filter-branch.xml
    ASCIIDOC git-fmt-merge-msg.xml
    ASCIIDOC git-for-each-ref.xml
    ASCIIDOC git-for-each-repo.xml
    ASCIIDOC git-format-patch.xml
    ASCIIDOC git-fsck-objects.xml
    ASCIIDOC git-fsck.xml
    ASCIIDOC git-fsmonitor--daemon.xml
    ASCIIDOC git-gc.xml
    ASCIIDOC git-get-tar-commit-id.xml
    ASCIIDOC git-grep.xml
    ASCIIDOC git-gui.xml
    ASCIIDOC git-hash-object.xml
    ASCIIDOC git-help.xml
    ASCIIDOC git-hook.xml
    ASCIIDOC git-http-backend.xml
    ASCIIDOC git-http-fetch.xml
    ASCIIDOC git-http-push.xml
    ASCIIDOC git-imap-send.xml
    ASCIIDOC git-index-pack.xml
    ASCIIDOC git-init-db.xml
    ASCIIDOC git-init.xml
    ASCIIDOC git-instaweb.xml
    ASCIIDOC git-interpret-trailers.xml
    ASCIIDOC git-log.xml
    ASCIIDOC git-ls-files.xml
    ASCIIDOC git-ls-remote.xml
    ASCIIDOC git-ls-tree.xml
    ASCIIDOC git-mailinfo.xml
    ASCIIDOC git-mailsplit.xml
    ASCIIDOC git-maintenance.xml
    ASCIIDOC git-merge-base.xml
    ASCIIDOC git-merge-file.xml
    ASCIIDOC git-merge-index.xml
    ASCIIDOC git-merge-one-file.xml
    ASCIIDOC git-merge-tree.xml
    ASCIIDOC git-merge.xml
    ASCIIDOC git-mergetool--lib.xml
    ASCIIDOC git-mergetool.xml
    ASCIIDOC git-mktag.xml
    ASCIIDOC git-mktree.xml
    ASCIIDOC git-multi-pack-index.xml
    ASCIIDOC git-mv.xml
    ASCIIDOC git-name-rev.xml
    ASCIIDOC git-notes.xml
    ASCIIDOC git-p4.xml
    ASCIIDOC git-pack-objects.xml
    ASCIIDOC git-pack-redundant.xml
    ASCIIDOC git-pack-refs.xml
    ASCIIDOC git-patch-id.xml
    ASCIIDOC git-prune-packed.xml
    ASCIIDOC git-prune.xml
    ASCIIDOC git-pull.xml
    ASCIIDOC git-push.xml
    ASCIIDOC git-quiltimport.xml
    ASCIIDOC git-range-diff.xml
    ASCIIDOC git-read-tree.xml
    ASCIIDOC git-rebase.xml
    ASCIIDOC git-receive-pack.xml
    ASCIIDOC git-reflog.xml
    ASCIIDOC git-refs.xml
    ASCIIDOC git-remote-ext.xml
    ASCIIDOC git-remote-fd.xml
    ASCIIDOC git-remote.xml
    ASCIIDOC git-repack.xml
    ASCIIDOC git-replace.xml
    ASCIIDOC git-replay.xml
    ASCIIDOC git-request-pull.xml
    ASCIIDOC git-rerere.xml
    ASCIIDOC git-reset.xml
    ASCIIDOC git-restore.xml
    ASCIIDOC git-rev-list.xml
    ASCIIDOC git-rev-parse.xml
    ASCIIDOC git-revert.xml
    ASCIIDOC git-rm.xml
    ASCIIDOC git-send-email.xml
    ASCIIDOC git-send-pack.xml
    ASCIIDOC git-sh-i18n--envsubst.xml
    ASCIIDOC git-sh-i18n.xml
    ASCIIDOC git-sh-setup.xml
    ASCIIDOC git-shell.xml
    ASCIIDOC git-shortlog.xml
    ASCIIDOC git-show-branch.xml
    ASCIIDOC git-show-index.xml
    ASCIIDOC git-show-ref.xml
    ASCIIDOC git-show.xml
    ASCIIDOC git-sparse-checkout.xml
    ASCIIDOC git-stage.xml
    ASCIIDOC git-stash.xml
    ASCIIDOC git-status.xml
    ASCIIDOC git-stripspace.xml
    ASCIIDOC git-submodule.xml
    ASCIIDOC git-svn.xml
    ASCIIDOC git-switch.xml
    ASCIIDOC git-symbolic-ref.xml
    ASCIIDOC git-tag.xml
    ASCIIDOC git-unpack-file.xml
    ASCIIDOC git-unpack-objects.xml
    ASCIIDOC git-update-index.xml
    ASCIIDOC git-update-ref.xml
    ASCIIDOC git-update-server-info.xml
    ASCIIDOC git-upload-archive.xml
    ASCIIDOC git-upload-pack.xml
    ASCIIDOC git-var.xml
    ASCIIDOC git-verify-commit.xml
    ASCIIDOC git-verify-pack.xml
    ASCIIDOC git-verify-tag.xml
    ASCIIDOC git-version.xml
    ASCIIDOC git-web--browse.xml
    ASCIIDOC git-whatchanged.xml
    ASCIIDOC git-worktree.xml
    ASCIIDOC git-write-tree.xml
    ASCIIDOC git.xml
    ASCIIDOC gitk.xml
    ASCIIDOC gitweb.xml
    ASCIIDOC scalar.xml
    ASCIIDOC gitattributes.xml
    ASCIIDOC gitformat-bundle.xml
    ASCIIDOC gitformat-chunk.xml
    ASCIIDOC gitformat-commit-graph.xml
    ASCIIDOC gitformat-index.xml
    ASCIIDOC gitformat-pack.xml
    ASCIIDOC gitformat-signature.xml
    ASCIIDOC githooks.xml
    ASCIIDOC gitignore.xml
    ASCIIDOC gitmailmap.xml
    ASCIIDOC gitmodules.xml
    ASCIIDOC gitprotocol-capabilities.xml
    ASCIIDOC gitprotocol-common.xml
    ASCIIDOC gitprotocol-http.xml
    ASCIIDOC gitprotocol-pack.xml
    ASCIIDOC gitprotocol-v2.xml
    ASCIIDOC gitrepository-layout.xml
    ASCIIDOC gitweb.conf.xml
    ASCIIDOC gitcli.xml
    ASCIIDOC gitcore-tutorial.xml
    ASCIIDOC gitcredentials.xml
    ASCIIDOC gitcvs-migration.xml
    ASCIIDOC gitdiffcore.xml
    ASCIIDOC giteveryday.xml
    ASCIIDOC gitfaq.xml
    ASCIIDOC gitglossary.xml
    ASCIIDOC gitpacking.xml
    ASCIIDOC gitnamespaces.xml
    ASCIIDOC gitremote-helpers.xml
    ASCIIDOC gitrevisions.xml
    ASCIIDOC gitsubmodules.xml
    ASCIIDOC gittutorial-2.xml
    ASCIIDOC gittutorial.xml
    ASCIIDOC gitworkflows.xml
    XMLTO git-add.1
    XMLTO git-am.1
    XMLTO git-annotate.1
    XMLTO git-apply.1
    XMLTO git-archimport.1
    XMLTO git-archive.1
    XMLTO git-backfill.1
    XMLTO git-bisect.1
    XMLTO git-blame.1
    XMLTO git-branch.1
    XMLTO git-bugreport.1
    XMLTO git-bundle.1
    XMLTO git-cat-file.1
    XMLTO git-check-attr.1
    XMLTO git-check-ignore.1
    XMLTO git-check-mailmap.1
    XMLTO git-check-ref-format.1
    XMLTO git-checkout-index.1
    XMLTO git-checkout.1
    XMLTO git-cherry-pick.1
    XMLTO git-cherry.1
    XMLTO git-citool.1
    XMLTO git-clean.1
    XMLTO git-clone.1
    XMLTO git-column.1
    XMLTO git-commit-graph.1
    XMLTO git-commit-tree.1
    XMLTO git-commit.1
    XMLTO git-config.1
    XMLTO git-count-objects.1
    XMLTO git-credential-cache--daemon.1
    XMLTO git-credential-cache.1
    XMLTO git-credential-store.1
    XMLTO git-credential.1
    XMLTO git-cvsexportcommit.1
    XMLTO git-cvsimport.1
    XMLTO git-cvsserver.1
    XMLTO git-daemon.1
    XMLTO git-describe.1
    XMLTO git-diagnose.1
    XMLTO git-diff-files.1
    XMLTO git-diff-index.1
    XMLTO git-diff-tree.1
    XMLTO git-diff.1
    XMLTO git-difftool.1
    XMLTO git-fast-export.1
    XMLTO git-fast-import.1
    XMLTO git-fetch-pack.1
    XMLTO git-fetch.1
    XMLTO git-filter-branch.1
    XMLTO git-fmt-merge-msg.1
    XMLTO git-for-each-ref.1
    XMLTO git-for-each-repo.1
    XMLTO git-format-patch.1
    XMLTO git-fsck-objects.1
    XMLTO git-fsck.1
    XMLTO git-fsmonitor--daemon.1
    XMLTO git-gc.1
    XMLTO git-get-tar-commit-id.1
    XMLTO git-grep.1
    XMLTO git-gui.1
    XMLTO git-hash-object.1
    XMLTO git-help.1
    XMLTO git-hook.1
    XMLTO git-http-backend.1
    XMLTO git-http-fetch.1
    XMLTO git-http-push.1
    XMLTO git-imap-send.1
    XMLTO git-index-pack.1
    XMLTO git-init-db.1
    XMLTO git-init.1
    XMLTO git-instaweb.1
    XMLTO git-interpret-trailers.1
    XMLTO git-log.1
    XMLTO git-ls-files.1
    XMLTO git-ls-remote.1
    XMLTO git-ls-tree.1
    XMLTO git-mailinfo.1
    XMLTO git-mailsplit.1
    XMLTO git-maintenance.1
    XMLTO git-merge-base.1
    XMLTO git-merge-file.1
    XMLTO git-merge-index.1
    XMLTO git-merge-one-file.1
    XMLTO git-merge-tree.1
    XMLTO git-merge.1
    XMLTO git-mergetool--lib.1
    XMLTO git-mergetool.1
    XMLTO git-mktag.1
    XMLTO git-mktree.1
    XMLTO git-multi-pack-index.1
    XMLTO git-mv.1
    XMLTO git-name-rev.1
    XMLTO git-notes.1
    XMLTO git-p4.1
    XMLTO git-pack-objects.1
    XMLTO git-pack-redundant.1
    XMLTO git-pack-refs.1
    XMLTO git-patch-id.1
    XMLTO git-prune-packed.1
    XMLTO git-prune.1
    XMLTO git-pull.1
    XMLTO git-push.1
    XMLTO git-quiltimport.1
    XMLTO git-range-diff.1
    XMLTO git-read-tree.1
    XMLTO git-rebase.1
    XMLTO git-receive-pack.1
    XMLTO git-reflog.1
    XMLTO git-refs.1
    XMLTO git-remote-ext.1
    XMLTO git-remote-fd.1
    XMLTO git-remote.1
    XMLTO git-repack.1
    XMLTO git-replace.1
    XMLTO git-replay.1
    XMLTO git-request-pull.1
    XMLTO git-rerere.1
    XMLTO git-reset.1
    XMLTO git-restore.1
    XMLTO git-rev-list.1
    XMLTO git-rev-parse.1
    XMLTO git-revert.1
    XMLTO git-rm.1
    XMLTO git-send-email.1
    XMLTO git-send-pack.1
    XMLTO git-sh-i18n--envsubst.1
    XMLTO git-sh-i18n.1
    XMLTO git-sh-setup.1
    XMLTO git-shell.1
    XMLTO git-shortlog.1
    XMLTO git-show-branch.1
    XMLTO git-show-index.1
    XMLTO git-show-ref.1
    XMLTO git-show.1
    XMLTO git-sparse-checkout.1
    XMLTO git-stage.1
    XMLTO git-stash.1
    XMLTO git-status.1
    XMLTO git-stripspace.1
    XMLTO git-submodule.1
    XMLTO git-svn.1
    XMLTO git-switch.1
    XMLTO git-symbolic-ref.1
    XMLTO git-tag.1
    XMLTO git-unpack-file.1
    XMLTO git-unpack-objects.1
    XMLTO git-update-index.1
    XMLTO git-update-ref.1
    XMLTO git-update-server-info.1
    XMLTO git-upload-archive.1
    XMLTO git-upload-pack.1
    XMLTO git-var.1
    XMLTO git-verify-commit.1
    XMLTO git-verify-pack.1
    XMLTO git-verify-tag.1
    XMLTO git-version.1
    XMLTO git-web--browse.1
    XMLTO git-whatchanged.1
    XMLTO git-worktree.1
    XMLTO git-write-tree.1
    XMLTO git.1
    XMLTO gitk.1
    XMLTO gitweb.1
    XMLTO scalar.1
    XMLTO gitattributes.5
    XMLTO gitformat-bundle.5
    XMLTO gitformat-chunk.5
    XMLTO gitformat-commit-graph.5
    XMLTO gitformat-index.5
    XMLTO gitformat-pack.5
    XMLTO gitformat-signature.5
    XMLTO githooks.5
    XMLTO gitignore.5
    XMLTO gitmailmap.5
    XMLTO gitmodules.5
    XMLTO gitprotocol-capabilities.5
    XMLTO gitprotocol-common.5
    XMLTO gitprotocol-http.5
    XMLTO gitprotocol-pack.5
    XMLTO gitprotocol-v2.5
    XMLTO gitrepository-layout.5
    XMLTO gitweb.conf.5
    XMLTO gitcli.7
    XMLTO gitcore-tutorial.7
    XMLTO gitcredentials.7
    XMLTO gitcvs-migration.7
    XMLTO gitdiffcore.7
    XMLTO giteveryday.7
    XMLTO gitfaq.7
    XMLTO gitglossary.7
    XMLTO gitpacking.7
    XMLTO gitnamespaces.7
    XMLTO gitremote-helpers.7
    XMLTO gitrevisions.7
    XMLTO gitsubmodules.7
    XMLTO gittutorial-2.7
    XMLTO gittutorial.7
    XMLTO gitworkflows.7
make[1]: Leaving directory '/tmp/src/git-2.49.0/Documentation'
make: Entering directory '/tmp/src/git-2.49.0/contrib/credential/libsecret'
cc -Os -fstack-clash-protection -Wformat -Werror=format-security -fno-plt -g -flto=auto  -I/usr/include/libsecret-1 -I/usr/include/gio-unix-2.0 -pthread -I/usr/include/libmount -I/usr/include/blkid -I/usr/include/glib-2.0 -I/usr/lib/glib-2.0/include -o git-credential-libsecret.o -c git-credential-libsecret.c
cc -o git-credential-libsecret -Wl,--as-needed,-O1,--sort-common -Wl,-z,pack-relative-relocs -flto=auto git-credential-libsecret.o -lsecret-1 -lgio-2.0 -lgobject-2.0 -lglib-2.0 -lintl
make: Leaving directory '/tmp/src/git-2.49.0/contrib/credential/libsecret'
make: Entering directory '/tmp/src/git-2.49.0/t'
rm -f -r 'test-results'
GIT_TEST_EXT_CHAIN_LINT=0 && export GIT_TEST_EXT_CHAIN_LINT && make aggregate-results-and-cleanup
make[1]: Entering directory '/tmp/src/git-2.49.0/t'
*** t0000-basic.sh ***
*** t0001-init.sh ***
*** t0002-gitfile.sh ***
*** t0003-attributes.sh ***
*** t0004-unwritable.sh ***
*** t0005-signals.sh ***
*** t0006-date.sh ***
*** t0007-git-var.sh ***
*** t0008-ignores.sh ***
*** t0010-racy-git.sh ***
*** t0012-help.sh ***
*** t0013-sha1dc.sh ***
*** t0014-alias.sh ***
*** t0017-env-helper.sh ***
*** t0018-advice.sh ***
*** t0019-json-writer.sh ***
ok 1 - unit test of json-writer routines
ok 1 - open-quoted pathname
ok 1 - setup
ok 1 - sigchain works
ok 1 - advice should be printed when config variable is unset
ok 2 - trivial object
ok 1 - initial setup
ok 2 - setup
ok 1 - get GIT_AUTHOR_IDENT
ok 1 - Racy git trial #0 part A
ok 1 - test-sha1 detects shattered pdf
ok 3 - trivial array
ok 1 - plain
ok 2 - bad setup: invalid .git file format
ok 2 - get GIT_COMMITTER_IDENT
ok 2 - signals are propagated using shell convention
# passed all 1 test(s)
1..1
ok 1 - verify that the running shell supports "local"
ok 2 - basic help commands
ok 3 - bad setup: invalid .git file path
ok 1 - nested aliases - internal execution
ok 1 - test-tool env-helper usage
ok 4 - simple object
ok 2 - .git/objects should be empty after git init in an empty repo
*** t0020-crlf.sh ***
ok 2 - advice should be printed when config variable is set to true
ok 3 - create blob
ok 3 - .git/objects should have 3 subdirectories
ok 4 - success is reported like this
ok 2 - test-tool env-helper bad default values
ok 4 - final setup + check rev-parse --git-dir
ok 1 - relative date (5 seconds ago)
ok 1 - setup
ok 5 - simple array
ok 2 - relative date (5 minutes ago)
ok 3 - advice should not be printed when config variable is set to false
ok 5 - check hash-object
ok 4 - a constipated git dies with SIGPIPE
ok 2 - plain nested in bare
ok 3 - relative date (5 hours ago)
ok 6 - check cat-file
ok 6 - escape quoting string
ok 4 - relative date (5 days ago)
ok 5 - a constipated git dies with SIGPIPE even if parent ignores it
ok 2 - nested aliases - mixed execution
# passed all 5 test(s)
1..5
ok 3 - invalid usage
ok 5 - relative date (3 weeks ago)
ok 7 - check update-index
ok 4 - advice should not be printed when --no-advice is used
*** t0021-conversion.sh ***
ok 3 - setup branches
ok 7 - escape quoting string 2
ok 6 - relative date (5 months ago)
ok 2 - write-tree should notice unwritable repository
ok 8 - check write-tree
ok 3 - plain through aliased command, outside any git repo
ok 1 - setup
ok 7 - relative date (1 year, 2 months ago)
ok 8 - nested inline object
ok 3 - looping aliases - internal execution
ok 9 - check commit-tree
ok 3 - write-tree output on unwritable repository
ok 3 - test-tool env-helper --type=bool
ok 4 - invalid usage of '-a' with [-i|-m|-w]
ok 8 - relative date (1 year, 9 months ago)
ok 5 - advice should not be printed when GIT_ADVICE is set to false
ok 9 - nested inline array
ok 2 - . corner-case
ok 9 - relative date (20 years ago)
ok 10 - check rev-list
ok 4 - run-command formats empty args properly
ok 5 - invalid usage of '-g' with [-i|-m|-w]
ok 4 - commit should notice unwritable repository
ok 10 - relative date (12 months ago)
ok 10 - nested inline object and array
ok 4 - plain nested through aliased command
ok 3 - . corner-case with -q
ok 6 - invalid usage of '-g' with --no-external-commands
ok 11 - relative date (2 years ago)
ok 4 - test-tool env-helper --type=ulong
ok 7 - invalid usage of '-g' with --no-aliases
ok 5 - commit output on unwritable repository
ok 11 - nested inline object and array 2
ok 6 - advice should be printed when GIT_ADVICE is set to true
ok 12 - show date (iso8601:1466000000 +0200)
ok 4 - . corner-case with --quiet
# passed all 6 test(s)
1..6
ok 5 - tracing a shell alias with arguments shows trace of prepared command
ok 13 - show date (iso8601-strict:1466000000 +0200)
ok 4 - command line checks
*** t0022-crlf-rename.sh ***
# passed all 5 test(s)
1..5
ok 12 - pretty nested inline object and array 2
ok 5 - . corner-case with -v
ok 6 - update-index should notice unwritable repository
*** t0023-crlf-am.sh ***
ok 14 - show date (iso8601-strict:1466000000 +0000)
ok 11 - setup_git_dir twice in subdir
ok 5 - plain nested in bare through aliased command
ok 6 - . corner-case with -v -n
ok 13 - inline object with no members
ok 8 - invalid usage of '-c' with [-i|-m|-w]
ok 15 - show date (rfc2822:1466000000 +0200)
ok 7 - update-index output on unwritable repository
ok 5 - test-tool env-helper reads config thanks to trace2
ok 9 - invalid usage of '-c' with --no-external-commands
ok 7 - . corner-case with -v --non-matching
ok 16 - show date (short:1466000000 +0200)
# passed all 5 test(s)
1..5
ok 14 - inline array with no members
ok 10 - invalid usage of '-c' with --no-aliases
*** t0024-crlf-archive.sh ***
ok 17 - show date (default:1466000000 +0200)
ok 8 - . corner-case with --verbose
ok 8 - add should notice unwritable repository
ok 18 - show date (raw:1466000000 +0200)
ok 15 - larger empty example
ok 6 - No extra GIT_* on alias scripts
ok 19 - show date (unix:1466000000 +0200)
ok 9 - . corner-case with --verbose -n
ok 9 - add output on unwritable repository
ok 7 - plain with GIT_WORK_TREE
ok 20 - show date (iso-local:1466000000 +0200)
# passed all 9 test(s)
ok 16 # skip parse JSON using Perl (missing PERLJSON)
1..9
ok 11 - invalid usage of '--config-for-completion' with [-i|-m|-w]
ok 10 - . corner-case with --verbose --non-matching
# passed all 16 test(s)
1..16
ok 12 - invalid usage of '--config-for-completion' with --no-external-commands
*** t0025-crlf-renormalize.sh ***
ok 21 - show date (raw-local:1466000000 +0200)
*** t0026-eol-config.sh ***
ok 13 - invalid usage of '--config-for-completion' with --no-aliases
ok 12 - enter_repo non-strict mode
ok 22 - show date (unix-local:1466000000 +0200)
ok 8 - plain bare
ok 23 - show date (format:%z:1466000000 +0200)
ok 11 - empty command line
ok 24 - show date (format-local:%z:1466000000 +0200)
ok 9 - plain bare with GIT_WORK_TREE
ok 14 - invalid usage of '--config-sections-for-completion' with [-i|-m|-w]
ok 25 - show date (format:%Z:1466000000 +0200)
ok 12 - empty command line with -q
ok 15 - invalid usage of '--config-sections-for-completion' with --no-external-commands
ok 26 - show date (format-local:%Z:1466000000 +0200)
ok 13 - enter_repo linked checkout
ok 5 - subtest: 3 passing tests
ok 16 - invalid usage of '--config-sections-for-completion' with --no-aliases
ok 10 - GIT_DIR bare
ok 27 - show date (format:%%z:1466000000 +0200)
ok 13 - empty command line with --quiet
ok 28 - show date (format-local:%%z:1466000000 +0200)
ok 14 - empty command line with -v
ok 29 - show date (format:%Y-%m-%d %H:%M:%S:1466000000 +0200)
ok 14 - enter_repo strict mode
ok 5 - attribute test
ok 11 - init --bare
# passed all 14 test(s)
1..14
ok 30 - show date (format-local:%Y-%m-%d %H:%M:%S:1466000000 +0200)
ok 15 - empty command line with -v -n
*** t0027-auto-crlf.sh ***
ok 31 - show date (format:%s:123456789 +1234)
ok 32 - show date (format:%s:123456789 -1234)
ok 12 - GIT_DIR non-bare
ok 1 - setup
ok 16 - empty command line with -v --non-matching
ok 33 - show date (format-local:%s:123456789 -1234)
ok 17 - empty command line with --verbose
ok 34 - show date (iso8601:1466000000 -0200)
ok 2 - safecrlf: autocrlf=input, all CRLF
ok 35 - show date (iso8601-strict:1466000000 -0200)
ok 13 - GIT_DIR & GIT_WORK_TREE (1)
ok 1 - setup
ok 36 - show date (rfc2822:1466000000 -0200)
ok 18 - empty command line with --verbose -n
ok 14 - GIT_DIR & GIT_WORK_TREE (2)
ok 37 - show date (default:1466000000 -0200)
ok 19 - empty command line with --verbose --non-matching
ok 38 - show date (raw:1466000000 -0200)
ok 3 - safecrlf: autocrlf=input, mixed LF/CRLF
ok 2 - check
ok 39 - show date (iso:5758122296 -0400)
ok 4 - safecrlf: autocrlf=true, all LF
ok 40 - show date (iso-local:5758122296 -0400)
ok 20 - --stdin with empty STDIN
ok 15 - reinit
ok 1 - setup
ok 41 - parse date (2008) -> bad
ok 42 - parse date (2008-02) -> bad
ok 16 - init with --template
ok 1 - setup
ok 43 - parse date (2008-02-14) -> bad
ok 5 - safecrlf: autocrlf=true mixed LF/CRLF
ok 21 - --stdin with empty STDIN with -q
ok 44 - parse date (2008-02-14 20:30:45) -> 2008-02-14 20:30:45 +0000
ok 2 - am
ok 17 - init with --template (blank)
ok 1 - setup
ok 2 - diff -M
# passed all 2 test(s)
1..2
ok 45 - parse date (2008-02-14 20:30:45 -0500) -> 2008-02-14 20:30:45 -0500
ok 22 - --stdin with empty STDIN with --quiet
# passed all 2 test(s)
1..2
ok 6 - attribute matching is case sensitive when core.ignorecase=0
*** t0028-working-tree-encoding.sh ***
ok 46 - parse date (2008.02.14 20:30:45 -0500) -> 2008-02-14 20:30:45 -0500
ok 2 - tar archive
*** t0029-core-unsetenvvars.sh ***
ok 47 - parse date (20080214T20:30:45) -> 2008-02-14 20:30:45 +0000
ok 23 - --stdin with empty STDIN with -v
ok 17 - works for commands and guides by default
ok 1 - setup
ok 48 - parse date (20080214T20:30) -> 2008-02-14 20:30:00 +0000
ok 18 - init with init.templatedir set
ok 24 - --stdin with empty STDIN with -v -n
ok 49 - parse date (20080214T20) -> 2008-02-14 20:00:00 +0000
ok 3 - expanded_in_repo
ok 18 - --exclude-guides does not work for guides
ok 1 - setup
ok 50 - parse date (20080214T203045) -> 2008-02-14 20:30:45 +0000
ok 25 - --stdin with empty STDIN with -v --non-matching
ok 6 - safecrlf: print warning only once
ok 2 - renormalize CRLF in repo
ok 3 - zip archive
ok 51 - parse date (20080214T2030) -> 2008-02-14 20:30:00 +0000
# passed all 3 test(s)
1..3
ok 19 - --help does not work for guides
ok 52 - parse date (20080214T000000.20) -> 2008-02-14 00:00:00 +0000
ok 26 - --stdin with empty STDIN with --verbose
ok 19 - init with init.templatedir using ~ expansion
ok 7 - safecrlf: git diff demotes safecrlf=true to warn
*** t0030-stripspace.sh ***
ok 53 - parse date (20080214T00:00:00.20) -> 2008-02-14 00:00:00 +0000
ok 6 - subtest: 2/3 tests passing
ok 20 - git help
ok 27 - --stdin with empty STDIN with --verbose -n
ok 54 - parse date (20080214T203045-04:00) -> 2008-02-14 20:30:45 -0400
ok 3 - ignore-errors not mistaken for renormalize
ok 2 - eol=lf puts LFs in normalized file
# passed all 3 test(s)
1..3
ok 21 - git help -g
ok 55 - parse date (20080214T203045 -04:00) -> 2008-02-14 20:30:45 -0400
ok 28 - --stdin with empty STDIN with --verbose --non-matching
ok 1 - ls-files --eol -o Text/Binary
ok 8 - safecrlf: no warning with safecrlf=false
ok 56 - parse date (20080214T203045.019-04:00) -> 2008-02-14 20:30:45 -0400
*** t0033-safe-directory.sh ***
ok 29 - -q with multiple args
ok 57 - parse date (2008-02-14 20:30:45.019-04:00) -> 2008-02-14 20:30:45 -0400
ok 58 - parse date (2008-02-14 20:30:45 -0015) -> 2008-02-14 20:30:45 -0015
ok 9 - switch off autocrlf, safecrlf, reset HEAD
ok 3 - eol=crlf puts CRLFs in normalized file
ok 30 - --quiet with multiple args
ok 59 - parse date (2008-02-14 20:30:45 -5) -> 2008-02-14 20:30:45 +0000
ok 20 - init --bare/--shared overrides system/global config
ok 60 - parse date (2008-02-14 20:30:45 -5:) -> 2008-02-14 20:30:45 +0000
ok 7 - attribute matching is case insensitive when core.ignorecase=1
ok 31 - -q -v
ok 61 - parse date (2008-02-14 20:30:45 -05) -> 2008-02-14 20:30:45 -0500
ok 8 # skip additional case insensitivity tests (missing CASE_INSENSITIVE_FS)
ok 62 - parse date (2008-02-14 20:30:45 -:30) -> 2008-02-14 20:30:45 +0000
ok 22 - git help fails for non-existing html pages
ok 32 - --quiet -v
ok 10 - update with autocrlf=input
ok 4 - filter shell-escaped filenames
ok 63 - parse date (2008-02-14 20:30:45 -05:00) -> 2008-02-14 20:30:45 -0500
ok 21 - init honors global core.sharedRepository
ok 4 - autocrlf=true overrides eol=lf
ok 64 - parse date (2008-02-14 20:30:45 TZ=EST5) -> 2008-02-14 20:30:45 -0500
ok 33 - -q --verbose
ok 65 - parse date (Thu, 7 Apr 2005 15:14:13 -0700) -> 2005-04-07 15:14:13 -0700
ok 22 - init allows insanely long --template
ok 9 - unnormalized paths
ok 34 - --quiet --verbose
ok 66 - parse date (1970-01-01 00:00:00) -> 1970-01-01 00:00:00 +0000
ok 67 - parse date (1970-01-01 00:00:00 +00) -> 1970-01-01 00:00:00 +0000
ok 35 - --quiet with multiple args
ok 23 - init creates a new directory
ok 68 - parse date (1970-01-01 00:00:00 Z) -> 1970-01-01 00:00:00 +0000
ok 11 - update with autocrlf=true
ok 5 - autocrlf=true overrides unset eol
ok 69 - parse date (1970-01-01 00:00:00 -01) -> 1970-01-01 00:00:00 -0100
ok 6 # skip eol native is crlf (missing NATIVE_CRLF)
ok 24 - init creates a new bare directory
# passed all 6 test(s)
1..6
ok 36 - erroneous use of --
ok 70 - parse date (1970-01-01 00:00:00 +01) -> bad
1..0 # SKIP skipping Windows-specific tests
ok 71 - parse date (1970-01-01 00:00:00 +11) -> bad
*** t0034-root-safe-directory.sh ***
*** t0035-safe-bare-repository.sh ***
ok 25 - init recreates a directory
ok 72 - parse date (1970-01-01 00:59:59 +01) -> bad
ok 37 - erroneous use of -- with -q
ok 73 - parse date (1970-01-01 01:00:00 +01) -> 1970-01-01 01:00:00 +0100
ok 74 - parse date (1970-01-01 01:00:00 +11) -> bad
ok 26 - init recreates a new bare directory
ok 38 - erroneous use of -- with --quiet
ok 5 - required filter should filter data
ok 12 - checkout with autocrlf=true
ok 75 - parse date (1970-01-02 00:00:00 +11) -> 1970-01-02 00:00:00 +1100
ok 10 - relative paths
ok 39 - erroneous use of -- with -v
ok 76 - parse date (1969-12-31 23:59:59) -> bad
ok 27 - init creates a new deep directory
ok 77 - parse date (1969-12-31 23:59:59 +00) -> bad
ok 23 - git help succeeds without git.html
ok 40 - erroneous use of -- with -v -n
ok 1 - long lines without spaces should be unchanged
ok 7 - subtest: --immediate
ok 78 - parse date (1969-12-31 23:59:59 Z) -> bad
ok 11 - prefixes are not confused with leading directories
ok 1 - setup test files
ok 79 - parse date (1969-12-31 23:59:59 +11) -> bad
ok 24 - git help --user-interfaces
ok 41 - erroneous use of -- with -v --non-matching
ok 80 - parse date (1969-12-31 23:59:59 -11) -> bad
ok 28 - init creates a new deep directory (umask vs. shared)
ok 13 - checkout with autocrlf=input
ok 2 - ensure UTF-8 is stored in Git
ok 1 - safe.directory is not set
ok 2 - lines with spaces at the beginning should be unchanged
ok 81 - parse date (2099-12-31 23:59:59) -> 2099-12-31 23:59:59 +0000
ok 29 - init notices EEXIST (1)
ok 42 - erroneous use of -- with --verbose
ok 2 - safe.directory on the command line
ok 25 - git help -c
ok 82 - parse date (2099-12-31 23:59:59 +00) -> 2099-12-31 23:59:59 +0000
ok 30 - init notices EEXIST (2)
ok 3 - re-encode to UTF-16 on checkout
ok 43 - erroneous use of -- with --verbose -n
ok 6 - required filter smudge failure
ok 3 - safe.directory in the environment
ok 3 - lines with intermediate spaces should be unchanged
ok 83 - parse date (2099-12-31 23:59:59 Z) -> 2099-12-31 23:59:59 +0000
ok 12 - core.attributesfile
ok 14 - apply patch (autocrlf=input)
ok 44 - erroneous use of -- with --verbose --non-matching
ok 4 - safe.directory in GIT_CONFIG_PARAMETERS
ok 4 - re-encode to UTF-16-LE-BOM on checkout
ok 84 - parse date (2099-12-31 23:59:59 +01) -> 2099-12-31 23:59:59 +0100
ok 13 - attribute test: read paths from stdin
ok 5 - ignoring safe.directory in repo config
ok 85 - parse date (2099-12-31 23:59:59 -01) -> bad
ok 14 - setup --all option
ok 45 - --stdin with superfluous arg
ok 86 - parse date (2099-12-31 23:59:59 -11) -> bad
ok 26 - git help --config-for-completion
ok 15 - attribute test: --all option
ok 15 - apply patch --cached (autocrlf=input)
ok 31 - init notices EPERM
ok 6 - safe.directory does not match
ok 87 - parse date (2099-12-31 23:00:00 -01) -> bad
ok 5 - check $GIT_DIR/info/attributes support
ok 32 - init creates a new bare directory with global --bare
ok 46 - --stdin with superfluous arg with -q
ok 7 - required filter clean failure
ok 88 - parse date (2099-12-31 22:59:59 -01) -> 2099-12-31 22:59:59 -0100
ok 7 - path exist as different key
ok 16 - attribute test: --cached option
ok 89 - parse date (2100-00-00 00:00:00) -> bad
ok 16 - apply patch --index (autocrlf=input)
ok 47 - --stdin with superfluous arg with --quiet
ok 33 - init prefers command line to GIT_DIR
ok 8 - safe.directory matches
ok 27 - git help --config-sections-for-completion
ok 90 - parse date (2099-12-30 00:00:00 -11) -> 2099-12-30 00:00:00 -1100
ok 48 - --stdin with superfluous arg with -v
ok 17 - root subdir attribute test
ok 9 - safe.directory matches, but is reset
ok 91 - parse date (2100-00-00 00:00:00 +00) -> bad
ok 34 - init with separate gitdir
ok 28 - 'git' section spacing
ok 18 - negative patterns
ok 8 - required filter with absent clean field
ok 17 - apply patch (autocrlf=true)
ok 4 - consecutive blank lines should be unified
ok 49 - --stdin with superfluous arg with -v -n
ok 10 - safe.directory=*
ok 19 - patterns starting with exclamation
ok 35 - explicit bare & --separate-git-dir incompatible
ok 92 - parse date (2100-00-00 00:00:00 Z) -> bad
1..0 # SKIP You must set env var GIT_TEST_ALLOW_SUDO=YES in order to run this test
*** t0040-parse-options.sh ***
ok 93 - parse date (2100-00-00 00:00:00 -11) -> bad
ok 11 - safe.directory=*, but is reset
ok 50 - --stdin with superfluous arg with -v --non-matching
ok 29 - 'git help' section spacing
ok 36 - implicit bare & --separate-git-dir incompatible
ok 6 - check prohibited UTF-16 BOM
ok 18 - apply patch --cached (autocrlf=true)
ok 94 - parse date (2100-00-00 00:00:00 +11) -> bad
ok 51 - --stdin with superfluous arg with --verbose
ok 30 - 'git help -a' section spacing
ok 12 - safe.directory with matching glob
ok 95 - parse approxidate (now)
ok 20 - "**" test
ok 5 - only consecutive blank lines should be completely removed
ok 96 - parse approxidate (5 seconds ago)
ok 9 - required filter with absent smudge field
ok 97 - parse approxidate (5.seconds.ago)
ok 52 - --stdin with superfluous arg with --verbose -n
ok 31 - 'git help -g' section spacing
ok 19 - apply patch --index (autocrlf=true)
ok 13 - safe.directory with unmatching glob
ok 98 - parse approxidate (10.minutes.ago)
ok 32 - generate builtin list
ok 7 - check required UTF-16 BOM
ok 53 - --stdin with superfluous arg with --verbose --non-matching
ok 99 - parse approxidate (yesterday)
ok 33 - add can handle -h
ok 100 - parse approxidate (3.days.ago)
ok 34 - am can handle -h
ok 54 - --stdin -z with superfluous arg
ok 21 - "**" with no slashes test
ok 101 - parse approxidate (12:34:56.3.days.ago)
ok 20 - .gitattributes says two is binary
ok 14 - safe.directory in included file
ok 8 - subtest: a failing TODO test
ok 102 - parse approxidate (3.weeks.ago)
ok 35 - annotate can handle -h
ok 21 - .gitattributes says two is input
ok 103 - parse approxidate (3.months.ago)
ok 55 - --stdin -z with superfluous arg with -q
ok 104 - parse approxidate (2.years.3.months.ago)
ok 22 - using --git-dir and --work-tree
ok 36 - apply can handle -h
ok 37 - bare & --separate-git-dir incompatible within worktree
ok 105 - parse approxidate (6am yesterday)
ok 56 - --stdin -z with superfluous arg with --quiet
ok 37 - archive can handle -h
ok 22 - .gitattributes says two and three are text
ok 6 - consecutive blank lines at the beginning should be removed
ok 106 - parse approxidate (6pm yesterday)
ok 38 - backfill can handle -h
ok 107 - parse approxidate (3:00)
ok 57 - --stdin -z with superfluous arg with -v
ok 38 - init in long base path
ok 108 - parse approxidate (15:00)
ok 39 - bisect can handle -h
ok 109 - parse approxidate (noon today)
ok 58 - --stdin -z with superfluous arg with -v -n
ok 40 - blame can handle -h
ok 110 - parse approxidate (noon yesterday)
ok 8 - eol conversion for UTF-16 encoded files on checkout
ok 23 - in-tree .gitattributes (1)
ok 111 - parse approxidate (January 5th noon pm)
ok 41 - branch can handle -h
ok 59 - --stdin -z with superfluous arg with -v --non-matching
ok 112 - parse approxidate (10am noon)
ok 15 - local clone of unowned repo refused in unsafe directory
ok 42 - bugreport can handle -h
ok 113 - parse approxidate (last tuesday)
ok 60 - --stdin -z with superfluous arg with --verbose
ok 43 - bundle can handle -h
ok 24 - in-tree .gitattributes (2)
ok 39 - init in long restricted base path
ok 114 - parse approxidate (July 5th)
ok 61 - --stdin -z with superfluous arg with --verbose -n
ok 115 - parse approxidate (06/05/2009)
ok 44 - cat-file can handle -h
ok 40 - re-init on .git file
ok 62 - --stdin -z with superfluous arg with --verbose --non-matching
ok 116 - parse approxidate (06.05.2009)
ok 41 - re-init to update git link
ok 45 - check-attr can handle -h
ok 7 - consecutive blank lines at the end should be removed
ok 1 - test help
ok 25 - in-tree .gitattributes (3)
ok 117 - parse approxidate (Jun 6, 5AM)
ok 2 - OPT_BOOL() #1
ok 46 - check-ignore can handle -h
ok 3 - OPT_BOOL() #2
ok 63 - -z without --stdin
ok 47 - check-mailmap can handle -h
ok 118 - parse approxidate (5AM Jun 6)
ok 4 - OPT_BOOL() #3
ok 1 - setup an embedded bare repo, secondary worktree and submodule
ok 42 - re-init to move gitdir
ok 9 - check prohibited UTF-32 BOM
ok 5 - OPT_BOOL() #4
ok 48 - check-ref-format can handle -h
ok 6 - OPT_BOOL() #5
ok 7 - OPT_BOOL() is idempotent #1
ok 119 - parse approxidate (6AM, June 7, 2009)
ok 8 - OPT_BOOL() is idempotent #2
ok 26 - in-tree .gitattributes (4)
ok 49 - checkout can handle -h
ok 9 - OPT_BOOL() negation #1
ok 64 - -z without --stdin with -q
ok 120 - parse approxidate (2008-12-01)
ok 2 - safe.bareRepository unset
ok 10 - OPT_BOOL() negation #2
ok 10 - filtering large input to small output should use little memory
ok 50 - checkout--worker can handle -h
ok 121 - parse approxidate (2009-12-01)
ok 11 - OPT_BOOL() no negation #1
ok 65 - -z without --stdin with --quiet
ok 8 - text without newline at end should end with newline
ok 122 - human date 1251642000
ok 51 - checkout-index can handle -h
ok 66 - -z without --stdin with -v
ok 12 - OPT_BOOL() no negation #2
ok 123 - human date 1251228000
ok 3 - safe.bareRepository=all
ok 43 - re-init to move gitdir symlink
ok 10 - check required UTF-32 BOM
ok 52 - cherry can handle -h
ok 13 - OPT_BOOL() positivation
ok 124 - human date 1249932000
ok 14 - OPT_INT() negative
ok 67 - -z without --stdin with -v -n
ok 53 - cherry-pick can handle -h
ok 15 - OPT_MAGNITUDE() simple
ok 125 - human date 1238660000
ok 16 - local clone of unowned repo accepted in safe directory
ok 16 - OPT_MAGNITUDE() kilo
ok 17 - OPT_MAGNITUDE() mega
ok 126 - human date 1220210400
ok 54 - clean can handle -h
ok 68 - -z without --stdin with -v --non-matching
ok 4 - safe.bareRepository=explicit
ok 18 - OPT_MAGNITUDE() giga
ok 127 - human date 1214160000
ok 9 - subtest: a passing TODO test
ok 19 - OPT_MAGNITUDE() 3giga
ok 55 - clone can handle -h
ok 128 - human date 1196472000
ok 69 - -z without --stdin with --verbose
ok 20 - short options
ok 129 - human date 621660000
ok 56 - column can handle -h
# passed all 129 test(s)
1..129
ok 21 - long options
ok 70 - -z without --stdin with --verbose -n
*** t0041-usage.sh ***
ok 22 - abbreviate to something longer than SHA1 length
ok 57 - commit can handle -h
ok 27 - checkout with existing .gitattributes
ok 71 - -z without --stdin with --verbose --non-matching
ok 58 - commit-graph can handle -h
ok 5 - safe.bareRepository in the repository
ok 23 - using --source
ok 9 - text plus spaces without newline at end should end with newline
ok 59 - commit-tree can handle -h
ok 72 - -z without --stdin and superfluous arg
ok 23 - missing required value
ok 60 - config can handle -h
ok 24 - setup bare
ok 6 - safe.bareRepository on the command line
ok 11 - eol conversion for UTF-32 encoded files on checkout
ok 73 - -z without --stdin and superfluous arg with -q
ok 24 - superfluous value provided: boolean
ok 61 - count-objects can handle -h
ok 44 - re-init to move gitdir with linked worktrees (absolute)
ok 28 - checkout when deleting .gitattributes
ok 74 - -z without --stdin and superfluous arg with --quiet
ok 62 - credential can handle -h
ok 29 - invalid .gitattributes (must not crash)
ok 10 - text plus spaces without newline at end should not show spaces
ok 7 - safe.bareRepository in included file
ok 75 - -z without --stdin and superfluous arg with -v
ok 63 - credential-cache can handle -h
ok 25 - superfluous value provided: boolean, abbreviated
ok 8 - no trace when GIT_DIR is explicitly provided
ok 17 - checked paths are normalized
ok 64 - credential-cache--daemon can handle -h
ok 26 - superfluous value provided: cmdmode
ok 76 - -z without --stdin and superfluous arg with -v -n
ok 12 - check unsupported encodings
ok 25 - bare repository: check that .gitattribute is ignored
ok 27 - intermingled arguments
ok 65 - credential-store can handle -h
ok 9 - no trace when "bare repository" is .git
ok 77 - -z without --stdin and superfluous arg with -v --non-matching
ok 66 - describe can handle -h
ok 28 - unambiguously abbreviated option
ok 26 - --attr-source is bad
ok 29 - unambiguously abbreviated option with "="
ok 10 - no trace when "bare repository" is a subdir of .git
ok 78 - -z without --stdin and superfluous arg with --verbose
ok 11 - text plus spaces without newline should show the correct lines
ok 67 - diagnose can handle -h
ok 30 - ambiguously abbreviated option
ok 31 - non ambiguous option (after two options it abbreviates)
ok 30 - setting up for new autocrlf tests
ok 11 - no trace in $GIT_DIR of secondary worktree
ok 68 - diff can handle -h
ok 79 - -z without --stdin and superfluous arg with --verbose -n
ok 31 - report no change after setting autocrlf
ok 12 - no trace in $GIT_DIR of a submodule
ok 69 - diff-files can handle -h
ok 27 - attr.tree when HEAD is unborn
ok 80 - -z without --stdin and superfluous arg with --verbose --non-matching
# passed all 12 test(s)
1..12
ok 32 - Alias options do not contribute to abbreviation
ok 70 - diff-index can handle -h
ok 32 - files are clean after checkout
ok 33 - detect possible typos
ok 13 - error if encoding round trip is not the same during refresh
ok 45 - re-init to move gitdir within linked worktree (absolute)
ok 33 - LF only file gets CRLF with autocrlf
ok 12 - text plus spaces at end should not show spaces
ok 71 - diff-tree can handle -h
ok 34 - Mixed file is still mixed with autocrlf
*** t0050-filesystem.sh ***
ok 81 - needs work tree
ok 34 - detect possible typos
ok 35 - CRLF only file has CRLF with autocrlf
ok 28 - bad attr source defaults to reading .gitattributes file
ok 72 - difftool can handle -h
ok 35 - OPT_CALLBACK() and OPT_BIT() work
ok 73 - fast-export can handle -h
ok 36 - OPT_CALLBACK() and callback errors work
ok 82 - needs work tree with -q
ok 10 - subtest: 2 TODO tests, one passin
ok 74 - fast-import can handle -h
ok 37 - OPT_BIT() and OPT_SET_INT() work
ok 11 - filter that does not read is fine
ok 38 - OPT_NEGBIT() and OPT_SET_INT() work
ok 83 - needs work tree with --quiet
ok 75 - fetch can handle -h
ok 39 - OPT_BIT() works
ok 12 # skip filter large file (missing EXPENSIVE)
ok 40 - OPT_NEGBIT() works
ok 13 - text plus spaces at end should be cleaned and newline must remain
ok 1 - setup 
ok 36 - New CRLF file gets LF in repo
ok 18 - checked leading paths are normalized
# passed all 36 test(s)
1..36
ok 76 - fetch-pack can handle -h
ok 41 - OPT_CMDMODE() works
ok 84 - needs work tree with -v
ok 2 - tag --contains <existent_tag>
ok 77 - fmt-merge-msg can handle -h
*** t0051-windows-named-pipe.sh ***
ok 42 - OPT_CMDMODE() detects incompatibility (1)
ok 85 - needs work tree with -v -n
ok 3 - tag --contains <inexistent_tag>
ok 14 - spaces with newline at end should be replaced with empty string
ok 14 - error if encoding garbage is already in Git
ok 78 - for-each-ref can handle -h
ok 43 - OPT_CMDMODE() detects incompatibility (2)
ok 79 - for-each-repo can handle -h
ok 4 - tag --no-contains <existent_tag>
ok 86 - needs work tree with -v --non-matching
ok 29 - bare repo no longer defaults to reading .gitattributes from HEAD
ok 13 - filter: clean empty file
ok 44 - OPT_CMDMODE() detects incompatibility (3)
ok 46 - re-init to move gitdir with linked worktrees (relative)
ok 80 - format-patch can handle -h
ok 5 - tag --no-contains <inexistent_tag>
ok 87 - needs work tree with --verbose
ok 2 - setup main
ok 15 - spaces without newline at end should not show spaces
ok 45 - OPT_CMDMODE() detects incompatibility (4)
ok 81 - fsck can handle -h
ok 6 - tag usage error
ok 46 - OPT_COUNTUP() with PARSE_OPT_NODASH works
ok 47 - OPT_NUMBER_CALLBACK() works
ok 88 - needs work tree with --verbose -n
ok 82 - fsck-objects can handle -h
ok 7 - branch --contains <existent_commit>
ok 48 - negation of OPT_NONEG flags is not ambiguous
ok 16 - spaces without newline at end should be replaced with empty string
ok 89 - needs work tree with --verbose --non-matching
ok 83 - fsmonitor--daemon can handle -h
ok 8 - branch --contains <inexistent_commit>
ok 49 - --list keeps list of strings
ok 14 - filter: smudge empty file
ok 50 - --no-list resets list
ok 9 - branch --no-contains <existent_commit>
ok 84 - gc can handle -h
ok 51 - multiple quiet levels
ok 90 - non-existent file at top-level not ignored
ok 52 - multiple verbose levels
ok 53 - --no-quiet sets --quiet to 0
ok 85 - get-tar-commit-id can handle -h
ok 10 - branch --no-contains <inexistent_commit>
ok 54 - --no-quiet resets multiple -q to 0
ok 91 - non-existent file at top-level not ignored with -q
ok 55 - --no-verbose sets verbose to 0
ok 86 - grep can handle -h
ok 56 - --no-verbose resets multiple verbose to 0
ok 11 - branch usage error
ok 17 - consecutive text lines should be unchanged
ok 19 - configured paths are normalized
ok 92 - non-existent file at top-level not ignored with --quiet
ok 57 - GIT_TEST_DISALLOW_ABBREVIATED_OPTIONS works
ok 87 - hash-object can handle -h
ok 12 - for-each-ref --contains <existent_object>
ok 58 - --end-of-options treats remainder as args
ok 18 - strip comments, too
ok 93 - non-existent file at top-level not ignored with -v
ok 47 - re-init to move gitdir within linked worktree (relative)
ok 48 # skip .git hidden (missing MINGW)
ok 88 - help can handle -h
ok 59 - KEEP_DASHDASH works
ok 49 # skip bare git dir not hidden (missing MINGW)
ok 13 - for-each-ref --contains <inexistent_object>
ok 15 - check roundtrip encoding
ok 94 - non-existent file at top-level not ignored with -v -n
ok 19 - strip comments with changed comment char
ok 15 - disable filter with empty override
ok 60 - KEEP_ARGV0 works
ok 89 - hook can handle -h
ok 14 - for-each-ref --no-contains <existent_object>
ok 95 - non-existent file at top-level not ignored with -v --non-matching
ok 20 - strip comments with changed comment string
ok 61 - STOP_AT_NON_OPTION works
ok 90 - index-pack can handle -h
ok 30 - precedence of --attr-source, GIT_ATTR_SOURCE, then attr.tree
ok 21 - newline as commentchar is forbidden
ok 15 - for-each-ref --no-contains <inexistent_object>
ok 96 - non-existent file at top-level not ignored with --verbose
ok 1 - detection of case insensitive filesystem during repo init
ok 62 - KEEP_UNKNOWN_OPT works
ok 91 - init can handle -h
ok 2 - detection of filesystem w/o symlink support during repo init
ok 22 - empty commentchar is forbidden
ok 63 - NO_INTERNAL_HELP works for -h
ok 16 - for-each-ref usage error
ok 97 - non-existent file at top-level not ignored with --verbose -n
ok 92 - init-db can handle -h
# passed all 16 test(s)
1..16
ok 50 - remote init from does not use config from cwd
ok 11 - subtest: mixed results: pass, failure and a TODO test
ok 23 - -c with single line
ok 64 - NO_INTERNAL_HELP works for --help
ok 31 - diff without repository with attr source
ok 98 - non-existent file at top-level not ignored with --verbose --non-matching
*** t0052-simple-ipc.sh ***
ok 93 - interpret-trailers can handle -h
ok 16 - Commit UTF-8, checkout UTF-8
ok 24 - -c with single line followed by empty line
ok 65 - NO_INTERNAL_HELP works for --help-all
ok 25 - -c with newline only
ok 94 - log can handle -h
1..0 # SKIP skipping Windows-specific tests
ok 99 - non-existent file at top-level not ignored with --no-index
ok 66 - KEEP_UNKNOWN_OPT | NO_INTERNAL_HELP works
*** t0055-beyond-symlinks.sh ***
ok 26 - --comment-lines with single line
ok 95 - ls-files can handle -h
ok 67 - subcommand - no subcommand shows error and usage
ok 100 - non-existent file at top-level not ignored with --no-index -q
ok 27 - -c with changed comment char
ok 96 - ls-remote can handle -h
ok 101 - non-existent file at top-level not ignored with --no-index --quiet
ok 97 - ls-tree can handle -h
ok 68 - subcommand - subcommand after -- shows error and usage
ok 17 - Commit UTF-8, checkout UTF-16LE
ok 69 - subcommand - subcommand after --end-of-options shows error and usage
ok 102 - non-existent file at top-level not ignored with --no-index -v
ok 98 - mailinfo can handle -h
ok 28 - -c with comment char defined in .git/config
ok 70 - subcommand - unknown subcommand shows error and usage
ok 99 - mailsplit can handle -h
ok 103 - non-existent file at top-level not ignored with --no-index -v -n
ok 20 - configured leading paths are normalized
ok 29 - -c outside git repository
ok 71 - subcommand - subcommands cannot be abbreviated
ok 100 - maintenance can handle -h
ok 104 - non-existent file at top-level not ignored with --no-index -v --non-matching
ok 72 - subcommand - no negated subcommands
ok 30 - avoid SP-HT sequence in commented line
ok 3 - setup case tests
ok 101 - merge can handle -h
# passed all 30 test(s)
1..30
ok 51 - re-init from a linked worktree
ok 18 - Commit UTF-8, checkout UTF-16BE
ok 73 - subcommand - simple
ok 105 - non-existent file at top-level not ignored with --no-index --verbose
*** t0056-git-C.sh ***
ok 102 - merge-base can handle -h
ok 74 - subcommand - stop parsing at the first subcommand
ok 103 - merge-file can handle -h
ok 106 - non-existent file at top-level not ignored with --no-index --verbose -n
ok 4 - rename (case change)
ok 75 - subcommand - KEEP_ARGV0
ok 104 - merge-index can handle -h
ok 107 - non-existent file at top-level not ignored with --no-index --verbose --non-matching
ok 76 - subcommand - SUBCOMMAND_OPTIONAL + subcommand not given
ok 105 - merge-ours can handle -h
ok 77 - subcommand - SUBCOMMAND_OPTIONAL + given subcommand
ok 19 - Commit UTF-8, checkout UTF-16LE-BOM
ok 52 - init honors GIT_DEFAULT_HASH
ok 106 - merge-recursive can handle -h
ok 108 - non-existent file at top-level ignored
ok 78 - subcommand - SUBCOMMAND_OPTIONAL + subcommand not given + unknown dashless args
ok 5 - merge (case change)
ok 6 # skip add directory (with different case) (missing CASE_INSENSITIVE_FS)
ok 7 # skip add (with different case) (missing CASE_INSENSITIVE_FS)
ok 79 - subcommand - SUBCOMMAND_OPTIONAL + subcommand not given + unknown option
ok 107 - merge-recursive-ours can handle -h
ok 109 - non-existent file at top-level ignored with -q
ok 80 - subcommand - SUBCOMMAND_OPTIONAL | KEEP_UNKNOWN_OPT + subcommand not given + unknown option
ok 108 - merge-recursive-theirs can handle -h
ok 81 - subcommand - SUBCOMMAND_OPTIONAL | KEEP_UNKNOWN_OPT + subcommand ignored after unknown option
ok 110 - non-existent file at top-level ignored with --quiet
ok 21 - safe.directory set to a dot
ok 109 - merge-subtree can handle -h
ok 20 - Commit UTF-8, checkout UTF-16BE-BOM
ok 82 - subcommand - SUBCOMMAND_OPTIONAL | KEEP_UNKNOWN_OPT + command and subcommand options cannot be mixed
ok 53 - init honors --object-format
ok 111 - non-existent file at top-level ignored with -v
ok 110 - merge-tree can handle -h
ok 83 - subcommand - SUBCOMMAND_OPTIONAL | KEEP_UNKNOWN_OPT | KEEP_ARGV0
ok 84 - subcommand - SUBCOMMAND_OPTIONAL | KEEP_UNKNOWN_OPT | KEEP_DASHDASH
ok 111 - mktag can handle -h
ok 112 - non-existent file at top-level ignored with -v -n
ok 1 - start simple command server
ok 85 - subcommand - completion helper
ok 112 - mktree can handle -h
ok 86 - subcommands are incompatible with STOP_AT_NON_OPTION
ok 2 - simple command server
ok 12 - subtest: mixed results: a mixture of all possible results
ok 113 - multi-pack-index can handle -h
ok 113 - non-existent file at top-level ignored with -v --non-matching
ok 21 - Commit UTF-8, checkout UTF-32LE
ok 87 - subcommands are incompatible with KEEP_UNKNOWN_OPT unless in combination with SUBCOMMAND_OPTIONAL
ok 3 - servers cannot share the same path
ok 1 - setup
ok 88 - subcommands are incompatible with KEEP_DASHDASH unless in combination with SUBCOMMAND_OPTIONAL
ok 114 - mv can handle -h
ok 8 - setup unicode normalization tests
ok 114 - non-existent file at top-level ignored with --verbose
ok 89 - negative magnitude
ok 32 - bare repository: with --source
ok 90 - magnitude with units but no numbers
ok 115 - name-rev can handle -h
ok 2 - update-index --add beyond symlinks
ok 115 - non-existent file at top-level ignored with --verbose -n
# passed all 90 test(s)
1..90
ok 33 - bare repository: check that --cached honors index
ok 54 - init honors init.defaultObjectFormat
*** t0060-path-utils.sh ***
ok 9 - rename (silent unicode normalization)
ok 116 - notes can handle -h
ok 116 - non-existent file at top-level ignored with --verbose --non-matching
ok 3 - add beyond symlinks
ok 117 - pack-objects can handle -h
# passed all 3 test(s)
1..3
ok 22 - Commit UTF-8, checkout UTF-32BE
# passed all 22 test(s)
1..22
ok 22 - safe.directory set to asterisk
*** t0061-run-command.sh ***
# passed all 22 test(s)
1..22
ok 118 - pack-redundant can handle -h
ok 117 - non-existent file at top-level ignored with --no-index
ok 10 - merge (silent unicode normalization)
ok 11 # skip checkout with no pathspec and a case insensitive fs (missing CASE_INSENSITIVE_FS)
*** t0062-revision-walking.sh ***
*** t0063-string-list.sh ***
# passed all 11 test(s)
1..11
ok 55 - init warns about invalid init.defaultObjectFormat
ok 119 - pack-refs can handle -h
ok 118 - non-existent file at top-level ignored with --no-index -q
ok 1 - "git -C <path>" runs git from the directory <path>
ok 120 - patch-id can handle -h
ok 34 - bare repository: test info/attributes
*** t0066-dir-iterator.sh ***
ok 4 - big response
ok 56 - --object-format overrides GIT_DEFAULT_HASH
ok 2 - "git -C <path>" with an empty <path> is a no-op
ok 121 - pickaxe can handle -h
ok 35 - binary macro expanded by -a
ok 119 - non-existent file at top-level ignored with --no-index --quiet
ok 36 - query binary macro directly
ok 122 - prune can handle -h
ok 120 - non-existent file at top-level ignored with --no-index -v
ok 123 - prune-packed can handle -h
ok 37 - set up symlink tests
ok 57 - GIT_DEFAULT_HASH overrides init.defaultObjectFormat
ok 3 - Multiple -C options: "-C dir1 -C dir2" is equivalent to "-C dir1/dir2"
ok 124 - pull can handle -h
ok 121 - non-existent file at top-level ignored with --no-index -v -n
ok 125 - push can handle -h
ok 122 - non-existent file at top-level ignored with --no-index -v --non-matching
ok 38 - symlinks respected in core.attributesFile
ok 16 - diff does not reuse worktree files that need cleaning
ok 126 - range-diff can handle -h
ok 123 - non-existent file at top-level ignored with --no-index --verbose
ok 39 - symlinks respected in info/attributes
ok 127 - read-tree can handle -h
ok 58 - reinit repository with GIT_DEFAULT_HASH=sha1 does not change format
ok 124 - non-existent file at top-level ignored with --no-index --verbose -n
ok 128 - rebase can handle -h
ok 4 - Effect on --git-dir option: "-C c --git-dir=a.git" is equivalent to "--git-dir c/a.git"
ok 129 - receive-pack can handle -h
ok 125 - non-existent file at top-level ignored with --no-index --verbose --non-matching
ok 40 - symlinks not respected in-tree
ok 130 - reflog can handle -h
ok 5 - Order should not matter: "--git-dir=a.git -C c" is equivalent to "-C c --git-dir=a.git"
ok 59 - reinit repository with GIT_DEFAULT_HASH=sha256 does not change format
ok 41 - large attributes line ignored in tree
ok 13 - subtest: --verbose option
ok 131 - refs can handle -h
ok 126 - existing untracked file at top-level not ignored
ok 132 - remote can handle -h
ok 42 - large attributes line ignores trailing content in tree
ok 6 - Effect on --work-tree option: "-C c/a.git --work-tree=../a"  is equivalent to "--work-tree=c/a --git-dir=c/a.git"
ok 127 - existing untracked file at top-level not ignored with -q
ok 1 - basename
ok 43 # skip large attributes file ignored in tree (missing EXPENSIVE)
ok 133 - remote-ext can handle -h
ok 128 - existing untracked file at top-level not ignored with --quiet
ok 60 - extensions.objectFormat is not allowed with repo version 0
ok 2 - dirname
ok 61 - init rejects attempts to initialize with different hash
ok 134 - remote-fd can handle -h
ok 7 - Order should not matter: "--work-tree=../a -C c/a.git" is equivalent to "-C c/a.git --work-tree=../a"
ok 129 - existing untracked file at top-level not ignored with -v
ok 3 - normalize path:  => 
ok 1 # skip subprocess inherits only std handles (missing MINGW)
ok 135 - repack can handle -h
ok 4 - normalize path: . => 
ok 2 - start_command reports ENOENT (slash)
ok 130 - existing untracked file at top-level not ignored with -v -n
ok 44 - large attributes line ignored in index
ok 8 - Effect on --git-dir and --work-tree options - "-C c --git-dir=a.git --work-tree=a" is equivalent to "--git-dir=c/a.git --work-tree=c/a"
ok 136 - replace can handle -h
ok 3 - start_command reports ENOENT (no slash)
ok 5 - normalize path: ./ => 
ok 1 - split foo:bar:baz at :, max -1
ok 131 - existing untracked file at top-level not ignored with -v --non-matching
ok 137 - replay can handle -h
ok 1 - setup
ok 4 - run_command can run a command
ok 6 - normalize path: ./. => 
ok 62 - extensions.refStorage is not allowed with repo version 0
ok 9 - Order should not matter: "-C c --git-dir=a.git --work-tree=a" is equivalent to "--git-dir=a.git -C c --work-tree=a"
ok 132 - existing untracked file at top-level not ignored with --verbose
ok 138 - rerere can handle -h
ok 2 - split foo:bar:baz at :, max 0
ok 45 - large attributes line ignores trailing content in index
ok 2 - dir-iterator should iterate through all files
ok 46 # skip large attributes file ignored in index (missing EXPENSIVE)
ok 133 - existing untracked file at top-level not ignored with --verbose -n
ok 7 - normalize path: ./.. => ++failed++
ok 47 # skip large attributes blob ignored (missing EXPENSIVE)
ok 139 - reset can handle -h
ok 3 - dir-iterator should list files in the correct order
ok 134 - existing untracked file at top-level not ignored with --verbose --non-matching
ok 3 - split foo:bar:baz at :, max 1
ok 1 - setup
ok 8 - normalize path: ../. => ++failed++
ok 5 - run_command is restricted to PATH
ok 10 - Order should not matter: "-C c --git-dir=a.git --work-tree=a" is equivalent to "--git-dir=a.git --work-tree=a -C c"
ok 140 - restore can handle -h
ok 4 - begin should fail upon inexistent paths
ok 2 - revision walking can be done twice
ok 5 - begin should fail upon non directory paths
ok 11 - Relative followed by fullpath: "-C ./here -C /there" is equivalent to "-C /there"
ok 9 - normalize path: ./../.// => ++failed++
ok 141 - rev-list can handle -h
# passed all 2 test(s)
1..2
ok 48 - builtin object mode attributes work (dir and regular paths)
ok 135 - existing untracked file at top-level not ignored with --no-index
# passed all 11 test(s)
1..11
ok 4 - split foo:bar:baz at :, max 2
ok 6 - run_command can run a script without a #! line
*** t0067-parse_pathspec_file.sh ***
ok 5 - chunk response
ok 10 - normalize path: dir/.. => 
ok 142 - rev-parse can handle -h
*** t0068-for-each-repo.sh ***
ok 49 - builtin object mode attributes work (executable)
ok 136 - existing untracked file at top-level not ignored with --no-index -q
ok 143 - revert can handle -h
ok 11 - normalize path: dir/sub/../.. => 
ok 5 - split foo:bar: at :, max -1
ok 137 - existing untracked file at top-level not ignored with --no-index --quiet
ok 50 - builtin object mode attributes work (symlinks)
ok 63 - extensions.refStorage with files backend
ok 144 - rm can handle -h
ok 7 - run_command does not try to execute a directory
ok 12 - normalize path: dir/sub/../../.. => ++failed++
ok 6 - advance should not fail on errors by default
ok 6 - split  at :, max -1
ok 145 - send-pack can handle -h
ok 138 - existing untracked file at top-level not ignored with --no-index -v
ok 13 - normalize path: dir => dir
ok 139 - existing untracked file at top-level not ignored with --no-index -v -n
ok 146 - shortlog can handle -h
ok 7 - split : at :, max -1
ok 147 - show can handle -h
ok 14 - normalize path: dir// => dir/
ok 7 - advance should fail on errors, w/ pedantic flag
ok 8 - run_command passes over non-executable file
ok 140 - existing untracked file at top-level not ignored with --no-index -v --non-matching
ok 64 - extensions.refStorage with unknown backend
ok 8 - split (in place) foo:;:bar:;:baz:;: at :;, max -1
ok 148 - show-branch can handle -h
ok 51 - native object mode attributes work with --cached
ok 141 - existing untracked file at top-level not ignored with --no-index --verbose
ok 9 - split (in place) foo:;:bar:;:baz at :;, max 0
ok 15 - normalize path: ./dir => dir
ok 9 - run_command reports EACCES
ok 8 - setup dirs with symlinks
ok 65 - init with GIT_DEFAULT_REF_FORMAT=garbage
ok 10 - split (in place) foo:;:bar:;:baz at :;, max 1
ok 149 - show-index can handle -h
ok 142 - existing untracked file at top-level not ignored with --no-index --verbose -n
ok 16 - normalize path: dir/. => dir/
ok 11 - split (in place) foo:;:bar:;:baz at :;, max 2
ok 150 - show-ref can handle -h
ok 9 - dir-iterator should not follow symlinks by default
ok 17 - normalize path: dir///./ => dir/
ok 3 - commit files empty attr
ok 143 - existing untracked file at top-level not ignored with --no-index --verbose --non-matching
ok 12 - split (in place) foo:;:bar:;: at :;, max -1
ok 151 - sparse-checkout can handle -h
ok 14 - subtest: --verbose-only option
ok 10 - dir-iterator does not resolve top-level symlinks
ok 18 - normalize path: dir//sub/.. => dir/
# passed all 10 test(s)
1..10
ok 152 - stage can handle -h
ok 144 - existing tracked file at top-level not ignored
ok 66 - init warns about invalid init.defaultRefFormat
*** t0070-fundamental.sh ***
ok 19 - normalize path: dir/sub/../ => dir/
ok 153 - stash can handle -h
ok 145 - existing tracked file at top-level not ignored with -q
ok 154 - status can handle -h
ok 13 - test filter_string_list
ok 10 - unreadable directory in PATH
ok 20 - normalize path: dir/sub/../. => dir/
ok 146 - existing tracked file at top-level not ignored with --quiet
ok 155 - stripspace can handle -h
ok 11 - run_command runs in parallel with more jobs available than tasks
ok 21 - normalize path: dir/s1/../s2/ => dir/s2/
ok 147 - existing tracked file at top-level not ignored with -v
ok 52 - check object mode attributes work for submodules
ok 67 - init with GIT_DEFAULT_REF_FORMAT=files
ok 156 - submodule--helper can handle -h
ok 22 - normalize path: d1/s1///s2/..//../s3/ => d1/s3/
ok 12 - run_command runs ungrouped in parallel with more jobs available than tasks
ok 148 - existing tracked file at top-level not ignored with -v -n
ok 53 - we do not allow user defined builtin_* attributes
ok 157 - switch can handle -h
ok 17 - required process filter should filter data
ok 23 - normalize path: d1/s1//../s2/../../d2 => d2
ok 13 - run_command runs in parallel with as many jobs as tasks
ok 149 - existing tracked file at top-level not ignored with -v --non-matching
ok 68 - init with --ref-format=files
ok 54 - user defined builtin_objectmode values are ignored
ok 158 - symbolic-ref can handle -h
ok 14 - test remove_duplicates
# passed all 54 test(s)
1..54
ok 24 - normalize path: d1/.../d2 => d1/.../d2
# passed all 14 test(s)
1..14
ok 150 - existing tracked file at top-level not ignored with --verbose
ok 159 - tag can handle -h
ok 14 - run_command runs ungrouped in parallel with as many jobs as tasks
*** t0071-sort.sh ***
ok 1 - one item from stdin
ok 25 - normalize path: d1/..././../d2 => d1/d2
*** t0080-unit-test-output.sh ***
ok 151 - existing tracked file at top-level not ignored with --verbose -n
ok 160 - unpack-file can handle -h
ok 2 - one item from file
ok 15 - run_command runs in parallel with more tasks than jobs available
ok 26 - normalize path: / => /
ok 152 - existing tracked file at top-level not ignored with --verbose --non-matching
ok 161 - unpack-objects can handle -h
ok 69 - init with init.defaultRefFormat=files
ok 3 - NUL delimiters
ok 162 - update-index can handle -h
ok 16 - run_command runs ungrouped in parallel with more tasks than jobs available
ok 27 - normalize path: // => /
ok 4 - LF delimiters
ok 163 - update-ref can handle -h
ok 153 - existing tracked file at top-level shown as ignored with --no-index
ok 5 - no trailing delimiter
ok 17 - run_command is asked to abort gracefully
ok 70 - --ref-format=files overrides GIT_DEFAULT_REF_FORMAT
ok 28 - normalize path: /// => /
ok 164 - update-server-info can handle -h
ok 6 - CRLF delimiters
ok 29 - normalize path: /. => /
ok 18 - run_command is asked to abort gracefully (ungroup)
ok 154 - existing tracked file at top-level shown as ignored with --no-index -q
ok 165 - upload-archive can handle -h
ok 19 - run_command outputs 
ok 7 - quotes
ok 166 - upload-archive--writer can handle -h
ok 30 - normalize path: /./ => /
ok 155 - existing tracked file at top-level shown as ignored with --no-index --quiet
ok 20 - run_command outputs (ungroup) 
ok 167 - upload-pack can handle -h
ok 8 - --pathspec-file-nul takes quotes literally
# passed all 8 test(s)
1..8
ok 31 - normalize path: /./.. => ++failed++
ok 71 - reinit repository with GIT_DEFAULT_REF_FORMAT=files does not change format
ok 156 - existing tracked file at top-level shown as ignored with --no-index -v
ok 168 - var can handle -h
*** t0081-find-pack.sh ***
ok 32 - normalize path: /../. => ++failed++
ok 169 - verify-commit can handle -h
ok 157 - existing tracked file at top-level shown as ignored with --no-index -v -n
ok 1 - mktemp to nonexistent directory prints filename
ok 170 - verify-pack can handle -h
ok 158 - existing tracked file at top-level shown as ignored with --no-index -v --non-matching
ok 33 - normalize path: /./../.// => ++failed++
ok 15 - subtest: skip one with GIT_SKIP_TESTS
ok 171 - verify-tag can handle -h
ok 159 - existing tracked file at top-level shown as ignored with --no-index --verbose
ok 34 - normalize path: /dir/.. => /
ok 72 - init with GIT_DEFAULT_REF_FORMAT=reftable
ok 172 - version can handle -h
ok 160 - existing tracked file at top-level shown as ignored with --no-index --verbose -n
ok 35 - normalize path: /dir/sub/../.. => /
ok 173 - whatchanged can handle -h
ok 2 - mktemp to unwritable directory prints filename
ok 161 - existing tracked file at top-level shown as ignored with --no-index --verbose --non-matching
ok 73 - init with --ref-format=reftable
ok 36 - normalize path: /dir/sub/../../.. => ++failed++
ok 174 - worktree can handle -h
ok 175 - write-tree can handle -h
ok 3 - git_mkstemps_mode does not fail if fd 0 is not open
# passed all 175 test(s)
1..175
ok 37 - normalize path: /dir => /dir
ok 4 - check for a bug in the regex routines
*** t0090-cache-tree.sh ***
ok 162 - existing untracked file at top-level ignored
ok 21 - GIT_TRACE with environment variables
ok 22 # skip verify curlies are quoted properly (missing MINGW)
ok 38 - normalize path: /dir// => /dir/
ok 23 # skip can spawn .bat with argv[0] containing spaces (missing MINGW)
ok 5 - incomplete sideband messages are reassembled
# passed all 23 test(s)
1..23
*** t0091-bugreport.sh ***
ok 163 - existing untracked file at top-level ignored with -q
ok 39 - normalize path: /./dir => /dir
ok 6 - eof on sideband message is reported
ok 7 - missing sideband designator is reported
ok 40 - normalize path: /dir/. => /dir/
ok 74 - init with init.defaultRefFormat=reftable
ok 164 - existing untracked file at top-level ignored with --quiet
ok 41 - normalize path: /dir///./ => /dir/
ok 8 - unpack-sideband: --no-chomp-newline
ok 165 - existing untracked file at top-level ignored with -v
ok 1 - run based on configured value
ok 1 - TAP output from unit tests
ok 42 - normalize path: /dir//sub/.. => /dir/
# passed all 1 test(s)
ok 2 - do nothing on empty config
1..1
ok 75 - --ref-format=reftable overrides GIT_DEFAULT_REF_FORMAT
ok 166 - existing untracked file at top-level ignored with -v -n
*** t0092-diagnose.sh ***
ok 9 - unpack-sideband: --chomp-newline (default)
ok 43 - normalize path: /dir/sub/../ => /dir/
ok 167 - existing untracked file at top-level ignored with -v --non-matching
ok 3 - error on bad config keys
ok 44 - normalize path: //dir/sub/../. => /dir/
ok 10 - unpack-sideband: packet_reader_read() consumes sideband, no chomp payload
ok 4 - error on NULL value for config keys
ok 168 - existing untracked file at top-level ignored with --verbose
ok 45 - normalize path: /dir/s1/../s2/ => /dir/s2/
ok 169 - existing untracked file at top-level ignored with --verbose -n
ok 76 - reinit repository with GIT_DEFAULT_REF_FORMAT=reftable does not change format
ok 11 - unpack-sideband: packet_reader_read() consumes sideband, chomp payload
ok 46 - normalize path: /d1/s1///s2/..//../s3/ => /d1/s3/
# passed all 11 test(s)
1..11
*** t0095-bloom.sh ***
ok 170 - existing untracked file at top-level ignored with --verbose --non-matching
ok 47 - normalize path: /d1/s1//../s2/../../d2 => /d2
ok 5 - --keep-going
ok 48 - normalize path: /d1/.../d2 => /d1/.../d2
ok 77 - --ref-format= overrides GIT_DEFAULT_REF_FORMAT
# passed all 5 test(s)
1..5
ok 171 - existing untracked file at top-level ignored with --no-index
ok 49 - normalize path: /d1/..././../d2 => /d1/d2
ok 50 - longest ancestor: / / => -1
*** t0100-previous.sh ***
ok 172 - existing untracked file at top-level ignored with --no-index -q
ok 51 - longest ancestor: /foo / => 0
ok 52 - longest ancestor: /foo /fo => -1
ok 16 - subtest: skip several with GIT_SKIP_TESTS
ok 173 - existing untracked file at top-level ignored with --no-index --quiet
ok 78 - GIT_DEFAULT_REF_FORMAT= overrides init.defaultRefFormat
ok 53 - longest ancestor: /foo /foo => -1
ok 54 - longest ancestor: /foo /bar => -1
ok 174 - existing untracked file at top-level ignored with --no-index -v
ok 55 - longest ancestor: /foo /foo/bar => -1
ok 1 - create a report
ok 175 - existing untracked file at top-level ignored with --no-index -v -n
ok 56 - longest ancestor: /foo /foo:/bar => -1
ok 2 - report contains wanted template (before first section)
ok 57 - longest ancestor: /foo /:/foo:/bar => 0
ok 79 - re-init with same format (files)
ok 176 - existing untracked file at top-level ignored with --no-index -v --non-matching
ok 58 - longest ancestor: /foo /foo:/:/bar => 0
ok 3 - sanity check "System Info" section
ok 2 - Racy git trial #0 part B
ok 59 - longest ancestor: /foo /:/bar:/foo => 0
ok 177 - existing untracked file at top-level ignored with --no-index --verbose
ok 4 - dies if file with same name as report already exists
ok 60 - longest ancestor: /foo/bar / => 0
ok 3 - Racy git trial #1 part A
ok 5 - --output-directory puts the report in the provided dir
ok 178 - existing untracked file at top-level ignored with --no-index --verbose -n
ok 61 - longest ancestor: /foo/bar /fo => -1
ok 18 - required process filter should filter data for various subcommands
ok 80 - re-init with different format fails (files -> reftable)
ok 6 - incorrect arguments abort with usage
ok 1 - setup
ok 62 - longest ancestor: /foo/bar /foo => 4
ok 1 - initial commit has cache-tree
ok 179 - existing untracked file at top-level ignored with --no-index --verbose --non-matching
ok 63 - longest ancestor: /foo/bar /foo/ba => -1
ok 7 - incorrect positional arguments abort with usage and hint
ok 64 - longest ancestor: /foo/bar /:/fo => 0
ok 65 - longest ancestor: /foo/bar /foo:/foo/ba => 4
ok 8 - runs outside of a git dir
ok 180 - mix of file types at top-level
ok 66 - longest ancestor: /foo/bar /bar => -1
ok 81 - re-init with same format (reftable)
ok 9 - can create leading directories outside of a git dir
ok 67 - longest ancestor: /foo/bar /fo => -1
ok 181 - mix of file types at top-level with -v
ok 68 - longest ancestor: /foo/bar /foo:/bar => 4
ok 2 - read-tree HEAD establishes cache-tree
ok 1 - creates diagnostics zip archive
ok 69 - longest ancestor: /foo/bar /:/foo:/bar => 4
ok 182 - mix of file types at top-level with -v -n
ok 70 - longest ancestor: /foo/bar /foo:/:/bar => 4
ok 1 - compute unseeded murmur3 hash for empty string
ok 2 - compute unseeded murmur3 hash for test string 1
ok 3 - git-add invalidates cache-tree
ok 71 - longest ancestor: /foo/bar /:/bar:/fo => 0
ok 82 - re-init with different format fails (reftable -> files)
ok 10 - indicates populated hooks
ok 3 - compute unseeded murmur3 hash for test string 2
ok 72 - longest ancestor: /foo/bar /:/bar => 0
ok 183 - mix of file types at top-level with -v --non-matching
ok 2 - repack everything into a single packfile
ok 4 - compute unseeded murmur3 hash for test string 3
ok 73 - longest ancestor: /foo/bar /foo => 4
ok 83 - init with --ref-format=garbage
ok 2 - counts loose objects
ok 84 # skip core.hidedotfiles = false (missing MINGW)
ok 74 - longest ancestor: /foo/bar /foo:/bar => 4
ok 85 # skip redirect std handles (missing MINGW)
ok 184 - mix of file types at top-level with --verbose
ok 5 - compute bloom key for empty string
ok 19 - required process filter takes precedence
ok 75 - longest ancestor: /foo/bar /bar => -1
ok 76 # skip longest ancestor: C:/Users/me C:/ => 2 (missing MINGW)
ok 6 - compute bloom key for whitespace
ok 77 # skip longest ancestor: D:/Users/me C:/ => -1 (missing MINGW)
ok 78 # skip longest ancestor: //server/share/my-directory //server/share/ => 14 (missing MINGW)
ok 185 - mix of file types at top-level with --verbose -n
ok 4 - git-add in subdir invalidates cache-tree
ok 7 - compute bloom key for test string 1
ok 3 - --mode=stats excludes .git dir contents
ok 79 - strip_path_suffix
ok 186 - mix of file types at top-level with --verbose --non-matching
ok 11 - --diagnose creates diagnostics zip archive
ok 80 - absolute path rejects the empty string
ok 8 - compute bloom key for test string 2
ok 81 # skip <drive-letter>:\\abc is an absolute path (missing MINGW)
ok 17 - subtest: sh pattern skipping with GIT_SKIP_TESTS
ok 82 - real path rejects the empty string
ok 86 - --initial-branch
ok 187 - mix of file types at top-level with --no-index
ok 12 - --diagnose=stats excludes .git dir contents
ok 83 - real path works on absolute paths 1
ok 1 - branch -d @{-1}
ok 4 - --mode=all includes .git dir contents
# passed all 4 test(s)
1..4
ok 3 - add more packfiles
*** t0101-at-syntax.sh ***
ok 87 - overridden default initial branch name (config)
ok 188 - mix of file types at top-level with --no-index -v
ok 84 - real path works on absolute paths 2
ok 9 - get bloom filters for commit with no changes
ok 13 - --diagnose=all includes .git dir contents
# passed all 13 test(s)
1..13
ok 18 - subtest: skip entire test suite with GIT_SKIP_TESTS
ok 189 - mix of file types at top-level with --no-index -v -n
ok 88 - advice on unconfigured init.defaultBranch
*** t0200-gettext-basic.sh ***
ok 190 - mix of file types at top-level with --no-index -v --non-matching
ok 20 - required process filter should be used only for "clean" operation only
ok 85 - real path removes extra leading slashes
ok 2 - branch -d @{-12} when there is not enough switches yet
ok 191 - mix of file types at top-level with --no-index --verbose
ok 89 - overridden default main branch name (env)
ok 86 - real path removes other extra slashes
ok 192 - mix of file types at top-level with --no-index --verbose -n
ok 10 - get bloom filter for commit with 10 changes
ok 90 - invalid default branch name
ok 11 # skip get bloom filter for commit with 513 changes (missing EXPENSIVE)
# passed all 11 test(s)
1..11
ok 193 - mix of file types at top-level with --no-index --verbose --non-matching
ok 5 - git-add in subdir does not invalidate sibling cache-tree
ok 4 - add more commits (as loose objects)
*** t0201-gettext-fallbacks.sh ***
# passed all 4 test(s)
1..4
ok 194 - non-existent file in subdir a/ not ignored
*** t0202-gettext-perl.sh ***
ok 87 - real path works on symlinks
ok 91 - branch -m with the initial branch
ok 195 - non-existent file in subdir a/ not ignored with -q
ok 6 - update-index invalidates cache-tree
ok 88 - prefix_path works with absolute paths to work tree symlinks
ok 196 - non-existent file in subdir a/ not ignored with --quiet
ok 89 - prefix_path works with only absolute path to work tree
ok 197 - non-existent file in subdir a/ not ignored with -v
ok 92 - init with includeIf.onbranch condition
ok 90 - prefix_path rejects absolute path to dir with same beginning as work tree
ok 198 - non-existent file in subdir a/ not ignored with -v -n
ok 199 - non-existent file in subdir a/ not ignored with -v --non-matching
ok 93 - init with includeIf.onbranch condition with existing directory
ok 7 - write-tree establishes cache-tree
ok 200 - non-existent file in subdir a/ not ignored with --verbose
ok 4 - commit files attr=auto
ok 91 - prefix_path works with absolute path to a symlink to work tree having  same beginning as work tree
ok 92 - relative path: /foo/a/b/c/ /foo/a/b/ => c/
ok 201 - non-existent file in subdir a/ not ignored with --verbose -n
ok 93 - relative path: /foo/a/b/c/ /foo/a/b => c/
ok 8 - test-tool scrap-cache-tree works
ok 202 - non-existent file in subdir a/ not ignored with --verbose --non-matching
ok 3 - merge @{-1}
ok 94 - re-init with includeIf.onbranch condition
ok 1 - sanity: $GIT_INTERNAL_GETTEXT_SH_SCHEME is set (to fallthrough)
ok 2 - sanity: $TEXTDOMAIN is git
ok 94 - relative path: /foo/a//b//c/ ///foo/a/b// => c/
ok 3 - xgettext sanity: Perl _() strings are not extracted
ok 203 - non-existent file in subdir a/ not ignored with --no-index
ok 95 - relative path: /foo/a/b /foo/a/b => ./
ok 4 - xgettext sanity: Comment extraction with --add-comments
ok 5 - xgettext sanity: Comment extraction with --add-comments stops at statements
ok 95 - re-init skips non-matching includeIf.onbranch
ok 204 - non-existent file in subdir a/ not ignored with --no-index -q
ok 6 # skip sanity: $TEXTDOMAINDIR exists without NO_GETTEXT=YesPlease (missing GETTEXT)
ok 19 - subtest: GIT_SKIP_TESTS does not skip unmatched suite
ok 7 # skip sanity: Icelandic locale was compiled (missing GETTEXT)
ok 96 - relative path: /foo/a/b/ /foo/a/b => ./
ok 1 - setup
ok 8 # skip sanity: gettext("") metadata is OK (missing GETTEXT_LOCALE)
ok 9 # skip sanity: gettext(unknown) is passed through (missing GETTEXT_LOCALE)
ok 10 # skip xgettext: C extraction of _() and N_() strings (missing GETTEXT_LOCALE)
ok 205 - non-existent file in subdir a/ not ignored with --no-index --quiet
ok 2 - @{0} shows current
ok 11 # skip xgettext: C extraction with %s (missing GETTEXT_LOCALE)
ok 97 - relative path: /foo/a /foo/a/b => ../
ok 12 # skip xgettext: Shell extraction (missing GETTEXT_LOCALE)
ok 13 # skip xgettext: Shell extraction with $variable (missing GETTEXT_LOCALE)
ok 14 # skip xgettext: Perl extraction (missing GETTEXT_LOCALE)
ok 206 - non-existent file in subdir a/ not ignored with --no-index -v
ok 3 - @{1} shows old
ok 15 # skip xgettext: Perl extraction with %s (missing GETTEXT_LOCALE)
ok 16 # skip sanity: Some gettext("") data for real locale (missing GETTEXT_LOCALE)
ok 98 - relative path: / /foo/a/b/ => ../../../
ok 4 - @{now} shows current
# passed all 16 test(s)
1..16
ok 96 - re-init reads matching includeIf.onbranch
ok 207 - non-existent file in subdir a/ not ignored with --no-index -v -n
# passed all 96 test(s)
1..96
ok 9 - second commit has cache-tree
*** t0203-gettext-setlocale-sanity.sh ***
ok 99 - relative path: /foo/a/c /foo/a/b/ => ../c
ok 5 - @{2001-09-17} (before the first commit) shows old
ok 208 - non-existent file in subdir a/ not ignored with --no-index -v --non-matching
ok 4 - merge @{-1}~1
ok 100 - relative path: /foo/a/c /foo/a/b => ../c
ok 1 - sanity: $GIT_INTERNAL_GETTEXT_SH_SCHEME is set (to fallthrough)
ok 2 - sanity: $GIT_INTERNAL_GETTEXT_TEST_FALLBACKS is set
ok 6 - silly approxidates work
ok 209 - non-existent file in subdir a/ not ignored with --no-index --verbose
ok 3 - sanity: $GIT_INTERNAL_GETTEXT_SH_SCHEME" is fallthrough
ok 7 - notice misspelled upstream
ok 4 - gettext: our gettext() fallback has pass-through semantics
ok 8 - complain about total nonsense
ok 101 - relative path: /foo/x/y /foo/a/b/ => ../../x/y
# passed all 8 test(s)
1..8
ok 210 - non-existent file in subdir a/ not ignored with --no-index --verbose -n
*** t0204-gettext-reencode-sanity.sh ***
ok 102 - relative path: /foo/a/b <empty> => /foo/a/b
ok 211 - non-existent file in subdir a/ not ignored with --no-index --verbose --non-matching
ok 103 - relative path: /foo/a/b <null> => /foo/a/b
ok 104 - relative path: foo/a/b/c/ foo/a/b/ => c/
ok 212 - non-existent file in subdir a/ ignored
ok 5 - eval_gettext: our eval_gettext() fallback has pass-through semantics
*** t0210-trace2-normal.sh ***
ok 105 - relative path: foo/a/b/c/ foo/a/b => c/
ok 5 - merge @{-100} before checking out that many branches yet
ok 213 - non-existent file in subdir a/ ignored with -q
ok 106 - relative path: foo/a/b//c foo/a//b => c
ok 6 - eval_gettext: our eval_gettext() fallback can interpolate variables
ok 214 - non-existent file in subdir a/ ignored with --quiet
ok 107 - relative path: foo/a/b/ foo/a/b/ => ./
ok 6 - log -g @{-1}
ok 7 - eval_gettext: our eval_gettext() fallback can interpolate variables with spaces
# passed all 6 test(s)
1..6
ok 108 - relative path: foo/a/b/ foo/a/b => ./
ok 215 - non-existent file in subdir a/ ignored with -v
*** t0211-trace2-perf.sh ***
ok 109 - relative path: foo/a foo/a/b => ../
ok 8 - eval_gettext: our eval_gettext() fallback can interpolate variables with spaces and quotes
ok 216 - non-existent file in subdir a/ ignored with -v -n
# passed all 8 test(s)
1..8
*** t0212-trace2-event.sh ***
ok 217 - non-existent file in subdir a/ ignored with -v --non-matching
ok 110 - relative path: foo/x/y foo/a/b => ../../x/y
ok 111 - relative path: foo/a/c foo/a/b => ../c
ok 218 - non-existent file in subdir a/ ignored with --verbose
ok 10 - commit --interactive gives cache-tree on partial commit
ok 112 - relative path: foo/a/b /foo/x/y => foo/a/b
ok 219 - non-existent file in subdir a/ ignored with --verbose -n
ok 113 - relative path: /foo/a/b foo/x/y => /foo/a/b
ok 220 - non-existent file in subdir a/ ignored with --verbose --non-matching
ok 114 # skip relative path: d:/a/b D:/a/c => ../b (missing MINGW)
ok 115 # skip relative path: C:/a/b D:/a/c => C:/a/b (missing MINGW)
ok 221 - non-existent file in subdir a/ ignored with --no-index
ok 116 - relative path: foo/a/b <empty> => foo/a/b
ok 20 - subtest: --run basic
ok 117 - relative path: foo/a/b <null> => foo/a/b
ok 222 - non-existent file in subdir a/ ignored with --no-index -q
ok 118 - relative path: <empty> /foo/a/b => ./
ok 1 # skip gettext: Emitting UTF-8 from our UTF-8 *.mo files / Icelandic (missing GETTEXT_LOCALE)
ok 1 - git show a ISO-8859-1 commit under C locale
ok 2 # skip gettext: Emitting UTF-8 from our UTF-8 *.mo files / Runes (missing GETTEXT_LOCALE)
ok 223 - non-existent file in subdir a/ ignored with --no-index --quiet
ok 2 # skip git show a ISO-8859-1 commit under a UTF-8 locale (missing GETTEXT_LOCALE)
ok 3 # skip gettext: Emitting ISO-8859-1 from our UTF-8 *.mo files / Icelandic (missing GETTEXT_ISO_LOCALE)
ok 4 # skip gettext: impossible ISO-8859-1 output (missing GETTEXT_ISO_LOCALE)
# passed all 2 test(s)
1..2
ok 5 # skip gettext: Fetching a UTF-8 msgid -> UTF-8 (missing GETTEXT_LOCALE)
ok 119 - relative path: <empty> <empty> => ./
ok 6 # skip gettext: Fetching a UTF-8 msgid -> ISO-8859-1 (missing GETTEXT_ISO_LOCALE)
*** t0300-credentials.sh ***
ok 224 - non-existent file in subdir a/ ignored with --no-index -v
ok 7 # skip gettext.c: git init UTF-8 -> UTF-8 (missing GETTEXT_LOCALE)
ok 8 # skip gettext.c: git init UTF-8 -> ISO-8859-1 (missing GETTEXT_ISO_LOCALE)
ok 11 - commit -p with shrinking cache-tree
# passed all 8 test(s)
1..8
ok 120 - relative path: <empty> <null> => ./
ok 225 - non-existent file in subdir a/ ignored with --no-index -v -n
*** t0301-credential-cache.sh ***
ok 121 - relative path: <null> <empty> => ./
ok 226 - non-existent file in subdir a/ ignored with --no-index -v --non-matching
ok 122 - relative path: <null> <null> => ./
ok 5 - commit files attr=text
ok 227 - non-existent file in subdir a/ ignored with --no-index --verbose
ok 1 - normal stream, return code 0
ok 123 - relative path: <null> /foo/a/b => ./
ok 228 - non-existent file in subdir a/ ignored with --no-index --verbose -n
ok 124 - git-path A=B info/grafts => .git/info/grafts
ok 125 - git-path GIT_GRAFT_FILE=foo info/grafts => foo
ok 229 - non-existent file in subdir a/ ignored with --no-index --verbose --non-matching
ok 2 - normal stream, return code 1
ok 126 - git-path GIT_GRAFT_FILE=foo info/////grafts => foo
ok 1 - run t0202/test.pl to test Git::I18N.pm
# passed all 1 test(s)
1..1
ok 1 - perf stream, return code 0
ok 127 - git-path GIT_INDEX_FILE=foo index => foo
ok 230 - existing untracked file in subdir a/ not ignored
*** t0302-credential-store.sh ***
ok 128 - git-path GIT_INDEX_FILE=foo index/foo => .git/index/foo
ok 12 - commit in child dir has cache-tree
ok 231 - existing untracked file in subdir a/ not ignored with -q
ok 129 - git-path GIT_INDEX_FILE=foo index2 => .git/index2
ok 3 - automatic filename
ok 130 - setup fake objects directory foo
ok 232 - existing untracked file in subdir a/ not ignored with --quiet
ok 131 - git-path GIT_OBJECT_DIRECTORY=foo objects => foo
ok 2 - perf stream, return code 1
ok 233 - existing untracked file in subdir a/ not ignored with -v
ok 132 - git-path GIT_OBJECT_DIRECTORY=foo objects/foo => foo/foo
ok 4 - normal stream, exit code 0
ok 234 - existing untracked file in subdir a/ not ignored with -v -n
ok 133 - git-path GIT_OBJECT_DIRECTORY=foo objects2 => .git/objects2
ok 3 - perf stream, error event
ok 235 - existing untracked file in subdir a/ not ignored with -v --non-matching
ok 134 - setup common repository
ok 5 - normal stream, exit code 1
ok 236 - existing untracked file in subdir a/ not ignored with --verbose
ok 135 - git-path GIT_COMMON_DIR=bar index => .git/index
ok 136 - git-path GIT_COMMON_DIR=bar index.lock => .git/index.lock
ok 237 - existing untracked file in subdir a/ not ignored with --verbose -n
ok 137 - git-path GIT_COMMON_DIR=bar HEAD => .git/HEAD
ok 13 - reset --hard gives cache-tree
ok 4 - perf stream, child processes
ok 138 - git-path GIT_COMMON_DIR=bar logs/HEAD => .git/logs/HEAD
ok 238 - existing untracked file in subdir a/ not ignored with --verbose --non-matching
ok 6 - normal stream, error event
ok 139 - git-path GIT_COMMON_DIR=bar logs/HEAD.lock => .git/logs/HEAD.lock
ok 21 - subtest: --run with a range
ok 140 - git-path GIT_COMMON_DIR=bar logs/refs/bisect/foo => .git/logs/refs/bisect/foo
ok 239 - existing untracked file in subdir a/ not ignored with --no-index
ok 141 - git-path GIT_COMMON_DIR=bar logs/refs => bar/logs/refs
ok 7 - BUG messages are written to trace2
ok 240 - existing untracked file in subdir a/ not ignored with --no-index -q
ok 142 - git-path GIT_COMMON_DIR=bar logs/refs/ => bar/logs/refs/
ok 1 - setup helper scripts
ok 1 - helper (cache) has no existing data
ok 143 - git-path GIT_COMMON_DIR=bar logs/refs/bisec/foo => bar/logs/refs/bisec/foo
ok 5 - using global config, perf stream, return code 0
ok 241 - existing untracked file in subdir a/ not ignored with --no-index --quiet
ok 144 - git-path GIT_COMMON_DIR=bar logs/refs/bisec => bar/logs/refs/bisec
ok 242 - existing untracked file in subdir a/ not ignored with --no-index -v
ok 2 - helper (cache) stores password
ok 8 - bug messages with BUG_if_bug() are written to trace2
ok 145 - git-path GIT_COMMON_DIR=bar logs/refs/bisectfoo => bar/logs/refs/bisectfoo
ok 2 - credential_fill invokes helper
ok 14 - reset --hard without index gives cache-tree
ok 146 - git-path GIT_COMMON_DIR=bar objects => bar/objects
ok 243 - existing untracked file in subdir a/ not ignored with --no-index -v -n
ok 3 - helper (cache) can retrieve password
ok 147 - git-path GIT_COMMON_DIR=bar objects/bar => bar/objects/bar
ok 244 - existing untracked file in subdir a/ not ignored with --no-index -v --non-matching
ok 1 - event stream, error event
ok 148 - git-path GIT_COMMON_DIR=bar info/exclude => bar/info/exclude
ok 3 - credential_fill invokes helper with credential
ok 9 - bug messages without explicit BUG_if_bug() are written to trace2
ok 149 - git-path GIT_COMMON_DIR=bar info/grafts => bar/info/grafts
ok 245 - existing untracked file in subdir a/ not ignored with --no-index --verbose
ok 4 - helper (cache) requires matching protocol
ok 150 - git-path GIT_COMMON_DIR=bar info/sparse-checkout => .git/info/sparse-checkout
ok 1 - helper (store) has no existing data
ok 151 - git-path GIT_COMMON_DIR=bar info//sparse-checkout => .git/info//sparse-checkout
ok 246 - existing untracked file in subdir a/ not ignored with --no-index --verbose -n
ok 4 - credential_fill invokes helper with ephemeral credential
ok 15 - checkout gives cache-tree
ok 247 - existing untracked file in subdir a/ not ignored with --no-index --verbose --non-matching
ok 152 - git-path GIT_COMMON_DIR=bar remotes/bar => bar/remotes/bar
ok 2 - helper (store) stores password
ok 153 - git-path GIT_COMMON_DIR=bar branches/bar => bar/branches/bar
ok 10 - bug messages followed by BUG() are written to trace2
ok 5 - helper (cache) requires matching host
ok 248 - existing tracked file in subdir a/ not ignored
ok 3 - helper (store) can retrieve password
ok 154 - git-path GIT_COMMON_DIR=bar logs/refs/heads/main => bar/logs/refs/heads/main
ok 5 - credential_fill invokes helper with credential and state
ok 11 - a valueless true configuration variable is handled
ok 155 - git-path GIT_COMMON_DIR=bar refs/heads/main => bar/refs/heads/main
ok 6 - helper (cache) requires matching username
ok 249 - existing tracked file in subdir a/ not ignored with -q
ok 156 - git-path GIT_COMMON_DIR=bar refs/bisect/foo => .git/refs/bisect/foo
ok 4 - helper (store) requires matching protocol
ok 157 - git-path GIT_COMMON_DIR=bar hooks/me => bar/hooks/me
ok 250 - existing tracked file in subdir a/ not ignored with --quiet
ok 6 - credential_fill invokes multiple helpers
ok 158 - git-path GIT_COMMON_DIR=bar config => bar/config
ok 251 - existing tracked file in subdir a/ not ignored with -v
ok 159 - git-path GIT_COMMON_DIR=bar packed-refs => bar/packed-refs
ok 16 - checkout -b gives cache-tree
ok 252 - existing tracked file in subdir a/ not ignored with -v -n
ok 160 - git-path GIT_COMMON_DIR=bar shallow => bar/shallow
ok 12 - using global config, normal stream, return code 0
ok 5 - helper (store) requires matching host
ok 161 - git-path GIT_COMMON_DIR=bar common => bar/common
ok 253 - existing tracked file in subdir a/ not ignored with -v --non-matching
ok 6 - commit files attr=-text
ok 162 - git-path GIT_COMMON_DIR=bar common/file => bar/common/file
ok 2 - event stream, return code 0
ok 7 - credential_fill response does not get capabilities when helpers are incapable
ok 7 - helper (cache) requires matching path
ok 254 - existing tracked file in subdir a/ not ignored with --verbose
ok 163 - test_submodule_relative_url: ../ ../foo ../submodule => ../../submodule
ok 6 - helper (store) requires matching username
ok 164 - test_submodule_relative_url: ../ ../foo/bar ../submodule => ../../foo/submodule
ok 6 - stopwatch timer test/test1
ok 255 - existing tracked file in subdir a/ not ignored with --verbose -n
ok 165 - test_submodule_relative_url: ../ ../foo/submodule ../submodule => ../../foo/submodule
ok 8 - credential_fill response does not get capabilities when caller is incapable
ok 256 - existing tracked file in subdir a/ not ignored with --verbose --non-matching
ok 166 - test_submodule_relative_url: ../ ./foo ../submodule => ../submodule
ok 167 - test_submodule_relative_url: ../ ./foo/bar ../submodule => ../foo/submodule
ok 9 - credential_fill stops when we get a full response
ok 17 - checkout -B gives cache-tree
ok 168 - test_submodule_relative_url: ../../../ ../foo/bar ../sub/a/b/c => ../../../../foo/sub/a/b/c
ok 257 - existing tracked file in subdir a/ shown as ignored with --no-index
ok 22 - subtest: --run with two ranges
ok 13 - using global config with include
ok 21 - required process filter should process multiple packets
ok 169 - test_submodule_relative_url: ../ /tmp/src/git-2.49.0/t/trash directory.t0060-path-utils/addtest ../repo => /tmp/src/git-2.49.0/t/trash directory.t0060-path-utils/repo
ok 7 - helper (store) requires matching path
ok 170 - test_submodule_relative_url: ../ foo/bar ../submodule => ../foo/submodule
ok 258 - existing tracked file in subdir a/ shown as ignored with --no-index -q
ok 10 - credential_fill thinks a credential is a full response
ok 171 - test_submodule_relative_url: ../ foo ../submodule => ../submodule
ok 259 - existing tracked file in subdir a/ shown as ignored with --no-index --quiet
ok 172 - test_submodule_relative_url: (null) ../foo/bar ../sub/a/b/c => ../foo/sub/a/b/c
ok 173 - test_submodule_relative_url: (null) ../foo/bar ../sub/a/b/c/ => ../foo/sub/a/b/c
ok 8 - helper (cache) overwrites on store
ok 260 - existing tracked file in subdir a/ shown as ignored with --no-index -v
ok 174 - test_submodule_relative_url: (null) ../foo/bar/ ../sub/a/b/c => ../foo/sub/a/b/c
ok 175 - test_submodule_relative_url: (null) ../foo/bar ../submodule => ../foo/submodule
ok 11 - credential_fill continues through partial response
ok 261 - existing tracked file in subdir a/ shown as ignored with --no-index -v -n
ok 22 - required process filter with clean error should fail
ok 176 - test_submodule_relative_url: (null) ../foo/submodule ../submodule => ../foo/submodule
ok 177 - test_submodule_relative_url: (null) ../foo ../submodule => ../submodule
ok 262 - existing tracked file in subdir a/ shown as ignored with --no-index -v --non-matching
ok 178 - test_submodule_relative_url: (null) ./foo/bar ../submodule => foo/submodule
ok 12 - credential_fill populates password_expiry_utc
ok 263 - existing tracked file in subdir a/ shown as ignored with --no-index --verbose
ok 9 - helper (cache) can forget host
ok 179 - test_submodule_relative_url: (null) ./foo ../submodule => submodule
ok 180 - test_submodule_relative_url: (null) //somewhere else/repo ../subrepo => //somewhere else/subrepo
ok 264 - existing tracked file in subdir a/ shown as ignored with --no-index --verbose -n
ok 14 - unsafe URLs are redacted by default
ok 181 - test_submodule_relative_url: (null) //somewhere else/repo ../../subrepo => //subrepo
# passed all 14 test(s)
1..14
ok 8 - helper (store) overwrites on store
ok 265 - existing tracked file in subdir a/ shown as ignored with --no-index --verbose --non-matching
ok 182 - test_submodule_relative_url: (null) //somewhere else/repo ../../../subrepo => /subrepo
*** t0303-credential-external.sh ***
ok 13 - credential_fill ignores expired password
ok 183 - test_submodule_relative_url: (null) //somewhere else/repo ../../../../subrepo => subrepo
ok 184 - test_submodule_relative_url: (null) /tmp/src/git-2.49.0/t/trash directory.t0060-path-utils/subsuper_update_r ../subsubsuper_update_r => /tmp/src/git-2.49.0/t/trash directory.t0060-path-utils/subsubsuper_update_r
ok 266 - existing untracked file in subdir a/ ignored
ok 14 - credential_fill passes along metadata
ok 185 - test_submodule_relative_url: (null) /tmp/src/git-2.49.0/t/trash directory.t0060-path-utils/super_update_r2 ../subsuper_update_r => /tmp/src/git-2.49.0/t/trash directory.t0060-path-utils/subsuper_update_r
ok 3 - event stream, list config
ok 186 - test_submodule_relative_url: (null) /tmp/src/git-2.49.0/t/trash directory.t0060-path-utils/. ../. => /tmp/src/git-2.49.0/t/trash directory.t0060-path-utils/.
ok 267 - existing untracked file in subdir a/ ignored with -q
ok 9 - helper (store) can forget host
ok 10 - helper (cache) can store multiple users
ok 187 - test_submodule_relative_url: (null) /tmp/src/git-2.49.0/t/trash directory.t0060-path-utils ./. => /tmp/src/git-2.49.0/t/trash directory.t0060-path-utils/.
ok 268 - existing untracked file in subdir a/ ignored with --quiet
ok 15 - credential_fill produces no credential without capability
ok 188 - test_submodule_relative_url: (null) /tmp/src/git-2.49.0/t/trash directory.t0060-path-utils/addtest ../repo => /tmp/src/git-2.49.0/t/trash directory.t0060-path-utils/repo
ok 7 - stopwatch timer test/test2
ok 189 - test_submodule_relative_url: (null) /tmp/src/git-2.49.0/t/trash directory.t0060-path-utils ./å äö => /tmp/src/git-2.49.0/t/trash directory.t0060-path-utils/å äö
ok 269 - existing untracked file in subdir a/ ignored with -v
ok 190 - test_submodule_relative_url: (null) /tmp/src/git-2.49.0/t/trash directory.t0060-path-utils/. ../submodule => /tmp/src/git-2.49.0/t/trash directory.t0060-path-utils/submodule
ok 270 - existing untracked file in subdir a/ ignored with -v -n
ok 191 - test_submodule_relative_url: (null) /tmp/src/git-2.49.0/t/trash directory.t0060-path-utils/submodule ../submodule => /tmp/src/git-2.49.0/t/trash directory.t0060-path-utils/submodule
ok 16 - credential_approve calls all helpers
ok 11 - helper (cache) does not erase a password distinct from input
ok 192 - test_submodule_relative_url: (null) /tmp/src/git-2.49.0/t/trash directory.t0060-path-utils/home2/../remote ../bundle1 => /tmp/src/git-2.49.0/t/trash directory.t0060-path-utils/home2/../bundle1
ok 271 - existing untracked file in subdir a/ ignored with -v --non-matching
ok 193 - test_submodule_relative_url: (null) /tmp/src/git-2.49.0/t/trash directory.t0060-path-utils/submodule_update_repo ./. => /tmp/src/git-2.49.0/t/trash directory.t0060-path-utils/submodule_update_repo/.
ok 23 - subtest: --run with a left open range
ok 10 - helper (store) can store multiple users
ok 17 - credential_approve stores password expiry
ok 194 - test_submodule_relative_url: (null) file:///tmp/repo ../subrepo => file:///tmp/subrepo
ok 272 - existing untracked file in subdir a/ ignored with --verbose
ok 195 - test_submodule_relative_url: (null) foo/bar ../submodule => foo/submodule
ok 8 - global counter test/test1
ok 12 - helper (cache) can forget user
ok 196 - test_submodule_relative_url: (null) foo ../submodule => submodule
ok 273 - existing untracked file in subdir a/ ignored with --verbose -n
ok 18 - credential_approve stores oauth refresh token
ok 197 - test_submodule_relative_url: (null) helper:://hostname/repo ../subrepo => helper:://hostname/subrepo
ok 19 - do not bother storing password-less credential
ok 4 - event stream, list env vars
ok 198 - test_submodule_relative_url: (null) helper:://hostname/repo ../../subrepo => helper:://subrepo
ok 13 - helper (cache) remembers other user
ok 274 - existing untracked file in subdir a/ ignored with --verbose --non-matching
ok 18 - merge --ff-only maintains cache-tree
ok 199 - test_submodule_relative_url: (null) helper:://hostname/repo ../../../subrepo => helper::/subrepo
ok 20 - credential_approve does not store expired password
ok 200 - test_submodule_relative_url: (null) helper:://hostname/repo ../../../../subrepo => helper::subrepo
ok 11 - helper (store) does not erase a password distinct from input
ok 23 - process filter should restart after unexpected write failure
ok 201 - test_submodule_relative_url: (null) helper:://hostname/repo ../../../../../subrepo => helper:subrepo
ok 275 - existing untracked file in subdir a/ ignored with --no-index
ok 202 - test_submodule_relative_url: (null) helper:://hostname/repo ../../../../../../subrepo => .:subrepo
ok 14 - helper (cache) can store empty username
ok 203 - test_submodule_relative_url: (null) ssh://hostname/repo ../subrepo => ssh://hostname/subrepo
ok 276 - existing untracked file in subdir a/ ignored with --no-index -q
ok 21 - credential_reject calls all helpers
ok 204 - test_submodule_relative_url: (null) ssh://hostname/repo ../../subrepo => ssh://subrepo
ok 9 - global counter test/test2
ok 12 - helper (store) can forget user
ok 205 - test_submodule_relative_url: (null) ssh://hostname/repo ../../../subrepo => ssh:/subrepo
ok 277 - existing untracked file in subdir a/ ignored with --no-index --quiet
ok 206 - test_submodule_relative_url: (null) ssh://hostname/repo ../../../../subrepo => ssh:subrepo
ok 22 - credential_reject erases credential regardless of expiry
ok 207 - test_submodule_relative_url: (null) ssh://hostname/repo ../../../../../subrepo => .:subrepo
ok 13 - helper (store) remembers other user
ok 278 - existing untracked file in subdir a/ ignored with --no-index -v
ok 208 - test_submodule_relative_url: (null) ssh://hostname:22/repo ../subrepo => ssh://hostname:22/subrepo
ok 209 - test_submodule_relative_url: (null) user@host:path/to/repo ../subrepo => user@host:path/to/subrepo
ok 7 - commit files attr=lf
ok 279 - existing untracked file in subdir a/ ignored with --no-index -v -n
ok 210 - test_submodule_relative_url: (null) user@host:repo ../subrepo => user@host:subrepo
ok 23 - usernames can be preserved
ok 5 - basic trace2_data
ok 211 - test_submodule_relative_url: (null) user@host:repo ../../subrepo => .:subrepo
ok 14 - helper (store) can store empty username
ok 280 - existing untracked file in subdir a/ ignored with --no-index -v --non-matching
ok 212 - match .gitmodules
ok 213 - match .gitattributes
ok 15 - helper (cache) erases all matching credentials
ok 214 - match .gitignore
ok 281 - existing untracked file in subdir a/ ignored with --no-index --verbose
ok 1 - DEFINE_LIST_SORT_DEBUG
ok 215 - match .mailmap
ok 216 # skip is_valid_path() on Windows (missing MINGW)
ok 24 - usernames can be overridden
# passed all 1 test(s)
1..1
*** t0410-partial-clone.sh ***
ok 25 - do not bother completing already-full credential
ok 282 - existing untracked file in subdir a/ ignored with --no-index --verbose -n
ok 283 - existing untracked file in subdir a/ ignored with --no-index --verbose --non-matching
ok 26 - empty helper list falls back to internal getpass
ok 10 - unsafe URLs are redacted by default
ok 217 # skip setup runtime prefix (missing RUNTIME_PREFIX of !VALGRIND,RUNTIME_PREFIX,CAN_EXEC_IN_PWD)
ok 218 # skip RUNTIME_PREFIX works (missing RUNTIME_PREFIX of !VALGRIND,RUNTIME_PREFIX,CAN_EXEC_IN_PWD)
ok 1 - helper (store) has no existing data
ok 219 # skip %(prefix)/ works (missing RUNTIME_PREFIX of !VALGRIND,RUNTIME_PREFIX,CAN_EXEC_IN_PWD)
ok 284 - mix of file types in subdir a/
# passed all 219 test(s)
1..219
ok 2 - helper (store) stores password
ok 3 - helper (store) can retrieve password
ok 4 - helper (store) requires matching protocol
ok 5 - helper (store) requires matching host
ok 27 - internal getpass does not ask for known username
ok 6 - helper (store) requires matching username
*** t0411-clone-from-partial.sh ***
ok 15 - helper (store) erases all matching credentials
ok 16 - helper (cache) not confused by long header
ok 24 - process filter should not be restarted if it signals an error
ok 285 - mix of file types in subdir a/ with -v
ok 24 - subtest: --run with a right open range
ok 17 - helper (cache) stores password_expiry_utc
ok 286 - mix of file types in subdir a/ with -v -n
ok 7 - helper (store) requires matching path
ok 6 - using global config, event stream, error event
ok 287 - mix of file types in subdir a/ with -v --non-matching
ok 28 - git-credential respects core.askPass
ok 18 - helper (cache) gets password_expiry_utc
ok 288 - mix of file types in subdir a/ with --verbose
ok 8 - helper (store) overwrites on store
ok 9 - helper (store) can forget host
ok 7 - discard traces when there are too many files
ok 11 - expect def_params for normal builtin command
ok 289 - mix of file types in subdir a/ with --verbose -n
ok 8 - unsafe URLs are redacted by default in cmd_start events
ok 29 - respect configured credentials
ok 290 - mix of file types in subdir a/ with --verbose --non-matching
ok 16 - helper (store) not confused by long header
ok 10 - helper (store) can store multiple users
ok 17 - when xdg file does not exist, xdg file not created
ok 9 - unsafe URLs are redacted by default in child_start events
ok 18 - setup xdg file
ok 11 - helper (store) does not erase a password distinct from input
ok 10 - unsafe URLs are redacted by default in exec events
ok 12 - helper (store) can forget user
ok 13 - helper (store) remembers other user
ok 291 - mix of file types in subdir a/ with --no-index
ok 30 - match configured credential
ok 19 - merge maintains cache-tree
ok 11 - unsafe URLs are redacted by default in def_param events
ok 14 - helper (store) can store empty username
# passed all 11 test(s)
1..11
*** t0450-txt-doc-vs-help.sh ***
ok 19 - helper (store) has no existing data
ok 292 - mix of file types in subdir a/ with --no-index -v
ok 25 - process filter abort stops processing of all further files
ok 20 - helper (store) stores password
ok 15 - helper (store) erases all matching credentials
ok 293 - mix of file types in subdir a/ with --no-index -v -n
ok 19 - helper (cache) overwrites when password_expiry_utc changes
ok 12 - expect def_params for query command
ok 31 - do not match configured credential
ok 294 - mix of file types in subdir a/ with --no-index -v --non-matching
ok 21 - helper (store) can retrieve password
ok 16 - helper (store) not confused by long header
ok 20 - helper (cache) stores oauth_refresh_token
ok 17 - helper (store) stores password_expiry_utc
ok 18 - helper (store) gets password_expiry_utc
ok 295 - mix of file types in subdir a/ with --no-index --verbose
ok 21 - helper (cache) gets oauth_refresh_token
ok 296 - mix of file types in subdir a/ with --no-index --verbose -n
ok 22 - helper (store) requires matching protocol
ok 19 - helper (store) overwrites when password_expiry_utc changes
ok 22 - helper (cache) stores authtype and credential
ok 26 - invalid process filter must fail (and not hang!)
ok 297 - mix of file types in subdir a/ with --no-index --verbose --non-matching
ok 1 - extensions.partialclone without filter
ok 20 - helper (store) stores oauth_refresh_token
ok 21 - helper (store) gets oauth_refresh_token
ok 32 - match multiple configured helpers
ok 23 - helper (cache) gets authtype and credential
ok 298 - sub-directory local ignore
ok 23 - helper (store) requires matching host
ok 299 - sub-directory local ignore with --verbose
ok 25 - subtest: --run with basic negation
ok 13 - expect def_params for remote-curl and _run_dashed_
ok 24 - helper (store) requires matching username
ok 24 - helper (cache) gets authtype and credential only if request has authtype capability
ok 300 - local ignore inside a sub-directory
ok 20 - partial commit gives cache-tree
ok 301 - local ignore inside a sub-directory with --verbose
ok 25 - helper (cache) stores authtype and credential with username
ok 33 - match multiple configured helpers with URLs
ok 302 - nested include of negated pattern
ok 26 - helper (cache) gets authtype and credential with username
ok 21 - no phantom error when switching trees
ok 303 - nested include of negated pattern with -q
ok 1 - create evil repo
ok 34 - match percent-encoded values
ok 304 - nested include of negated pattern with -v
ok 25 - helper (store) requires matching path
ok 27 - helper (cache) does not get authtype and credential with different username
ok 305 - nested include of negated pattern with -v -n
ok 8 - commit files attr=crlf
ok 22 - switching trees does not invalidate shared index
# passed all 22 test(s)
1..22
ok 2 - local clone must not fetch from promisor remote and execute script
ok 1 - setup: list of builtins
ok 2 - list of adoc and help mismatches is sorted
ok 306 - ignored sub-directory
ok 14 - expect def_params for http-fetch and _run_dashed_
ok 35 - match percent-encoded UTF-8 values in path
ok 3 - add -h output has no \t
*** t0500-progress-display.sh ***
ok 307 - ignored sub-directory with -q
ok 4 - add -h output has dashed labels
ok 28 - helper (cache) does not store ephemeral authtype and credential
ok 5 - add -h output has consistent spacing
ok 308 - ignored sub-directory with --quiet
ok 36 - match percent-encoded values in username
ok 3 - clone from file://... must not fetch from promisor remote and execute script
ok 9 - setup commit file with mixed EOL
ok 6 - add *.adoc SYNOPSIS has dashed labels
ok 309 - ignored sub-directory with -v
ok 10 - commit file with mixed EOL onto LF crlf=false attr=
ok 11 - commit file with mixed EOL onto CLRF attr= aeol= crlf=false
ok 12 - commit file with mixed EOL onto CRLF_mix_LF attr= aeol= crlf=false
ok 26 - helper (store) overwrites on store
ok 310 - ignored sub-directory with -v -n
ok 29 - helper (cache) does not store ephemeral username and password
ok 37 - match percent-encoded values in hostname
ok 13 - commit file with mixed EOL onto LF_mix_cr attr= aeol= crlf=false 
ok 4 - fetch from file://... must not fetch from promisor remote and execute script
not ok 7 - add -h output and SYNOPSIS agree # TODO known breakage
ok 14 - commit file with mixed EOL onto CRLF_nul attr= aeol= crlf=false
ok 311 - ignored sub-directory with -v --non-matching
ok 30 - socket defaults to ~/.cache/git/credential/socket
ok 2 - convert shallow clone to partial clone
ok 8 - am -h output has no \t
ok 312 - ignored sub-directory with --verbose
ok 9 - am -h output has dashed labels
ok 5 - pack-objects should fetch from promisor remote and execute script
ok 10 - am -h output has consistent spacing
ok 31 - helper (cache) has no existing data
ok 27 - helper (store) can forget host
ok 313 - ignored sub-directory with --verbose -n
ok 38 - fetch with multiple path components
ok 11 - am *.adoc SYNOPSIS has dashed labels
ok 15 - expect def_params during git alias expansion
ok 314 - ignored sub-directory with --verbose --non-matching
ok 32 - helper (cache) stores password
ok 315 - multiple files inside ignored sub-directory
ok 6 - clone from promisor remote does not lazy-fetch by default
not ok 12 - am -h output and SYNOPSIS agree # TODO known breakage
ok 33 - helper (cache) can retrieve password
ok 39 - pull username from config
ok 26 - subtest: --run with two negations
ok 15 - setup commit file with mixed EOL
ok 16 - commit file with mixed EOL onto LF crlf=true attr=
ok 316 - multiple files inside ignored sub-directory with -v
ok 13 - annotate -h output has no \t
ok 17 - commit file with mixed EOL onto CLRF attr= aeol= crlf=true
ok 14 - annotate -h output has dashed labels
ok 15 - annotate -h output has consistent spacing
ok 18 - commit file with mixed EOL onto CRLF_mix_LF attr= aeol= crlf=true
ok 34 - helper (cache) requires matching protocol
ok 317 - cd to ignored sub-directory
ok 19 - commit file with mixed EOL onto LF_mix_cr attr= aeol= crlf=true 
ok 28 - helper (store) can store multiple users
ok 20 - commit file with mixed EOL onto CRLF_nul attr= aeol= crlf=true
ok 7 - promisor lazy-fetching can be re-enabled
ok 16 - annotate *.adoc SYNOPSIS has dashed labels
# passed all 7 test(s)
1..7
ok 318 - cd to ignored sub-directory with -v
ok 40 - honors username from URL over helper (URL)
*** t0600-reffiles-backend.sh ***
ok 35 - helper (cache) requires matching host
ok 17 - annotate -h output and SYNOPSIS agree
ok 319 - symlink
ok 16 - expect def_params during shell alias expansion
ok 1 - simple progress display
ok 18 - apply -h output has no \t
ok 29 - helper (store) does not erase a password distinct from input
ok 2 - progress display with total
ok 36 - helper (cache) requires matching username
ok 19 - apply -h output has dashed labels
ok 320 - symlink with -q
ok 20 - apply -h output has consistent spacing
ok 3 - progress display breaks long lines #1
ok 321 - symlink with --quiet
ok 21 - setup commit file with mixed EOL
ok 41 - honors username from URL over helper (components)
ok 22 - commit file with mixed EOL onto LF crlf=input attr=
ok 21 - apply *.adoc SYNOPSIS has dashed labels
ok 23 - commit file with mixed EOL onto CLRF attr= aeol= crlf=input
ok 4 - progress display breaks long lines #2
ok 322 - symlink with -v
ok 24 - commit file with mixed EOL onto CRLF_mix_LF attr= aeol= crlf=input
ok 30 - helper (store) can forget user
ok 25 - commit file with mixed EOL onto LF_mix_cr attr= aeol= crlf=input 
ok 323 - symlink with -v -n
ok 26 - commit file with mixed EOL onto CRLF_nul attr= aeol= crlf=input
ok 5 - progress display breaks long lines #3 - even the first is too long
not ok 22 - apply -h output and SYNOPSIS agree # TODO known breakage
ok 324 - symlink with -v --non-matching
ok 37 - helper (cache) requires matching path
ok 31 - helper (store) remembers other user
ok 6 - progress display breaks long lines #4 - title line matches terminal width
ok 23 - archive -h output has no \t
ok 24 - archive -h output has dashed labels
ok 325 - symlink with --verbose
ok 7 - progress shortens - crazy caller
ok 25 - archive -h output has consistent spacing
ok 3 - convert to partial clone with noop extension
ok 42 - last matching username wins
ok 27 - delayed checkout in process filter
ok 326 - symlink with --verbose -n
ok 8 - progress display with throughput
ok 32 - helper (store) can store empty username
ok 26 - archive *.adoc SYNOPSIS has dashed labels
ok 327 - symlink with --verbose --non-matching
ok 9 - progress display with throughput and total
not ok 27 - archive -h output and SYNOPSIS agree # TODO known breakage
ok 10 - cover up after throughput shortens
ok 17 - expect def_params during nested git alias expansion
ok 328 - beyond a symlink
# passed all 17 test(s)
1..17
*** t0601-reffiles-pack-refs.sh ***
ok 27 - setup commit file with mixed EOL
ok 11 - cover up after throughput shortens a lot
ok 28 - commit file with mixed EOL onto LF crlf=false attr=auto
ok 28 - backfill -h output has no \t
ok 329 - beyond a symlink with -q
ok 29 - backfill -h output has dashed labels
ok 29 - commit file with mixed EOL onto CLRF attr=auto aeol= crlf=false
ok 43 - http paths can be part of context
ok 30 - backfill -h output has consistent spacing
ok 30 - commit file with mixed EOL onto CRLF_mix_LF attr=auto aeol= crlf=false
ok 38 - helper (cache) overwrites on store
ok 31 - commit file with mixed EOL onto LF_mix_cr attr=auto aeol= crlf=false 
ok 12 - progress generates traces
ok 330 - beyond a symlink with --quiet
ok 33 - helper (store) erases all matching credentials
ok 32 - commit file with mixed EOL onto CRLF_nul attr=auto aeol= crlf=false
ok 27 - subtest: --run a range and negation
ok 31 - backfill *.adoc SYNOPSIS has dashed labels
ok 13 - progress generates traces: stop / start
ok 331 - beyond a symlink with -v
ok 14 - progress generates traces: start without stop
ok 44 - context uses urlmatch
ok 32 - backfill -h output and SYNOPSIS agree
ok 332 - beyond a symlink with -v -n
ok 15 - progress generates traces: stop without start
ok 39 - helper (cache) can forget host
ok 33 - bisect -h output has no \t
ok 16 - progress generates traces: start with active progress bar (no stops)
ok 45 - helpers can abort the process
ok 34 - bisect -h output has dashed labels
ok 333 - beyond a symlink with -v --non-matching
ok 1 - setup
# passed all 16 test(s)
1..16
ok 35 - bisect -h output has consistent spacing
*** t0602-reffiles-fsck.sh ***
ok 28 - missing file in delayed checkout
ok 334 - beyond a symlink with --verbose
ok 36 - bisect *.adoc SYNOPSIS has dashed labels
ok 34 - helper (store) not confused by long header
ok 35 - when xdg file exists, home file not created
ok 2 - empty directory should not fool rev-parse
ok 33 - setup commit file with mixed EOL
ok 36 - setup custom xdg file
ok 46 - empty helper spec resets helper list
ok 4 - converting to partial clone fails with unrecognized extension
ok 34 - commit file with mixed EOL onto LF crlf=true attr=auto
ok 335 - beyond a symlink with --verbose -n
ok 35 - commit file with mixed EOL onto CLRF attr=auto aeol= crlf=true
not ok 37 - bisect -h output and SYNOPSIS agree # TODO known breakage
ok 47 - url parser rejects embedded newlines
ok 36 - commit file with mixed EOL onto CRLF_mix_LF attr=auto aeol= crlf=true
ok 336 - beyond a symlink with --verbose --non-matching
ok 40 - helper (cache) can store multiple users
ok 37 - commit file with mixed EOL onto LF_mix_cr attr=auto aeol= crlf=true 
ok 38 - blame -h output has no \t
ok 3 - empty directory should not fool for-each-ref
ok 37 - helper (store) has no existing data
ok 39 - blame -h output has dashed labels
ok 38 - commit file with mixed EOL onto CRLF_nul attr=auto aeol= crlf=true
ok 4 - empty directory should not fool create
ok 40 - blame -h output has consistent spacing
ok 337 - beyond a symlink from subdirectory
ok 38 - helper (store) stores password
ok 41 - blame *.adoc SYNOPSIS has dashed labels
ok 48 - url parser rejects embedded carriage returns
ok 5 - empty directory should not fool verify
ok 39 - helper (store) can retrieve password
ok 41 - helper (cache) does not erase a password distinct from input
ok 338 - beyond a symlink from subdirectory with -q
ok 1 - enable reflogs
not ok 42 - blame -h output and SYNOPSIS agree # TODO known breakage
ok 49 - host-less URLs are parsed as empty host
ok 339 - beyond a symlink from subdirectory with --quiet
ok 6 - empty directory should not fool 1-arg update
ok 50 - credential system refuses to work with missing host
ok 40 - helper (store) requires matching protocol
ok 43 - branch -h output has no \t
ok 44 - branch -h output has dashed labels
ok 2 - prepare a trivial repository
ok 51 - credential system refuses to work with missing protocol
ok 340 - beyond a symlink from subdirectory with -v
ok 42 - helper (cache) can forget user
ok 45 - branch -h output has consistent spacing
ok 7 - empty directory should not fool 2-arg update
ok 29 - invalid file in delayed checkout
ok 341 - beyond a symlink from subdirectory with -v -n
ok 43 - helper (cache) remembers other user
ok 46 - branch *.adoc SYNOPSIS has dashed labels
ok 3 - pack-refs --prune --all
ok 41 - helper (store) requires matching host
ok 5 - missing reflog object, but promised by a commit, passes fsck
ok 8 - empty directory should not fool 0-arg delete
ok 39 - setup commit file with mixed EOL
ok 30 # skip delayed checkout with case-collision don't write to the wrong place (missing CASE_INSENSITIVE_FS of SYMLINKS,CASE_INSENSITIVE_FS)
ok 52 - url parser handles bare query marker
ok 342 - beyond a symlink from subdirectory with -v --non-matching
ok 28 - subtest: --run range negation
ok 40 - commit file with mixed EOL onto LF crlf=input attr=auto
ok 4 - see if git show-ref works as expected
ok 42 - helper (store) requires matching username
ok 41 - commit file with mixed EOL onto CLRF attr=auto aeol= crlf=input
not ok 47 - branch -h output and SYNOPSIS agree # TODO known breakage
ok 44 - helper (cache) can store empty username
ok 31 # skip delayed checkout with utf-8-collision don't write to the wrong place (missing UTF8_NFD_TO_NFC of SYMLINKS,UTF8_NFD_TO_NFC)
ok 42 - commit file with mixed EOL onto CRLF_mix_LF attr=auto aeol= crlf=input
ok 32 # skip delayed checkout with submodule collision don't write to the wrong place (missing CASE_INSENSITIVE_FS of SYMLINKS,CASE_INSENSITIVE_FS)
ok 343 - beyond a symlink from subdirectory with --verbose
ok 9 - empty directory should not fool 1-arg delete
ok 43 - commit file with mixed EOL onto LF_mix_cr attr=auto aeol= crlf=input 
ok 48 - bugreport -h output has no \t
ok 44 - commit file with mixed EOL onto CRLF_nul attr=auto aeol= crlf=input
ok 49 - bugreport -h output has dashed labels
ok 5 - see if a branch still exists when packed
ok 50 - bugreport -h output has consistent spacing
ok 53 - url parser handles bare fragment marker
ok 344 - beyond a symlink from subdirectory with --verbose -n
ok 51 - bugreport *.adoc SYNOPSIS has dashed labels
ok 10 - non-empty directory blocks create
ok 345 - beyond a symlink from subdirectory with --verbose --non-matching
ok 6 - git branch c/d should barf if branch c exists
ok 43 - helper (store) requires matching path
ok 54 - url parser not confused by encoded markers
ok 52 - bugreport -h output and SYNOPSIS agree
ok 346 - submodule
ok 33 - setup for progress tests
ok 7 - see if a branch still exists after git pack-refs --prune
ok 11 - broken reference blocks create
ok 45 - helper (cache) erases all matching credentials
ok 53 - bundle -h output has no \t
ok 347 - submodule with -q
ok 8 - see if git pack-refs --prune remove ref files
ok 54 - bundle -h output has dashed labels
ok 45 - setup commit NNO files
ok 34 # skip delayed checkout shows progress by default on tty (pathspec checkout) (missing TTY of PERL,TTY)
ok 46 - commit NNO files crlf=false attr= LF
ok 55 - bundle -h output has consistent spacing
ok 348 - submodule with --quiet
ok 47 - commit NNO files attr= aeol= crlf=false CRLF
ok 9 - see if git pack-refs --prune removes empty dirs
ok 48 - commit NNO files attr= aeol= crlf=false CRLF_mix_LF
ok 6 - missing reflog object, but promised by a tag, passes fsck
ok 56 - bundle *.adoc SYNOPSIS has dashed labels
ok 349 - submodule with -v
ok 49 - commit NNO files attr= aeol= crlf=false LF_mix_cr
ok 35 - delayed checkout omits progress on non-tty (pathspec checkout)
ok 12 - non-empty directory blocks indirect create
ok 36 # skip delayed checkout omits progress with --quiet (pathspec checkout) (missing TTY of PERL,TTY)
ok 50 - commit NNO files attr= aeol= crlf=false CRLF_nul
ok 37 # skip delayed checkout honors --[no]-progress (pathspec checkout) (missing TTY of PERL,TTY)
ok 38 # skip delayed checkout shows progress by default on tty (branch checkout) (missing TTY of PERL,TTY)
ok 350 - submodule with -v -n
ok 57 - bundle -h output and SYNOPSIS agree
ok 10 - git branch g should work when git branch g/h has been deleted
ok 351 - submodule with -v --non-matching
ok 44 - helper (store) overwrites on store
ok 39 - delayed checkout omits progress on non-tty (branch checkout)
ok 46 - helper (cache) not confused by long header
ok 40 # skip delayed checkout omits progress with --quiet (branch checkout) (missing TTY of PERL,TTY)
ok 58 - cat-file -h output has no \t
ok 41 # skip delayed checkout honors --[no]-progress (branch checkout) (missing TTY of PERL,TTY)
ok 13 - broken reference blocks indirect create
ok 59 - cat-file -h output has dashed labels
ok 47 - use custom XDG_CACHE_HOME if set and default sockets are not created
ok 352 - submodule with --verbose
ok 11 - git branch i/j/k should barf if branch i exists
ok 60 - cat-file -h output has consistent spacing
ok 353 - submodule with --verbose -n
ok 61 - cat-file *.adoc SYNOPSIS has dashed labels
ok 354 - submodule with --verbose --non-matching
ok 45 - helper (store) can forget host
ok 48 - credential-cache --socket option overrides default location
ok 1 - ref name should be checked
ok 12 - test git branch k after branch k/l/m and k/lm have been deleted
ok 355 - submodule from subdirectory
ok 62 - cat-file -h output and SYNOPSIS agree
ok 7 - missing reflog object alone fails fsck, even with extension set
ok 51 - setup commit NNO files
ok 63 - check-attr -h output has no \t
ok 356 - submodule from subdirectory with -q
ok 52 - commit NNO files crlf=true attr= LF
ok 64 - check-attr -h output has dashed labels
ok 53 - commit NNO files attr= aeol= crlf=true CRLF
ok 49 - use custom XDG_CACHE_HOME even if xdg socket exists
ok 65 - check-attr -h output has consistent spacing
ok 54 - commit NNO files attr= aeol= crlf=true CRLF_mix_LF
ok 357 - submodule from subdirectory with --quiet
ok 55 - commit NNO files attr= aeol= crlf=true LF_mix_cr
ok 42 - delayed checkout correctly reports the number of updated entries
# passed all 42 test(s)
1..42
ok 66 - check-attr *.adoc SYNOPSIS has dashed labels
ok 56 - commit NNO files attr= aeol= crlf=true CRLF_nul
ok 46 - helper (store) can store multiple users
ok 29 - subtest: --run include, exclude and include
ok 358 - submodule from subdirectory with -v
ok 13 - test git branch n after some branch deletion and pruning
ok 2 - ref name check should be adapted into fsck messages
ok 50 - use user socket if user directory exists
ok 67 - check-attr -h output and SYNOPSIS agree
ok 359 - submodule from subdirectory with -v -n
ok 55 - credential config with partial URLs
*** t0610-reftable-basics.sh ***
ok 360 - submodule from subdirectory with -v --non-matching
ok 68 - check-ignore -h output has no \t
ok 14 - test excluded refs are not packed
ok 69 - check-ignore -h output has dashed labels
ok 47 - helper (store) does not erase a password distinct from input
ok 70 - check-ignore -h output has consistent spacing
ok 361 - submodule from subdirectory with --verbose
ok 56 - interactive prompt is sanitized
ok 4 - Racy git trial #1 part B
ok 15 - test --no-exclude refs clears excluded refs
# passed all 56 test(s)
1..56
ok 51 - use user socket if user directory is a symlink to a directory
ok 71 - check-ignore *.adoc SYNOPSIS has dashed labels
*** t0611-reftable-httpd.sh ***
ok 5 - Racy git trial #2 part A
ok 362 - submodule from subdirectory with --verbose -n
ok 16 - test only included refs are packed
ok 8 - missing ref object, but promised, passes fsck
ok 363 - submodule from subdirectory with --verbose --non-matching
ok 72 - check-ignore -h output and SYNOPSIS agree
ok 48 - helper (store) can forget user
ok 57 - setup commit NNO files
ok 364 - global ignore not yet enabled
ok 58 - commit NNO files crlf=input attr= LF
ok 59 - commit NNO files attr= aeol= crlf=input CRLF
ok 17 - test --no-include refs clears included refs
ok 73 - check-mailmap -h output has no \t
ok 60 - commit NNO files attr= aeol= crlf=input CRLF_mix_LF
ok 49 - helper (store) remembers other user
ok 74 - check-mailmap -h output has dashed labels
ok 61 - commit NNO files attr= aeol= crlf=input LF_mix_cr
ok 62 - commit NNO files attr= aeol= crlf=input CRLF_nul
ok 75 - check-mailmap -h output has consistent spacing
ok 365 - global ignore
ok 18 - test --exclude takes precedence over --include
ok 76 - check-mailmap *.adoc SYNOPSIS has dashed labels
ok 50 - helper (store) can store empty username
ok 366 - global ignore with -v
ok 19 - see if up-to-date packed refs are preserved
ok 77 - check-mailmap -h output and SYNOPSIS agree
ok 78 - check-ref-format -h output has no \t
ok 79 - check-ref-format -h output has dashed labels
ok 20 - pack, prune and repack
ok 367 - --stdin
ok 80 - check-ref-format -h output has consistent spacing
ok 368 - --stdin -q
ok 81 - check-ref-format *.adoc SYNOPSIS has dashed labels
ok 63 - setup commit NNO files
ok 369 - --stdin -v
ok 51 - helper (store) erases all matching credentials
ok 64 - commit NNO files crlf=false attr=auto LF
ok 65 - commit NNO files attr=auto aeol= crlf=false CRLF
not ok 82 - check-ref-format -h output and SYNOPSIS agree # TODO known breakage
ok 370 - --stdin -z
ok 66 - commit NNO files attr=auto aeol= crlf=false CRLF_mix_LF
ok 67 - commit NNO files attr=auto aeol= crlf=false LF_mix_cr
ok 1 - init: creates basic reftable structures
ok 68 - commit NNO files attr=auto aeol= crlf=false CRLF_nul
ok 371 - --stdin -z -q
ok 83 - checkout -h output has no \t
ok 3 - ref name check should work for multiple worktrees
ok 84 - checkout -h output has dashed labels
ok 372 - --stdin -z -v
ok 85 - checkout -h output has consistent spacing
ok 21 - explicit pack-refs with dangling packed reference
ok 30 - subtest: --run include, exclude and include, comma separated
1..0 # SKIP no web server found at ''
*** t0612-reftable-jgit-compatibility.sh ***
ok 373 - -z --stdin
ok 2 - init: sha256 object format via environment variable
ok 86 - checkout *.adoc SYNOPSIS has dashed labels
ok 374 - -z --stdin -q
ok 52 - helper (store) not confused by long header
ok 53 - if custom xdg file exists, home and xdg files not created
ok 3 - init: sha256 object format via option
ok 375 - -z --stdin -v
not ok 87 - checkout -h output and SYNOPSIS agree # TODO known breakage
ok 69 - setup commit NNO files
ok 70 - commit NNO files crlf=true attr=auto LF
ok 54 - get: use home file if both home and xdg files have matches
ok 88 - checkout--worker -h output has no \t
ok 71 - commit NNO files attr=auto aeol= crlf=true CRLF
ok 89 - checkout--worker -h output has dashed labels
ok 72 - commit NNO files attr=auto aeol= crlf=true CRLF_mix_LF
ok 90 - checkout--worker -h output has consistent spacing
ok 73 - commit NNO files attr=auto aeol= crlf=true LF_mix_cr
ok 22 - delete ref with dangling packed version
ok 74 - commit NNO files attr=auto aeol= crlf=true CRLF_nul
ok 91 # skip checkout--worker *.adoc SYNOPSIS has dashed labels (missing BUILTIN_ADOC_CHECKOUT__WORKER)
ok 55 - get: use xdg file if home file has no matches
ok 92 # skip checkout--worker -h output and SYNOPSIS agree (missing BUILTIN_ADOC_CHECKOUT__WORKER)
ok 376 - --stdin from subdirectory
ok 93 - checkout-index -h output has no \t
ok 94 - checkout-index -h output has dashed labels
ok 377 - --stdin from subdirectory with -v
ok 95 - checkout-index -h output has consistent spacing
ok 378 - --stdin from subdirectory with -v -n
ok 96 - checkout-index *.adoc SYNOPSIS has dashed labels
ok 56 - get: use xdg file if home file is unreadable
ok 4 - init: reinitializing reftable backend succeeds
ok 379 - --stdin -z from subdirectory
ok 75 - setup commit NNO files
ok 9 - missing object, but promised, passes fsck
ok 76 - commit NNO files crlf=input attr=auto LF
not ok 97 - checkout-index -h output and SYNOPSIS agree # TODO known breakage
ok 23 - delete ref while another dangling packed ref
ok 380 - --stdin -z from subdirectory with -v
ok 77 - commit NNO files attr=auto aeol= crlf=input CRLF
ok 78 - commit NNO files attr=auto aeol= crlf=input CRLF_mix_LF
ok 57 - store: if both xdg and home files exist, only store in home file
ok 98 - cherry -h output has no \t
ok 24 - pack ref directly below refs/
ok 79 - commit NNO files attr=auto aeol= crlf=input LF_mix_cr
ok 99 - cherry -h output has dashed labels
ok 381 - -z --stdin from subdirectory
ok 80 - commit NNO files attr=auto aeol= crlf=input CRLF_nul
ok 100 - cherry -h output has consistent spacing
ok 58 - erase: erase matching credentials from both xdg and home files
ok 25 - do not pack ref in refs/bisect
ok 382 - -z --stdin from subdirectory with -v
ok 26 - disable reflogs
ok 101 - cherry *.adoc SYNOPSIS has dashed labels
ok 5 - init: reinitializing files with reftable backend fails
1..0 # SKIP skipping reftable JGit tests; JGit is not present in PATH
*** t0613-reftable-write-options.sh ***
ok 4 - regular ref content should be checked (individual)
ok 59 - get: ignore credentials without scheme as invalid
ok 27 - create packed foo/bar/baz branch
ok 102 - cherry -h output and SYNOPSIS agree
ok 383 - streaming support for --stdin
ok 28 - notice d/f conflict with existing directory
ok 103 - cherry-pick -h output has no \t
ok 31 - subtest: --run exclude and include
ok 29 - existing directory reports concrete ref
ok 104 - cherry-pick -h output has dashed labels
ok 384 - existing file and directory
ok 81 - setup commit NNO files
ok 105 - cherry-pick -h output has consistent spacing
ok 60 - get: ignore credentials without valid host/path as invalid
ok 30 - notice d/f conflict with existing ref
ok 82 - commit NNO files crlf=true attr=-text LF
ok 83 - commit NNO files attr=-text aeol= crlf=true CRLF
ok 385 - existing directory and file
ok 106 - cherry-pick *.adoc SYNOPSIS has dashed labels
ok 10 - missing CLI object, but promised, passes fsck
ok 84 - commit NNO files attr=-text aeol= crlf=true CRLF_mix_LF
ok 31 - reject packed-refs with unterminated line
ok 85 - commit NNO files attr=-text aeol= crlf=true LF_mix_cr
ok 6 - init: reinitializing reftable with files backend fails
ok 86 - commit NNO files attr=-text aeol= crlf=true CRLF_nul
ok 61 - get: ignore credentials without username/password as invalid
ok 5 - regular ref content should be checked (aggregate)
ok 386 - exact prefix matching (with root)
ok 32 - reject packed-refs containing junk
ok 107 - cherry-pick -h output and SYNOPSIS agree
ok 33 - reject packed-refs with a short SHA-1
ok 7 - init: honors --shared=umask with umask 002
ok 108 - clean -h output has no \t
ok 387 - exact prefix matching (without root)
ok 109 - clean -h output has dashed labels
ok 62 - get: credentials with DOS line endings are invalid
ok 110 - clean -h output has consistent spacing
ok 388 - directories and ** matches
ok 63 - get: credentials with path and DOS line endings are valid
ok 389 - trailing whitespace is ignored
ok 111 - clean *.adoc SYNOPSIS has dashed labels
ok 87 - setup commit NNO files
ok 88 - commit NNO files crlf=true attr=-text LF
ok 89 - commit NNO files attr=-text aeol=lf crlf=true CRLF
ok 390 - quoting allows trailing whitespace
ok 90 - commit NNO files attr=-text aeol=lf crlf=true CRLF_mix_LF
ok 112 - clean -h output and SYNOPSIS agree
ok 91 - commit NNO files attr=-text aeol=lf crlf=true LF_mix_cr
ok 92 - commit NNO files attr=-text aeol=lf crlf=true CRLF_nul
ok 391 - correct handling of backslashes
ok 8 - pack-refs: honors --shared=umask with umask 002
ok 64 - get: credentials with DOS line endings are invalid if path is relevant
ok 113 - clone -h output has no \t
ok 114 - clone -h output has dashed labels
ok 392 - info/exclude trumps core.excludesfile
ok 115 - clone -h output has consistent spacing
ok 393 - set up ignore file for symlink tests
ok 65 - get: store file can contain empty/bogus lines
ok 9 - init: honors --shared=umask with umask 022
# passed all 65 test(s)
1..65
*** t1000-read-tree-m-3way.sh ***
ok 116 - clone *.adoc SYNOPSIS has dashed labels
ok 394 - symlinks respected in core.excludesFile
ok 93 - setup commit NNO files
ok 395 - symlinks respected in info/exclude
not ok 117 - clone -h output and SYNOPSIS agree # TODO known breakage
ok 94 - commit NNO files crlf=true attr=-text LF
ok 95 - commit NNO files attr=-text aeol=crlf crlf=true CRLF
ok 96 - commit NNO files attr=-text aeol=crlf crlf=true CRLF_mix_LF
ok 118 - column -h output has no \t
ok 396 - symlinks not respected in-tree
ok 119 - column -h output has dashed labels
ok 97 - commit NNO files attr=-text aeol=crlf crlf=true LF_mix_cr
ok 98 - commit NNO files attr=-text aeol=crlf crlf=true CRLF_nul
ok 397 # skip large exclude file ignored in tree (missing EXPENSIVE)
ok 120 - column -h output has consistent spacing
ok 6 - textual symref content should be checked (individual)
# passed all 397 test(s)
1..397
ok 11 - fetching of missing objects
*** t1001-read-tree-m-2way.sh ***
ok 10 - pack-refs: honors --shared=umask with umask 022
ok 1 - default write options
ok 121 - column *.adoc SYNOPSIS has dashed labels
ok 32 - subtest: --run empty selectors
ok 11 - init: honors --shared=umask with umask 027
not ok 122 - column -h output and SYNOPSIS agree # TODO known breakage
ok 123 - commit -h output has no \t
ok 124 - commit -h output has dashed labels
ok 7 - textual symref content should be checked (aggregate)
ok 125 - commit -h output has consistent spacing
ok 99 - setup commit NNO files
ok 100 - commit NNO files crlf=true attr= LF
ok 101 - commit NNO files attr= aeol=lf crlf=true CRLF
ok 126 - commit *.adoc SYNOPSIS has dashed labels
ok 102 - commit NNO files attr= aeol=lf crlf=true CRLF_mix_LF
ok 103 - commit NNO files attr= aeol=lf crlf=true LF_mix_cr
ok 2 - disabled reflog writes no log blocks
ok 104 - commit NNO files attr= aeol=lf crlf=true CRLF_nul
ok 12 - pack-refs: honors --shared=umask with umask 027
ok 127 - commit -h output and SYNOPSIS agree
ok 128 - commit-graph -h output has no \t
ok 12 - fetching of a promised object that promisor remote no longer has
ok 13 - init: honors --shared=group with umask 002
ok 129 - commit-graph -h output has dashed labels
ok 130 - commit-graph -h output has consistent spacing
ok 1 - adding test file NN and Z/NN
ok 131 - commit-graph *.adoc SYNOPSIS has dashed labels
ok 2 - adding test file ND and Z/ND
ok 105 - setup commit NNO files
ok 106 - commit NNO files crlf=true attr= LF
ok 107 - commit NNO files attr= aeol=crlf crlf=true CRLF
ok 8 - the target of the textual symref should be checked
ok 108 - commit NNO files attr= aeol=crlf crlf=true CRLF_mix_LF
ok 3 - adding test file NM and Z/NM
ok 132 - commit-graph -h output and SYNOPSIS agree
ok 109 - commit NNO files attr= aeol=crlf crlf=true LF_mix_cr
ok 110 - commit NNO files attr= aeol=crlf crlf=true CRLF_nul
ok 13 - fetching of missing objects works with ref-in-want enabled
ok 4 - adding test file DN and Z/DN
ok 14 - pack-refs: honors --shared=group with umask 002
ok 133 - commit-tree -h output has no \t
ok 134 - commit-tree -h output has dashed labels
ok 3 - many refs results in multiple blocks
ok 135 - commit-tree -h output has consistent spacing
ok 5 - adding test file DD and Z/DD
ok 136 - commit-tree *.adoc SYNOPSIS has dashed labels
ok 15 - init: honors --shared=group with umask 022
ok 6 - adding test file DM and Z/DM
ok 1 - setup
ok 7 - adding test file MN and Z/MN
ok 33 - subtest: --run substring selector
ok 111 - setup commit NNO files
ok 137 - commit-tree -h output and SYNOPSIS agree
ok 112 - commit NNO files crlf=true attr=auto LF
ok 113 - commit NNO files attr=auto aeol=lf crlf=true CRLF
ok 8 - adding test file MD and Z/MD
ok 114 - commit NNO files attr=auto aeol=lf crlf=true CRLF_mix_LF
ok 138 - config -h output has no \t
ok 115 - commit NNO files attr=auto aeol=lf crlf=true LF_mix_cr
ok 139 - config -h output has dashed labels
ok 4 - tiny block size leads to error
ok 9 - symlink symref content should be checked
ok 9 - adding test file MM and Z/MM
ok 116 - commit NNO files attr=auto aeol=lf crlf=true CRLF_nul
ok 140 - config -h output has consistent spacing
ok 10 - adding test file SS
ok 2 - 1, 2, 3 - no carry forward
ok 11 - adding test file TT
ok 141 - config *.adoc SYNOPSIS has dashed labels
ok 16 - pack-refs: honors --shared=group with umask 022
ok 12 - prepare initial tree
ok 13 - change in branch A (removal)
ok 142 - config -h output and SYNOPSIS agree
ok 17 - init: honors --shared=group with umask 027
ok 14 - change in branch A (modification)
ok 15 - change in branch A (modification)
ok 143 - count-objects -h output has no \t
ok 144 - count-objects -h output has dashed labels
ok 16 - change in branch A (modification)
ok 145 - count-objects -h output has consistent spacing
ok 117 - setup commit NNO files
ok 17 - change in branch A (modification)
ok 118 - commit NNO files crlf=true attr=auto LF
ok 146 - count-objects *.adoc SYNOPSIS has dashed labels
ok 119 - commit NNO files attr=auto aeol=crlf crlf=true CRLF
ok 18 - change in branch A (modification)
ok 3 - 4 - carry forward local addition.
ok 120 - commit NNO files attr=auto aeol=crlf crlf=true CRLF_mix_LF
ok 19 - change in branch A (modification)
ok 121 - commit NNO files attr=auto aeol=crlf crlf=true LF_mix_cr
ok 20 - change in branch A (addition)
ok 122 - commit NNO files attr=auto aeol=crlf crlf=true CRLF_nul
ok 18 - pack-refs: honors --shared=group with umask 027
ok 21 - change in branch A (addition)
ok 147 - count-objects -h output and SYNOPSIS agree
ok 22 - change in branch A (addition)
ok 5 - small block size leads to multiple ref blocks
ok 23 - change in branch A (addition)
ok 148 - credential -h output has no \t
ok 19 - init: honors --shared=world with umask 002
ok 149 - credential -h output has dashed labels
ok 150 - credential -h output has consistent spacing
ok 24 - change in branch A (addition)
ok 14 - fetching from another promisor remote
ok 123 - setup commit NNO files
ok 151 - credential *.adoc SYNOPSIS has dashed labels
ok 25 - change in branch A (edit)
ok 124 - commit NNO files crlf=true attr=text LF
ok 4 - 5 - carry forward local addition.
ok 26 - change in branch A (change file to directory)
ok 125 - commit NNO files attr=text aeol=lf crlf=true CRLF
ok 34 - subtest: --run keyword selection
ok 126 - commit NNO files attr=text aeol=lf crlf=true CRLF_mix_LF
ok 27 - recording branch A tree
not ok 152 - credential -h output and SYNOPSIS agree # TODO known breakage
ok 127 - commit NNO files attr=text aeol=lf crlf=true LF_mix_cr
ok 128 - commit NNO files attr=text aeol=lf crlf=true CRLF_nul
ok 20 - pack-refs: honors --shared=world with umask 002
ok 153 - credential-cache -h output has no \t
ok 28 - reading original tree and checking out
ok 154 - credential-cache -h output has dashed labels
ok 155 - credential-cache -h output has consistent spacing
ok 6 - small block size fails with large reflog message
ok 29 - change in branch B (removal)
ok 156 - credential-cache *.adoc SYNOPSIS has dashed labels
ok 30 - change in branch B (modification)
ok 21 - init: honors --shared=world with umask 022
ok 31 - change in branch B (modification)
ok 32 - change in branch B (modification)
ok 5 - 6 - local addition already has the same.
not ok 157 - credential-cache -h output and SYNOPSIS agree # TODO known breakage
ok 33 - change in branch B (modification)
ok 129 - setup commit NNO files
ok 34 - change in branch B (modification)
ok 158 - credential-cache--daemon -h output has no \t
ok 130 - commit NNO files crlf=true attr=text LF
ok 159 - credential-cache--daemon -h output has dashed labels
ok 35 - change in branch B (modification)
ok 131 - commit NNO files attr=text aeol=crlf crlf=true CRLF
ok 160 - credential-cache--daemon -h output has consistent spacing
ok 132 - commit NNO files attr=text aeol=crlf crlf=true CRLF_mix_LF
ok 36 - change in branch B (addition)
ok 133 - commit NNO files attr=text aeol=crlf crlf=true LF_mix_cr
ok 37 - change in branch B (addition)
ok 22 - pack-refs: honors --shared=world with umask 022
ok 134 - commit NNO files attr=text aeol=crlf crlf=true CRLF_nul
ok 161 - credential-cache--daemon *.adoc SYNOPSIS has dashed labels
ok 38 - change in branch B (addition)
ok 39 - change in branch B (addition)
ok 15 - fetching with --filter configures a promisor remote
ok 40 - change in branch B (addition and modification)
ok 23 - init: honors --shared=world with umask 027
ok 162 - credential-cache--daemon -h output and SYNOPSIS agree
ok 7 - block size exceeding maximum supported size
ok 6 - 7 - local addition already has the same.
ok 41 - change in branch B (modification)
ok 163 - credential-store -h output has no \t
ok 10 - symlink symref content should be checked (worktree)
ok 42 - change in branch B (addition of a file to conflict with directory)
ok 164 - credential-store -h output has dashed labels
ok 165 - credential-store -h output has consistent spacing
ok 43 - recording branch B tree
ok 135 - setup commit NNO files
ok 136 - commit NNO files crlf=false attr=-text LF
ok 166 - credential-store *.adoc SYNOPSIS has dashed labels
ok 137 - commit NNO files attr=-text aeol= crlf=false CRLF
ok 138 - commit NNO files attr=-text aeol= crlf=false CRLF_mix_LF
ok 7 - 8 - conflicting addition.
ok 139 - commit NNO files attr=-text aeol= crlf=false LF_mix_cr
ok 35 - subtest: --run invalid range end
ok 24 - pack-refs: honors --shared=world with umask 027
ok 140 - commit NNO files attr=-text aeol= crlf=false CRLF_nul
not ok 167 - credential-store -h output and SYNOPSIS agree # TODO known breakage
ok 8 - restart interval at every single record
ok 168 - describe -h output has no \t
ok 169 - describe -h output has dashed labels
ok 44 - keep contents of 3 trees for easy access
ok 170 - describe -h output has consistent spacing
ok 8 - 9 - conflicting addition.
ok 171 - describe *.adoc SYNOPSIS has dashed labels
ok 9 - restart interval exceeding maximum supported interval
ok 141 - setup commit NNO files
ok 172 - describe -h output and SYNOPSIS agree
ok 142 - commit NNO files crlf=false attr=-text LF
ok 45 - 3-way merge with git read-tree -m, empty cache
ok 143 - commit NNO files attr=-text aeol=lf crlf=false CRLF
ok 173 - diagnose -h output has no \t
ok 144 - commit NNO files attr=-text aeol=lf crlf=false CRLF_mix_LF
ok 16 - fetching of missing blobs works
ok 174 - diagnose -h output has dashed labels
ok 145 - commit NNO files attr=-text aeol=lf crlf=false LF_mix_cr
ok 146 - commit NNO files attr=-text aeol=lf crlf=false CRLF_nul
ok 25 - clone: can clone reftable repository
ok 175 - diagnose -h output has consistent spacing
ok 9 - 10 - path removed.
ok 176 - diagnose *.adoc SYNOPSIS has dashed labels
ok 177 - diagnose -h output and SYNOPSIS agree
ok 10 - 11 - dirty path removed.
ok 10 - object index gets written by default with ref index
ok 147 - setup commit NNO files
ok 178 - diff -h output has no \t
ok 148 - commit NNO files crlf=false attr=-text LF
ok 179 - diff -h output has dashed labels
ok 149 - commit NNO files attr=-text aeol=crlf crlf=false CRLF
ok 46 - 3-way merge with git read-tree -m, match H
ok 180 - diff -h output has consistent spacing
ok 150 - commit NNO files attr=-text aeol=crlf crlf=false CRLF_mix_LF
ok 151 - commit NNO files attr=-text aeol=crlf crlf=false LF_mix_cr
ok 152 - commit NNO files attr=-text aeol=crlf crlf=false CRLF_nul
ok 181 - diff *.adoc SYNOPSIS has dashed labels
ok 11 - 12 - unmatching local changes being removed.
ok 36 - subtest: --invert-exit-code without --immediate
ok 47 - 1 - must not have an entry not in A.
ok 182 - diff -h output and SYNOPSIS agree
ok 11 - ref content checks should work with worktrees
ok 26 - clone: can clone reffiles into reftable repository
# passed all 11 test(s)
1..11
ok 183 - diff-files -h output has no \t
ok 184 - diff-files -h output has dashed labels
ok 12 - 13 - unmatching local changes being removed.
ok 185 - diff-files -h output has consistent spacing
ok 48 - 2 - must match B in !O && !A && B case.
ok 153 - setup commit NNO files
ok 11 - object index can be disabled
ok 154 - commit NNO files crlf=false attr= LF
# passed all 11 test(s)
1..11
ok 186 - diff-files *.adoc SYNOPSIS has dashed labels
ok 155 - commit NNO files attr= aeol=lf crlf=false CRLF
*** t1002-read-tree-m-u-2way.sh ***
ok 156 - commit NNO files attr= aeol=lf crlf=false CRLF_mix_LF
ok 157 - commit NNO files attr= aeol=lf crlf=false LF_mix_cr
*** t1003-read-tree-prefix.sh ***
ok 158 - commit NNO files attr= aeol=lf crlf=false CRLF_nul
ok 187 - diff-files -h output and SYNOPSIS agree
ok 49 - 2 - matching B alone is OK in !O && !A && B case.
ok 188 - diff-index -h output has no \t
ok 17 - fetching of missing trees does not fetch blobs
ok 189 - diff-index -h output has dashed labels
ok 190 - diff-index -h output has consistent spacing
ok 13 - 14 - unchanged in two heads.
ok 191 - diff-index *.adoc SYNOPSIS has dashed labels
ok 50 - 3 - must match A in !O && A && !B case.
ok 159 - setup commit NNO files
ok 192 - diff-index -h output and SYNOPSIS agree
ok 27 - clone: can clone reftable into reffiles repository
ok 160 - commit NNO files crlf=false attr= LF
ok 161 - commit NNO files attr= aeol=crlf crlf=false CRLF
ok 162 - commit NNO files attr= aeol=crlf crlf=false CRLF_mix_LF
ok 193 - diff-tree -h output has no \t
ok 194 - diff-tree -h output has dashed labels
ok 163 - commit NNO files attr= aeol=crlf crlf=false LF_mix_cr
ok 51 - 3 - matching A alone is OK in !O && A && !B case.
ok 195 - diff-tree -h output has consistent spacing
ok 164 - commit NNO files attr= aeol=crlf crlf=false CRLF_nul
ok 196 - diff-tree *.adoc SYNOPSIS has dashed labels
ok 14 - 15 - unchanged in two heads.
ok 28 - ref transaction: corrupted tables cause failure
ok 37 - subtest: --invert-exit-code with --immediate: all passed
ok 52 - 3 (fail) - must match A in !O && A && !B case.
ok 197 - diff-tree -h output and SYNOPSIS agree
ok 198 - difftool -h output has no \t
ok 199 - difftool -h output has dashed labels
ok 15 - 16 - conflicting local change.
ok 18 - rev-list stops traversal at missing and promised commit
ok 200 - difftool -h output has consistent spacing
ok 165 - setup commit NNO files
ok 166 - commit NNO files crlf=false attr=auto LF
ok 29 - ref transaction: corrupted tables.list cause failure
ok 167 - commit NNO files attr=auto aeol=lf crlf=false CRLF
ok 201 - difftool *.adoc SYNOPSIS has dashed labels
ok 53 - 4 - must match and be up-to-date in !O && A && B && A!=B case.
ok 168 - commit NNO files attr=auto aeol=lf crlf=false CRLF_mix_LF
ok 1 - setup
ok 169 - commit NNO files attr=auto aeol=lf crlf=false LF_mix_cr
ok 170 - commit NNO files attr=auto aeol=lf crlf=false CRLF_nul
ok 2 - read-tree --prefix
ok 16 - 17 - conflicting local change.
ok 202 - difftool -h output and SYNOPSIS agree
ok 1 - setup
ok 203 - fast-export -h output has no \t
ok 54 - 4 (fail) - must match and be up-to-date in !O && A && B && A!=B case.
ok 204 - fast-export -h output has dashed labels
ok 30 - ref transaction: refuses to write ref causing F/D conflict
ok 205 - fast-export -h output has consistent spacing
ok 3 - read-tree --prefix with leading slash exits with error
# passed all 3 test(s)
1..3
ok 206 - fast-export *.adoc SYNOPSIS has dashed labels
*** t1004-read-tree-m-u-wf.sh ***
ok 55 - 4 (fail) - must match and be up-to-date in !O && A && B && A!=B case.
ok 17 - 18 - local change already having a good result.
not ok 207 - fast-export -h output and SYNOPSIS agree # TODO known breakage
ok 171 - setup commit NNO files
ok 208 - fast-import -h output has no \t
ok 172 - commit NNO files crlf=false attr=auto LF
ok 31 - ref transaction: deleting ref with invalid name fails
ok 209 - fast-import -h output has dashed labels
ok 173 - commit NNO files attr=auto aeol=crlf crlf=false CRLF
ok 210 - fast-import -h output has consistent spacing
ok 174 - commit NNO files attr=auto aeol=crlf crlf=false CRLF_mix_LF
ok 175 - commit NNO files attr=auto aeol=crlf crlf=false LF_mix_cr
ok 56 - 5 - must match in !O && A && B && A==B case.
ok 176 - commit NNO files attr=auto aeol=crlf crlf=false CRLF_nul
ok 211 - fast-import *.adoc SYNOPSIS has dashed labels
ok 2 - 1, 2, 3 - no carry forward
ok 32 - ref transaction: can skip object ID verification
ok 38 - subtest: --invert-exit-code without --immediate: partial pass
ok 18 - 19 - local change already having a good result, further modified.
not ok 212 - fast-import -h output and SYNOPSIS agree # TODO known breakage
ok 57 - 5 - must match in !O && A && B && A==B case.
ok 213 - fetch -h output has no \t
ok 214 - fetch -h output has dashed labels
ok 215 - fetch -h output has consistent spacing
ok 177 - setup commit NNO files
ok 216 - fetch *.adoc SYNOPSIS has dashed labels
ok 178 - commit NNO files crlf=false attr=text LF
ok 179 - commit NNO files attr=text aeol=lf crlf=false CRLF
ok 33 - ref transaction: updating same ref multiple times fails
ok 58 - 5 (fail) - must match A in !O && A && B && A==B case.
ok 180 - commit NNO files attr=text aeol=lf crlf=false CRLF_mix_LF
ok 19 - 20 - no local change, use new tree.
ok 181 - commit NNO files attr=text aeol=lf crlf=false LF_mix_cr
ok 217 - fetch -h output and SYNOPSIS agree
ok 182 - commit NNO files attr=text aeol=lf crlf=false CRLF_nul
ok 218 - fetch-pack -h output has no \t
ok 19 - missing tree objects with --missing=allow-promisor and --exclude-promisor-objects
ok 219 - fetch-pack -h output has dashed labels
ok 59 - 6 - must not exist in O && !A && !B case
ok 34 - ref transaction: can delete symbolic self-reference with git-symbolic-ref(1)
ok 220 - fetch-pack -h output has consistent spacing
ok 20 - 21 - no local change, dirty cache.
ok 3 - 4 - carry forward local addition.
ok 221 - fetch-pack *.adoc SYNOPSIS has dashed labels
ok 60 - 7 - must not exist in O && !A && B && O!=B case
ok 35 - ref transaction: deleting symbolic self-reference without --no-deref fails
not ok 222 - fetch-pack -h output and SYNOPSIS agree # TODO known breakage
ok 183 - setup commit NNO files
ok 1 - two-way setup
ok 184 - commit NNO files crlf=false attr=text LF
ok 185 - commit NNO files attr=text aeol=crlf crlf=false CRLF
ok 21 - 22 - local change cache updated.
ok 223 - fmt-merge-msg -h output has no \t
ok 186 - commit NNO files attr=text aeol=crlf crlf=false CRLF_mix_LF
ok 224 - fmt-merge-msg -h output has dashed labels
ok 187 - commit NNO files attr=text aeol=crlf crlf=false LF_mix_cr
ok 2 - two-way not clobbering
ok 61 - 8 - must not exist in O && !A && B && O==B case
ok 225 - fmt-merge-msg -h output has consistent spacing
ok 188 - commit NNO files attr=text aeol=crlf crlf=false CRLF_nul
ok 36 - ref transaction: deleting symbolic self-reference with --no-deref succeeds
ok 3 - two-way with incorrect --exclude-per-directory (1)
ok 226 - fmt-merge-msg *.adoc SYNOPSIS has dashed labels
ok 39 - subtest: --invert-exit-code with --immediate: partial pass
ok 20 - missing non-root tree object and rev-list
ok 4 - two-way with incorrect --exclude-per-directory (2)
ok 22 - DF vs DF/DF case setup.
not ok 227 - fmt-merge-msg -h output and SYNOPSIS agree # TODO known breakage
ok 62 - 9 - must match and be up-to-date in O && A && !B && O!=A case
ok 228 - for-each-ref -h output has no \t
ok 37 - ref transaction: creating symbolic ref fails with F/D conflict
ok 229 - for-each-ref -h output has dashed labels
ok 230 - for-each-ref -h output has consistent spacing
ok 189 - setup commit NNO files
ok 23 - DF vs DF/DF case test.
ok 190 - commit NNO files crlf=input attr=-text LF
ok 191 - commit NNO files attr=-text aeol= crlf=input CRLF
ok 5 - two-way clobbering a ignored file
ok 231 - for-each-ref *.adoc SYNOPSIS has dashed labels
ok 192 - commit NNO files attr=-text aeol= crlf=input CRLF_mix_LF
ok 63 - 9 (fail) - must match and be up-to-date in O && A && !B && O!=A case
ok 193 - commit NNO files attr=-text aeol= crlf=input LF_mix_cr
ok 194 - commit NNO files attr=-text aeol= crlf=input CRLF_nul
ok 4 - 5 - carry forward local addition.
not ok 232 - for-each-ref -h output and SYNOPSIS agree # TODO known breakage
ok 24 - a/b (untracked) vs a case setup.
ok 233 - for-each-repo -h output has no \t
ok 64 - 9 (fail) - must match and be up-to-date in O && A && !B && O!=A case
ok 234 - for-each-repo -h output has dashed labels
ok 235 - for-each-repo -h output has consistent spacing
ok 38 - ref transaction: ref deletion
ok 236 - for-each-repo *.adoc SYNOPSIS has dashed labels
ok 25 - a/b (untracked) vs a, plus c/d case test.
ok 6 - three-way not complaining on an untracked path in both
ok 26 - read-tree supports the super-prefix
ok 237 - for-each-repo -h output and SYNOPSIS agree
ok 65 - 10 - must match and be up-to-date in O && A && !B && O==A case
ok 195 - setup commit NNO files
ok 196 - commit NNO files crlf=input attr=-text LF
ok 197 - commit NNO files attr=-text aeol=lf crlf=input CRLF
ok 238 - format-patch -h output has no \t
ok 239 - format-patch -h output has dashed labels
ok 198 - commit NNO files attr=-text aeol=lf crlf=input CRLF_mix_LF
ok 199 - commit NNO files attr=-text aeol=lf crlf=input LF_mix_cr
ok 240 - format-patch -h output has consistent spacing
ok 200 - commit NNO files attr=-text aeol=lf crlf=input CRLF_nul
ok 66 - 10 (fail) - must match and be up-to-date in O && A && !B && O==A case
ok 39 - ref transaction: writes cause auto-compaction
ok 7 - three-way not clobbering a working tree file
ok 241 - format-patch *.adoc SYNOPSIS has dashed labels
ok 21 - rev-list stops traversal at missing and promised tree
ok 5 - 6 - local addition already has the same.
ok 27 - a/b vs a, plus c/d case setup.
ok 40 - subtest: --invert-exit-code --immediate: got a failure
not ok 242 - format-patch -h output and SYNOPSIS agree # TODO known breakage
ok 67 - 10 (fail) - must match and be up-to-date in O && A && !B && O==A case
ok 243 - fsck -h output has no \t
ok 244 - fsck -h output has dashed labels
ok 201 - setup commit NNO files
ok 28 - a/b vs a, plus c/d case test.
ok 245 - fsck -h output has consistent spacing
ok 202 - commit NNO files crlf=input attr=-text LF
ok 203 - commit NNO files attr=-text aeol=crlf crlf=input CRLF
ok 8 - three-way not complaining on an untracked file
ok 246 - fsck *.adoc SYNOPSIS has dashed labels
ok 204 - commit NNO files attr=-text aeol=crlf crlf=input CRLF_mix_LF
ok 205 - commit NNO files attr=-text aeol=crlf crlf=input LF_mix_cr
ok 206 - commit NNO files attr=-text aeol=crlf crlf=input CRLF_nul
ok 68 - 11 - must match and be up-to-date in O && A && B && O!=A && O!=B && A!=B case
ok 247 - fsck -h output and SYNOPSIS agree
ok 22 - rev-list stops traversal at missing and promised blob
ok 248 - fsck-objects -h output has no \t
ok 6 - 7 - local addition already has the same.
ok 40 - ref transaction: env var disables compaction
ok 249 - fsck-objects -h output has dashed labels
ok 69 - 11 (fail) - must match and be up-to-date in O && A && B && O!=A && O!=B && A!=B case
ok 250 - fsck-objects -h output has consistent spacing
ok 9 - 3-way not overwriting local changes (setup)
ok 251 - fsck-objects *.adoc SYNOPSIS has dashed labels
ok 207 - setup commit NNO files
ok 208 - commit NNO files crlf=input attr= LF
ok 209 - commit NNO files attr= aeol=lf crlf=input CRLF
ok 70 - 11 (fail) - must match and be up-to-date in O && A && B && O!=A && O!=B && A!=B case
ok 29 - -m references the correct modified tree
ok 210 - commit NNO files attr= aeol=lf crlf=input CRLF_mix_LF
not ok 252 - fsck-objects -h output and SYNOPSIS agree # TODO known breakage
# passed all 29 test(s)
1..29
ok 211 - commit NNO files attr= aeol=lf crlf=input LF_mix_cr
ok 212 - commit NNO files attr= aeol=lf crlf=input CRLF_nul
ok 7 - 8 - conflicting addition.
ok 253 - fsmonitor--daemon -h output has no \t
*** t1005-read-tree-reset.sh ***
ok 254 - fsmonitor--daemon -h output has dashed labels
ok 10 - 3-way not overwriting local changes (our side)
ok 255 - fsmonitor--daemon -h output has consistent spacing
ok 256 - fsmonitor--daemon *.adoc SYNOPSIS has dashed labels
ok 71 - 12 - must match A in O && A && B && O!=A && A==B case
ok 41 - subtest: tests respect prerequisites
not ok 257 - fsmonitor--daemon -h output and SYNOPSIS agree # TODO known breakage
ok 8 - 9 - conflicting addition.
ok 258 - gc -h output has no \t
ok 72 - 12 - must match A in O && A && B && O!=A && A==B case
ok 213 - setup commit NNO files
ok 259 - gc -h output has dashed labels
ok 11 - 3-way not overwriting local changes (their side)
ok 214 - commit NNO files crlf=input attr= LF
ok 41 - ref transaction: alternating table sizes are compacted
ok 260 - gc -h output has consistent spacing
ok 23 - rev-list stops traversal at promisor commit, tree, and blob
ok 215 - commit NNO files attr= aeol=crlf crlf=input CRLF
ok 216 - commit NNO files attr= aeol=crlf crlf=input CRLF_mix_LF
ok 261 - gc *.adoc SYNOPSIS has dashed labels
ok 217 - commit NNO files attr= aeol=crlf crlf=input LF_mix_cr
ok 218 - commit NNO files attr= aeol=crlf crlf=input CRLF_nul
ok 73 - 12 (fail) - must match A in O && A && B && O!=A && A==B case
not ok 262 - gc -h output and SYNOPSIS agree # TODO known breakage
ok 263 - get-tar-commit-id -h output has no \t
ok 264 - get-tar-commit-id -h output has dashed labels
ok 265 - get-tar-commit-id -h output has consistent spacing
ok 9 - 10 - path removed.
ok 74 - 13 - must match A in O && A && B && O!=A && O==B case
ok 266 - get-tar-commit-id *.adoc SYNOPSIS has dashed labels
ok 267 - get-tar-commit-id -h output and SYNOPSIS agree
ok 42 - ref transaction: writes are synced
ok 219 - setup commit NNO files
ok 268 - grep -h output has no \t
ok 75 - 13 - must match A in O && A && B && O!=A && O==B case
ok 220 - commit NNO files crlf=input attr=auto LF
ok 269 - grep -h output has dashed labels
ok 221 - commit NNO files attr=auto aeol=lf crlf=input CRLF
ok 270 - grep -h output has consistent spacing
ok 222 - commit NNO files attr=auto aeol=lf crlf=input CRLF_mix_LF
ok 10 - 11 - dirty path removed.
ok 223 - commit NNO files attr=auto aeol=lf crlf=input LF_mix_cr
ok 271 - grep *.adoc SYNOPSIS has dashed labels
ok 224 - commit NNO files attr=auto aeol=lf crlf=input CRLF_nul
ok 12 - funny symlink in work tree
ok 1 - setup
ok 43 - ref transaction: empty transaction in empty repo
not ok 272 - grep -h output and SYNOPSIS agree # TODO known breakage
ok 76 - 14 - must match and be up-to-date in O && A && B && O==A && O!=B case
ok 273 - hash-object -h output has no \t
ok 42 - subtest: tests respect lazy prerequisites
ok 274 - hash-object -h output has dashed labels
ok 275 - hash-object -h output has consistent spacing
ok 13 - funny symlink in work tree, un-unlink-able
ok 2 - reset should work
ok 276 - hash-object *.adoc SYNOPSIS has dashed labels
ok 11 - 12 - unmatching local changes being removed.
ok 77 - 14 - may match B in O && A && B && O==A && O!=B case
ok 225 - setup commit NNO files
ok 226 - commit NNO files crlf=input attr=auto LF
ok 277 - hash-object -h output and SYNOPSIS agree
ok 227 - commit NNO files attr=auto aeol=crlf crlf=input CRLF
ok 228 - commit NNO files attr=auto aeol=crlf crlf=input CRLF_mix_LF
ok 229 - commit NNO files attr=auto aeol=crlf crlf=input LF_mix_cr
ok 278 - help -h output has no \t
ok 230 - commit NNO files attr=auto aeol=crlf crlf=input CRLF_nul
ok 279 - help -h output has dashed labels
ok 14 - D/F setup
ok 78 - 14 (fail) - must match and be up-to-date in O && A && B && O==A && O!=B case
ok 280 - help -h output has consistent spacing
ok 281 - help *.adoc SYNOPSIS has dashed labels
ok 12 - 13 - unmatching local changes being removed.
ok 79 - 14 (fail) - must match and be up-to-date in O && A && B && O==A && O!=B case
ok 282 - help -h output and SYNOPSIS agree
ok 283 - hook -h output has no \t
ok 231 - setup commit NNO files
ok 284 - hook -h output has dashed labels
ok 15 - D/F
ok 3 - reset should remove remnants from a failed merge
ok 232 - commit NNO files crlf=input attr=text LF
ok 24 - rev-list dies for missing objects on cmd line
ok 285 - hook -h output has consistent spacing
ok 233 - commit NNO files attr=text aeol=lf crlf=input CRLF
ok 234 - commit NNO files attr=text aeol=lf crlf=input CRLF_mix_LF
ok 80 - 15 - must match A in O && A && B && O==A && O==B case
ok 286 - hook *.adoc SYNOPSIS has dashed labels
ok 235 - commit NNO files attr=text aeol=lf crlf=input LF_mix_cr
ok 236 - commit NNO files attr=text aeol=lf crlf=input CRLF_nul
ok 287 - hook -h output and SYNOPSIS agree
ok 288 - index-pack -h output has no \t
ok 289 - index-pack -h output has dashed labels
ok 81 - 15 - must match A in O && A && B && O==A && O==B case
ok 290 - index-pack -h output has consistent spacing
ok 25 - single promisor remote can be re-initialized gracefully
ok 13 - 14 - unchanged in two heads.
ok 291 - index-pack *.adoc SYNOPSIS has dashed labels
ok 43 - subtest: nested lazy prerequisites
ok 44 - ref transaction: fails gracefully when auto compaction fails
ok 82 - 15 (fail) - must match A in O && A && B && O==A && O==B case
not ok 292 - index-pack -h output and SYNOPSIS agree # TODO known breakage
ok 237 - setup commit NNO files
ok 238 - commit NNO files crlf=input attr=text LF
ok 293 - init -h output has no \t
ok 239 - commit NNO files attr=text aeol=crlf crlf=input CRLF
ok 4 - two-way reset should remove remnants too
ok 294 - init -h output has dashed labels
ok 240 - commit NNO files attr=text aeol=crlf crlf=input CRLF_mix_LF
ok 295 - init -h output has consistent spacing
ok 241 - commit NNO files attr=text aeol=crlf crlf=input LF_mix_cr
ok 242 - commit NNO files attr=text aeol=crlf crlf=input CRLF_nul
ok 16 - D/F resolve
ok 296 - init *.adoc SYNOPSIS has dashed labels
ok 83 - 16 - A matches in one and B matches in another.
ok 297 - init -h output and SYNOPSIS agree
# passed all 83 test(s)
1..83
ok 17 - D/F recursive
# passed all 17 test(s)
1..17
ok 298 - init-db -h output has no \t
*** t1006-cat-file.sh ***
*** t1007-hash-object.sh ***
ok 299 - init-db -h output has dashed labels
ok 5 - Porcelain reset should remove remnants too
ok 300 - init-db -h output has consistent spacing
ok 14 - 15 - unchanged in two heads.
ok 301 - init-db *.adoc SYNOPSIS has dashed labels
ok 243 - setup commit NNO files
ok 244 - commit NNO files crlf=false attr=text LF
ok 245 - commit NNO files attr=text aeol= crlf=false CRLF
not ok 302 - init-db -h output and SYNOPSIS agree # TODO known breakage
ok 246 - commit NNO files attr=text aeol= crlf=false CRLF_mix_LF
ok 247 - commit NNO files attr=text aeol= crlf=false LF_mix_cr
ok 248 - commit NNO files attr=text aeol= crlf=false CRLF_nul
ok 303 - interpret-trailers -h output has no \t
ok 304 - interpret-trailers -h output has dashed labels
ok 305 - interpret-trailers -h output has consistent spacing
ok 15 - 16 - conflicting local change.
ok 6 - Porcelain checkout -f should remove remnants too
ok 306 - interpret-trailers *.adoc SYNOPSIS has dashed labels
ok 44 - subtest: lazy prereqs do not turn off tracing
ok 307 - interpret-trailers -h output and SYNOPSIS agree
ok 26 - gc repacks promisor objects separately from non-promisor objects
ok 308 - log -h output has no \t
ok 309 - log -h output has dashed labels
ok 249 - setup commit NNO files
ok 310 - log -h output has consistent spacing
ok 250 - commit NNO files crlf=true attr=text LF
ok 16 - 17 - conflicting local change.
ok 251 - commit NNO files attr=text aeol= crlf=true CRLF
ok 252 - commit NNO files attr=text aeol= crlf=true CRLF_mix_LF
ok 311 - log *.adoc SYNOPSIS has dashed labels
ok 253 - commit NNO files attr=text aeol= crlf=true LF_mix_cr
ok 254 - commit NNO files attr=text aeol= crlf=true CRLF_nul
ok 7 - Porcelain checkout -f HEAD should remove remnants too
# passed all 7 test(s)
1..7
ok 1 - setup
not ok 312 - log -h output and SYNOPSIS agree # TODO known breakage
*** t1008-read-tree-overlay.sh ***
ok 1 - usage: cmdmode -e -p
ok 2 - multiple '--stdin's are rejected
ok 2 - usage: cmdmode -p -t
ok 3 - Can't use --stdin and --stdin-paths together
ok 313 - ls-files -h output has no \t
ok 3 - usage: cmdmode -t -s
ok 314 - ls-files -h output has dashed labels
ok 4 - Can't pass filenames as arguments with --stdin-paths
ok 4 - usage: cmdmode -s --textconv
ok 315 - ls-files -h output has consistent spacing
ok 5 - Can't use --path with --stdin-paths
ok 6 - Can't use --path with --no-filters
ok 5 - usage: cmdmode --textconv --filters
ok 316 - ls-files *.adoc SYNOPSIS has dashed labels
Initialized empty Git repository in /tmp/src/git-2.49.0/t/trash directory.t1007-hash-object/test/.git/
ok 6 - usage: cmdmode --batch-all-objects -e
ok 7 - hash a file
ok 7 - usage: incompatible options: --path with --batch
ok 8 - blob does not exist in database
ok 255 - setup commit NNO files
not ok 317 - ls-files -h output and SYNOPSIS agree # TODO known breakage
ok 27 - gc does not repack promisor objects if there are none
ok 17 - 18 - local change already having a good result.
ok 9 - hash from stdin
ok 8 - usage: incompatible options: --path with --batch-check
ok 256 - commit NNO files crlf=input attr=text LF
ok 257 - commit NNO files attr=text aeol= crlf=input CRLF
ok 10 - blob does not exist in database
ok 9 - usage: --textconv requires another option
ok 318 - ls-remote -h output has no \t
ok 258 - commit NNO files attr=text aeol= crlf=input CRLF_mix_LF
ok 319 - ls-remote -h output has dashed labels
ok 11 - hash a file and write to database
ok 259 - commit NNO files attr=text aeol= crlf=input LF_mix_cr
ok 10 - usage: --filters requires another option
ok 12 - blob exists in database
ok 260 - commit NNO files attr=text aeol= crlf=input CRLF_nul
ok 320 - ls-remote -h output has consistent spacing
ok 11 - usage: -e requires another option
ok 321 - ls-remote *.adoc SYNOPSIS has dashed labels
ok 12 - usage: incompatible options: -e and --batch
ok 13 - git hash-object --stdin file1 <file0 first operates on file0, then file1
ok 13 - usage: incompatible options: -e and --batch-check
ok 45 - subtest: tests clean up after themselves
ok 14 - usage: incompatible options: -e and --follow-symlinks
ok 322 - ls-remote -h output and SYNOPSIS agree
ok 14 - set up crlf tests
ok 15 - usage: incompatible options: -e and --path=foo HEAD:some-path.txt
ok 6 - Racy git trial #2 part B
ok 323 - ls-tree -h output has no \t
ok 16 - usage: -p requires another option
ok 324 - ls-tree -h output has dashed labels
ok 15 - check that appropriate filter is invoke when --path is used
ok 7 - Racy git trial #3 part A
ok 325 - ls-tree -h output has consistent spacing
ok 17 - usage: incompatible options: -p and --batch
ok 16 - gitattributes also work in a subdirectory
ok 18 - usage: incompatible options: -p and --batch-check
ok 326 - ls-tree *.adoc SYNOPSIS has dashed labels
ok 17 - --path works in a subdirectory
ok 19 - usage: incompatible options: -p and --follow-symlinks
ok 18 - 19 - local change already having a good result, further modified.
ok 18 - check that --no-filters option works
ok 20 - usage: incompatible options: -p and --path=foo HEAD:some-path.txt
ok 19 - check that --no-filters option works with --stdin-paths
not ok 327 - ls-tree -h output and SYNOPSIS agree # TODO known breakage
ok 21 - usage: -t requires another option
Initialized empty Git repository in /tmp/src/git-2.49.0/t/trash directory.t1007-hash-object/test/.git/
ok 22 - usage: incompatible options: -t and --batch
ok 328 - mailinfo -h output has no \t
ok 23 - usage: incompatible options: -t and --batch-check
ok 20 - hash from stdin and write to database (-w --stdin)
ok 329 - mailinfo -h output has dashed labels
ok 21 - blob exists in database
ok 24 - usage: incompatible options: -t and --follow-symlinks
ok 330 - mailinfo -h output has consistent spacing
Initialized empty Git repository in /tmp/src/git-2.49.0/t/trash directory.t1007-hash-object/test/.git/
ok 25 - usage: incompatible options: -t and --path=foo HEAD:some-path.txt
ok 331 - mailinfo *.adoc SYNOPSIS has dashed labels
ok 22 - hash from stdin and write to database (--stdin -w)
ok 26 - usage: -s requires another option
ok 23 - blob exists in database
ok 27 - usage: incompatible options: -s and --batch
ok 1 - setup
not ok 332 - mailinfo -h output and SYNOPSIS agree # TODO known breakage
ok 45 - ref transaction: timeout acquiring tables.list lock
ok 28 - usage: incompatible options: -s and --batch-check
ok 24 - hash two files with names on stdin
ok 29 - usage: incompatible options: -s and --follow-symlinks
Initialized empty Git repository in /tmp/src/git-2.49.0/t/trash directory.t1007-hash-object/test/.git/
ok 333 - mailsplit -h output has no \t
ok 334 - mailsplit -h output has dashed labels
ok 261 - commit NNO and cleanup
ok 30 - usage: incompatible options: -s and --path=foo HEAD:some-path.txt
ok 335 - mailsplit -h output has consistent spacing
ok 25 - hash two files with names on stdin and write to database (-w --stdin-paths)
ok 31 - usage: too many arguments: -e one two three
ok 19 - 20 - no local change, use new tree.
ok 26 - blob exists in database
ok 336 - mailsplit *.adoc SYNOPSIS has dashed labels
ok 27 - blob exists in database
ok 32 - usage: incompatible arguments: -e with batch option --buffer
ok 2 - multi-read
# passed all 2 test(s)
1..2
ok 33 - usage: incompatible arguments: -e with batch option --follow-symlinks
*** t1009-read-tree-new-index.sh ***
Initialized empty Git repository in /tmp/src/git-2.49.0/t/trash directory.t1007-hash-object/test/.git/
ok 34 - usage: too many arguments: -p one two three
ok 46 - subtest: tests clean up even on failures
not ok 337 - mailsplit -h output and SYNOPSIS agree # TODO known breakage
ok 35 - usage: incompatible arguments: -p with batch option --buffer
ok 28 - hash two files with names on stdin and write to database (--stdin-paths -w)
ok 36 - usage: incompatible arguments: -p with batch option --follow-symlinks
ok 338 - maintenance -h output has no \t
ok 29 - blob exists in database
ok 37 - usage: too many arguments: -t one two three
ok 339 - maintenance -h output has dashed labels
ok 30 - blob exists in database
ok 38 - usage: incompatible arguments: -t with batch option --buffer
ok 340 - maintenance -h output has consistent spacing
ok 20 - 21 - no local change, dirty cache.
ok 31 - too-short tree
ok 39 - usage: incompatible arguments: -t with batch option --follow-symlinks
ok 341 - maintenance *.adoc SYNOPSIS has dashed labels
ok 40 - usage: too many arguments: -s one two three
ok 41 - usage: incompatible arguments: -s with batch option --buffer
ok 32 - malformed mode in tree
ok 42 - usage: incompatible arguments: -s with batch option --follow-symlinks
not ok 342 - maintenance -h output and SYNOPSIS agree # TODO known breakage
ok 43 - usage: too many arguments: --textconv one two three
ok 33 - empty filename in tree
ok 44 - usage: incompatible arguments: --textconv with batch option --buffer
ok 262 - commit empty gitattribues
ok 21 - DF vs DF/DF case setup.
ok 343 - merge -h output has no \t
ok 344 - merge -h output has dashed labels
ok 45 - usage: incompatible arguments: --textconv with batch option --follow-symlinks
ok 345 - merge -h output has consistent spacing
ok 46 - usage: too many arguments: --filters one two three
ok 34 - duplicate filename in tree
ok 35 - corrupt commit
ok 28 - repack -d does not irreversibly delete promisor objects
ok 346 - merge *.adoc SYNOPSIS has dashed labels
ok 47 - usage: incompatible arguments: --filters with batch option --buffer
ok 36 - corrupt tag
ok 48 - usage: incompatible arguments: --filters with batch option --follow-symlinks
ok 37 - hash-object complains about bogus type name
ok 38 - hash-object complains about truncated type name
not ok 347 - merge -h output and SYNOPSIS agree # TODO known breakage
ok 39 - --literally
ok 49 - usage: bad option combination: --buffer without batch mode
ok 40 - --literally with extra-long type
ok 22 - DF vs DF/DF case test.
ok 348 - merge-base -h output has no \t
# passed all 22 test(s)
1..22
ok 41 - --stdin outside of repository (uses SHA-1)
ok 349 - merge-base -h output has dashed labels
# passed all 41 test(s)
1..41
ok 50 - usage: bad option combination: --follow-symlinks without batch mode
ok 350 - merge-base -h output has consistent spacing
*** t1010-mktree.sh ***
*** t1011-read-tree-sparse-checkout.sh ***
ok 351 - merge-base *.adoc SYNOPSIS has dashed labels
ok 1 - setup
ok 51 - usage: bad option combination: --batch-all-objects without batch mode
ok 2 - non-existent index file
ok 352 - merge-base -h output and SYNOPSIS agree
ok 3 - empty index file
ok 47 - subtest: test_atexit is run
ok 52 - usage: bad option combination: -z without batch mode
# passed all 3 test(s)
1..3
ok 263 - commit text=auto
*** t1012-read-tree-df.sh ***
ok 48 - test_oid provides sane info by default
ok 353 - merge-file -h output has no \t
ok 354 - merge-file -h output has dashed labels
ok 53 - usage: bad option combination: -Z without batch mode
ok 49 - test_oid can look up data for SHA-1
ok 355 - merge-file -h output has consistent spacing
ok 50 - test_oid can look up data for SHA-256
ok 356 - merge-file *.adoc SYNOPSIS has dashed labels
ok 51 - test_oid can look up data for a specified algorithm
not ok 357 - merge-file -h output and SYNOPSIS agree # TODO known breakage
ok 54 - setup
ok 358 - merge-index -h output has no \t
ok 55 - blob exists
ok 359 - merge-index -h output has dashed labels
ok 56 - Type of blob is correct
ok 52 - test_bool_env
ok 360 - merge-index -h output has consistent spacing
ok 57 - Size of blob is correct
ok 361 - merge-index *.adoc SYNOPSIS has dashed labels
ok 58 - Type of blob is correct using --allow-unknown-type
ok 29 - gc stops traversal when a missing but promised object is reached
ok 59 - Size of blob is correct using --allow-unknown-type
ok 60 - Content of blob is correct
not ok 362 - merge-index -h output and SYNOPSIS agree # TODO known breakage
ok 61 - Pretty content of blob is correct
ok 264 - commit text
ok 62 - --batch output of blob is correct
ok 363 - merge-ours -h output has no \t
ok 364 - merge-ours -h output has dashed labels
ok 63 - --batch-check output of blob is correct
ok 365 - merge-ours -h output has consistent spacing
ok 366 # skip merge-ours *.adoc SYNOPSIS has dashed labels (missing BUILTIN_ADOC_MERGE_OURS)
ok 64 - --batch-command --buffer output of blob content is correct
ok 53 - git update-index without --add should fail adding
ok 367 # skip merge-ours -h output and SYNOPSIS agree (missing BUILTIN_ADOC_MERGE_OURS)
ok 54 - git update-index with --add should succeed
ok 65 - --batch-command --buffer output of blob info is correct
ok 55 - writing tree out with git write-tree
ok 368 - merge-recursive -h output has no \t
ok 56 - validate object ID of a known tree
ok 66 - --batch-command --no-buffer output of blob content is correct
ok 369 - merge-recursive -h output has dashed labels
ok 14 - no bogus intermediate values during delete
ok 57 - git update-index without --remove should fail removing
ok 370 - merge-recursive -h output has consistent spacing
ok 67 - --batch-command --no-buffer output of blob info is correct
ok 371 # skip merge-recursive *.adoc SYNOPSIS has dashed labels (missing BUILTIN_ADOC_MERGE_RECURSIVE)
ok 58 - git update-index with --remove should be able to remove
ok 372 # skip merge-recursive -h output and SYNOPSIS agree (missing BUILTIN_ADOC_MERGE_RECURSIVE)
ok 68 - custom --batch-check format
ok 59 - git write-tree should be able to write an empty tree
ok 60 - validate object ID of a known tree
ok 69 - custom --batch-command format
ok 373 - merge-recursive-ours -h output has no \t
ok 374 - merge-recursive-ours -h output has dashed labels
ok 70 - --batch-check with %(rest)
ok 375 - merge-recursive-ours -h output has consistent spacing
ok 71 - --batch without type (blob)
ok 376 # skip merge-recursive-ours *.adoc SYNOPSIS has dashed labels (missing BUILTIN_ADOC_MERGE_RECURSIVE_OURS)
ok 72 - --batch without size (blob)
ok 377 # skip merge-recursive-ours -h output and SYNOPSIS agree (missing BUILTIN_ADOC_MERGE_RECURSIVE_OURS)
ok 30 - do not fetch when checking existence of tree we construct ourselves
ok 73 - --batch-command --buffer with flush for blob info
ok 74 - --batch-command --buffer without flush for blob info
ok 378 - merge-recursive-theirs -h output has no \t
ok 379 - merge-recursive-theirs -h output has dashed labels
ok 75 - blob exists
ok 265 - commit -text
ok 61 - adding various types of objects with git update-index --add
ok 1 - setup
ok 380 - merge-recursive-theirs -h output has consistent spacing
ok 62 - showing stage with git ls-files --stage
ok 76 - Type of blob is correct
ok 266 - compare_files LF NNO_attr__aeol__true_LF.txt
ok 381 # skip merge-recursive-theirs *.adoc SYNOPSIS has dashed labels (missing BUILTIN_ADOC_MERGE_RECURSIVE_THEIRS)
ok 77 - Size of blob is correct
ok 382 # skip merge-recursive-theirs -h output and SYNOPSIS agree (missing BUILTIN_ADOC_MERGE_RECURSIVE_THEIRS)
ok 267 - compare_files CRLF NNO_attr__aeol__true_CRLF.txt
ok 63 - validate git ls-files output for a known tree
ok 78 - Type of blob is correct using --allow-unknown-type
ok 268 - compare_files CRLF_mix_LF NNO_attr__aeol__true_CRLF_mix_LF.txt
ok 64 - writing tree out with git write-tree
ok 79 - Size of blob is correct using --allow-unknown-type
ok 65 - validate object ID for a known tree
ok 383 - merge-subtree -h output has no \t
ok 1 - setup
ok 384 - merge-subtree -h output has dashed labels
ok 269 - compare_files LF_mix_CR NNO_attr__aeol__true_LF_mix_CR.txt
ok 80 - Content of blob is correct
ok 66 - showing tree with git ls-tree
ok 385 - merge-subtree -h output has consistent spacing
ok 2 - ls-tree piped to mktree (1)
ok 270 - compare_files CRLF_nul NNO_attr__aeol__true_CRLF_nul.txt
ok 81 - Pretty content of blob is correct
ok 386 # skip merge-subtree *.adoc SYNOPSIS has dashed labels (missing BUILTIN_ADOC_MERGE_SUBTREE)
ok 67 - git ls-tree output for a known tree
ok 3 - ls-tree piped to mktree (2)
ok 387 # skip merge-subtree -h output and SYNOPSIS agree (missing BUILTIN_ADOC_MERGE_SUBTREE)
ok 271 - compare_files LF NNO_attr_-text_aeol__true_LF.txt
ok 82 - --batch output of blob is correct
ok 68 - showing tree with git ls-tree -r
ok 4 - ls-tree output in wrong order given to mktree (1)
ok 2 - read-tree without .git/info/sparse-checkout
ok 272 - compare_files CRLF NNO_attr_-text_aeol__true_CRLF.txt
ok 83 - --batch-check output of blob is correct
ok 388 - merge-tree -h output has no \t
ok 5 - ls-tree output in wrong order given to mktree (2)
ok 389 - merge-tree -h output has dashed labels
ok 69 - git ls-tree -r output for a known tree
ok 273 - compare_files CRLF_mix_LF NNO_attr_-text_aeol__true_CRLF_mix_LF.txt
ok 84 - --batch-command --buffer output of blob content is correct
ok 6 - allow missing object with --missing
ok 390 - merge-tree -h output has consistent spacing
ok 70 - showing tree with git ls-tree -r -t
ok 274 - compare_files LF_mix_CR NNO_attr_-text_aeol__true_LF_mix_CR.txt
ok 7 - mktree refuses to read ls-tree -r output (1)
ok 85 - --batch-command --buffer output of blob info is correct
ok 8 - mktree refuses to read ls-tree -r output (2)
ok 391 - merge-tree *.adoc SYNOPSIS has dashed labels
ok 275 - compare_files CRLF_nul NNO_attr_-text_aeol__true_CRLF_nul.txt
ok 86 - --batch-command --no-buffer output of blob content is correct
# passed all 8 test(s)
1..8
ok 71 - git ls-tree -r output for a known tree
ok 276 - compare_files LF NNO_attr_-text_aeol_lf_true_LF.txt
ok 72 - writing partial tree out with git write-tree --prefix
ok 87 - --batch-command --no-buffer output of blob info is correct
ok 3 - read-tree with .git/info/sparse-checkout but disabled
*** t1013-read-tree-submodule.sh ***
ok 73 - validate object ID for a known tree
ok 277 - compare_files CRLF NNO_attr_-text_aeol_lf_true_CRLF.txt
ok 88 - custom --batch-check format
ok 74 - writing partial tree out with git write-tree --prefix
ok 75 - validate object ID for a known tree
ok 392 - merge-tree -h output and SYNOPSIS agree
ok 278 - compare_files CRLF_mix_LF NNO_attr_-text_aeol_lf_true_CRLF_mix_LF.txt
ok 89 - custom --batch-command format
ok 279 - compare_files LF_mix_CR NNO_attr_-text_aeol_lf_true_LF_mix_CR.txt
ok 90 - --batch-check with %(rest)
ok 393 - mktag -h output has no \t
ok 31 - exact rename does not need to fetch the blob lazily
ok 280 - compare_files CRLF_nul NNO_attr_-text_aeol_lf_true_CRLF_nul.txt
ok 76 - put invalid objects into the index
ok 394 - mktag -h output has dashed labels
ok 395 - mktag -h output has consistent spacing
ok 77 - writing this tree without --missing-ok
ok 91 - --batch without type (blob)
ok 281 - compare_files LF NNO_attr_-text_aeol_crlf_true_LF.txt
ok 78 - writing this tree with --missing-ok
ok 92 - --batch without size (blob)
ok 282 - compare_files CRLF NNO_attr_-text_aeol_crlf_true_CRLF.txt
ok 396 - mktag *.adoc SYNOPSIS has dashed labels
ok 283 - compare_files CRLF_mix_LF NNO_attr_-text_aeol_crlf_true_CRLF_mix_LF.txt
ok 93 - --batch-command --buffer with flush for blob info
ok 4 - read-tree --no-sparse-checkout with empty .git/info/sparse-checkout and enabled
ok 79 - git read-tree followed by write-tree should be idempotent
ok 94 - --batch-command --buffer without flush for blob info
ok 284 - compare_files LF_mix_CR NNO_attr_-text_aeol_crlf_true_LF_mix_CR.txt
ok 397 - mktag -h output and SYNOPSIS agree
ok 285 - compare_files CRLF_nul NNO_attr_-text_aeol_crlf_true_CRLF_nul.txt
ok 80 - validate git diff-files output for a know cache/work tree state
ok 95 - --batch-check without %(rest) considers whole line
ok 286 - compare_files LF NNO_attr_auto_aeol__true_LF.txt
ok 81 - git update-index --refresh should succeed
ok 398 - mktree -h output has no \t
ok 287 - compare_files CRLF NNO_attr_auto_aeol__true_CRLF.txt
ok 399 - mktree -h output has dashed labels
ok 82 - no diff after checkout and git update-index --refresh
ok 288 - compare_files CRLF_mix_LF NNO_attr_auto_aeol__true_CRLF_mix_LF.txt
ok 400 - mktree -h output has consistent spacing
ok 96 - tree exists
ok 289 - compare_files LF_mix_CR NNO_attr_auto_aeol__true_LF_mix_CR.txt
ok 401 - mktree *.adoc SYNOPSIS has dashed labels
ok 83 - git commit-tree records the correct tree in a commit
ok 97 - Type of tree is correct
ok 290 - compare_files CRLF_nul NNO_attr_auto_aeol__true_CRLF_nul.txt
ok 5 - read-tree with empty .git/info/sparse-checkout
ok 98 - Size of tree is correct
ok 291 - compare_files LF NNO_attr_auto_aeol_lf_true_LF.txt
ok 99 - Type of tree is correct using --allow-unknown-type
ok 84 - git commit-tree records the correct parent in a commit
ok 100 - Size of tree is correct using --allow-unknown-type
ok 292 - compare_files CRLF NNO_attr_auto_aeol_lf_true_CRLF.txt
ok 402 - mktree -h output and SYNOPSIS agree
ok 101 - Pretty content of tree is correct
ok 293 - compare_files CRLF_mix_LF NNO_attr_auto_aeol_lf_true_CRLF_mix_LF.txt
ok 102 - --batch-check output of tree is correct
ok 403 - multi-pack-index -h output has no \t
ok 294 - compare_files LF_mix_CR NNO_attr_auto_aeol_lf_true_LF_mix_CR.txt
ok 404 - multi-pack-index -h output has dashed labels
ok 6 - match directories with trailing slash
ok 85 - git commit-tree omits duplicated parent in a commit
ok 103 - --batch-command --buffer output of tree info is correct
ok 295 - compare_files CRLF_nul NNO_attr_auto_aeol_lf_true_CRLF_nul.txt
ok 405 - multi-pack-index -h output has consistent spacing
ok 104 - --batch-command --no-buffer output of tree info is correct
ok 296 - compare_files LF NNO_attr_auto_aeol_crlf_true_LF.txt
ok 406 - multi-pack-index *.adoc SYNOPSIS has dashed labels
ok 105 - custom --batch-check format
ok 86 - update-index D/F conflict
ok 297 - compare_files CRLF NNO_attr_auto_aeol_crlf_true_CRLF.txt
ok 106 - custom --batch-command format
ok 298 - compare_files CRLF_mix_LF NNO_attr_auto_aeol_crlf_true_CRLF_mix_LF.txt
ok 107 - --batch-check with %(rest)
ok 299 - compare_files LF_mix_CR NNO_attr_auto_aeol_crlf_true_LF_mix_CR.txt
not ok 407 - multi-pack-index -h output and SYNOPSIS agree # TODO known breakage
ok 108 - tree exists
ok 87 - very long name in the index handled sanely
ok 300 - compare_files CRLF_nul NNO_attr_auto_aeol_crlf_true_CRLF_nul.txt
ok 7 - match directories without trailing slash
ok 109 - Type of tree is correct
ok 301 - compare_files LF NNO_attr_text_aeol__true_LF.txt
ok 408 - mv -h output has no \t
ok 409 - mv -h output has dashed labels
ok 110 - Size of tree is correct
ok 302 - compare_files LF NNO_attr_text_aeol__true_CRLF.txt
ok 410 - mv -h output has consistent spacing
ok 8 - match directories with negated patterns
ok 32 - lazy-fetch when accessing object not in the_repository
ok 111 - Type of tree is correct using --allow-unknown-type
ok 303 - compare_files LF NNO_attr_text_aeol__true_CRLF_mix_LF.txt
ok 112 - Size of tree is correct using --allow-unknown-type
ok 411 - mv *.adoc SYNOPSIS has dashed labels
ok 304 - compare_files LF_mix_CR NNO_attr_text_aeol__true_LF_mix_CR.txt
ok 113 - Pretty content of tree is correct
ok 9 - match directories with negated patterns (2)
ok 305 - compare_files LF_nul NNO_attr_text_aeol__true_CRLF_nul.txt
ok 114 - --batch-check output of tree is correct
ok 306 - compare_files LF NNO_attr_text_aeol_lf_true_LF.txt
ok 412 - mv -h output and SYNOPSIS agree
ok 115 - --batch-command --buffer output of tree info is correct
ok 88 - more update-index D/F conflicts
ok 307 - compare_files LF NNO_attr_text_aeol_lf_true_CRLF.txt
ok 116 - --batch-command --no-buffer output of tree info is correct
ok 89 - test_must_fail on a failing git command
ok 308 - compare_files LF NNO_attr_text_aeol_lf_true_CRLF_mix_LF.txt
ok 413 - name-rev -h output has no \t
ok 414 - name-rev -h output has dashed labels
ok 309 - compare_files LF_mix_CR NNO_attr_text_aeol_lf_true_LF_mix_CR.txt
ok 117 - custom --batch-check format
ok 415 - name-rev -h output has consistent spacing
ok 90 - test_must_fail on a failing git command with env
ok 310 - compare_files LF_nul NNO_attr_text_aeol_lf_true_CRLF_nul.txt
ok 118 - custom --batch-command format
ok 91 - test_must_fail rejects a non-git command
ok 92 - test_must_fail rejects a non-git command with env
ok 10 - match directory pattern
ok 416 - name-rev *.adoc SYNOPSIS has dashed labels
ok 311 - compare_files LF NNO_attr_text_aeol_crlf_true_LF.txt
ok 119 - --batch-check with %(rest)
# passed all 92 test(s)
1..92
ok 312 - compare_files LF NNO_attr_text_aeol_crlf_true_CRLF.txt
ok 313 - compare_files LF NNO_attr_text_aeol_crlf_true_CRLF_mix_LF.txt
ok 120 - commit exists
not ok 417 - name-rev -h output and SYNOPSIS agree # TODO known breakage
ok 1 - setup
ok 314 - compare_files LF_mix_CR NNO_attr_text_aeol_crlf_true_LF_mix_CR.txt
ok 121 - Type of commit is correct
ok 315 - compare_files LF_nul NNO_attr_text_aeol_crlf_true_CRLF_nul.txt
ok 418 - notes -h output has no \t
*** t1014-read-tree-confusing.sh ***
ok 122 - Size of commit is correct
ok 419 - notes -h output has dashed labels
ok 316 - compare_files LF NNO_attr__aeol__false_LF.txt
ok 11 - checkout area changes
ok 420 - notes -h output has consistent spacing
ok 123 - Type of commit is correct using --allow-unknown-type
ok 317 - compare_files CRLF NNO_attr__aeol__false_CRLF.txt
ok 124 - Size of commit is correct using --allow-unknown-type
ok 318 - compare_files CRLF_mix_LF NNO_attr__aeol__false_CRLF_mix_LF.txt
ok 421 - notes *.adoc SYNOPSIS has dashed labels
ok 125 - Content of commit is correct
ok 319 - compare_files LF_mix_CR NNO_attr__aeol__false_LF_mix_CR.txt
ok 126 - Pretty content of commit is correct
ok 320 - compare_files CRLF_nul NNO_attr__aeol__false_CRLF_nul.txt
ok 34 - timeout if packed-refs.lock exists
ok 127 - --batch output of commit is correct
ok 321 - compare_files LF NNO_attr_-text_aeol__false_LF.txt
not ok 422 - notes -h output and SYNOPSIS agree # TODO known breakage
ok 322 - compare_files CRLF NNO_attr_-text_aeol__false_CRLF.txt
ok 128 - --batch-check output of commit is correct
ok 12 - read-tree updates worktree, absent case
ok 423 - pack-objects -h output has no \t
ok 323 - compare_files CRLF_mix_LF NNO_attr_-text_aeol__false_CRLF_mix_LF.txt
ok 424 - pack-objects -h output has dashed labels
ok 2 - 3-way (1)
ok 129 - --batch-command --buffer output of commit content is correct
ok 324 - compare_files LF_mix_CR NNO_attr_-text_aeol__false_LF_mix_CR.txt
ok 425 - pack-objects -h output has consistent spacing
ok 130 - --batch-command --buffer output of commit info is correct
ok 325 - compare_files CRLF_nul NNO_attr_-text_aeol__false_CRLF_nul.txt
ok 131 - --batch-command --no-buffer output of commit content is correct
ok 326 - compare_files LF NNO_attr_-text_aeol_lf_false_LF.txt
ok 426 - pack-objects *.adoc SYNOPSIS has dashed labels
ok 132 - --batch-command --no-buffer output of commit info is correct
ok 327 - compare_files CRLF NNO_attr_-text_aeol_lf_false_CRLF.txt
ok 328 - compare_files CRLF_mix_LF NNO_attr_-text_aeol_lf_false_CRLF_mix_LF.txt
ok 133 - custom --batch-check format
ok 329 - compare_files LF_mix_CR NNO_attr_-text_aeol_lf_false_LF_mix_CR.txt
not ok 427 - pack-objects -h output and SYNOPSIS agree # TODO known breakage
ok 33 - push should not fetch new commit objects
ok 134 - custom --batch-command format
ok 330 - compare_files CRLF_nul NNO_attr_-text_aeol_lf_false_CRLF_nul.txt
ok 135 - --batch-check with %(rest)
ok 428 - pack-redundant -h output has no \t
ok 331 - compare_files LF NNO_attr_-text_aeol_crlf_false_LF.txt
ok 136 - --batch without type (commit)
ok 429 - pack-redundant -h output has dashed labels
ok 332 - compare_files CRLF NNO_attr_-text_aeol_crlf_false_CRLF.txt
ok 13 - read-tree will not throw away dirty changes, non-sparse
ok 430 - pack-redundant -h output has consistent spacing
ok 137 - --batch without size (commit)
ok 333 - compare_files CRLF_mix_LF NNO_attr_-text_aeol_crlf_false_CRLF_mix_LF.txt
ok 138 - commit exists
ok 3 - 3-way (2)
ok 334 - compare_files LF_mix_CR NNO_attr_-text_aeol_crlf_false_LF_mix_CR.txt
ok 431 - pack-redundant *.adoc SYNOPSIS has dashed labels
ok 139 - Type of commit is correct
ok 140 - Size of commit is correct
ok 335 - compare_files CRLF_nul NNO_attr_-text_aeol_crlf_false_CRLF_nul.txt
ok 141 - Type of commit is correct using --allow-unknown-type
ok 336 - compare_files LF NNO_attr_auto_aeol__false_LF.txt
ok 432 - pack-redundant -h output and SYNOPSIS agree
ok 142 - Size of commit is correct using --allow-unknown-type
ok 34 - setup for promisor.quiet tests
ok 337 - compare_files CRLF NNO_attr_auto_aeol__false_CRLF.txt
ok 143 - Content of commit is correct
ok 1 - create base tree
ok 433 - pack-refs -h output has no \t
ok 338 - compare_files CRLF_mix_LF NNO_attr_auto_aeol__false_CRLF_mix_LF.txt
ok 144 - Pretty content of commit is correct
ok 2 - enable core.protectHFS for rejection tests
ok 434 - pack-refs -h output has dashed labels
ok 3 - enable core.protectNTFS for rejection tests
ok 339 - compare_files LF_mix_CR NNO_attr_auto_aeol__false_LF_mix_CR.txt
ok 435 - pack-refs -h output has consistent spacing
ok 145 - --batch output of commit is correct
ok 35 # skip promisor.quiet=false shows progress messages (missing TTY)
ok 36 # skip promisor.quiet=true does not show progress messages (missing TTY)
ok 4 - reject . at end of path
ok 340 - compare_files CRLF_nul NNO_attr_auto_aeol__false_CRLF_nul.txt
ok 37 # skip promisor.quiet=unconfigured shows progress messages (missing TTY)
ok 146 - --batch-check output of commit is correct
ok 436 - pack-refs *.adoc SYNOPSIS has dashed labels
ok 14 - read-tree will not throw away dirty changes, sparse
ok 341 - compare_files LF NNO_attr_auto_aeol_lf_false_LF.txt
ok 5 - reject . as subtree
ok 147 - --batch-command --buffer output of commit content is correct
ok 342 - compare_files CRLF NNO_attr_auto_aeol_lf_false_CRLF.txt
ok 4 - 3-way (3)
ok 6 - reject .. at end of path
# passed all 37 test(s)
# SKIP no web server found at ''
1..37
ok 148 - --batch-command --buffer output of commit info is correct
ok 437 - pack-refs -h output and SYNOPSIS agree
ok 343 - compare_files CRLF_mix_LF NNO_attr_auto_aeol_lf_false_CRLF_mix_LF.txt
ok 149 - --batch-command --no-buffer output of commit content is correct
ok 344 - compare_files LF_mix_CR NNO_attr_auto_aeol_lf_false_LF_mix_CR.txt
ok 438 - patch-id -h output has no \t
ok 7 - reject .. as subtree
ok 150 - --batch-command --no-buffer output of commit info is correct
ok 439 - patch-id -h output has dashed labels
ok 345 - compare_files CRLF_nul NNO_attr_auto_aeol_lf_false_CRLF_nul.txt
ok 440 - patch-id -h output has consistent spacing
ok 151 - custom --batch-check format
*** t1015-read-index-unmerged.sh ***
ok 8 - reject .git at end of path
ok 346 - compare_files LF NNO_attr_auto_aeol_crlf_false_LF.txt
ok 15 - read-tree updates worktree, dirty case
ok 152 - custom --batch-command format
ok 441 - patch-id *.adoc SYNOPSIS has dashed labels
ok 347 - compare_files CRLF NNO_attr_auto_aeol_crlf_false_CRLF.txt
ok 9 - reject .git as subtree
ok 153 - --batch-check with %(rest)
ok 348 - compare_files CRLF_mix_LF NNO_attr_auto_aeol_crlf_false_CRLF_mix_LF.txt
ok 10 - reject .GIT at end of path
ok 349 - compare_files LF_mix_CR NNO_attr_auto_aeol_crlf_false_LF_mix_CR.txt
ok 154 - --batch without type (commit)
ok 442 - patch-id -h output and SYNOPSIS agree
ok 350 - compare_files CRLF_nul NNO_attr_auto_aeol_crlf_false_CRLF_nul.txt
ok 155 - --batch without size (commit)
ok 11 - reject .GIT as subtree
ok 351 - compare_files LF NNO_attr_text_aeol__false_LF.txt
ok 5 - 2-way (1)
ok 443 - pickaxe -h output has no \t
# passed all 5 test(s)
1..5
ok 16 - read-tree removes worktree, dirty case
ok 12 - reject {u200c}.Git at end of path
ok 444 - pickaxe -h output has dashed labels
ok 352 - compare_files LF NNO_attr_text_aeol__false_CRLF.txt
ok 445 - pickaxe -h output has consistent spacing
ok 353 - compare_files LF NNO_attr_text_aeol__false_CRLF_mix_LF.txt
ok 156 - tag exists
*** t1016-compatObjectFormat.sh ***
ok 446 # skip pickaxe *.adoc SYNOPSIS has dashed labels (missing BUILTIN_ADOC_PICKAXE)
ok 13 - reject {u200c}.Git as subtree
ok 354 - compare_files LF_mix_CR NNO_attr_text_aeol__false_LF_mix_CR.txt
ok 447 # skip pickaxe -h output and SYNOPSIS agree (missing BUILTIN_ADOC_PICKAXE)
ok 157 - Type of tag is correct
ok 355 - compare_files LF_nul NNO_attr_text_aeol__false_CRLF_nul.txt
ok 14 - reject .gI{u200c}T at end of path
ok 158 - Size of tag is correct
ok 448 - prune -h output has no \t
ok 356 - compare_files LF NNO_attr_text_aeol_lf_false_LF.txt
ok 449 - prune -h output has dashed labels
ok 159 - Type of tag is correct using --allow-unknown-type
ok 15 - reject .gI{u200c}T as subtree
ok 450 - prune -h output has consistent spacing
ok 357 - compare_files LF NNO_attr_text_aeol_lf_false_CRLF.txt
ok 160 - Size of tag is correct using --allow-unknown-type
ok 17 - read-tree adds to worktree, absent case
ok 358 - compare_files LF NNO_attr_text_aeol_lf_false_CRLF_mix_LF.txt
ok 161 - Content of tag is correct
ok 451 - prune *.adoc SYNOPSIS has dashed labels
ok 16 - reject .GiT{u200c} at end of path
ok 359 - compare_files LF_mix_CR NNO_attr_text_aeol_lf_false_LF_mix_CR.txt
ok 162 - Pretty content of tag is correct
ok 17 - reject .GiT{u200c} as subtree
ok 360 - compare_files LF_nul NNO_attr_text_aeol_lf_false_CRLF_nul.txt
ok 163 - --batch output of tag is correct
ok 452 - prune -h output and SYNOPSIS agree
ok 361 - compare_files LF NNO_attr_text_aeol_crlf_false_LF.txt
ok 18 - reject git~1 at end of path
ok 164 - --batch-check output of tag is correct
ok 362 - compare_files LF NNO_attr_text_aeol_crlf_false_CRLF.txt
ok 453 - prune-packed -h output has no \t
ok 165 - --batch-command --buffer output of tag content is correct
ok 19 - reject git~1 as subtree
ok 454 - prune-packed -h output has dashed labels
ok 363 - compare_files LF NNO_attr_text_aeol_crlf_false_CRLF_mix_LF.txt
ok 18 - read-tree adds to worktree, dirty case
ok 455 - prune-packed -h output has consistent spacing
ok 166 - --batch-command --buffer output of tag info is correct
ok 364 - compare_files LF_mix_CR NNO_attr_text_aeol_crlf_false_LF_mix_CR.txt
ok 20 - reject .git.{space} at end of path
ok 167 - --batch-command --no-buffer output of tag content is correct
ok 365 - compare_files LF_nul NNO_attr_text_aeol_crlf_false_CRLF_nul.txt
ok 456 - prune-packed *.adoc SYNOPSIS has dashed labels
ok 21 - reject .git.{space} as subtree
ok 366 - compare_files LF NNO_attr__aeol__input_LF.txt
ok 168 - --batch-command --no-buffer output of tag info is correct
ok 19 - index removal and worktree narrowing at the same time
ok 367 - compare_files CRLF NNO_attr__aeol__input_CRLF.txt
ok 22 - reject backslashes at end of path
ok 169 - custom --batch-check format
ok 457 - prune-packed -h output and SYNOPSIS agree
ok 368 - compare_files CRLF_mix_LF NNO_attr__aeol__input_CRLF_mix_LF.txt
ok 170 - custom --batch-command format
ok 23 - reject backslashes as subtree
ok 369 - compare_files LF_mix_CR NNO_attr__aeol__input_LF_mix_CR.txt
ok 171 - --batch-check with %(rest)
ok 458 - pull -h output has no \t
ok 24 - reject backslashes2 at end of path
ok 20 - read-tree --reset removes outside worktree
ok 459 - pull -h output has dashed labels
ok 370 - compare_files CRLF_nul NNO_attr__aeol__input_CRLF_nul.txt
ok 172 - --batch without type (tag)
ok 460 - pull -h output has consistent spacing
ok 371 - compare_files LF NNO_attr_-text_aeol__input_LF.txt
ok 25 - reject backslashes2 as subtree
ok 173 - --batch without size (tag)
ok 372 - compare_files CRLF NNO_attr_-text_aeol__input_CRLF.txt
ok 174 - tag exists
ok 26 - reject .git...:alternate-stream at end of path
ok 21 - print warnings when some worktree updates disabled
ok 461 - pull *.adoc SYNOPSIS has dashed labels
ok 373 - compare_files CRLF_mix_LF NNO_attr_-text_aeol__input_CRLF_mix_LF.txt
ok 175 - Type of tag is correct
ok 27 - reject .git...:alternate-stream as subtree
ok 176 - Size of tag is correct
ok 374 - compare_files LF_mix_CR NNO_attr_-text_aeol__input_LF_mix_CR.txt
ok 177 - Type of tag is correct using --allow-unknown-type
ok 375 - compare_files CRLF_nul NNO_attr_-text_aeol__input_CRLF_nul.txt
ok 462 - pull -h output and SYNOPSIS agree
ok 1 - setup modify/delete + directory/file conflict
ok 178 - Size of tag is correct using --allow-unknown-type
ok 376 - compare_files LF NNO_attr_-text_aeol_lf_input_LF.txt
ok 179 - Content of tag is correct
ok 22 - checkout without --ignore-skip-worktree-bits
ok 463 - push -h output has no \t
ok 377 - compare_files CRLF NNO_attr_-text_aeol_lf_input_CRLF.txt
ok 464 - push -h output has dashed labels
ok 28 - utf-8 paths allowed with core.protectHFS off
ok 180 - Pretty content of tag is correct
ok 378 - compare_files CRLF_mix_LF NNO_attr_-text_aeol_lf_input_CRLF_mix_LF.txt
# passed all 28 test(s)
1..28
ok 465 - push -h output has consistent spacing
ok 181 - --batch output of tag is correct
ok 379 - compare_files LF_mix_CR NNO_attr_-text_aeol_lf_input_LF_mix_CR.txt
*** t1020-subdirectory.sh ***
ok 182 - --batch-check output of tag is correct
ok 380 - compare_files CRLF_nul NNO_attr_-text_aeol_lf_input_CRLF_nul.txt
ok 466 - push *.adoc SYNOPSIS has dashed labels
ok 183 - --batch-command --buffer output of tag content is correct
ok 23 - checkout with --ignore-skip-worktree-bits
ok 381 - compare_files LF NNO_attr_-text_aeol_crlf_input_LF.txt
# passed all 23 test(s)
1..23
ok 184 - --batch-command --buffer output of tag info is correct
ok 382 - compare_files CRLF NNO_attr_-text_aeol_crlf_input_CRLF.txt
*** t1021-rerere-in-workdir.sh ***
ok 1 - setup sha1 repository
ok 185 - --batch-command --no-buffer output of tag content is correct
not ok 467 - push -h output and SYNOPSIS agree # TODO known breakage
ok 383 - compare_files CRLF_mix_LF NNO_attr_-text_aeol_crlf_input_CRLF_mix_LF.txt
ok 2 - read-tree --reset cleans unmerged entries
ok 186 - --batch-command --no-buffer output of tag info is correct
ok 2 - create a sha1  tagged blob
ok 384 - compare_files LF_mix_CR NNO_attr_-text_aeol_crlf_input_LF_mix_CR.txt
ok 187 - custom --batch-check format
ok 468 - range-diff -h output has no \t
ok 385 - compare_files CRLF_nul NNO_attr_-text_aeol_crlf_input_CRLF_nul.txt
ok 3 - create a sha1 tagged tree
ok 469 - range-diff -h output has dashed labels
ok 188 - custom --batch-command format
ok 386 - compare_files LF NNO_attr_auto_aeol__input_LF.txt
ok 470 - range-diff -h output has consistent spacing
ok 189 - --batch-check with %(rest)
ok 4 - create a sha1 tagged commit
ok 387 - compare_files CRLF NNO_attr_auto_aeol__input_CRLF.txt
ok 190 - --batch without type (tag)
ok 471 - range-diff *.adoc SYNOPSIS has dashed labels
ok 5 # skip create a sha1 signed commit (missing GPG2)
ok 388 - compare_files CRLF_mix_LF NNO_attr_auto_aeol__input_CRLF_mix_LF.txt
ok 191 - --batch without size (tag)
ok 6 # skip create a sha1 signed tag (missing GPG2)
ok 389 - compare_files LF_mix_CR NNO_attr_auto_aeol__input_LF_mix_CR.txt
ok 192 - Reach a blob from a tag pointing to it
ok 390 - compare_files CRLF_nul NNO_attr_auto_aeol__input_CRLF_nul.txt
ok 3 - One reset --hard cleans unmerged entries
ok 193 - Passing -t with --batch fails
not ok 472 - range-diff -h output and SYNOPSIS agree # TODO known breakage
ok 194 - Passing --batch with -t fails
ok 391 - compare_files LF NNO_attr_auto_aeol_lf_input_LF.txt
ok 195 - Passing -s with --batch fails
ok 392 - compare_files CRLF NNO_attr_auto_aeol_lf_input_CRLF.txt
ok 473 - read-tree -h output has no \t
ok 474 - read-tree -h output has dashed labels
ok 196 - Passing --batch with -s fails
ok 393 - compare_files CRLF_mix_LF NNO_attr_auto_aeol_lf_input_CRLF_mix_LF.txt
ok 197 - Passing -e with --batch fails
ok 475 - read-tree -h output has consistent spacing
ok 198 - Passing --batch with -e fails
ok 394 - compare_files LF_mix_CR NNO_attr_auto_aeol_lf_input_LF_mix_CR.txt
ok 199 - Passing -p with --batch fails
ok 395 - compare_files CRLF_nul NNO_attr_auto_aeol_lf_input_CRLF_nul.txt
ok 200 - Passing --batch with -p fails
ok 476 - read-tree *.adoc SYNOPSIS has dashed labels
ok 201 - Passing <type> with --batch fails
ok 7 - create a sha1 branch
ok 8 # skip create another sha1 signed tag (missing GPG2)
ok 202 - Passing --batch with <type> fails
ok 396 - compare_files LF NNO_attr_auto_aeol_crlf_input_LF.txt
ok 9 # skip merge the sha1 branches together (missing GPG2)
ok 10 # skip create additional sha1 signed commits (missing GPG2)
ok 11 # skip create additional sha1 signed tags (missing GPG2)
ok 203 - Passing oid with --batch fails
ok 397 - compare_files CRLF NNO_attr_auto_aeol_crlf_input_CRLF.txt
ok 477 - read-tree -h output and SYNOPSIS agree
ok 204 - Passing -t with --batch-check fails
ok 1 - setup
ok 205 - Passing --batch-check with -t fails
ok 398 - compare_files CRLF_mix_LF NNO_attr_auto_aeol_crlf_input_CRLF_mix_LF.txt
ok 206 - Passing -s with --batch-check fails
ok 399 - compare_files LF_mix_CR NNO_attr_auto_aeol_crlf_input_LF_mix_CR.txt
ok 478 - rebase -h output has no \t
ok 207 - Passing --batch-check with -s fails
ok 479 - rebase -h output has dashed labels
ok 208 - Passing -e with --batch-check fails
ok 400 - compare_files CRLF_nul NNO_attr_auto_aeol_crlf_input_CRLF_nul.txt
ok 480 - rebase -h output has consistent spacing
ok 209 - Passing --batch-check with -e fails
ok 2 - update-index and ls-files
ok 401 - compare_files LF NNO_attr_text_aeol__input_LF.txt
ok 210 - Passing -p with --batch-check fails
ok 402 - compare_files LF NNO_attr_text_aeol__input_CRLF.txt
ok 211 - Passing --batch-check with -p fails
ok 481 - rebase *.adoc SYNOPSIS has dashed labels
ok 403 - compare_files LF NNO_attr_text_aeol__input_CRLF_mix_LF.txt
ok 3 - cat-file
ok 212 - Passing <type> with --batch-check fails
ok 4 - setup directory/file conflict + simple edit/edit
ok 213 - Passing --batch-check with <type> fails
ok 404 - compare_files LF_mix_CR NNO_attr_text_aeol__input_LF_mix_CR.txt
ok 214 - Passing oid with --batch-check fails
ok 215 - Passing -t with --batch-command fails
ok 405 - compare_files LF_nul NNO_attr_text_aeol__input_CRLF_nul.txt
not ok 482 - rebase -h output and SYNOPSIS agree # TODO known breakage
ok 216 - Passing --batch-command with -t fails
ok 4 - diff-files
ok 406 - compare_files LF NNO_attr_text_aeol_lf_input_LF.txt
ok 217 - Passing -s with --batch-command fails
ok 483 - receive-pack -h output has no \t
ok 218 - Passing --batch-command with -s fails
ok 12 - setup sha256 repository
ok 5 - write-tree
ok 484 - receive-pack -h output has dashed labels
ok 407 - compare_files LF NNO_attr_text_aeol_lf_input_CRLF.txt
ok 219 - Passing -e with --batch-command fails
ok 485 - receive-pack -h output has consistent spacing
ok 408 - compare_files LF NNO_attr_text_aeol_lf_input_CRLF_mix_LF.txt
ok 220 - Passing --batch-command with -e fails
ok 13 - create a sha256  tagged blob
ok 6 - checkout-index
ok 221 - Passing -p with --batch-command fails
ok 409 - compare_files LF_mix_CR NNO_attr_text_aeol_lf_input_LF_mix_CR.txt
ok 486 - receive-pack *.adoc SYNOPSIS has dashed labels
ok 222 - Passing --batch-command with -p fails
ok 14 - create a sha256 tagged tree
ok 1 - setup
ok 410 - compare_files LF_nul NNO_attr_text_aeol_lf_input_CRLF_nul.txt
ok 223 - Passing <type> with --batch-command fails
ok 5 - git merge --abort succeeds despite D/F conflict
ok 224 - Passing --batch-command with <type> fails
ok 15 - create a sha256 tagged commit
ok 411 - compare_files LF NNO_attr_text_aeol_crlf_input_LF.txt
ok 16 # skip create a sha256 signed commit (missing GPG2)
ok 17 # skip create a sha256 signed tag (missing GPG2)
ok 225 - Passing oid with --batch-command fails
ok 487 - receive-pack -h output and SYNOPSIS agree
ok 412 - compare_files LF NNO_attr_text_aeol_crlf_input_CRLF.txt
ok 226 - Passing -t with --batch fails
ok 413 - compare_files LF NNO_attr_text_aeol_crlf_input_CRLF_mix_LF.txt
ok 488 - reflog -h output has no \t
ok 227 - Passing --batch with -t fails
ok 489 - reflog -h output has dashed labels
ok 414 - compare_files LF_mix_CR NNO_attr_text_aeol_crlf_input_LF_mix_CR.txt
ok 228 - Passing -s with --batch fails
ok 490 - reflog -h output has consistent spacing
ok 229 - Passing --batch with -s fails
ok 415 - compare_files LF_nul NNO_attr_text_aeol_crlf_input_CRLF_nul.txt
ok 230 - Passing -e with --batch fails
ok 416 - setup config for checkout attr=-text ident= aeol= core.autocrlf=true
ok 491 - reflog *.adoc SYNOPSIS has dashed labels
ok 231 - Passing --batch with -e fails
ok 232 - Passing -p with --batch fails
ok 417 - setup LF checkout  with -c core.eol=lf
ok 18 - create a sha256 branch
ok 233 - Passing --batch with -p fails
ok 19 # skip create another sha256 signed tag (missing GPG2)
ok 20 # skip merge the sha256 branches together (missing GPG2)
ok 21 # skip create additional sha256 signed commits (missing GPG2)
ok 234 - Passing <type> with --batch fails
ok 22 # skip create additional sha256 signed tags (missing GPG2)
ok 6 - git am --skip succeeds despite D/F conflict
ok 492 - reflog -h output and SYNOPSIS agree
ok 2 - rerere in workdir
ok 235 - Passing --batch with <type> fails
# passed all 6 test(s)
1..6
ok 418 - setup CRLF checkout  with -c core.eol=lf
ok 7 - read-tree
ok 236 - Passing oid with --batch fails
ok 493 - refs -h output has no \t
ok 237 - Passing -t with --batch-check fails
ok 494 - refs -h output has dashed labels
ok 23 - Verify blob hello's sha1 oid
ok 419 - setup LF_mix_CR checkout  with -c core.eol=lf
*** t1022-read-tree-partial-clone.sh ***
ok 238 - Passing --batch-check with -t fails
ok 495 - refs -h output has consistent spacing
ok 8 - alias expansion
ok 239 - Passing -s with --batch-check fails
ok 24 - Verify blob hello's sha256 oid
ok 240 - Passing --batch-check with -s fails
ok 420 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 496 - refs *.adoc SYNOPSIS has dashed labels
ok 241 - Passing -e with --batch-check fails
ok 9 - !alias expansion
ok 25 - Verify hello's sha1 type
ok 242 - Passing --batch-check with -e fails
ok 243 - Passing -p with --batch-check fails
ok 421 - setup LF_nul checkout  with -c core.eol=lf
ok 244 - Passing --batch-check with -p fails
ok 26 - Verify hello's sha256 type
ok 10 - GIT_PREFIX for !alias
ok 497 - refs -h output and SYNOPSIS agree
ok 245 - Passing <type> with --batch-check fails
not ok 3 - rerere in workdir (relative) # TODO known breakage
ok 246 - Passing --batch-check with <type> fails
# still have 1 known breakage(s)
# passed all remaining 2 test(s)
1..3
ok 27 - Verify hello's sha1 size
ok 498 - remote -h output has no \t
ok 247 - Passing oid with --batch-check fails
ok 11 - GIT_PREFIX for built-ins
ok 499 - remote -h output has dashed labels
*** t1050-large.sh ***
ok 248 - Passing -t with --batch-command fails
ok 500 - remote -h output has consistent spacing
ok 28 - Verify hello's sha256 size
ok 422 - ls-files --eol attr=-text  aeol= core.autocrlf=true core.eol=lf
ok 249 - Passing --batch-command with -t fails
ok 423 - checkout attr=-text  aeol= core.autocrlf=true core.eol=lf file=LF
ok 501 - remote *.adoc SYNOPSIS has dashed labels
ok 250 - Passing -s with --batch-command fails
ok 29 - Verify hello's sha1 pretty content
ok 12 - no file/rev ambiguity check inside .git
ok 424 - checkout attr=-text  aeol= core.autocrlf=true core.eol=lf file=CRLF
ok 251 - Passing --batch-command with -s fails
ok 252 - Passing -e with --batch-command fails
ok 425 - checkout attr=-text  aeol= core.autocrlf=true core.eol=lf file=CRLF_mix_LF
ok 30 - Verify hello's sha256 pretty content
ok 253 - Passing --batch-command with -e fails
not ok 502 - remote -h output and SYNOPSIS agree # TODO known breakage
ok 22 - helper (store) times out
ok 426 - checkout attr=-text  aeol= core.autocrlf=true core.eol=lf file=LF_mix_CR
ok 254 - Passing -p with --batch-command fails
ok 31 - Verify hello's sha1 content
ok 255 - Passing --batch-command with -p fails
ok 427 - checkout attr=-text  aeol= core.autocrlf=true core.eol=lf file=LF_nul
ok 503 - remote-ext -h output has no \t
ok 504 - remote-ext -h output has dashed labels
ok 428 - setup config for checkout attr=-text ident= aeol=lf core.autocrlf=true
ok 256 - Passing <type> with --batch-command fails
ok 13 - no file/rev ambiguity check inside a bare repo (explicit GIT_DIR)
ok 32 - Verify hello's sha256 content
ok 505 - remote-ext -h output has consistent spacing
ok 257 - Passing --batch-command with <type> fails
ok 258 - Passing oid with --batch-command fails
ok 429 - setup LF checkout  with -c core.eol=lf
ok 506 - remote-ext *.adoc SYNOPSIS has dashed labels
ok 259 - Passing -t with --follow-symlinks fails
ok 33 - Verify tree tree's sha1 oid
ok 260 - Passing -s with --follow-symlinks fails
ok 14 - no file/rev ambiguity check inside a bare repo
ok 261 - Passing -e with --follow-symlinks fails
ok 34 - Verify tree tree's sha256 oid
ok 430 - setup CRLF checkout  with -c core.eol=lf
ok 262 - Passing -p with --follow-symlinks fails
not ok 507 - remote-ext -h output and SYNOPSIS agree # TODO known breakage
ok 263 - Passing -t with --follow-symlinks fails
ok 35 - Verify tree's sha1 type
ok 431 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 264 - Passing -s with --follow-symlinks fails
ok 508 - remote-fd -h output has no \t
ok 265 - Passing -e with --follow-symlinks fails
ok 432 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 509 - remote-fd -h output has dashed labels
ok 266 - Passing -p with --follow-symlinks fails
ok 36 - Verify tree's sha256 type
ok 510 - remote-fd -h output has consistent spacing
ok 433 - setup LF_nul checkout  with -c core.eol=lf
ok 15 - detection should not be fooled by a symlink
ok 267 - --batch-check for a non-existent named object
# passed all 15 test(s)
1..15
ok 37 - Verify tree's sha1 size
ok 511 - remote-fd *.adoc SYNOPSIS has dashed labels
ok 268 - --batch-check for a non-existent hash
*** t1051-large-conversion.sh ***
ok 38 - Verify tree's sha256 size
ok 269 - --batch for an existent and a non-existent hash
not ok 512 - remote-fd -h output and SYNOPSIS agree # TODO known breakage
ok 434 - ls-files --eol attr=-text  aeol=lf core.autocrlf=true core.eol=lf
ok 270 - --batch-check for an empty line
ok 39 - Verify tree's sha1 pretty content
ok 1 - core.bigFileThreshold must be non-negative
ok 435 - checkout attr=-text  aeol=lf core.autocrlf=true core.eol=lf file=LF
ok 271 - empty --batch-check notices missing object
ok 513 - repack -h output has no \t
ok 23 - test cleanup removes everything
ok 514 - repack -h output has dashed labels
# passed all 23 test(s)
1..23
ok 436 - checkout attr=-text  aeol=lf core.autocrlf=true core.eol=lf file=CRLF
ok 40 - Verify tree's sha256 pretty content
ok 272 - --batch with multiple oids gives correct format
ok 515 - repack -h output has consistent spacing
*** t1060-object-corruption.sh ***
ok 437 - checkout attr=-text  aeol=lf core.autocrlf=true core.eol=lf file=CRLF_mix_LF
ok 41 - Verify tree's sha1 content
ok 516 - repack *.adoc SYNOPSIS has dashed labels
ok 273 - --batch, -z with multiple oids gives correct format
ok 2 - setup
ok 438 - checkout attr=-text  aeol=lf core.autocrlf=true core.eol=lf file=LF_mix_CR
ok 42 - Verify tree's sha256 content
ok 439 - checkout attr=-text  aeol=lf core.autocrlf=true core.eol=lf file=LF_nul
ok 274 - --batch, -Z with multiple oids gives correct format
ok 440 - setup config for checkout attr=-text ident= aeol=crlf core.autocrlf=true
ok 517 - repack -h output and SYNOPSIS agree
ok 1 - read-tree in partial clone prefetches in one batch
# passed all 1 test(s)
1..1
*** t1090-sparse-checkout-scope.sh ***
ok 43 - Verify commit commit's sha1 oid
ok 441 - setup LF checkout  with -c core.eol=lf
ok 275 - --batch-check with multiple oids gives correct format
ok 44 - Verify commit commit's sha256 oid
ok 518 - replace -h output has no \t
ok 519 - replace -h output has dashed labels
ok 3 - enter "large" codepath, with small core.bigFileThreshold
ok 276 - --batch-check, -z with multiple oids gives correct format
ok 442 - setup CRLF checkout  with -c core.eol=lf
ok 520 - replace -h output has consistent spacing
ok 45 - Verify commit's sha1 type
ok 277 - --batch-check, -Z with multiple oids gives correct format
ok 443 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 521 - replace *.adoc SYNOPSIS has dashed labels
ok 46 - Verify commit's sha256 type
ok 444 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 47 - Verify commit's sha1 size
ok 522 - replace -h output and SYNOPSIS agree
ok 4 - add with -c core.compression=0
ok 278 - --batch-command with multiple info calls gives correct format
ok 445 - setup LF_nul checkout  with -c core.eol=lf
ok 48 - Verify commit's sha256 size
ok 523 - replay -h output has no \t
ok 524 - replay -h output has dashed labels
ok 525 - replay -h output has consistent spacing
ok 49 - Verify commit's sha1 pretty content
ok 526 - replay *.adoc SYNOPSIS has dashed labels
ok 446 - ls-files --eol attr=-text  aeol=crlf core.autocrlf=true core.eol=lf
ok 279 - --batch-command with multiple command calls gives correct format
ok 1 - setup input tests
ok 50 - Verify commit's sha256 pretty content
ok 5 - add with -c core.compression=9
ok 447 - checkout attr=-text  aeol=crlf core.autocrlf=true core.eol=lf file=LF
ok 280 - --batch with multiple oids gives correct format
ok 51 - Verify commit's sha1 content
ok 527 - replay -h output and SYNOPSIS agree
ok 448 - checkout attr=-text  aeol=crlf core.autocrlf=true core.eol=lf file=CRLF
ok 281 - --batch, -z with multiple oids gives correct format
ok 449 - checkout attr=-text  aeol=crlf core.autocrlf=true core.eol=lf file=CRLF_mix_LF
ok 52 - Verify commit's sha256 content
ok 528 - rerere -h output has no \t
ok 2 - autocrlf=true converts on input
ok 529 - rerere -h output has dashed labels
ok 450 - checkout attr=-text  aeol=crlf core.autocrlf=true core.eol=lf file=LF_mix_CR
ok 282 - --batch, -Z with multiple oids gives correct format
ok 530 - rerere -h output has consistent spacing
ok 451 - checkout attr=-text  aeol=crlf core.autocrlf=true core.eol=lf file=LF_nul
ok 53 # skip Verify commit signedcommit's sha1 oid (missing GPG2)
ok 54 # skip Verify commit signedcommit's sha256 oid (missing GPG2)
ok 452 - setup config for checkout attr=text ident= aeol=lf core.autocrlf=true
ok 55 # skip Verify signedcommit's sha1 type (missing GPG2)
ok 283 - --batch-check with multiple oids gives correct format
ok 56 # skip Verify signedcommit's sha256 type (missing GPG2)
ok 531 - rerere *.adoc SYNOPSIS has dashed labels
ok 57 # skip Verify signedcommit's sha1 size (missing GPG2)
ok 58 # skip Verify signedcommit's sha256 size (missing GPG2)
ok 3 - eol=crlf converts on input
ok 59 # skip Verify signedcommit's sha1 pretty content (missing GPG2)
ok 60 # skip Verify signedcommit's sha256 pretty content (missing GPG2)
ok 453 - setup LF checkout  with -c core.eol=lf
ok 61 # skip Verify signedcommit's sha1 content (missing GPG2)
ok 62 # skip Verify signedcommit's sha256 content (missing GPG2)
ok 6 - add with -c core.compression=0 -c pack.compression=0
ok 284 - --batch-check, -z with multiple oids gives correct format
ok 532 - rerere -h output and SYNOPSIS agree
ok 285 - --batch-check, -Z with multiple oids gives correct format
ok 454 - setup CRLF checkout  with -c core.eol=lf
ok 533 - reset -h output has no \t
ok 63 - Verify tag hellotag's sha1 oid
ok 4 - ident converts on input
ok 534 - reset -h output has dashed labels
ok 1 - setup
ok 455 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 64 - Verify tag hellotag's sha256 oid
ok 535 - reset -h output has consistent spacing
ok 456 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 536 - reset *.adoc SYNOPSIS has dashed labels
ok 65 - Verify hellotag's sha1 type
ok 286 - --batch-command with multiple info calls gives correct format
ok 1 - setup corrupt repo
ok 457 - setup LF_nul checkout  with -c core.eol=lf
ok 2 - create feature branch
ok 5 - user-defined filters convert on input
ok 66 - Verify hellotag's sha256 type
ok 7 - add with -c core.compression=9 -c pack.compression=0
not ok 537 - reset -h output and SYNOPSIS agree # TODO known breakage
ok 67 - Verify hellotag's sha1 size
ok 3 - perform sparse checkout of main
ok 538 - restore -h output has no \t
ok 1 - git read-tree -u -m --recurse-submodules: added submodule is checked out
ok 539 - restore -h output has dashed labels
ok 6 - setup output tests
ok 458 - ls-files --eol attr=text  aeol=lf core.autocrlf=true core.eol=lf
ok 287 - --batch-command with multiple command calls gives correct format
ok 540 - restore -h output has consistent spacing
ok 68 - Verify hellotag's sha256 size
ok 4 - merge feature branch into sparse checkout of main
ok 459 - checkout attr=text  aeol=lf core.autocrlf=true core.eol=lf file=LF
ok 2 - setup repo with missing object
ok 460 - checkout attr=text  aeol=lf core.autocrlf=true core.eol=lf file=CRLF
ok 541 - restore *.adoc SYNOPSIS has dashed labels
ok 69 - Verify hellotag's sha1 pretty content
ok 7 - autocrlf=true converts on output
ok 461 - checkout attr=text  aeol=lf core.autocrlf=true core.eol=lf file=CRLF_mix_LF
ok 5 - return to full checkout of main
ok 70 - Verify hellotag's sha256 pretty content
ok 462 - checkout attr=text  aeol=lf core.autocrlf=true core.eol=lf file=LF_mix_CR
ok 8 - eol=crlf converts on output
ok 288 - setup with newline in input
not ok 542 - restore -h output and SYNOPSIS agree # TODO known breakage
ok 8 - add with -c core.compression=0 -c pack.compression=9
ok 463 - checkout attr=text  aeol=lf core.autocrlf=true core.eol=lf file=LF_nul
ok 71 - Verify hellotag's sha1 content
ok 464 - setup config for checkout attr=text ident= aeol=crlf core.autocrlf=true
ok 289 - --batch-check, -z with newline in input
ok 72 - Verify hellotag's sha256 content
ok 543 - rev-list -h output has no \t
ok 9 - user-defined filters convert on output
ok 544 - rev-list -h output has dashed labels
ok 465 - setup LF checkout  with -c core.eol=lf
ok 545 - rev-list -h output has consistent spacing
ok 290 - --batch-check, -Z with newline in input
ok 73 - Verify tag treetag's sha1 oid
ok 10 - ident converts on output
ok 6 - skip-worktree on files outside sparse patterns
ok 546 - rev-list *.adoc SYNOPSIS has dashed labels
ok 466 - setup CRLF checkout  with -c core.eol=lf
ok 291 - setup with curly braches in input
ok 74 - Verify tag treetag's sha256 oid
ok 9 - add with -c core.compression=9 -c pack.compression=9
ok 3 - setup repo with misnamed object
ok 4 - streaming a corrupt blob fails
ok 467 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 292 - object reference with curly brace
ok 547 - rev-list -h output and SYNOPSIS agree
ok 5 - getting type of a corrupt blob fails
ok 75 - Verify treetag's sha1 type
ok 11 # skip files over 4GB convert on output (missing !LONG_IS_64BIT,EXPENSIVE of EXPENSIVE,SIZE_T_IS_64BIT,!LONG_IS_64BIT)
ok 548 - rev-parse -h output has no \t
ok 12 # skip files over 4GB convert on input (missing !LONG_IS_64BIT,EXPENSIVE of EXPENSIVE,SIZE_T_IS_64BIT,!LONG_IS_64BIT)
ok 293 - object reference with at-sign
ok 6 - read-tree -u detects bit-errors in blobs
ok 468 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 549 - rev-parse -h output has dashed labels
ok 76 - Verify treetag's sha256 type
# passed all 12 test(s)
1..12
ok 7 - read-tree -u detects missing objects
*** t1091-sparse-checkout-builtin.sh ***
ok 550 - rev-parse -h output has consistent spacing
ok 77 - Verify treetag's sha1 size
ok 294 - setup with commit with colon
ok 469 - setup LF_nul checkout  with -c core.eol=lf
ok 551 - rev-parse *.adoc SYNOPSIS has dashed labels
ok 10 - add with -c pack.compression=0
ok 78 - Verify treetag's sha256 size
ok 295 - object reference via commit text search
ok 8 - clone --no-local --bare detects corruption
not ok 552 - rev-parse -h output and SYNOPSIS agree # TODO known breakage
ok 79 - Verify treetag's sha1 pretty content
ok 470 - ls-files --eol attr=text  aeol=crlf core.autocrlf=true core.eol=lf
ok 471 - checkout attr=text  aeol=crlf core.autocrlf=true core.eol=lf file=LF
ok 553 - revert -h output has no \t
ok 80 - Verify treetag's sha256 pretty content
ok 554 - revert -h output has dashed labels
ok 296 - setup blobs which are likely to delta
ok 472 - checkout attr=text  aeol=crlf core.autocrlf=true core.eol=lf file=CRLF
ok 555 - revert -h output has consistent spacing
ok 9 - clone --no-local --bare detects missing object
ok 297 - confirm that neither loose blob is a delta
ok 473 - checkout attr=text  aeol=crlf core.autocrlf=true core.eol=lf file=CRLF_mix_LF
ok 81 - Verify treetag's sha1 content
ok 556 - revert *.adoc SYNOPSIS has dashed labels
ok 474 - checkout attr=text  aeol=crlf core.autocrlf=true core.eol=lf file=LF_mix_CR
ok 82 - Verify treetag's sha256 content
ok 11 - add with -c pack.compression=9
ok 475 - checkout attr=text  aeol=crlf core.autocrlf=true core.eol=lf file=LF_nul
ok 476 - setup config for checkout attr=auto ident= aeol=lf core.autocrlf=true
ok 557 - revert -h output and SYNOPSIS agree
ok 10 - clone --no-local --bare detects misnamed object
ok 83 - Verify tag committag's sha1 oid
ok 2 - git read-tree -u -m --recurse-submodules: added submodule is checked out in empty dir
ok 558 - rm -h output has no \t
ok 298 - %(deltabase) reports packed delta bases
ok 84 - Verify tag committag's sha256 oid
ok 559 - rm -h output has dashed labels
ok 560 - rm -h output has consistent spacing
ok 477 - setup LF checkout  with -c core.eol=lf
ok 11 - clone --local detects corruption
ok 85 - Verify committag's sha1 type
ok 12 - error detected during checkout leaves repo intact
ok 299 - setup bogus data
ok 561 - rm *.adoc SYNOPSIS has dashed labels
ok 300 - cat-file  -s error on bogus short OID
ok 86 - Verify committag's sha256 type
ok 7 - in partial clone, sparse checkout only fetches needed blobs
ok 478 - setup CRLF checkout  with -c core.eol=lf
ok 13 - clone --local detects missing objects
# passed all 7 test(s)
1..7
ok 301 - cat-file  -s error on bogus full OID
ok 87 - Verify committag's sha1 size
ok 562 - rm -h output and SYNOPSIS agree
ok 479 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 302 - cat-file  -s error on missing short OID
*** t1092-sparse-checkout-compatibility.sh ***
ok 88 - Verify committag's sha256 size
ok 563 - send-pack -h output has no \t
ok 564 - send-pack -h output has dashed labels
ok 303 - cat-file  -s error on missing full OID
not ok 14 - clone --local detects misnamed objects # TODO known breakage
ok 89 - Verify committag's sha1 pretty content
ok 565 - send-pack -h output has consistent spacing
ok 304 - cat-file  -t error on bogus short OID
ok 480 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 566 - send-pack *.adoc SYNOPSIS has dashed labels
ok 1 - setup
ok 305 - cat-file  -t error on bogus full OID
ok 90 - Verify committag's sha256 pretty content
ok 2 - git sparse-checkout list (not sparse)
ok 306 - cat-file  -t error on missing short OID
ok 481 - setup LF_nul checkout  with -c core.eol=lf
ok 91 - Verify committag's sha1 content
ok 567 - send-pack -h output and SYNOPSIS agree
ok 307 - cat-file  -t error on missing full OID
ok 92 - Verify committag's sha256 content
ok 3 - git sparse-checkout list (not sparse)
ok 15 - fetch into corrupted repo with index-pack
ok 308 - cat-file  -p error on bogus short OID
ok 568 - shortlog -h output has no \t
ok 569 - shortlog -h output has dashed labels
ok 4 - git sparse-checkout list (populated)
ok 93 # skip Verify tag signedtag's sha1 oid (missing GPG2)
ok 482 - ls-files --eol attr=auto  aeol=lf core.autocrlf=true core.eol=lf
ok 94 # skip Verify tag signedtag's sha256 oid (missing GPG2)
ok 570 - shortlog -h output has consistent spacing
ok 309 - cat-file  -p error on bogus full OID
ok 95 # skip Verify signedtag's sha1 type (missing GPG2)
ok 96 # skip Verify signedtag's sha256 type (missing GPG2)
ok 97 # skip Verify signedtag's sha1 size (missing GPG2)
ok 483 - checkout attr=auto  aeol=lf core.autocrlf=true core.eol=lf file=LF
ok 98 # skip Verify signedtag's sha256 size (missing GPG2)
ok 310 - cat-file  -p error on missing short OID
ok 99 # skip Verify signedtag's sha1 pretty content (missing GPG2)
ok 100 # skip Verify signedtag's sha256 pretty content (missing GPG2)
ok 571 - shortlog *.adoc SYNOPSIS has dashed labels
ok 101 # skip Verify signedtag's sha1 content (missing GPG2)
ok 16 - internal tree objects are not "missing"
ok 484 - checkout attr=auto  aeol=lf core.autocrlf=true core.eol=lf file=CRLF
ok 102 # skip Verify signedtag's sha256 content (missing GPG2)
ok 5 - git sparse-checkout init
ok 311 - cat-file  -p error on missing full OID
ok 485 - checkout attr=auto  aeol=lf core.autocrlf=true core.eol=lf file=CRLF_mix_LF
ok 312 - cat-file --allow-unknown-type -s error on bogus short OID
ok 6 - git sparse-checkout init in empty repo
ok 572 - shortlog -h output and SYNOPSIS agree
ok 486 - checkout attr=auto  aeol=lf core.autocrlf=true core.eol=lf file=LF_mix_CR
ok 103 - Verify blob more's sha1 oid
ok 313 - cat-file --allow-unknown-type -s error on bogus full OID
ok 487 - checkout attr=auto  aeol=lf core.autocrlf=true core.eol=lf file=LF_nul
ok 7 - git sparse-checkout list after init
ok 488 - setup config for checkout attr=auto ident= aeol=crlf core.autocrlf=true
ok 104 - Verify blob more's sha256 oid
ok 573 - show -h output has no \t
ok 314 - cat-file --allow-unknown-type -s error on missing short OID
ok 574 - show -h output has dashed labels
ok 575 - show -h output has consistent spacing
ok 105 - Verify more's sha1 type
ok 8 - init with existing sparse-checkout
ok 3 - git read-tree -u -m --recurse-submodules: replace tracked file with submodule checks out submodule
ok 489 - setup LF checkout  with -c core.eol=lf
ok 315 - cat-file --allow-unknown-type -s error on missing full OID
ok 12 - add a large file or two
ok 576 - show *.adoc SYNOPSIS has dashed labels
ok 316 - cat-file --allow-unknown-type -t error on bogus short OID
ok 490 - setup CRLF checkout  with -c core.eol=lf
ok 106 - Verify more's sha256 type
ok 317 - cat-file --allow-unknown-type -t error on bogus full OID
ok 107 - Verify more's sha1 size
ok 17 - partial clone of corrupted repository
not ok 577 - show -h output and SYNOPSIS agree # TODO known breakage
ok 318 - cat-file --allow-unknown-type -t error on missing short OID
# still have 1 known breakage(s)
# passed all remaining 16 test(s)
1..17
ok 108 - Verify more's sha256 size
ok 491 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 319 - cat-file --allow-unknown-type -t error on missing full OID
ok 578 - show-branch -h output has no \t
ok 579 - show-branch -h output has dashed labels
ok 320 - -e is OK with a broken object without --allow-unknown-type
ok 321 - -e can not be combined with --allow-unknown-type
ok 580 - show-branch -h output has consistent spacing
ok 109 - Verify more's sha1 pretty content
ok 322 - -p cannot print a broken object even with --allow-unknown-type
ok 9 - clone --sparse
ok 492 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 110 - Verify more's sha256 pretty content
ok 581 - show-branch *.adoc SYNOPSIS has dashed labels
ok 323 - <type> <hash> does not work with objects of broken types
*** t1100-commit-tree-options.sh ***
ok 111 - Verify more's sha1 content
ok 493 - setup LF_nul checkout  with -c core.eol=lf
ok 324 - broken types combined with --batch and --batch-check
ok 582 - show-branch -h output and SYNOPSIS agree
ok 112 - Verify more's sha256 content
ok 10 - switching to cone mode with non-cone mode patterns
ok 325 - the --batch and --batch-check options do not combine with --allow-unknown-type
ok 583 - show-index -h output has no \t
ok 584 - show-index -h output has dashed labels
ok 113 - Verify blob another's sha1 oid
ok 585 - show-index -h output has consistent spacing
ok 494 - ls-files --eol attr=auto  aeol=crlf core.autocrlf=true core.eol=lf
ok 114 - Verify blob another's sha256 oid
ok 495 - checkout attr=auto  aeol=crlf core.autocrlf=true core.eol=lf file=LF
ok 586 - show-index *.adoc SYNOPSIS has dashed labels
ok 496 - checkout attr=auto  aeol=crlf core.autocrlf=true core.eol=lf file=CRLF
ok 326 - the --allow-unknown-type option does not consider replacement refs
ok 115 - Verify another's sha1 type
ok 497 - checkout attr=auto  aeol=crlf core.autocrlf=true core.eol=lf file=CRLF_mix_LF
ok 327 - Type of broken object is correct
ok 587 - show-index -h output and SYNOPSIS agree
ok 498 - checkout attr=auto  aeol=crlf core.autocrlf=true core.eol=lf file=LF_mix_CR
ok 328 - Size of broken object is correct
ok 116 - Verify another's sha256 type
ok 329 - clean up broken object
ok 588 - show-ref -h output has no \t
ok 499 - checkout attr=auto  aeol=crlf core.autocrlf=true core.eol=lf file=LF_nul
ok 589 - show-ref -h output has dashed labels
ok 330 - Type of broken object is correct when type is large
ok 500 - setup config for checkout attr=-text ident= aeol= core.autocrlf=false
ok 117 - Verify another's sha1 size
ok 590 - show-ref -h output has consistent spacing
ok 331 - Size of large broken object is correct when type is large
ok 332 - clean up broken object
ok 118 - Verify another's sha256 size
ok 591 - show-ref *.adoc SYNOPSIS has dashed labels
ok 11 - interaction with clone --no-checkout (unborn index)
ok 501 - setup LF checkout  with -c core.eol=lf
ok 119 - Verify another's sha1 pretty content
ok 502 - setup CRLF checkout  with -c core.eol=lf
ok 592 - show-ref -h output and SYNOPSIS agree
ok 120 - Verify another's sha256 pretty content
ok 503 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 121 - Verify another's sha1 content
ok 593 - sparse-checkout -h output has no \t
ok 4 - git read-tree -u -m --recurse-submodules: replace directory with submodule
ok 594 - sparse-checkout -h output has dashed labels
ok 504 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 595 - sparse-checkout -h output has consistent spacing
ok 12 - set enables config
ok 122 - Verify another's sha256 content
ok 1 - test preparation: write empty tree
ok 2 - construct commit
ok 596 - sparse-checkout *.adoc SYNOPSIS has dashed labels
ok 52 - helper (cache --timeout=1) times out
ok 505 - setup LF_nul checkout  with -c core.eol=lf
ok 3 - read commit
ok 4 - compare commit
ok 13 - set sparse-checkout using builtin
ok 123 - Verify tree tree2's sha1 oid
# passed all 52 test(s)
1..52
ok 8 - Racy git trial #3 part B
*** t1300-config.sh ***
ok 124 - Verify tree tree2's sha256 oid
ok 597 - sparse-checkout -h output and SYNOPSIS agree
ok 9 - Racy git trial #4 part A
ok 14 - set sparse-checkout using --stdin
ok 333 - cat-file -t and -s on corrupt loose object
ok 125 - Verify tree2's sha1 type
ok 506 - ls-files --eol attr=-text  aeol= core.autocrlf=false core.eol=lf
ok 598 - stage -h output has no \t
ok 599 - stage -h output has dashed labels
ok 507 - checkout attr=-text  aeol= core.autocrlf=false core.eol=lf file=LF
ok 600 - stage -h output has consistent spacing
ok 126 - Verify tree2's sha256 type
ok 508 - checkout attr=-text  aeol= core.autocrlf=false core.eol=lf file=CRLF
ok 5 - flags and then non flags
# passed all 5 test(s)
1..5
*** t1301-shared-repo.sh ***
ok 509 - checkout attr=-text  aeol= core.autocrlf=false core.eol=lf file=CRLF_mix_LF
ok 127 - Verify tree2's sha1 size
ok 601 - stage *.adoc SYNOPSIS has dashed labels
ok 15 - add to sparse-checkout
ok 510 - checkout attr=-text  aeol= core.autocrlf=false core.eol=lf file=LF_mix_CR
ok 128 - Verify tree2's sha256 size
ok 511 - checkout attr=-text  aeol= core.autocrlf=false core.eol=lf file=LF_nul
ok 129 - Verify tree2's sha1 pretty content
not ok 602 - stage -h output and SYNOPSIS agree # TODO known breakage
ok 512 - setup config for checkout attr=-text ident= aeol=lf core.autocrlf=false
ok 603 - stash -h output has no \t
ok 130 - Verify tree2's sha256 pretty content
ok 604 - stash -h output has dashed labels
ok 513 - setup LF checkout  with -c core.eol=lf
ok 13 - checkout a large file
ok 605 - stash -h output has consistent spacing
ok 131 - Verify tree2's sha1 content
ok 514 - setup CRLF checkout  with -c core.eol=lf
ok 606 - stash *.adoc SYNOPSIS has dashed labels
ok 132 - Verify tree2's sha256 content
ok 515 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 516 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 133 - Verify commit commit2's sha1 oid
ok 607 - stash -h output and SYNOPSIS agree
ok 16 - worktree: add copies sparse-checkout patterns
ok 517 - setup LF_nul checkout  with -c core.eol=lf
ok 134 - Verify commit commit2's sha256 oid
ok 608 - status -h output has no \t
ok 609 - status -h output has dashed labels
ok 135 - Verify commit2's sha1 type
ok 610 - status -h output has consistent spacing
ok 518 - ls-files --eol attr=-text  aeol=lf core.autocrlf=false core.eol=lf
ok 1 - setup whitespace config
ok 17 - cone mode: match patterns
ok 611 - status *.adoc SYNOPSIS has dashed labels
ok 136 - Verify commit2's sha256 type
ok 2 - no internal whitespace
ok 519 - checkout attr=-text  aeol=lf core.autocrlf=false core.eol=lf file=LF
ok 137 - Verify commit2's sha1 size
ok 18 - cone mode: warn on bad pattern
ok 3 - internal whitespace
ok 520 - checkout attr=-text  aeol=lf core.autocrlf=false core.eol=lf file=CRLF
ok 612 - status -h output and SYNOPSIS agree
ok 138 - Verify commit2's sha256 size
ok 521 - checkout attr=-text  aeol=lf core.autocrlf=false core.eol=lf file=CRLF_mix_LF
ok 4 - internal and trailing whitespace
ok 522 - checkout attr=-text  aeol=lf core.autocrlf=false core.eol=lf file=LF_mix_CR
ok 19 - sparse-checkout disable
ok 613 - stripspace -h output has no \t
ok 5 - internal and trailing whitespace, all quoted
ok 139 - Verify commit2's sha1 pretty content
ok 614 - stripspace -h output has dashed labels
ok 1 - shared = 0400 (faulty permission u-w)
ok 523 - checkout attr=-text  aeol=lf core.autocrlf=false core.eol=lf file=LF_nul
ok 6 - internal and more trailing whitespace
ok 615 - stripspace -h output has consistent spacing
ok 524 - setup config for checkout attr=-text ident= aeol=crlf core.autocrlf=false
ok 5 - git read-tree -u -m --recurse-submodules: nested submodules are checked out
ok 140 - Verify commit2's sha256 pretty content
ok 7 - internal and more trailing whitespace, all quoted
ok 525 - setup LF checkout  with -c core.eol=lf
ok 616 - stripspace *.adoc SYNOPSIS has dashed labels
ok 14 - packsize limit
ok 141 - Verify commit2's sha1 content
ok 8 - internal and more trailing whitespace, not all quoted
ok 2 - shared=1 does not clear bits preset by umask 002
ok 526 - setup CRLF checkout  with -c core.eol=lf
ok 9 - leading and trailing whitespace
ok 142 - Verify commit2's sha256 content
ok 617 - stripspace -h output and SYNOPSIS agree
ok 527 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 10 - leading and trailing whitespace, all quoted
ok 143 # skip Verify tag signedtag2's sha1 oid (missing GPG2)
ok 528 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 144 # skip Verify tag signedtag2's sha256 oid (missing GPG2)
ok 11 - leading and trailing whitespace, not all quoted
ok 20 - sparse-index enabled and disabled
ok 618 - submodule--helper -h output has no \t
ok 145 # skip Verify signedtag2's sha1 type (missing GPG2)
ok 146 # skip Verify signedtag2's sha256 type (missing GPG2)
ok 3 - shared=1 does not clear bits preset by umask 022
ok 619 - submodule--helper -h output has dashed labels
ok 147 # skip Verify signedtag2's sha1 size (missing GPG2)
ok 148 # skip Verify signedtag2's sha256 size (missing GPG2)
ok 12 - inline comment
ok 620 - submodule--helper -h output has consistent spacing
ok 149 # skip Verify signedtag2's sha1 pretty content (missing GPG2)
ok 529 - setup LF_nul checkout  with -c core.eol=lf
ok 150 # skip Verify signedtag2's sha256 pretty content (missing GPG2)
ok 151 # skip Verify signedtag2's sha1 content (missing GPG2)
ok 152 # skip Verify signedtag2's sha256 content (missing GPG2)
ok 621 # skip submodule--helper *.adoc SYNOPSIS has dashed labels (missing BUILTIN_ADOC_SUBMODULE__HELPER)
ok 13 - inline comment, quoted
ok 14 - clear default config
ok 4 - shared=all
ok 622 # skip submodule--helper -h output and SYNOPSIS agree (missing BUILTIN_ADOC_SUBMODULE__HELPER)
ok 15 - initial
ok 623 - switch -h output has no \t
ok 153 # skip Verify commit signedcommit2's sha1 oid (missing GPG2)
ok 154 # skip Verify commit signedcommit2's sha256 oid (missing GPG2)
ok 624 - switch -h output has dashed labels
ok 155 # skip Verify signedcommit2's sha1 type (missing GPG2)
ok 16 - mixed case
ok 156 # skip Verify signedcommit2's sha256 type (missing GPG2)
ok 157 # skip Verify signedcommit2's sha1 size (missing GPG2)
ok 625 - switch -h output has consistent spacing
ok 530 - ls-files --eol attr=-text  aeol=crlf core.autocrlf=false core.eol=lf
ok 158 # skip Verify signedcommit2's sha256 size (missing GPG2)
ok 17 - similar section
ok 159 # skip Verify signedcommit2's sha1 pretty content (missing GPG2)
ok 5 - template cannot set core.bare
ok 160 # skip Verify signedcommit2's sha256 pretty content (missing GPG2)
ok 531 - checkout attr=-text  aeol=crlf core.autocrlf=false core.eol=lf file=LF
ok 161 # skip Verify signedcommit2's sha1 content (missing GPG2)
ok 334 - prep for symlink tests
ok 18 - uppercase section
ok 626 - switch *.adoc SYNOPSIS has dashed labels
ok 162 # skip Verify signedcommit2's sha256 content (missing GPG2)
ok 19 - replace with non-match
ok 532 - checkout attr=-text  aeol=crlf core.autocrlf=false core.eol=lf file=CRLF
ok 21 - cone mode: init and set
ok 20 - replace with non-match (actually matching)
ok 533 - checkout attr=-text  aeol=crlf core.autocrlf=false core.eol=lf file=CRLF_mix_LF
ok 163 # skip Verify commit signedcommit3's sha1 oid (missing GPG2)
ok 335 - git cat-file --batch-check --follow-symlinks works for non-links
ok 164 # skip Verify commit signedcommit3's sha256 oid (missing GPG2)
ok 165 # skip Verify signedcommit3's sha1 type (missing GPG2)
not ok 627 - switch -h output and SYNOPSIS agree # TODO known breakage
ok 166 # skip Verify signedcommit3's sha256 type (missing GPG2)
ok 336 - git cat-file --batch-check --follow-symlinks works for in-repo, same-dir links
ok 534 - checkout attr=-text  aeol=crlf core.autocrlf=false core.eol=lf file=LF_mix_CR
ok 167 # skip Verify signedcommit3's sha1 size (missing GPG2)
ok 6 - update-server-info honors core.sharedRepository
ok 22 - cone mode: list
ok 168 # skip Verify signedcommit3's sha256 size (missing GPG2)
ok 169 # skip Verify signedcommit3's sha1 pretty content (missing GPG2)
ok 170 # skip Verify signedcommit3's sha256 pretty content (missing GPG2)
ok 337 - git cat-file --batch-check --follow-symlinks works for in-repo, links to dirs
ok 171 # skip Verify signedcommit3's sha1 content (missing GPG2)
ok 535 - checkout attr=-text  aeol=crlf core.autocrlf=false core.eol=lf file=LF_nul
ok 172 # skip Verify signedcommit3's sha256 content (missing GPG2)
ok 628 - symbolic-ref -h output has no \t
ok 23 - cone mode: set with nested folders
ok 338 - git cat-file --batch-check --follow-symlinks works for broken in-repo, same-dir links
ok 629 - symbolic-ref -h output has dashed labels
ok 536 - setup config for checkout attr=text ident= aeol=lf core.autocrlf=false
ok 21 - append comments
ok 630 - symbolic-ref -h output has consistent spacing
ok 339 - git cat-file --batch-check --follow-symlinks -Z works for broken in-repo, same-dir links
ok 7 - shared = 0660 (r--r-----) ro
ok 22 - Prohibited LF in comment
ok 1 - setup
ok 23 - non-match result
ok 173 # skip Verify commit signedcommit4's sha1 oid (missing GPG2)
ok 537 - setup LF checkout  with -c core.eol=lf
ok 174 # skip Verify commit signedcommit4's sha256 oid (missing GPG2)
ok 340 - git cat-file --batch-check --follow-symlinks works for same-dir links-to-links
ok 175 # skip Verify signedcommit4's sha1 type (missing GPG2)
ok 176 # skip Verify signedcommit4's sha256 type (missing GPG2)
ok 24 - find mixed-case key by canonical name
ok 177 # skip Verify signedcommit4's sha1 size (missing GPG2)
ok 24 - cone mode: add independent path
ok 631 - symbolic-ref *.adoc SYNOPSIS has dashed labels
ok 8 - shared = 0660 (rw-rw----) rw
ok 178 # skip Verify signedcommit4's sha256 size (missing GPG2)
ok 538 - setup CRLF checkout  with -c core.eol=lf
ok 179 # skip Verify signedcommit4's sha1 pretty content (missing GPG2)
ok 25 - find mixed-case key by non-canonical name
ok 180 # skip Verify signedcommit4's sha256 pretty content (missing GPG2)
ok 181 # skip Verify signedcommit4's sha1 content (missing GPG2)
ok 182 # skip Verify signedcommit4's sha256 content (missing GPG2)
ok 341 - git cat-file --batch-check --follow-symlinks works for parent-dir links
ok 539 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 26 - subsections are not canonicalized by git-config
ok 632 - symbolic-ref -h output and SYNOPSIS agree
ok 540 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 183 # skip Verify tag signedtag3's sha1 oid (missing GPG2)
ok 27 - value for missing section and missing key is not printed
ok 25 - cone mode: add sibling path
ok 184 # skip Verify tag signedtag3's sha256 oid (missing GPG2)
ok 9 - shared = 0640 (r--r-----) ro
ok 185 # skip Verify signedtag3's sha1 type (missing GPG2)
ok 186 # skip Verify signedtag3's sha256 type (missing GPG2)
ok 28 - value for missing section and existing key is not printed
ok 342 - git cat-file --batch-check --follow-symlinks -Z works for parent-dir links
ok 541 - setup LF_nul checkout  with -c core.eol=lf
ok 187 # skip Verify signedtag3's sha1 size (missing GPG2)
ok 633 - tag -h output has no \t
ok 188 # skip Verify signedtag3's sha256 size (missing GPG2)
ok 29 - value for existing section and missing key is not printed
ok 189 # skip Verify signedtag3's sha1 pretty content (missing GPG2)
ok 634 - tag -h output has dashed labels
ok 190 # skip Verify signedtag3's sha256 pretty content (missing GPG2)
ok 30 - value for missing subsection and missing key is not printed
ok 191 # skip Verify signedtag3's sha1 content (missing GPG2)
ok 10 - shared = 0640 (rw-r-----) rw
ok 192 # skip Verify signedtag3's sha256 content (missing GPG2)
ok 635 - tag -h output has consistent spacing
ok 31 - value for existing subsection and missing key is not printed
ok 26 - cone mode: add parent path
ok 32 - value for missing subsection and existing key is not printed
ok 193 # skip Verify tag signedtag4's sha1 oid (missing GPG2)
ok 636 - tag *.adoc SYNOPSIS has dashed labels
ok 343 - git cat-file --batch-check --follow-symlinks works for .. links
ok 33 - unset with cont. lines
ok 194 # skip Verify tag signedtag4's sha256 oid (missing GPG2)
ok 542 - ls-files --eol attr=text  aeol=lf core.autocrlf=false core.eol=lf
ok 195 # skip Verify signedtag4's sha1 type (missing GPG2)
ok 34 - unset with cont. lines is correct
ok 196 # skip Verify signedtag4's sha256 type (missing GPG2)
ok 11 - shared = 0600 (r--------) ro
ok 197 # skip Verify signedtag4's sha1 size (missing GPG2)
ok 543 - checkout attr=text  aeol=lf core.autocrlf=false core.eol=lf file=LF
ok 198 # skip Verify signedtag4's sha256 size (missing GPG2)
ok 199 # skip Verify signedtag4's sha1 pretty content (missing GPG2)
ok 200 # skip Verify signedtag4's sha256 pretty content (missing GPG2)
ok 201 # skip Verify signedtag4's sha1 content (missing GPG2)
ok 35 - multiple unset
ok 202 # skip Verify signedtag4's sha256 content (missing GPG2)
ok 544 - checkout attr=text  aeol=lf core.autocrlf=false core.eol=lf file=CRLF
ok 637 - tag -h output and SYNOPSIS agree
ok 12 - shared = 0600 (rw-------) rw
# passed all 202 test(s)
1..202
ok 36 - multiple unset is correct
ok 344 - git cat-file --batch-check --follow-symlinks works for ../.. links
ok 545 - checkout attr=text  aeol=lf core.autocrlf=false core.eol=lf file=CRLF_mix_LF
ok 37 - --replace-all missing value
ok 15 - diff --raw
ok 638 - unpack-file -h output has no \t
ok 546 - checkout attr=text  aeol=lf core.autocrlf=false core.eol=lf file=LF_mix_CR
ok 38 - --replace-all
ok 16 - diff --stat
ok 639 - unpack-file -h output has dashed labels
ok 39 - all replaced
ok 640 - unpack-file -h output has consistent spacing
ok 345 - git cat-file --batch-check --follow-symlinks works for dir/ links
ok 547 - checkout attr=text  aeol=lf core.autocrlf=false core.eol=lf file=LF_nul
ok 13 - shared = 0666 (r--r--r--) ro
ok 17 - diff
ok 27 - not-up-to-date does not block rest of sparsification
ok 548 - setup config for checkout attr=text ident= aeol=crlf core.autocrlf=false
ok 40 - really mean test
*** t1302-repo-version.sh ***
ok 18 - diff --cached
ok 641 - unpack-file *.adoc SYNOPSIS has dashed labels
ok 549 - setup LF checkout  with -c core.eol=lf
ok 41 - really really mean test
ok 346 - git cat-file --batch-check --follow-symlinks works for dir/subdir links
ok 14 - shared = 0666 (rw-rw-rw-) rw
ok 42 - get value
ok 550 - setup CRLF checkout  with -c core.eol=lf
ok 43 - unset
ok 642 - unpack-file -h output and SYNOPSIS agree
ok 347 - git cat-file --batch-check --follow-symlinks works for dir ->subdir links
ok 551 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 44 - multivar
ok 19 - hash-object
ok 15 - shared = 0664 (r--r--r--) ro
ok 45 - non-match
ok 552 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 348 - git cat-file --batch-check --follow-symlinks works for out-of-repo symlinks
ok 643 - unpack-objects -h output has no \t
ok 46 - non-match value
ok 20 - cat-file a large file
ok 644 - unpack-objects -h output has dashed labels
ok 16 - shared = 0664 (rw-rw-r--) rw
ok 28 - revert to old sparse-checkout on empty update
ok 47 - multi-valued get returns final one
ok 645 - unpack-objects -h output has consistent spacing
ok 553 - setup LF_nul checkout  with -c core.eol=lf
ok 15 - delete fails cleanly if packed-refs file is locked
ok 349 - git cat-file --batch-check --follow-symlinks works for out-of-repo symlinks in dirs
ok 48 - multi-valued get-all returns all
ok 21 - cat-file a large file from a tag
ok 29 - fail when lock is taken
ok 646 - unpack-objects *.adoc SYNOPSIS has dashed labels
ok 49 - multivar replace
ok 17 - info/refs respects umask in unshared repo
ok 22 - git-show a large file
ok 50 - ambiguous unset
ok 51 - invalid unset
ok 6 - git read-tree -u -m --recurse-submodules: removed submodule removes submodules working tree
ok 554 - ls-files --eol attr=text  aeol=crlf core.autocrlf=false core.eol=lf
ok 30 - .gitignore should not warn about cone mode
ok 350 - git cat-file --batch-check --follow-symlinks works for out-of-repo symlinks in subdirs
ok 647 - unpack-objects -h output and SYNOPSIS agree
ok 16 - delete fails cleanly if packed-refs.new write fails
ok 52 - multivar unset
ok 555 - checkout attr=text  aeol=crlf core.autocrlf=false core.eol=lf file=LF
ok 53 - invalid key
ok 648 - update-index -h output has no \t
ok 54 - correct key
ok 556 - checkout attr=text  aeol=crlf core.autocrlf=false core.eol=lf file=CRLF
ok 649 - update-index -h output has dashed labels
ok 55 - hierarchical section
ok 650 - update-index -h output has consistent spacing
ok 557 - checkout attr=text  aeol=crlf core.autocrlf=false core.eol=lf file=CRLF_mix_LF
ok 56 - hierarchical section value
ok 57 - working --list
ok 558 - checkout attr=text  aeol=crlf core.autocrlf=false core.eol=lf file=LF_mix_CR
ok 58 - --list without repo produces empty output
ok 651 - update-index *.adoc SYNOPSIS has dashed labels
ok 559 - checkout attr=text  aeol=crlf core.autocrlf=false core.eol=lf file=LF_nul
ok 59 - --name-only --list
ok 46 - ref transaction: retry acquiring tables.list lock
ok 560 - setup config for checkout attr=auto ident= aeol=lf core.autocrlf=false
ok 351 - git cat-file --batch-check --follow-symlinks works for symlinks with internal ..
ok 18 - forced modes
ok 60 - --get-regexp
not ok 652 - update-index -h output and SYNOPSIS agree # TODO known breakage
ok 561 - setup LF checkout  with -c core.eol=lf
ok 352 - git cat-file --batch-check --follow-symlink breaks loops
ok 61 - --name-only --get-regexp
ok 562 - setup CRLF checkout  with -c core.eol=lf
ok 653 - update-ref -h output has no \t
ok 19 - remote init does not use config from cwd
ok 17 - setup worktree
ok 353 - git cat-file --batch-check --follow-symlink -Z breaks loops
ok 654 - update-ref -h output has dashed labels
ok 62 - --add
ok 655 - update-ref -h output has consistent spacing
ok 563 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 63 - get variable with no value
ok 20 - re-init respects core.sharedrepository (local)
ok 564 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 64 - get variable with empty value
ok 354 - git cat-file --batch --follow-symlink returns correct sha and mode
ok 656 - update-ref *.adoc SYNOPSIS has dashed labels
ok 1 - setup
ok 31 - sparse-checkout (init|set|disable) warns with dirty status
ok 18 - for_each_reflog()
ok 65 - get-regexp variable with no value
ok 565 - setup LF_nul checkout  with -c core.eol=lf
ok 66 - get-regexp --bool variable with no value
ok 67 - get-regexp variable with empty value
ok 21 - re-init respects core.sharedrepository (remote)
not ok 657 - update-ref -h output and SYNOPSIS agree # TODO known breakage
ok 2 - gitdir selection on normal repos
ok 68 - get bool variable with no value
ok 69 - get bool variable with empty value
ok 3 - gitdir selection on unsupported repo
ok 19 - parsing reverse reflogs at BUFSIZ boundaries
ok 566 - ls-files --eol attr=auto  aeol=lf core.autocrlf=false core.eol=lf
ok 70 - no arguments, but no crash
ok 22 - template can set core.sharedrepository
ok 658 - update-server-info -h output has no \t
ok 71 - new section is partial match of another
ok 659 - update-server-info -h output has dashed labels
# passed all 22 test(s)
1..22
ok 660 - update-server-info -h output has consistent spacing
*** t1303-wacky-config.sh ***
ok 567 - checkout attr=auto  aeol=lf core.autocrlf=false core.eol=lf file=LF
ok 72 - new variable inserts into proper section
ok 20 - reflog expire operates on symref not referrent
ok 4 - gitdir not required mode
ok 568 - checkout attr=auto  aeol=lf core.autocrlf=false core.eol=lf file=CRLF
ok 661 - update-server-info *.adoc SYNOPSIS has dashed labels
ok 73 - alternative --file (non-existing file should fail)
ok 23 - index-pack
ok 569 - checkout attr=auto  aeol=lf core.autocrlf=false core.eol=lf file=CRLF_mix_LF
ok 74 - alternative GIT_CONFIG
ok 570 - checkout attr=auto  aeol=lf core.autocrlf=false core.eol=lf file=LF_mix_CR
ok 5 - gitdir required mode
ok 75 - alternative GIT_CONFIG (--file)
ok 571 - checkout attr=auto  aeol=lf core.autocrlf=false core.eol=lf file=LF_nul
ok 662 - update-server-info -h output and SYNOPSIS agree
ok 76 - alternative GIT_CONFIG (--file=-)
ok 572 - setup config for checkout attr=auto ident= aeol=crlf core.autocrlf=false
ok 77 - setting a value in stdin is an error
ok 78 - editing stdin is an error
ok 663 - upload-archive -h output has no \t
ok 6 - allow version=0 
ok 21 - empty reflog
ok 664 - upload-archive -h output has dashed labels
ok 32 - sparse-checkout (init|set|disable) warns with unmerged status
ok 573 - setup LF checkout  with -c core.eol=lf
ok 79 - refer config from subdirectory
ok 355 - cat-file --batch-all-objects shows all objects
ok 665 - upload-archive -h output has consistent spacing
ok 574 - setup CRLF checkout  with -c core.eol=lf
ok 80 - --set in alternative file
ok 22 - ref resolution not confused by broken symlinks
ok 356 - cat-file --unordered works
ok 7 - allow version=1 
ok 666 - upload-archive *.adoc SYNOPSIS has dashed labels
ok 575 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 81 - rename section
ok 357 - set up object list for --batch-all-objects tests
ok 24 - repack
ok 82 - rename succeeded
ok 576 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 83 - rename non-existing section
ok 23 - log diagnoses bogus HEAD hash
ok 84 - rename succeeded
ok 358 - cat-file --batch="%(objectname)" with --batch-all-objects will work
ok 85 - rename another section
ok 8 - allow version=1 noop
ok 577 - setup LF_nul checkout  with -c core.eol=lf
ok 667 - upload-archive -h output and SYNOPSIS agree
ok 86 - rename succeeded
ok 87 - rename a section with a var on the same line
ok 88 - rename succeeded
ok 668 - upload-archive--writer -h output has no \t
ok 9 - abort version=1 no-such-extension
ok 669 - upload-archive--writer -h output has dashed labels
ok 89 - renaming empty section name is rejected
ok 359 - cat-file --batch="%(rest)" with --batch-all-objects will work
ok 24 - log diagnoses bogus HEAD symref
ok 90 - renaming to bogus section is rejected
ok 670 - upload-archive--writer -h output has consistent spacing
ok 578 - ls-files --eol attr=auto  aeol=crlf core.autocrlf=false core.eol=lf
ok 671 # skip upload-archive--writer *.adoc SYNOPSIS has dashed labels (missing BUILTIN_ADOC_UPLOAD_ARCHIVE__WRITER)
ok 91 - renaming a section with a long line
ok 672 # skip upload-archive--writer -h output and SYNOPSIS agree (missing BUILTIN_ADOC_UPLOAD_ARCHIVE__WRITER)
ok 360 - cat-file --batch="batman" with --batch-all-objects will work
ok 579 - checkout attr=auto  aeol=crlf core.autocrlf=false core.eol=lf file=LF
ok 10 - allow version=0 no-such-extension
ok 92 - renaming an embedded section with a long line
ok 673 - upload-pack -h output has no \t
ok 580 - checkout attr=auto  aeol=crlf core.autocrlf=false core.eol=lf file=CRLF
ok 674 - upload-pack -h output has dashed labels
ok 25 - empty directory removal
ok 93 - renaming a section with an overly-long line
ok 581 - checkout attr=auto  aeol=crlf core.autocrlf=false core.eol=lf file=CRLF_mix_LF
ok 11 - allow version=0 noop
ok 675 - upload-pack -h output has consistent spacing
not ok 33 - sparse-checkout reapply # TODO known breakage
ok 94 - remove section
ok 582 - checkout attr=auto  aeol=crlf core.autocrlf=false core.eol=lf file=LF_mix_CR
ok 2 - sparse-index contents
ok 95 - section was removed properly
ok 676 - upload-pack *.adoc SYNOPSIS has dashed labels
ok 1 - modify same key
ok 12 - abort version=0 noop-v1
ok 583 - checkout attr=auto  aeol=crlf core.autocrlf=false core.eol=lf file=LF_nul
ok 7 - git read-tree -u -m --recurse-submodules: removed submodule absorbs submodules .git directory
ok 584 - setup config for checkout attr=-text ident= aeol= core.autocrlf=input
ok 96 - section ending
ok 585 - setup LF checkout  with -c core.eol=lf
ok 677 - upload-pack -h output and SYNOPSIS agree
ok 2 - add key in same section
ok 13 - allow version=1 noop-v1
ok 26 - symref empty directory removal
ok 586 - setup CRLF checkout  with -c core.eol=lf
ok 97 - numbers
ok 678 - var -h output has no \t
ok 679 - var -h output has dashed labels
ok 14 - precious-objects allowed
ok 27 - directory not created deleting packed ref
ok 680 - var -h output has consistent spacing
ok 587 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 3 - add key in different section
ok 15 - precious-objects blocks destructive repack
ok 98 - --int is at least 64 bits
ok 34 - reapply can handle config options
ok 588 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 4 - make sure git config escapes section names properly
ok 681 - var *.adoc SYNOPSIS has dashed labels
ok 28 - git branch -m u v should fail when the reflog for u is a symlink
ok 589 - setup LF_nul checkout  with -c core.eol=lf
ok 99 - invalid unit
ok 5 - do not crash on special long config line
ok 682 - var -h output and SYNOPSIS agree
ok 25 - pack-objects with large loose object
ok 100 - invalid unit boolean
ok 35 - cone mode: set with core.ignoreCase=true
ok 16 - other repacks are OK
ok 101 - line number is reported correctly
ok 17 - precious-objects blocks prune
ok 590 - ls-files --eol attr=-text  aeol= core.autocrlf=input core.eol=lf
ok 683 - verify-commit -h output has no \t
ok 6 - get many entries
ok 684 - verify-commit -h output has dashed labels
ok 102 - invalid stdin config
ok 591 - checkout attr=-text  aeol= core.autocrlf=input core.eol=lf file=LF
ok 685 - verify-commit -h output has consistent spacing
ok 592 - checkout attr=-text  aeol= core.autocrlf=input core.eol=lf file=CRLF
ok 18 - gc runs without complaint
# passed all 18 test(s)
1..18
ok 686 - verify-commit *.adoc SYNOPSIS has dashed labels
ok 7 - get many entries by regex
ok 26 - tar archiving
ok 593 - checkout attr=-text  aeol= core.autocrlf=input core.eol=lf file=CRLF_mix_LF
*** t1304-default-acl.sh ***
ok 29 - git branch -m with symlinked .git/refs
ok 594 - checkout attr=-text  aeol= core.autocrlf=input core.eol=lf file=LF_mix_CR
ok 30 # skip rebase when .git/logs is a symlink (missing SYMLINKS_WINDOWS,MINGW of MINGW,SYMLINKS_WINDOWS)
ok 687 - verify-commit -h output and SYNOPSIS agree
ok 595 - checkout attr=-text  aeol= core.autocrlf=input core.eol=lf file=LF_nul
ok 361 - cat-file %(objectsize:disk) with --batch-all-objects
ok 596 - setup config for checkout attr=-text ident= aeol=lf core.autocrlf=input
ok 688 - verify-pack -h output has no \t
ok 27 - zip archiving, store only
ok 689 - verify-pack -h output has dashed labels
ok 31 - git reflog expire honors core.sharedRepository
ok 597 - setup LF checkout  with -c core.eol=lf
ok 690 - verify-pack -h output has consistent spacing
ok 598 - setup CRLF checkout  with -c core.eol=lf
ok 691 - verify-pack *.adoc SYNOPSIS has dashed labels
ok 599 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 103 - bool
ok 362 - set up replacement object
ok 600 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 32 - symref transaction supports symlinks
ok 104 - invalid bool (--get)
ok 692 - verify-pack -h output and SYNOPSIS agree
ok 105 - invalid bool (set)
ok 363 - cat-file --batch respects replace objects
ok 601 - setup LF_nul checkout  with -c core.eol=lf
ok 364 - cat-file --batch-check respects replace objects
ok 693 - verify-tag -h output has no \t
ok 694 - verify-tag -h output has dashed labels
ok 695 - verify-tag -h output has consistent spacing
ok 602 - ls-files --eol attr=-text  aeol=lf core.autocrlf=input core.eol=lf
ok 8 - add and replace one of many entries
ok 33 - symref transaction supports false symlink config
ok 696 - verify-tag *.adoc SYNOPSIS has dashed labels
ok 365 - cat-file --batch-all-objects --batch ignores replace
ok 106 - set --bool
ok 603 - checkout attr=-text  aeol=lf core.autocrlf=input core.eol=lf file=LF
# passed all 33 test(s)
1..33
ok 604 - checkout attr=-text  aeol=lf core.autocrlf=input core.eol=lf file=CRLF
ok 366 - cat-file --batch-all-objects --batch-check ignores replace
ok 605 - checkout attr=-text  aeol=lf core.autocrlf=input core.eol=lf file=CRLF_mix_LF
*** t1305-config-include.sh ***
ok 697 - verify-tag -h output and SYNOPSIS agree
ok 107 - set --int
ok 367 - batch-command empty command
ok 28 - zip archiving, deflate
ok 368 - batch-command whitespace before command
ok 606 - checkout attr=-text  aeol=lf core.autocrlf=input core.eol=lf file=LF_mix_CR
ok 698 - version -h output has no \t
ok 9 - replace many entries
ok 369 - batch-command unknown command
ok 607 - checkout attr=-text  aeol=lf core.autocrlf=input core.eol=lf file=LF_nul
ok 699 - version -h output has dashed labels
ok 608 - setup config for checkout attr=-text ident= aeol=crlf core.autocrlf=input
ok 700 - version -h output has consistent spacing
ok 36 - setup submodules
ok 370 - batch-command missing arguments
ok 1 - checking for a working acl setup
ok 37 - interaction with submodules
ok 2 # skip Setup test repo (missing SETFACL)
ok 3 - expanded in-memory index matches full index
ok 3 # skip Objects creation does not break ACLs with restrictive umask (missing SETFACL)
ok 371 - batch-command flush with arguments
ok 108 - get --bool-or-int
ok 609 - setup LF checkout  with -c core.eol=lf
ok 701 - version *.adoc SYNOPSIS has dashed labels
ok 4 # skip git gc does not break ACLs with restrictive umask (missing SETFACL)
# passed all 4 test(s)
1..4
ok 8 - git read-tree -u -m --recurse-submodules: replace submodule with a file
ok 372 - batch-command flush without --buffer
*** t1306-xdg-files.sh ***
ok 38 - check-rules interaction with submodules
ok 610 - setup CRLF checkout  with -c core.eol=lf
ok 10 - unset many entries
ok 29 - fsck large blobs
# passed all 29 test(s)
1..29
ok 702 - version -h output and SYNOPSIS agree
ok 611 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 11 - --add appends new value after existing empty value
ok 109 - set --bool-or-int
ok 703 - whatchanged -h output has no \t
# passed all 11 test(s)
1..11
ok 612 - setup CRLF_mix_LF checkout  with -c core.eol=lf
*** t1307-config-blob.sh ***
ok 704 - whatchanged -h output has dashed labels
*** t1308-config-set.sh ***
ok 705 - whatchanged -h output has consistent spacing
ok 613 - setup LF_nul checkout  with -c core.eol=lf
ok 373 - --batch-check is unbuffered by default
ok 110 - set --path
ok 706 - whatchanged *.adoc SYNOPSIS has dashed labels
ok 39 - different sparse-checkouts with worktrees
ok 614 - ls-files --eol attr=-text  aeol=crlf core.autocrlf=input core.eol=lf
ok 111 - get --path
not ok 707 - whatchanged -h output and SYNOPSIS agree # TODO known breakage
ok 615 - checkout attr=-text  aeol=crlf core.autocrlf=input core.eol=lf file=LF
ok 374 - --batch-command info is unbuffered by default
# passed all 374 test(s)
1..374
ok 616 - checkout attr=-text  aeol=crlf core.autocrlf=input core.eol=lf file=CRLF
ok 40 - set using filename keeps file on-disk
ok 708 - worktree -h output has no \t
ok 709 - worktree -h output has dashed labels
ok 112 - get --path copes with unset $HOME
ok 617 - checkout attr=-text  aeol=crlf core.autocrlf=input core.eol=lf file=CRLF_mix_LF
ok 113 - get --path barfs on boolean variable
ok 710 - worktree -h output has consistent spacing
ok 618 - checkout attr=-text  aeol=crlf core.autocrlf=input core.eol=lf file=LF_mix_CR
ok 711 - worktree *.adoc SYNOPSIS has dashed labels
ok 619 - checkout attr=-text  aeol=crlf core.autocrlf=input core.eol=lf file=LF_nul
*** t1309-early-config.sh ***
ok 41 - pattern-checks: /A/**
ok 620 - setup config for checkout attr=text ident= aeol=lf core.autocrlf=input
ok 1 - include file by absolute path
ok 621 - setup LF checkout  with -c core.eol=lf
ok 712 - worktree -h output and SYNOPSIS agree
ok 2 - include file by relative path
ok 114 - get --expiry-date
ok 622 - setup CRLF checkout  with -c core.eol=lf
ok 3 - chained relative paths
ok 713 - write-tree -h output has no \t
ok 115 - get --type=color
ok 42 - pattern-checks: /A/**/B/
ok 714 - write-tree -h output has dashed labels
ok 4 - include paths get tilde-expansion
ok 623 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 715 - write-tree -h output has consistent spacing
ok 5 - include options can still be examined
ok 116 - set --type=color
ok 1 - read config: xdg file exists and ~/.gitconfig doesn't
ok 624 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 117 - get --type=color barfs on non-color
ok 6 - listing includes option and expansion
ok 716 - write-tree *.adoc SYNOPSIS has dashed labels
ok 118 - set --type=color barfs on non-color
ok 43 - pattern-checks: too short
ok 625 - setup LF_nul checkout  with -c core.eol=lf
ok 2 - read config: xdg file exists and ~/.gitconfig exists
ok 7 - single file lookup does not expand includes by default
ok 3 - read with --get: xdg file exists and ~/.gitconfig doesn't
ok 44 - pattern-checks: not too short
ok 8 - single file list does not expand includes by default
ok 717 - write-tree -h output and SYNOPSIS agree
ok 1 - create config blob
ok 4 - "$XDG_CONFIG_HOME overrides $HOME/.config/git
ok 1 - setup default config
# still have 55 known breakage(s)
# passed all remaining 662 test(s)
1..717
ok 119 - quoting
ok 2 - get value for a simple key
ok 2 - list config blob contents
ok 120 - key with newline
ok 626 - ls-files --eol attr=text  aeol=lf core.autocrlf=input core.eol=lf
ok 5 - read with --get: xdg file exists and ~/.gitconfig exists
ok 121 - value with newline
ok 3 - get value for a key with value as an empty string
ok 9 - writing config file does not expand includes
ok 3 - fetch value from blob
ok 45 - pattern-checks: trailing "*"
ok 4 - reading non-existing value from blob is an error
ok 4 - get value for a key with value as NULL
ok 6 - read with --list: xdg file exists and ~/.gitconfig doesn't
ok 122 - value continued on next line
ok 627 - checkout attr=text  aeol=lf core.autocrlf=input core.eol=lf file=LF
ok 5 - reading from blob and file is an error
*** t1310-config-default.sh ***
ok 7 - read with --list: xdg file exists and ~/.gitconfig exists
ok 6 - reading from missing ref is an error
ok 628 - checkout attr=text  aeol=lf core.autocrlf=input core.eol=lf file=CRLF
ok 10 - config modification does not affect includes
ok 5 - upper case key
ok 7 - reading from non-blob is an error
ok 123 - --null --list
ok 11 - missing include files are ignored
ok 8 - setting a value in a blob is an error
ok 46 - pattern-checks: starting "*"
ok 629 - checkout attr=text  aeol=lf core.autocrlf=input core.eol=lf file=CRLF_mix_LF
ok 8 - Setup
ok 9 - deleting a value in a blob is an error
ok 12 - absolute includes from command line work
ok 10 - editing a blob is an error
ok 630 - checkout attr=text  aeol=lf core.autocrlf=input core.eol=lf file=LF_mix_CR
ok 124 - --null --get-regexp
ok 9 - Exclusion of a file in the XDG ignore file
ok 13 - relative includes from command line fail
ok 6 - mixed case key
ok 631 - checkout attr=text  aeol=lf core.autocrlf=input core.eol=lf file=LF_nul
ok 125 - inner whitespace kept verbatim, spaces only
ok 7 - key and value with mixed case
ok 632 - setup config for checkout attr=text ident= aeol=crlf core.autocrlf=input
ok 47 - ref transaction: many concurrent writers
ok 10 - $XDG_CONFIG_HOME overrides $HOME/.config/git/ignore
ok 14 - absolute includes from blobs work
ok 47 - pattern-checks: non directory pattern
ok 11 - Exclusion in both XDG and local ignore files
ok 633 - setup LF checkout  with -c core.eol=lf
ok 11 - parse errors in blobs are properly attributed
ok 35 - retry acquiring packed-refs.lock
ok 126 - inner whitespace kept verbatim, horizontal tabs only
ok 8 - key with case sensitive subsection
not ok 9 - git read-tree -u -m --recurse-submodules: replace submodule with a file must fail with untracked files # TODO known breakage
ok 634 - setup CRLF checkout  with -c core.eol=lf
ok 15 - relative includes from blobs fail
ok 12 - Exclusion in a non-XDG global ignore file
ok 1 - read early config
ok 16 - absolute includes from stdin work
ok 635 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 127 - inner whitespace kept verbatim, horizontal tabs and spaces
ok 17 - relative includes from stdin line fail
ok 13 - Checking XDG ignore file when HOME is unset
ok 4 - root directory cannot be sparse
ok 12 - can parse blob ending with CR
ok 636 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 9 - key with case insensitive section header
ok 2 - in a sub-directory
ok 13 - config --blob outside of a repository is an error
ok 14 - Checking attributes in the XDG attributes file
# passed all 13 test(s)
1..13
ok 18 - conditional include, both unanchored
ok 637 - setup LF_nul checkout  with -c core.eol=lf
ok 15 - Checking XDG attributes when HOME is unset
*** t1350-config-hooks-path.sh ***
ok 3 - ceiling
ok 19 - conditional include, $HOME expansion
ok 16 - $XDG_CONFIG_HOME overrides $HOME/.config/git/attributes
ok 10 - key with case insensitive section header & variable
ok 128 - symlinked configuration
ok 36 - pack symlinked packed-refs
ok 48 - pack-refs: compacts tables
ok 20 - conditional include, full pattern
ok 17 - Checking attributes in both XDG and local attributes files
ok 11 - find value with misspelled key
ok 21 - conditional include, relative path
ok 12 - find value with the highest priority
ok 638 - ls-files --eol attr=text  aeol=crlf core.autocrlf=input core.eol=lf
ok 13 - return value for an existing key
ok 4 - ceiling #2
ok 22 - conditional include, both unanchored, icase
ok 129 - symlink to nonexistent configuration
ok 639 - checkout attr=text  aeol=crlf core.autocrlf=input core.eol=lf file=LF
ok 14 - return value for value-less key
ok 18 - Checking attributes in a non-XDG global attributes file
ok 23 - conditional include, early config reading
ok 640 - checkout attr=text  aeol=crlf core.autocrlf=input core.eol=lf file=CRLF
ok 15 - return value for a missing key
ok 19 - write: xdg file exists and ~/.gitconfig doesn't
ok 5 - read config file in right order
ok 641 - checkout attr=text  aeol=crlf core.autocrlf=input core.eol=lf file=CRLF_mix_LF
ok 48 - pattern-checks: contained glob characters
ok 16 - return value for a bad key: CONFIG_INVALID_KEY
ok 20 - write: xdg file exists and ~/.gitconfig exists
ok 24 - conditional include with /**/
ok 642 - checkout attr=text  aeol=crlf core.autocrlf=input core.eol=lf file=LF_mix_CR
ok 17 - return value for a bad key: CONFIG_NO_SECTION_OR_NAME
ok 21 - write: ~/.config/git/ exists and config file doesn't
# passed all 21 test(s)
1..21
ok 18 - find integer value for a key
ok 6 - ignore .git/ with incompatible repository version
ok 1 - uses --default when entry missing
ok 643 - checkout attr=text  aeol=crlf core.autocrlf=input core.eol=lf file=LF_nul
*** t1400-update-ref.sh ***
ok 19 - parse integer value during iteration
ok 2 - does not use --default when entry present
ok 644 - setup config for checkout attr=auto ident= aeol=lf core.autocrlf=input
ok 130 - check split_cmdline return
not ok 7 - ignore .git/ with invalid repository version # TODO known breakage
ok 3 - canonicalizes --default with appropriate type
ok 25 - conditional include, set up symlinked $HOME
ok 645 - setup LF checkout  with -c core.eol=lf
ok 20 - find string value for a key
ok 4 - dies when --default cannot be parsed
ok 21 - check line error when NULL string is queried
ok 26 - conditional include, $HOME expansion with symlinks
ok 646 - setup CRLF checkout  with -c core.eol=lf
ok 5 - does not allow --default without --get
ok 131 - git -c "key=value" support
ok 22 - find integer if value is non parse-able
not ok 8 - ignore .git/ with invalid config # TODO known breakage
# passed all 5 test(s)
1..5
ok 647 - setup LF_mix_CR checkout  with -c core.eol=lf
*** t1401-symbolic-ref.sh ***
ok 23 - non parse-able integer value during iteration
ok 132 - git -c can represent empty string
ok 27 - conditional include, relative path with symlinks
ok 648 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 9 - early config and onbranch
ok 28 - conditional include, gitdir matching symlink
ok 649 - setup LF_nul checkout  with -c core.eol=lf
ok 29 - conditional include, gitdir matching symlink, icase
ok 10 - onbranch config outside of git repo
# still have 2 known breakage(s)
# passed all remaining 8 test(s)
1..10
ok 37 - refs/worktree must not be packed
ok 24 - find bool value for the entered key
*** t1402-check-ref-format.sh ***
ok 25 - find multiple values
ok 133 - key sanity-checking
ok 650 - ls-files --eol attr=auto  aeol=lf core.autocrlf=input core.eol=lf
ok 30 - conditional include, onbranch
ok 651 - checkout attr=auto  aeol=lf core.autocrlf=input core.eol=lf file=LF
ok 1 - set up a pre-commit hook in core.hooksPath
ok 134 - git -c works with aliases of builtins
ok 652 - checkout attr=auto  aeol=lf core.autocrlf=input core.eol=lf file=CRLF
ok 26 - get_value_multi: NULL value in config
ok 653 - checkout attr=auto  aeol=lf core.autocrlf=input core.eol=lf file=CRLF_mix_LF
ok 38 - create packed-refs file with broken ref
ok 654 - checkout attr=auto  aeol=lf core.autocrlf=input core.eol=lf file=LF_mix_CR
ok 49 - pattern-checks: escaped characters
ok 655 - checkout attr=auto  aeol=lf core.autocrlf=input core.eol=lf file=LF_nul
ok 27 - configset_get_value: NULL value in config in my.config
ok 31 - conditional include, onbranch, wildcard
ok 50 # skip cone mode replaces backslashes with slashes (missing MINGW)
ok 39 - pack-refs does not silently delete broken packed ref
ok 656 - setup config for checkout attr=auto ident= aeol=crlf core.autocrlf=input
ok 657 - setup LF checkout  with -c core.eol=lf
ok 40 - pack-refs does not drop broken refs during deletion
ok 28 - configset_get_value_multi: NULL value in config in my.config
ok 32 - conditional include, onbranch, implicit /** for /
ok 135 - aliases can be CamelCased
ok 29 - find value from a configset
ok 658 - setup CRLF checkout  with -c core.eol=lf
ok 136 - git -c does not split values on equals
ok 30 - find value with highest priority from a configset
ok 137 - git -c dies on bogus config
ok 659 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 138 - git -c complains about empty key
ok 31 - find value_list for a key from a configset
ok 139 - git -c complains about empty key and value
ok 660 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 33 - include cycles are detected
ok 32 - proper error on non-existent files
ok 661 - setup LF_nul checkout  with -c core.eol=lf
ok 33 - proper error on directory "files"
ok 140 - multiple git -c appends config
ok 34 - onbranch with unborn branch
ok 41 - git pack-refs --all --auto does not repack below 16 refs without packed-refs
ok 51 - cone mode clears ignored subdirectories
ok 662 - ls-files --eol attr=auto  aeol=crlf core.autocrlf=input core.eol=lf
ok 141 - last one wins: two level vars
ok 1 - setup
ok 663 - checkout attr=auto  aeol=crlf core.autocrlf=input core.eol=lf file=LF
ok 34 - proper error on non-accessible files
ok 1 - ref name '' is invalid
ok 664 - checkout attr=auto  aeol=crlf core.autocrlf=input core.eol=lf file=CRLF
ok 2 - ref name '/' is invalid
ok 35 - proper error on error in default config files
ok 2 - symbolic-ref read/write roundtrip
ok 52 - malformed cone-mode patterns
ok 665 - checkout attr=auto  aeol=crlf core.autocrlf=input core.eol=lf file=CRLF_mix_LF
ok 3 - ref name '/' is invalid with options --allow-onelevel
ok 36 - proper error on error in custom config files
ok 3 - symbolic-ref refuses non-ref for HEAD
ok 4 - ref name '/' is invalid with options --normalize
ok 666 - checkout attr=auto  aeol=crlf core.autocrlf=input core.eol=lf file=LF_mix_CR
ok 5 - ref name '/' is invalid with options --allow-onelevel --normalize
ok 667 - checkout attr=auto  aeol=crlf core.autocrlf=input core.eol=lf file=LF_nul
ok 6 - ref name 'foo/bar/baz' is valid
ok 142 - last one wins: three level vars
ok 4 - symbolic-ref refuses bare sha1
ok 7 - ref name 'foo/bar/baz' is valid with options --normalize
ok 668 - setup config for checkout attr= ident= aeol= core.autocrlf=false
ok 37 - check line errors for malformed values
ok 35 - onbranch with detached HEAD
ok 8 - ref name 'refs///heads/foo' is invalid
ok 53 - set from subdir pays attention to prefix
ok 2 - Check that various forms of specifying core.hooksPath work
ok 9 - ref name 'refs///heads/foo' is valid with options --normalize
ok 669 - setup LF checkout  with -c core.eol=lf
ok 42 - git pack-refs --all --auto does not repack below 16 refs with small packed-refs
ok 10 - ref name 'heads/foo/' is invalid
ok 38 - error on modifying repo config without repo
ok 5 - HEAD cannot be removed
ok 3 - git rev-parse --git-path hooks
ok 11 - ref name '/heads/foo' is invalid
ok 670 - setup CRLF checkout  with -c core.eol=lf
ok 39 - iteration shows correct origins
ok 36 - onbranch without repository
ok 12 - ref name '/heads/foo' is valid with options --normalize
ok 1 - setup
# passed all 39 test(s)
1..39
ok 13 - ref name '///heads/foo' is invalid
*** t1403-show-ref.sh ***
ok 671 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 14 - ref name '///heads/foo' is valid with options --normalize
ok 54 - add from subdir pays attention to prefix
ok 15 - ref name './foo' is invalid
ok 2 - create refs/heads/main
ok 143 - old-fashioned settings are case insensitive
ok 16 - ref name './foo/bar' is invalid
ok 37 - onbranch without repository but explicit nonexistent Git directory
ok 4 - core.hooksPath=/dev/null
ok 6 - symbolic-ref can be deleted
# passed all 37 test(s)
1..37
ok 17 - ref name 'foo/./bar' is invalid
ok 672 - setup CRLF_mix_LF checkout  with -c core.eol=lf
# passed all 4 test(s)
1..4
ok 18 - ref name 'foo/bar/.' is invalid
ok 3 - create refs/heads/main with oldvalue verification
ok 55 - set from subdir in non-cone mode throws an error
ok 19 - ref name '.refs/foo' is invalid
ok 673 - setup LF_nul checkout  with -c core.eol=lf
ok 4 - fail to delete refs/heads/main with stale ref
ok 20 - ref name 'refs/heads/foo.' is invalid
*** t1404-update-ref-errors.sh ***
*** t1405-main-ref-store.sh ***
ok 21 - ref name 'heads/foo..bar' is invalid
ok 56 - set from subdir in non-cone mode throws an error
ok 144 - setting different case sensitive subsections 
ok 22 - ref name 'heads/foo?bar' is invalid
ok 145 - git -c a=VAL rejects invalid 'a'
ok 23 - ref name 'foo./bar' is valid
ok 5 - delete refs/heads/main
ok 7 - symbolic-ref can delete dangling symref
ok 24 - ref name 'heads/foo.lock' is invalid
ok 146 - git -c .a=VAL rejects invalid '.a'
ok 49 - pack-refs: compaction raises locking errors
ok 147 - git -c a.=VAL rejects invalid 'a.'
ok 25 - ref name 'heads///foo.lock' is invalid
ok 57 - by default, cone mode will error out when passed files
ok 26 - ref name 'foo.lock/bar' is invalid
ok 148 - git -c a.0b=VAL rejects invalid 'a.0b'
ok 8 - symbolic-ref fails to delete missing FOO
ok 27 - ref name 'foo.lock///bar' is invalid
ok 58 - error on mistyped command line options
ok 674 - ls-files --eol attr=  aeol= core.autocrlf=false core.eol=lf
ok 149 - git -c a.b c.=VAL rejects invalid 'a.b c.'
ok 28 - ref name 'heads/foo@bar' is valid
ok 150 - git -c a.b c.0d=VAL rejects invalid 'a.b c.0d'
ok 29 - ref name 'heads/v@{ation' is invalid
ok 6 - delete refs/heads/main without oldvalue verification
ok 675 - checkout attr=  aeol= core.autocrlf=false core.eol=lf file=LF
ok 30 - ref name 'heads/foo\bar' is invalid
ok 151 - git -c a.b=VAL works with valid 'a.b'
ok 31 - ref name 'heads/foo	' is invalid
ok 676 - checkout attr=  aeol= core.autocrlf=false core.eol=lf file=CRLF
ok 59 - by default, non-cone mode will warn on individual files
ok 7 - fail to create  due to file/directory conflict
ok 152 - git -c a.b c.d=VAL works with valid 'a.b c.d'
ok 9 - symbolic-ref fails to delete real ref
ok 32 - ref name 'heads/foo' is invalid
ok 10 - git read-tree -u -m --recurse-submodules: worktrees of nested submodules are removed
ok 153 - git -c is not confused by empty environment
ok 33 - ref name 'heads/fuß' is valid
ok 677 - checkout attr=  aeol= core.autocrlf=false core.eol=lf file=CRLF_mix_LF
ok 8 - create refs/heads/main (by HEAD)
ok 34 - ref name 'heads/*foo/bar' is valid with options --refspec-pattern
ok 154 - GIT_CONFIG_PARAMETERS handles old-style entries
ok 678 - checkout attr=  aeol= core.autocrlf=false core.eol=lf file=LF_mix_CR
ok 35 - ref name 'heads/foo*/bar' is valid with options --refspec-pattern
ok 36 - ref name 'heads/f*o/bar' is valid with options --refspec-pattern
ok 155 - GIT_CONFIG_PARAMETERS handles new-style entries
ok 9 - create refs/heads/main (by HEAD) with oldvalue verification
ok 679 - checkout attr=  aeol= core.autocrlf=false core.eol=lf file=LF_nul
ok 37 - ref name 'heads/f*o*/bar' is invalid with options --refspec-pattern
ok 43 - git pack-refs --all --auto scales with size of packed-refs
ok 38 - ref name 'heads/foo*/bar*' is invalid with options --refspec-pattern
ok 680 - setup config for checkout attr= ident= aeol= core.autocrlf=true
ok 156 - old and new-style entries can mix
ok 60 - setup bare repo
ok 39 - ref name 'foo' is invalid
ok 10 - create large ref name
ok 10 - fail to delete refs/heads/main (by HEAD) with stale ref
ok 40 - ref name 'foo' is valid with options --allow-onelevel
ok 61 - list fails outside work tree
ok 157 - old and new bools with ambiguous subsection
ok 41 - ref name 'foo' is invalid with options --refspec-pattern
ok 681 - setup LF checkout  with -c core.eol=lf
ok 42 - ref name 'foo' is valid with options --refspec-pattern --allow-onelevel
ok 62 - add fails outside work tree
ok 11 - symbolic-ref can point to large ref name
ok 43 - ref name 'foo' is invalid with options --normalize
ok 682 - setup CRLF checkout  with -c core.eol=lf
ok 44 - ref name 'foo' is valid with options --allow-onelevel --normalize
ok 11 - delete refs/heads/main (by HEAD)
ok 63 - set fails outside work tree
ok 12 - we can parse long symbolic ref
ok 45 - ref name 'foo/bar' is valid
ok 46 - ref name 'foo/bar' is valid with options --allow-onelevel
ok 683 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 64 - init fails outside work tree
ok 13 - symbolic-ref reports failure in exit code
ok 158 - detect bogus GIT_CONFIG_PARAMETERS
ok 47 - ref name 'foo/bar' is valid with options --refspec-pattern
ok 65 - reapply fails outside work tree
ok 48 - ref name 'foo/bar' is valid with options --refspec-pattern --allow-onelevel
ok 684 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 49 - ref name 'foo/bar' is valid with options --normalize
ok 66 - disable fails outside work tree
ok 50 - ref name 'foo/*' is invalid
ok 51 - ref name 'foo/*' is invalid with options --allow-onelevel
ok 685 - setup LF_nul checkout  with -c core.eol=lf
ok 67 - setup clean
ok 52 - ref name 'foo/*' is valid with options --refspec-pattern
ok 12 - deleting current branch adds message to HEAD's log
ok 53 - ref name 'foo/*' is valid with options --refspec-pattern --allow-onelevel
ok 44 - git maintenance run --task=pack-refs --auto does not repack below 16 refs without packed-refs
ok 50 - pack-refs: auto compaction
ok 159 - git --config-env=key=envvar support
ok 54 - ref name '*/foo' is invalid
ok 55 - ref name '*/foo' is invalid with options --allow-onelevel
ok 56 - ref name '*/foo' is valid with options --refspec-pattern
ok 160 - git --config-env with missing value
ok 57 - ref name '*/foo' is valid with options --refspec-pattern --allow-onelevel
ok 686 - ls-files --eol attr=  aeol= core.autocrlf=true core.eol=lf
ok 58 - ref name '*/foo' is invalid with options --normalize
ok 59 - ref name '*/foo' is valid with options --refspec-pattern --normalize
ok 60 - ref name 'foo/*/bar' is invalid
ok 687 - checkout attr=  aeol= core.autocrlf=true core.eol=lf file=LF
ok 161 - git --config-env fails with invalid parameters
ok 13 - deleting by HEAD adds message to HEAD's log
ok 61 - ref name 'foo/*/bar' is invalid with options --allow-onelevel
ok 1 - setup
ok 5 - status with options
ok 688 - checkout attr=  aeol= core.autocrlf=true core.eol=lf file=CRLF
ok 62 - ref name 'foo/*/bar' is valid with options --refspec-pattern
ok 68 - check-rules cone mode
ok 162 - git -c and --config-env work together
ok 63 - ref name 'foo/*/bar' is valid with options --refspec-pattern --allow-onelevel
ok 2 - create_symref(FOO, refs/heads/main)
ok 689 - checkout attr=  aeol= core.autocrlf=true core.eol=lf file=CRLF_mix_LF
ok 64 - ref name '*' is invalid
ok 65 - ref name '*' is invalid with options --allow-onelevel
ok 690 - checkout attr=  aeol= core.autocrlf=true core.eol=lf file=LF_mix_CR
ok 163 - git -c and --config-env override each other
ok 66 - ref name '*' is invalid with options --refspec-pattern
ok 1 - setup
ok 14 - symbolic-ref writes reflog entry
ok 14 - update-ref does not create reflogs by default
ok 67 - ref name '*' is valid with options --refspec-pattern --allow-onelevel
ok 164 - --config-env handles keys with equals
ok 691 - checkout attr=  aeol= core.autocrlf=true core.eol=lf file=LF_nul
ok 68 - ref name 'foo/*/*' is invalid with options --refspec-pattern
ok 45 - git maintenance run --task=pack-refs --auto does not repack below 16 refs with small packed-refs
ok 692 - setup config for checkout attr=auto ident= aeol= core.autocrlf=true
ok 69 - ref name 'foo/*/*' is invalid with options --refspec-pattern --allow-onelevel
ok 165 - git config handles environment config pairs
ok 70 - ref name '*/foo/*' is invalid with options --refspec-pattern
ok 166 - git config ignores pairs without count
ok 3 - delete_refs(FOO, refs/tags/new-tag)
ok 71 - ref name '*/foo/*' is invalid with options --refspec-pattern --allow-onelevel
ok 693 - setup LF checkout  with -c core.eol=lf
ok 69 - check-rules non-cone mode
ok 72 - ref name '*/*/foo' is invalid with options --refspec-pattern
ok 2 - existing loose ref is a simple prefix of new
ok 15 - update-ref creates reflogs with --create-reflog
ok 167 - git config ignores pairs exceeding count
ok 1 - setup
ok 694 - setup CRLF checkout  with -c core.eol=lf
ok 73 - ref name '*/*/foo' is invalid with options --refspec-pattern --allow-onelevel
ok 168 - git config ignores pairs with zero count
ok 74 - ref name '/foo' is invalid
ok 169 - git config ignores pairs with empty count
ok 695 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 75 - ref name '/foo' is invalid with options --allow-onelevel
ok 16 - creates no reflog in bare repository
ok 70 - check-rules cone mode is default
ok 76 - ref name '/foo' is invalid with options --refspec-pattern
ok 15 - symbolic-ref does not create ref d/f conflicts
ok 170 - git config fails with invalid count
ok 696 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 77 - ref name '/foo' is invalid with options --refspec-pattern --allow-onelevel
ok 4 - rename_refs(main, new-main)
ok 71 - check-rules quoting
ok 2 - show-ref
ok 78 - ref name '/foo' is invalid with options --normalize
ok 171 - git config fails with missing config key
ok 697 - setup LF_nul checkout  with -c core.eol=lf
ok 5 - for_each_ref(refs/heads/)
ok 3 - existing packed ref is a simple prefix of new
ok 79 - ref name '/foo' is valid with options --allow-onelevel --normalize
ok 80 - ref name '/foo' is invalid with options --refspec-pattern --normalize
ok 172 - git config fails with missing config value
ok 6 - for_each_ref() is sorted
ok 3 - show-ref -q
ok 81 - ref name '/foo' is valid with options --refspec-pattern --allow-onelevel --normalize
ok 17 - core.logAllRefUpdates=true creates reflog in bare repository
ok 72 - check-rules null termination
ok 173 - git config fails with invalid config pair key
# still have 1 known breakage(s)
# passed all remaining 71 test(s)
1..72
ok 16 - symbolic-ref can overwrite pointer to invalid name
ok 7 - resolve_ref(new-main)
ok 4 - existing loose ref is a deeper prefix of new
ok 8 - verify_ref(new-main)
ok 698 - ls-files --eol attr=auto  aeol= core.autocrlf=true core.eol=lf
ok 174 - environment overrides config file
ok 9 - for_each_reflog()
ok 699 - checkout attr=auto  aeol= core.autocrlf=true core.eol=lf file=LF
ok 51 - gc: auto compaction
ok 4 - show-ref --verify
ok 175 - GIT_CONFIG_PARAMETERS overrides environment config
ok 10 - for_each_reflog_ent()
ok 700 - checkout attr=auto  aeol= core.autocrlf=true core.eol=lf file=CRLF
ok 176 - command line overrides environment config
ok 18 - core.logAllRefUpdates=true does not create reflog by default
ok 11 - for_each_reflog_ent_reverse()
ok 5 - show-ref --verify -q
ok 5 - existing packed ref is a deeper prefix of new
ok 701 - checkout attr=auto  aeol= core.autocrlf=true core.eol=lf file=CRLF_mix_LF
ok 12 - reflog_exists(HEAD)
ok 17 - symbolic-ref can resolve d/f name (EISDIR)
ok 82 - check-ref-format --branch @{-1}
ok 702 - checkout attr=auto  aeol= core.autocrlf=true core.eol=lf file=LF_mix_CR
ok 13 - delete_reflog(HEAD)
ok 83 - check-ref-format --branch -nain
ok 177 - git config --edit works
*** t1406-submodule-ref-store.sh ***
ok 14 - create-reflog(HEAD)
ok 703 - checkout attr=auto  aeol= core.autocrlf=true core.eol=lf file=LF_nul
ok 704 - setup config for checkout attr=text ident= aeol= core.autocrlf=true
ok 6 - new ref is a simple prefix of existing loose
ok 19 - core.logAllRefUpdates=always creates reflog by default
ok 178 - git config --edit respects core.editor
ok 705 - setup LF checkout  with -c core.eol=lf
ok 18 - symbolic-ref can resolve d/f name (ENOTDIR)
ok 179 - barf on syntax error
ok 46 - git maintenance run --task=pack-refs --auto scales with size of packed-refs
ok 19 - symbolic-ref refuses invalid target for non-HEAD
ok 706 - setup CRLF checkout  with -c core.eol=lf
# passed all 46 test(s)
1..46
ok 20 - core.logAllRefUpdates=always creates reflog for ORIG_HEAD
ok 180 - barf on incomplete section header
ok 84 - check-ref-format --branch from subdir
ok 707 - setup LF_mix_CR checkout  with -c core.eol=lf
*** t1407-worktree-ref-store.sh ***
ok 7 - new ref is a simple prefix of existing packed
ok 85 - check-ref-format --branch @{-1} from non-repo
ok 181 - barf on incomplete string
ok 20 - symbolic-ref allows top-level target for non-HEAD
ok 708 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 86 - check-ref-format --branch main from non-repo
ok 87 - ref name 'heads/foo' simplifies to 'heads/foo'
ok 709 - setup LF_nul checkout  with -c core.eol=lf
ok 88 - ref name 'refs///heads/foo' simplifies to 'refs/heads/foo'
ok 15 - delete_ref(refs/heads/foo)
ok 89 - ref name '/heads/foo' simplifies to 'heads/foo'
ok 90 - ref name '///heads/foo' simplifies to 'heads/foo'
ok 21 - --no-create-reflog overrides core.logAllRefUpdates=always
ok 8 - new ref is a deeper prefix of existing loose
ok 6 - show-ref -d
ok 21 - symbolic-ref pointing at another
ok 91 - check-ref-format --normalize rejects 'foo'
ok 11 - git read-tree -u -m --recurse-submodules: modified submodule updates submodule work tree
ok 22 - create refs/heads/main (by HEAD)
ok 92 - check-ref-format --normalize rejects '/foo'
ok 16 - delete_ref(refs/heads/foo)
ok 22 - symbolic-ref --short handles complex utf8 case
ok 93 - check-ref-format --normalize rejects 'heads/foo/../bar'
ok 23 - pack refs
# passed all 16 test(s)
1..16
ok 94 - check-ref-format --normalize rejects 'heads/./foo'
ok 710 - ls-files --eol attr=text  aeol= core.autocrlf=true core.eol=lf
ok 182 - urlmatch
ok 52 - maintenance run --task=pack-refs: auto compaction
*** t1408-packed-refs.sh ***
ok 95 - check-ref-format --normalize rejects 'heads\foo'
ok 24 - move refs/heads/main (by HEAD)
ok 23 - symbolic-ref --short handles name with suffix
ok 96 - check-ref-format --normalize rejects 'heads/foo.lock'
ok 711 - checkout attr=text  aeol= core.autocrlf=true core.eol=lf file=LF
ok 97 - check-ref-format --normalize rejects 'heads///foo.lock'
ok 9 - new ref is a deeper prefix of existing packed
ok 24 - symbolic-ref --short handles almost-matching name
ok 712 - checkout attr=text  aeol= core.autocrlf=true core.eol=lf file=CRLF
ok 98 - check-ref-format --normalize rejects 'foo.lock/bar'
ok 183 - urlmatch with --show-scope
ok 99 - check-ref-format --normalize rejects 'foo.lock///bar'
ok 25 - delete refs/heads/main (by HEAD) should remove both packed and loose refs/heads/main
ok 53 - pack-refs: prunes stale tables
ok 713 - checkout attr=text  aeol= core.autocrlf=true core.eol=lf file=CRLF_mix_LF
# passed all 99 test(s)
1..99
ok 25 - symbolic-ref --short handles name with percent
*** t1409-avoid-packing-refs.sh ***
# passed all 25 test(s)
1..25
ok 714 - checkout attr=text  aeol= core.autocrlf=true core.eol=lf file=LF_mix_CR
*** t1410-reflog.sh ***
ok 715 - checkout attr=text  aeol= core.autocrlf=true core.eol=lf file=LF_nul
ok 10 - one new ref is a simple prefix of another
ok 54 - pack-refs: does not prune non-table files
ok 716 - setup config for checkout attr=text ident= aeol= core.autocrlf=input
ok 717 - setup LF checkout  with -c core.eol=lf
ok 11 - D/F conflict prevents add long + delete short
ok 26 - delete symref without dereference
ok 718 - setup CRLF checkout  with -c core.eol=lf
ok 719 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 12 - D/F conflict prevents add short + delete long
ok 7 - show-ref --branches, --tags, --head, pattern
ok 720 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 1 - setup
ok 2 - pack_refs() not allowed
ok 721 - setup LF_nul checkout  with -c core.eol=lf
ok 8 - show-ref --heads is deprecated and hidden
ok 3 - create_symref() not allowed
ok 13 - D/F conflict prevents delete long + add short
ok 4 - delete_refs() not allowed
ok 5 - rename_refs() not allowed
ok 6 - status with diff in unexpanded sparse directory
ok 10 - Racy git trial #4 part B
ok 9 - show-ref --verify HEAD
# passed all 10 test(s)
1..10
ok 14 - D/F conflict prevents delete short + add long
ok 55 - packed-refs: writes are synced
ok 6 - for_each_ref(refs/heads/)
*** t1411-reflog-show.sh ***
ok 27 - delete symref without dereference when the referred ref is packed
ok 722 - ls-files --eol attr=text  aeol= core.autocrlf=input core.eol=lf
ok 7 - for_each_ref() is sorted
ok 723 - checkout attr=text  aeol= core.autocrlf=input core.eol=lf file=LF
ok 10 - show-ref --verify pseudorefs
ok 8 - resolve_ref(main)
ok 724 - checkout attr=text  aeol= core.autocrlf=input core.eol=lf file=CRLF
ok 28 - update-ref -d is not confused by self-reference
ok 9 - verify_ref(new-main)
ok 15 - D/F conflict prevents add long + delete short packed
ok 725 - checkout attr=text  aeol= core.autocrlf=input core.eol=lf file=CRLF_mix_LF
ok 10 - for_each_reflog()
ok 726 - checkout attr=text  aeol= core.autocrlf=input core.eol=lf file=LF_mix_CR
ok 184 - urlmatch favors more specific URLs
ok 1 - setup
ok 11 - for_each_reflog_ent()
ok 727 - checkout attr=text  aeol= core.autocrlf=input core.eol=lf file=LF_nul
ok 29 - update-ref --no-deref -d can delete self-reference
ok 16 - D/F conflict prevents add short + delete long packed
ok 12 - for_each_reflog_ent_reverse()
ok 728 - setup config for checkout attr=auto ident= aeol= core.autocrlf=input
ok 2 - resolve_ref(<shared-ref>)
ok 13 - reflog_exists(HEAD)
ok 729 - setup LF checkout  with -c core.eol=lf
ok 56 - ref iterator: bogus names are flagged
ok 14 - delete_reflog() not allowed
ok 11 - show-ref --verify with dangling ref
ok 15 - create-reflog() not allowed
# passed all 15 test(s)
1..15
ok 730 - setup CRLF checkout  with -c core.eol=lf
*** t1412-reflog-loop.sh ***
ok 3 - resolve_ref(<per-worktree-ref>)
ok 30 - update-ref --no-deref -d can delete reference to bad ref
ok 17 - D/F conflict prevents delete long packed + add short
ok 731 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 185 - urlmatch with wildcard
ok 31 - (not) create HEAD with old sha1
ok 57 - ref iterator: missing object IDs are not flagged
ok 732 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 12 - show-ref sub-modes are mutually exclusive
ok 32 - (not) prior created .git/refs/heads/main
ok 13 - --exists with existing reference
ok 1 - setup
ok 33 - create HEAD
ok 733 - setup LF_nul checkout  with -c core.eol=lf
ok 14 - --exists with missing reference
ok 4 - create_symref(FOO, refs/heads/main)
ok 18 - D/F conflict prevents delete short packed + add long
ok 34 - (not) change HEAD with wrong SHA1
# passed all 4 test(s)
1..4
ok 1 - setup
ok 15 - --exists does not use DWIM
ok 16 - --exists with HEAD
ok 35 - (not) changed .git/refs/heads/main
ok 2 - do not create packed-refs file gratuitously
*** t1413-reflog-detach.sh ***
ok 2 - no error from stale entry in packed-refs
ok 36 - clean up reflog
# passed all 2 test(s)
1..2
*** t1414-reflog-walk.sh ***
ok 734 - ls-files --eol attr=auto  aeol= core.autocrlf=input core.eol=lf
ok 19 - D/F conflict prevents indirect add long + delete short
ok 37 - create refs/heads/main (logged by touch)
ok 58 - basic: commit and list refs
ok 17 - --exists with bad reference name
ok 735 - checkout attr=auto  aeol= core.autocrlf=input core.eol=lf file=LF
ok 186 - --unset last key removes section (except if commented)
ok 736 - checkout attr=auto  aeol= core.autocrlf=input core.eol=lf file=CRLF
ok 18 - --exists with arbitrary symref
ok 3 - check that marking the packed-refs file works
ok 187 - --unset-all removes section if empty & uncommented
ok 38 - update refs/heads/main (logged by touch)
ok 737 - checkout attr=auto  aeol= core.autocrlf=input core.eol=lf file=CRLF_mix_LF
ok 188 - adding a key into an empty section reuses header
ok 20 - D/F conflict prevents indirect add long + indirect delete short
ok 1 - setup
ok 738 - checkout attr=auto  aeol= core.autocrlf=input core.eol=lf file=LF_mix_CR
ok 12 - git read-tree -u -m --recurse-submodules: updating to a missing submodule commit fails
ok 19 - --exists with dangling symref
ok 4 - leave packed-refs untouched on update of packed
ok 739 - checkout attr=auto  aeol= core.autocrlf=input core.eol=lf file=LF_nul
ok 39 - set refs/heads/main (logged by touch)
ok 20 - --exists with nonexistent object ID
ok 2 - log -g shows reflog headers
ok 740 - setup config for checkout attr=-text ident= aeol= core.autocrlf=true
ok 189 - preserves existing permissions
ok 3 - oneline reflog format
ok 741 - setup LF checkout  with -c core.eol=crlf
ok 21 - D/F conflict prevents indirect add short + indirect delete long
ok 190 - set up --show-origin tests
ok 21 - --exists with non-commit object
ok 4 - reflog default format
ok 40 - verifying refs/heads/main's log (logged by touch)
ok 742 - setup CRLF checkout  with -c core.eol=crlf
ok 5 - leave packed-refs untouched on checked update of packed
ok 22 - --exists with directory fails with generic error
ok 191 - --show-origin with --list
ok 5 - override reflog default format
ok 743 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 23 - --exists with non-existent special ref
ok 41 - create refs/heads/main (logged by config)
ok 744 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 6 - using @{now} syntax shows reflog date (multiline)
ok 192 - --show-origin with --list --null
ok 24 - --exists with existing special ref
ok 6 - leave packed-refs untouched on verify of packed
ok 22 - D/F conflict prevents indirect delete long + indirect add short
# passed all 24 test(s)
1..24
ok 745 - setup LF_nul checkout  with -c core.eol=crlf
ok 7 - using @{now} syntax shows reflog date (oneline)
ok 193 - --show-origin with single file
ok 7 - status reports sparse-checkout
*** t1415-worktree-refs.sh ***
ok 42 - update refs/heads/main (logged by config)
ok 194 - --show-origin with --get-regexp
ok 8 - using @{now} syntax shows reflog date (format=%gd)
ok 7 - touch packed-refs on delete of packed
ok 195 - --show-origin getting a single key
ok 196 - set up custom config file
ok 59 - basic: can write large commit message
ok 43 - set refs/heads/main (logged by config)
ok 746 - ls-files --eol attr=-text  aeol= core.autocrlf=true core.eol=crlf
ok 9 - using --date= shows reflog date (multiline)
ok 23 - D/F conflict prevents indirect add long + delete short packed
ok 197 - set up custom config file with special name characters
ok 8 - leave packed-refs untouched on update of loose
ok 1 - setup commits
ok 747 - checkout attr=-text  aeol= core.autocrlf=true core.eol=crlf file=LF
ok 10 - using --date= shows reflog date (oneline)
ok 198 - --show-origin escape special file name characters
ok 60 - basic: show-ref fails with empty repository
ok 748 - checkout attr=-text  aeol= core.autocrlf=true core.eol=crlf file=CRLF
ok 11 - using --date= shows reflog date (format=%gd)
ok 44 - verifying refs/heads/main's log (logged by config)
ok 199 - --show-origin stdin
ok 749 - checkout attr=-text  aeol= core.autocrlf=true core.eol=crlf file=CRLF_mix_LF
ok 9 - leave packed-refs untouched on checked update of loose
ok 61 - basic: can check out unborn branch
ok 200 - --show-origin stdin with file include
ok 750 - checkout attr=-text  aeol= core.autocrlf=true core.eol=crlf file=LF_mix_CR
ok 1 - setup
ok 12 - log.date does not invoke "--date" magic (multiline)
ok 751 - checkout attr=-text  aeol= core.autocrlf=true core.eol=crlf file=LF_nul
ok 2 - setup reflog with alternating commits
ok 24 - D/F conflict prevents indirect add long + indirect delete short packed
ok 10 - leave packed-refs untouched on verify of loose
ok 752 - setup config for checkout attr=-text ident= aeol=lf core.autocrlf=true
ok 3 - reflog shows all entries
# passed all 3 test(s)
1..3
ok 13 - log.date does not invoke "--date" magic (oneline)
ok 753 - setup LF checkout  with -c core.eol=crlf
*** t1416-ref-transaction-hooks.sh ***
ok 201 - --show-origin blob
ok 2 - baseline
ok 11 - leave packed-refs untouched on delete of loose
ok 754 - setup CRLF checkout  with -c core.eol=crlf
# passed all 11 test(s)
1..11
ok 45 - set up for querying the reflog
ok 755 - setup LF_mix_CR checkout  with -c core.eol=crlf
*** t1417-reflog-updateref.sh ***
ok 14 - log.date does not invoke "--date" magic (format=%gd)
ok 25 - D/F conflict prevents add long + indirect delete short packed
ok 756 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 46 - Query "main@{May 25 2005}" (before history)
ok 15 - --date magic does not override explicit @{0} syntax
ok 3 - switch to branch
ok 47 - Query main@{2005-05-25} (before history)
ok 757 - setup LF_nul checkout  with -c core.eol=crlf
ok 62 - basic: peeled tags are stored
ok 16 - empty reflog file
ok 202 - --show-origin blob ref
ok 48 - Query "main@{May 26 2005 23:31:59}" (1 second before history)
ok 203 - --show-origin with --default
ok 49 - Query "main@{May 26 2005 23:32:00}" (exactly history start)
ok 26 - D/F conflict prevents indirect delete long packed + indirect add short
ok 1 - set up some reflog entries
ok 2 - set up expected reflog
ok 50 - Query "main@{May 26 2005 23:32:30}" (first non-creation change)
ok 4 - detach to other
ok 758 - ls-files --eol attr=-text  aeol=lf core.autocrlf=true core.eol=crlf
ok 3 - reflog walk shows expected logs
ok 1 - setup
ok 27 - missing old value blocks update
ok 51 - Query "main@{2005-05-26 23:33:01}" (middle of history with gap)
ok 759 - checkout attr=-text  aeol=lf core.autocrlf=true core.eol=crlf file=LF
ok 2 - correct usage on sub-command -h
ok 4 - reflog can limit with --no-merges
ok 3 - correct usage on "git reflog show -h"
ok 760 - checkout attr=-text  aeol=lf core.autocrlf=true core.eol=crlf file=CRLF
ok 52 - Query "main@{2005-05-26 23:38:00}" (middle of history)
ok 28 - incorrect old value blocks update
ok 761 - checkout attr=-text  aeol=lf core.autocrlf=true core.eol=crlf file=CRLF_mix_LF
ok 5 - reflog can limit with pathspecs
ok 5 - detach to self
ok 53 - Query "main@{2005-05-26 23:43:00}" (exact end of history)
ok 762 - checkout attr=-text  aeol=lf core.autocrlf=true core.eol=crlf file=LF_mix_CR
ok 63 - basic: for-each-ref can print symrefs
ok 6 - pathspec limiting handles merges
ok 763 - checkout attr=-text  aeol=lf core.autocrlf=true core.eol=crlf file=LF_nul
ok 764 - setup config for checkout attr=-text ident= aeol=crlf core.autocrlf=true
ok 54 - Query "main@{2005-05-28}" (past end of history)
ok 204 - --show-scope with --list
ok 17 - git log -g -p shows diffs vs. parents
ok 29 - existing old value blocks create
# passed all 17 test(s)
1..17
ok 7 - --parents shows true parents
ok 765 - setup LF checkout  with -c core.eol=crlf
*** t1418-reflog-exists.sh ***
ok 205 - --show-scope with --blob
ok 6 - attach to self
ok 766 - setup CRLF checkout  with -c core.eol=crlf
ok 30 - incorrect old value blocks delete
ok 4 - pass through -- to sub-command
ok 206 - --show-scope with --local
ok 767 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 207 - --show-scope getting a single value
ok 8 - walking multiple reflogs shows all
ok 768 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 31 - missing old value blocks indirect update
ok 208 - --show-scope with --show-origin
ok 9 - date-limiting does not interfere with other logs
ok 209 - --show-scope with --default
ok 769 - setup LF_nul checkout  with -c core.eol=crlf
ok 55 - query reflog with gap
ok 7 - attach to other
ok 32 - incorrect old value blocks indirect update
# passed all 7 test(s)
1..7
*** t1419-exclude-refs.sh ***
ok 1 - setup
ok 10 - min/max age uses entry date to limit
ok 770 - ls-files --eol attr=-text  aeol=crlf core.autocrlf=true core.eol=crlf
ok 33 - existing old value blocks indirect create
ok 771 - checkout attr=-text  aeol=crlf core.autocrlf=true core.eol=crlf file=LF
ok 210 - override global and system config
ok 1 - setup
ok 64 - basic: notes
ok 772 - checkout attr=-text  aeol=crlf core.autocrlf=true core.eol=crlf file=CRLF
ok 2 - refs/worktree are per-worktree
ok 773 - checkout attr=-text  aeol=crlf core.autocrlf=true core.eol=crlf file=CRLF_mix_LF
ok 211 - override global and system config with missing file
ok 34 - incorrect old value blocks indirect delete
ok 774 - checkout attr=-text  aeol=crlf core.autocrlf=true core.eol=crlf file=LF_mix_CR
ok 13 - git read-tree -u -m --recurse-submodules: submodule branch is not changed, detach HEAD instead
ok 775 - checkout attr=-text  aeol=crlf core.autocrlf=true core.eol=crlf file=LF_nul
ok 35 - missing old value blocks indirect no-deref update
ok 776 - setup config for checkout attr=text ident= aeol=lf core.autocrlf=true
ok 2 - hook allows updating ref if successful
ok 56 - creating initial files
ok 3 - resolve main-worktree/HEAD
ok 212 - system override has no effect with GIT_CONFIG_NOSYSTEM
ok 57 - git commit logged updates
ok 777 - setup LF checkout  with -c core.eol=crlf
ok 58 - git cat-file blob main:F (expect OTHER)
ok 36 - incorrect old value blocks indirect no-deref update
ok 11 - walk prefers reflog to ref tip
ok 778 - setup CRLF checkout  with -c core.eol=crlf
ok 213 - write to overridden global and system config
ok 59 - git cat-file blob main@{2005-05-26 23:30}:F (expect TEST)
ok 12 - rev-list -g complains when there are no reflogs
ok 60 - git cat-file blob main@{2005-05-26 23:42}:F (expect OTHER)
# passed all 12 test(s)
1..12
ok 4 - ambiguous main-worktree/HEAD
ok 214 - --local requires a repo
ok 1 - setup
ok 779 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 3 - hook aborts updating ref in prepared state
ok 215 - --worktree requires a repo
*** t1420-lost-found.sh ***
ok 5 - rewind
ok 61 - given old value for missing pseudoref, do not create
ok 780 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 37 - existing old value blocks indirect no-deref create
ok 216 - identical modern --type specifiers are allowed
ok 62 - create pseudoref
ok 217 - identical legacy --type specifiers are allowed
ok 781 - setup LF_nul checkout  with -c core.eol=crlf
ok 1 - setup
ok 218 - identical mixed --type specifiers are allowed
ok 6 - reflog expire should not barf on an annotated tag
ok 2 - get 'B' with 'git reflog delete --updateref HEAD@{0}'
ok 63 - overwrite pseudoref with no old value given
ok 5 - resolve worktrees/xx/HEAD
ok 2 - usage
ok 65 - basic: stash
ok 219 - non-identical modern --type specifiers are not allowed
ok 38 - incorrect old value blocks indirect no-deref delete
ok 4 - hook gets all queued updates in prepared state
ok 3 - usage: unknown option
# passed all 38 test(s)
1..38
ok 64 - overwrite pseudoref with correct old value
ok 220 - non-identical legacy --type specifiers are not allowed
ok 4 - reflog exists works
ok 221 - non-identical mixed --type specifiers are not allowed
ok 782 - ls-files --eol attr=text  aeol=lf core.autocrlf=true core.eol=crlf
ok 65 - do not overwrite pseudoref with wrong old value
*** t1430-bad-ref-name.sh ***
ok 6 - ambiguous worktrees/xx/HEAD
ok 5 - reflog exists works with a "--" delimiter
ok 7 - corrupt and check
ok 3 - get 'B' with 'git reflog delete --updateref HEAD@{1}'
ok 222 - --type allows valid type specifiers
ok 66 - delete pseudoref
ok 783 - checkout attr=text  aeol=lf core.autocrlf=true core.eol=crlf file=LF
ok 6 - reflog exists works with a "--end-of-options" delimiter
ok 223 - --no-type unsets type specifiers
# passed all 6 test(s)
1..6
ok 784 - checkout attr=text  aeol=lf core.autocrlf=true core.eol=crlf file=CRLF
ok 224 - unset type specifiers may be reset to conflicting ones
*** t1450-fsck.sh ***
ok 5 - hook gets all queued updates in committed state
ok 7 - reflog of main-worktree/HEAD
ok 785 - checkout attr=text  aeol=lf core.autocrlf=true core.eol=crlf file=CRLF_mix_LF
ok 67 - do not delete pseudoref with wrong old value
ok 225 - --type rejects unknown specifiers
ok 68 - delete pseudoref with correct old value
ok 226 - --type=int requires at least one digit
ok 786 - checkout attr=text  aeol=lf core.autocrlf=true core.eol=crlf file=LF_mix_CR
ok 8 - reflog expire --dry-run should not touch reflog
ok 4 - get 'C' with 'git reflog delete --updateref main@{0}'
ok 1 - setup
ok 787 - checkout attr=text  aeol=lf core.autocrlf=true core.eol=crlf file=LF_nul
ok 69 - create pseudoref with old OID zero
ok 227 - --replace-all does not invent newlines
ok 788 - setup config for checkout attr=text ident= aeol=crlf core.autocrlf=true
ok 8 - reflog of worktrees/xx/HEAD
ok 6 - hook gets all queued updates in aborted state
ok 2 - excluded region in middle
ok 789 - setup LF checkout  with -c core.eol=crlf
ok 14 - git read-tree -u -m --recurse-submodules: added submodule doesn't remove untracked file with same name
ok 70 - do not overwrite pseudoref with old OID zero
ok 9 - reflog expire
ok 5 - get 'B' with 'git reflog delete --updateref main@{1}'
ok 790 - setup CRLF checkout  with -c core.eol=crlf
ok 3 - excluded region at beginning
ok 791 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 71 - stdin test setup
ok 4 - excluded region at end
ok 792 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 72 - -z fails without --stdin
ok 6 - get 'B' with 'git reflog delete --updateref --rewrite HEAD@{0}'
ok 793 - setup LF_nul checkout  with -c core.eol=crlf
ok 73 - stdin works with no input
ok 10 - --stale-fix handles missing objects generously
ok 228 - set all config with value-pattern
ok 5 - disjoint excluded regions
ok 74 - stdin fails on empty line
ok 66 - basic: cherry-pick
ok 75 - stdin fails on only whitespace
ok 7 - get 'B' with 'git reflog delete --updateref --rewrite HEAD@{1}'
ok 6 - adjacent, non-overlapping excluded regions
ok 76 - stdin fails on leading whitespace
ok 77 - stdin fails on unknown command
ok 794 - ls-files --eol attr=text  aeol=crlf core.autocrlf=true core.eol=crlf
ok 9 - for-each-ref from main worktree
ok 78 - stdin fails on unbalanced quotes
ok 229 - --replace-all and value-pattern
ok 7 - overlapping excluded regions
ok 795 - checkout attr=text  aeol=crlf core.autocrlf=true core.eol=crlf file=LF
ok 79 - stdin fails on invalid escape
ok 7 - interleaving hook calls succeed
ok 8 - get 'C' with 'git reflog delete --updateref --rewrite main@{0}'
ok 80 - stdin fails on junk after quoted argument
ok 8 - several overlapping excluded regions
ok 796 - checkout attr=text  aeol=crlf core.autocrlf=true core.eol=crlf file=CRLF
ok 1 - setup
ok 81 - stdin fails create with no ref
ok 797 - checkout attr=text  aeol=crlf core.autocrlf=true core.eol=crlf file=CRLF_mix_LF
ok 82 - stdin fails create with no new value
ok 9 - unordered excludes
ok 798 - checkout attr=text  aeol=crlf core.autocrlf=true core.eol=crlf file=LF_mix_CR
ok 8 - hook captures git-symbolic-ref updates
ok 83 - stdin fails create with too many arguments
ok 9 - get 'B' with 'git reflog delete --updateref --rewrite main@{1}'
ok 84 - stdin fails update with no ref
ok 799 - checkout attr=text  aeol=crlf core.autocrlf=true core.eol=crlf file=LF_nul
ok 11 - prune and fsck
ok 10 - non-matching excluded section
ok 85 - stdin fails update with no new value
ok 800 - setup config for checkout attr=auto ident= aeol=lf core.autocrlf=true
ok 86 - stdin fails update with too many arguments
ok 2 - lost and found something
# passed all 2 test(s)
1..2
ok 801 - setup LF checkout  with -c core.eol=crlf
ok 87 - stdin fails delete with no ref
ok 11 - meta-characters are discarded
*** t1451-fsck-buffer.sh ***
ok 230 - refuse --fixed-value for incompatible actions
# passed all 11 test(s)
1..11
ok 10 - get 'B' with 'test_must_fail git reflog expire HEAD@{0}'
ok 1 - setup
ok 802 - setup CRLF checkout  with -c core.eol=crlf
ok 88 - stdin fails delete with too many arguments
*** t1460-refs-migrate.sh ***
ok 12 - recover and check
ok 89 - stdin fails verify with too many arguments
ok 2 - fast-import: fail on invalid branch name ".badbranchname"
ok 803 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 10 - for-each-ref from linked worktree
ok 90 - stdin fails option with unknown name
# passed all 10 test(s)
1..10
ok 804 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 9 - hook gets all queued symref updates
ok 91 - stdin fails with duplicate refs
ok 3 - fast-import: fail on invalid branch name "bad[branch]name"
# passed all 9 test(s)
1..9
*** t1500-rev-parse.sh ***
ok 1 - setup
ok 11 - get 'B' with 'test_must_fail git reflog expire HEAD@{1}'
*** t1501-work-tree.sh ***
ok 805 - setup LF_nul checkout  with -c core.eol=crlf
ok 15 - git read-tree -u -m --recurse-submodules: added submodule removes an untracked ignored file
ok 92 - stdin create ref works
ok 4 - git branch shows badly named ref as warning
ok 67 - basic: rebase
ok 806 - ls-files --eol attr=auto  aeol=lf core.autocrlf=true core.eol=crlf
ok 12 - get 'B' with 'test_must_fail git reflog expire main@{0}'
ok 93 - stdin does not create reflogs by default
ok 5 - branch -d can delete badly named ref
ok 807 - checkout attr=auto  aeol=lf core.autocrlf=true core.eol=crlf file=LF
ok 808 - checkout attr=auto  aeol=lf core.autocrlf=true core.eol=crlf file=CRLF
ok 809 - checkout attr=auto  aeol=lf core.autocrlf=true core.eol=crlf file=CRLF_mix_LF
ok 6 - branch -D can delete badly named ref
ok 94 - stdin creates reflogs with --create-reflog
ok 2 - loose objects borrowed from alternate are not missing
ok 13 - get 'B' with 'test_must_fail git reflog expire main@{1}'
ok 810 - checkout attr=auto  aeol=lf core.autocrlf=true core.eol=crlf file=LF_mix_CR
ok 7 - branch -D cannot delete non-ref in .git dir
ok 811 - checkout attr=auto  aeol=lf core.autocrlf=true core.eol=crlf file=LF_nul
ok 3 - HEAD is part of refs, valid objects appear valid
ok 812 - setup config for checkout attr=auto ident= aeol=crlf core.autocrlf=true
ok 95 - stdin succeeds with quoted argument
ok 231 - --fixed-value uses exact string matching
ok 14 - get 'B' with 'test_must_fail git reflog expire --updateref HEAD@{0}'
ok 8 - branch -D cannot delete ref in .git dir
ok 813 - setup LF checkout  with -c core.eol=crlf
ok 814 - setup CRLF checkout  with -c core.eol=crlf
ok 96 - stdin succeeds with escaped character
ok 13 - delete
ok 9 - branch -D cannot delete absolute path
ok 15 - get 'B' with 'test_must_fail git reflog expire --updateref HEAD@{1}'
ok 815 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 1 - setup
ok 14 - rewind2
ok 816 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 10 - git branch cannot create a badly named ref
ok 97 - stdin update ref creates with zero old value
ok 2 - superfluous arguments
ok 1 - create valid objects
ok 2 - reset input to empty
ok 4 - object with hash mismatch
ok 817 - setup LF_nul checkout  with -c core.eol=crlf
ok 15 - --expire=never
ok 3 - truncated commit (missingTree, "")
ok 16 - get 'B' with 'test_must_fail git reflog expire --updateref main@{0}'
ok 98 - stdin update ref creates with empty old value
ok 3 - missing ref storage format
ok 4 - truncated commit (missingTree, "tr")
ok 5 - truncated commit (missingTree, "tree")
ok 99 - stdin create ref works with path with space to blob
ok 818 - ls-files --eol attr=auto  aeol=crlf core.autocrlf=true core.eol=crlf
ok 11 - branch -m cannot rename to a bad ref name
ok 1 - setup
ok 4 - unknown ref storage format
ok 17 - get 'B' with 'test_must_fail git reflog expire --updateref main@{1}'
ok 2 - setup: helper for testing rev-parse
ok 6 - truncated commit (badTreeSha1, "tree ")
ok 16 - gc.reflogexpire=never
ok 68 - reflog: can delete separate reflog entries
ok 819 - checkout attr=auto  aeol=crlf core.autocrlf=true core.eol=crlf file=LF
ok 3 - setup: core.worktree = relative path
ok 100 - stdin update ref fails with wrong old value
ok 232 - --get and --get-all with --fixed-value
ok 7 - truncated commit (badTreeSha1, "tree 1234")
ok 8 - add tree line
ok 820 - checkout attr=auto  aeol=crlf core.autocrlf=true core.eol=crlf file=CRLF
not ok 12 - branch -m can rename from a bad ref name # TODO known breakage
ok 233 - --fixed-value with value-less configuration
ok 5 - files: migration to same format fails
ok 821 - checkout attr=auto  aeol=crlf core.autocrlf=true core.eol=crlf file=CRLF_mix_LF
ok 101 - stdin update ref fails with bad old value
ok 9 - truncated commit (missingAuthor, "")
ok 4 - outside
ok 5 - object with hash and type mismatch
ok 822 - checkout attr=auto  aeol=crlf core.autocrlf=true core.eol=crlf file=LF_mix_CR
ok 10 - truncated commit (missingAuthor, "par")
ok 18 - get 'B' with 'test_must_fail git reflog expire --updateref --rewrite HEAD@{0}'
ok 13 - push cannot create a badly named ref
ok 102 - stdin create ref fails with bad new value
ok 17 - gc.reflogexpire=false
ok 823 - checkout attr=auto  aeol=crlf core.autocrlf=true core.eol=crlf file=LF_nul
ok 11 - truncated commit (missingAuthor, "parent")
ok 824 - setup config for checkout attr=-text ident= aeol= core.autocrlf=false
ok 103 - stdin create ref fails with zero new value
ok 12 - truncated commit (badParentSha1, "parent ")
ok 234 - includeIf.hasconfig:remote.*.url
ok 5 - inside work tree
ok 825 - setup LF checkout  with -c core.eol=crlf
ok 1 - setup
ok 13 - truncated commit (badParentSha1, "parent 1234")
ok 14 - add parent line
ok 6 - empty prefix is actually written out
ok 19 - get 'B' with 'test_must_fail git reflog expire --updateref --rewrite HEAD@{1}'
ok 6 - files -> reftable: migration with worktree fails
ok 826 - setup CRLF checkout  with -c core.eol=crlf
ok 6 - zlib corrupt loose object output 
ok 2 - toplevel: --is-bare-repository
ok 104 - stdin update ref works with right old value
ok 15 - truncated commit (missingAuthor, "")
ok 827 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 3 - toplevel: --is-inside-git-dir
ok 18 - git reflog expire unknown reference
ok 16 - truncated commit (missingAuthor, "au")
ok 4 - toplevel: --is-inside-work-tree
ok 828 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 105 - stdin delete ref fails with wrong old value
ok 17 - truncated commit (missingAuthor, "author")
ok 5 - toplevel: --show-prefix
ok 7 - subdir of work tree
ok 829 - setup LF_nul checkout  with -c core.eol=crlf
ok 20 - get 'B' with 'test_must_fail git reflog expire --updateref --rewrite main@{0}'
ok 235 - includeIf.hasconfig:remote.*.url respects last-config-wins
ok 6 - toplevel: --git-dir
not ok 16 - git read-tree -u -m --recurse-submodules: replace submodule with a directory # TODO known breakage
ok 18 - truncated commit (missingEmail, "author ")
ok 7 - branch pointing to non-commit
ok 8 - setup: core.worktree = absolute path
ok 69 - reflog: can switch to previous branch
ok 7 - toplevel: --absolute-git-dir
ok 19 - truncated commit (missingEmail, "author name")
ok 106 - stdin delete ref fails with zero old value
ok 19 - checkout should not delete log for packed ref
ok 8 - .git/: --is-bare-repository
ok 20 - truncated commit (badEmail, "author name <")
ok 9 - .git/: --is-inside-git-dir
not ok 14 - push --mirror can delete badly named ref # TODO known breakage
ok 830 - ls-files --eol attr=-text  aeol= core.autocrlf=false core.eol=crlf
ok 21 - get 'B' with 'test_must_fail git reflog expire --updateref --rewrite main@{1}'
ok 7 - files -> reftable: unborn HEAD
ok 8 - HEAD link pointing at a funny object
ok 21 - truncated commit (badEmail, "author name <email")
ok 10 - .git/: --is-inside-work-tree
# passed all 21 test(s)
1..21
ok 831 - checkout attr=-text  aeol= core.autocrlf=false core.eol=crlf file=LF
*** t1502-rev-parse-parseopt.sh ***
ok 11 - .git/: --show-prefix
ok 22 - truncated commit (missingSpaceBeforeDate, "author name <email>")
ok 9 - outside
ok 832 - checkout attr=-text  aeol= core.autocrlf=false core.eol=crlf file=CRLF
ok 12 - .git/: --git-dir
ok 107 - stdin update symref works option no-deref
ok 236 - includeIf.hasconfig:remote.*.url globs
ok 23 - truncated commit (badDate, "author name <email> ")
ok 833 - checkout attr=-text  aeol= core.autocrlf=false core.eol=crlf file=CRLF_mix_LF
ok 13 - .git/: --absolute-git-dir
ok 20 - stale dirs do not cause d/f conflicts (reflogs on)
ok 24 - truncated commit (badDate, "author name <email> 1234")
ok 834 - checkout attr=-text  aeol= core.autocrlf=false core.eol=crlf file=LF_mix_CR
ok 9 - HEAD link pointing at a funny place
ok 14 - .git/objects/: --is-bare-repository
ok 15 - rev-parse skips symref pointing to broken name
ok 10 - inside work tree
ok 15 - .git/objects/: --is-inside-git-dir
ok 25 - truncated commit (badTimezone, "author name <email> 1234 ")
ok 835 - checkout attr=-text  aeol= core.autocrlf=false core.eol=crlf file=LF_nul
ok 108 - stdin delete symref works option no-deref
ok 836 - setup config for checkout attr=-text ident= aeol=lf core.autocrlf=false
ok 16 - .git/objects/: --is-inside-work-tree
ok 237 - includeIf.hasconfig:remote.*.url forbids remote url in such included files
ok 26 - truncated commit (badTimezone, "author name <email> 1234 +")
ok 27 - add author line
ok 8 - add, commit, checkout
ok 17 - .git/objects/: --show-prefix
ok 238 - negated mode causes failure
ok 837 - setup LF checkout  with -c core.eol=crlf
ok 28 - truncated commit (missingCommitter, "")
ok 18 - .git/objects/: --git-dir
ok 21 - stale dirs do not cause d/f conflicts (reflogs off)
ok 838 - setup CRLF checkout  with -c core.eol=crlf
ok 239 - specifying multiple modes causes failure
ok 29 - truncated commit (missingCommitter, "co")
ok 19 - .git/objects/: --absolute-git-dir
ok 11 - subdir of work tree
ok 70 - reflog: copying branch writes reflog entry
ok 12 - setup: GIT_WORK_TREE=relative (override core.worktree)
ok 240 - writing to stdin is rejected
ok 20 - subdirectory: --is-bare-repository
ok 839 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 30 - truncated commit (missingCommitter, "committer")
ok 241 - setup whitespace config
ok 21 - subdirectory: --is-inside-git-dir
ok 16 - for-each-ref emits warnings for broken names
ok 840 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 22 - no segfaults for reflog containing non-commit sha1s
ok 109 - stdin update symref works flag --no-deref
ok 242 - no internal whitespace
ok 31 - truncated commit (missingEmail, "committer ")
ok 8 - files -> reftable: single ref
ok 22 - subdirectory: --is-inside-work-tree
ok 841 - setup LF_nul checkout  with -c core.eol=crlf
ok 10 - HEAD link pointing at a funny object (from different wt)
not ok 23 - reflog with non-commit entries displays all entries # TODO known breakage
ok 32 - truncated commit (missingEmail, "committer name")
ok 243 - internal whitespace
ok 23 - subdirectory: --show-prefix
ok 33 - truncated commit (badEmail, "committer name <")
ok 24 - subdirectory: --git-dir
ok 244 - internal and trailing whitespace
ok 17 - update-ref -d can delete broken name
ok 13 - outside
ok 25 - subdirectory: --absolute-git-dir
ok 34 - truncated commit (badEmail, "committer name <email")
ok 245 - internal and trailing whitespace, all quoted
ok 110 - stdin delete symref works flag --no-deref
ok 35 - truncated commit (missingSpaceBeforeDate, "committer name <email>")
ok 842 - ls-files --eol attr=-text  aeol=lf core.autocrlf=false core.eol=crlf
ok 246 - internal and more trailing whitespace
ok 36 - truncated commit (badDate, "committer name <email> ")
ok 111 - stdin delete ref works with right old value
ok 26 - core.bare = true: --is-bare-repository
ok 11 - other worktree HEAD link pointing at a funny object
ok 14 - inside work tree
ok 247 - internal and more trailing whitespace, all quoted
ok 843 - checkout attr=-text  aeol=lf core.autocrlf=false core.eol=crlf file=LF
ok 18 - branch -d can delete broken name
ok 37 - truncated commit (badDate, "committer name <email> 1234")
ok 248 - internal and more trailing whitespace, not all quoted
ok 38 - truncated commit (badTimezone, "committer name <email> 1234 ")
ok 844 - checkout attr=-text  aeol=lf core.autocrlf=false core.eol=crlf file=CRLF
ok 71 - reflog: renaming branch writes reflog entry
ok 27 - core.bare = true: --is-inside-git-dir
ok 249 - leading and trailing whitespace
ok 39 - truncated commit (badTimezone, "committer name <email> 1234 +")
ok 845 - checkout attr=-text  aeol=lf core.autocrlf=false core.eol=crlf file=CRLF_mix_LF
ok 40 - add committer line
ok 41 - reset input to empty
ok 112 - stdin update/create/verify combination works
ok 1 - setup optionspec
ok 2 - setup optionspec-no-switches
ok 250 - leading and trailing whitespace, all quoted
ok 15 - subdir of work tree
ok 3 - setup optionspec-only-hidden-switches
ok 28 - core.bare = true: --is-inside-work-tree
ok 846 - checkout attr=-text  aeol=lf core.autocrlf=false core.eol=crlf file=LF_mix_CR
ok 16 - setup: GIT_WORK_TREE=absolute, below git dir
ok 4 - test --parseopt help output
ok 42 - truncated tag (missingObject, "")
ok 847 - checkout attr=-text  aeol=lf core.autocrlf=false core.eol=crlf file=LF_nul
ok 251 - leading and trailing whitespace, not all quoted
ok 19 - update-ref --no-deref -d can delete symref to broken name
ok 29 - core.bare undefined: --is-bare-repository
ok 5 - test --parseopt help output no switches
ok 12 - other worktree HEAD link pointing at missing object
ok 848 - setup config for checkout attr=-text ident= aeol=crlf core.autocrlf=false
ok 43 - truncated tag (missingObject, "obj")
ok 252 - inline comment
ok 113 - stdin verify succeeds for correct value
ok 6 - test --parseopt help output hidden switches
ok 72 - reflog: can store empty logs
ok 849 - setup LF checkout  with -c core.eol=crlf
ok 9 - files -> reftable: bare repository
ok 30 - core.bare undefined: --is-inside-git-dir
ok 17 - outside
ok 253 - inline comment, quoted
ok 44 - truncated tag (missingObject, "object")
ok 254 - clear default config
ok 7 - test --parseopt help-all output hidden switches
ok 850 - setup CRLF checkout  with -c core.eol=crlf
ok 45 - truncated tag (badObjectSha1, "object ")
ok 31 - core.bare undefined: --is-inside-work-tree
ok 255 - initial
ok 114 - stdin verify succeeds for missing reference
ok 8 - test --parseopt invalid switch help output
ok 9 - setup expect.1
ok 20 - branch -d can delete symref to broken name
ok 46 - truncated tag (badObjectSha1, "object 1234")
ok 47 - add object line
ok 851 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 256 - mixed case
ok 10 - test --parseopt
ok 115 - stdin verify treats no value as missing
ok 48 - truncated tag (missingType, "")
ok 32 - GIT_DIR=../.git, core.bare = false: --is-bare-repository
ok 11 - test --parseopt with mixed options and arguments
ok 24 - continue walking past root commits
ok 852 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 13 - other worktree HEAD link pointing at a funny place
ok 12 - setup expect.2
ok 257 - similar section
ok 49 - truncated tag (missingType, "ty")
ok 853 - setup LF_nul checkout  with -c core.eol=crlf
ok 116 - stdin verify fails for wrong value
ok 13 - test --parseopt with --
ok 21 - update-ref --no-deref -d can delete dangling symref to broken name
ok 258 - uppercase section
ok 14 - test --parseopt --stop-at-non-option
ok 50 - truncated tag (missingType, "type")
ok 33 - GIT_DIR=../.git, core.bare = false: --is-inside-git-dir
ok 15 - setup expect.3
ok 259 - replace with non-match
ok 260 - replace with non-match (actually matching)
ok 16 - test --parseopt --keep-dashdash
ok 18 - in repo.git
ok 17 - setup expect.4
ok 51 - truncated tag (badType, "type ")
ok 117 - stdin verify fails for mistaken null value
ok 854 - ls-files --eol attr=-text  aeol=crlf core.autocrlf=false core.eol=crlf
ok 34 - GIT_DIR=../.git, core.bare = false: --is-inside-work-tree
ok 18 - test --parseopt --keep-dashdash --stop-at-non-option with --
ok 52 - truncated tag (badType, "type com")
ok 53 - add type line
ok 19 - setup expect.5
ok 22 - branch -d can delete dangling symref to broken name
ok 855 - checkout attr=-text  aeol=crlf core.autocrlf=false core.eol=crlf file=LF
ok 20 - test --parseopt --keep-dashdash --stop-at-non-option without --
ok 54 - truncated tag (missingTagEntry, "")
ok 21 - setup expect.6
ok 261 - append comments
ok 19 - inside work tree
ok 856 - checkout attr=-text  aeol=crlf core.autocrlf=false core.eol=crlf file=CRLF
ok 35 - GIT_DIR=../.git, core.bare = false: --show-prefix
ok 118 - stdin verify fails for mistaken empty value
ok 22 - test --parseopt --stuck-long
not ok 17 - git read-tree -u -m --recurse-submodules: replace submodule containing a .git directory with a directory must absorb the git dir # TODO known breakage
ok 262 - Prohibited LF in comment
ok 55 - truncated tag (missingTagEntry, "ta")
ok 14 - commit with multiple signatures is okay
ok 23 - setup expect.7
ok 263 - non-match result
ok 857 - checkout attr=-text  aeol=crlf core.autocrlf=false core.eol=crlf file=CRLF_mix_LF
ok 24 - test --parseopt --stuck-long and empty optional argument
ok 10 - files -> reftable: dangling symref
ok 56 - truncated tag (missingTagEntry, "tag")
ok 25 - setup expect.8
ok 264 - find mixed-case key by canonical name
ok 858 - checkout attr=-text  aeol=crlf core.autocrlf=false core.eol=crlf file=LF_mix_CR
ok 36 - GIT_DIR=../.git, core.bare = false: --git-dir
ok 26 - test --parseopt --stuck-long and long option with unset optional argument
ok 23 - update-ref -d can delete broken name through symref
ok 265 - find mixed-case key by non-canonical name
ok 57 - truncated tag (badTagName, "tag ")
ok 58 - add tag line
ok 859 - checkout attr=-text  aeol=crlf core.autocrlf=false core.eol=crlf file=LF_nul
ok 27 - test --parseopt --stuck-long and short option with unset optional argument
ok 20 - subdir of work tree
ok 119 - stdin update refs works with identity updates
ok 860 - setup config for checkout attr=text ident= aeol=lf core.autocrlf=false
ok 59 - truncated tag (missingTagger, "")
ok 73 - reflog: expiry empties reflog
ok 28 - test --parseopt help output: "wrapped" options normal "or:" lines
ok 266 - subsections are not canonicalized by git-config
ok 25 - expire with multiple worktrees
ok 21 - find work tree from repo
ok 37 - GIT_DIR=../.git, core.bare = false: --absolute-git-dir
ok 861 - setup LF checkout  with -c core.eol=crlf
ok 60 - truncated tag (missingTagger, "ta")
ok 267 - value for missing section and missing key is not printed
ok 29 - test --parseopt invalid opt-spec
ok 24 - update-ref --no-deref -d can delete symref with broken name
ok 22 - find work tree from work tree
ok 268 - value for missing section and existing key is not printed
ok 15 - email without @ is okay
ok 61 - truncated tag (missingTagger, "tagger")
ok 862 - setup CRLF checkout  with -c core.eol=crlf
ok 30 - test --parseopt help output: multi-line blurb after empty line
ok 269 - value for existing section and missing key is not printed
ok 62 - truncated tag (missingEmail, "tagger ")
ok 38 - GIT_DIR=../.git, core.bare = true: --is-bare-repository
ok 270 - value for missing subsection and missing key is not printed
ok 31 - test --parseopt help output for optionspec-neg
ok 23 - _gently() groks relative GIT_DIR & GIT_WORK_TREE
ok 863 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 271 - value for existing subsection and missing key is not printed
ok 272 - value for missing subsection and existing key is not printed
ok 63 - truncated tag (missingEmail, "tagger name")
ok 120 - stdin update refs fails with wrong old value
ok 32 - test --parseopt valid options for optionspec-neg
ok 25 - branch -d can delete symref with broken name
ok 864 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 273 - unset with cont. lines
ok 33 - test --parseopt positivated option for optionspec-neg
ok 24 - diff-index respects work tree under .git dir
ok 64 - truncated tag (badEmail, "tagger name <")
ok 74 - reflog: can be deleted
ok 39 - GIT_DIR=../.git, core.bare = true: --is-inside-git-dir
ok 274 - unset with cont. lines is correct
ok 11 - files -> reftable: broken ref
ok 865 - setup LF_nul checkout  with -c core.eol=crlf
ok 25 - diff-files respects work tree under .git dir
ok 65 - truncated tag (badEmail, "tagger name <email")
ok 34 - test --parseopt invalid switch --no-positive-only help output for optionspec-neg
ok 275 - multiple unset
ok 26 - update-ref --no-deref -d can delete dangling symref with broken name
ok 276 - multiple unset is correct
ok 66 - truncated tag (missingSpaceBeforeDate, "tagger name <email>")
ok 35 - test --parseopt invalid switch --negative help output for optionspec-neg
ok 40 - GIT_DIR=../.git, core.bare = true: --is-inside-work-tree
ok 121 - stdin delete refs works with packed and loose refs
ok 277 - --replace-all missing value
ok 16 - email with embedded > is not okay
ok 67 - truncated tag (badDate, "tagger name <email> ")
ok 36 - test --parseopt invalid switch --no-no-negative help output for optionspec-neg
ok 122 - stdin -z works on empty input
ok 278 - --replace-all
ok 866 - ls-files --eol attr=text  aeol=lf core.autocrlf=false core.eol=crlf
ok 279 - all replaced
ok 27 - branch -d can delete dangling symref with broken name
ok 68 - truncated tag (badDate, "tagger name <email> 1234")
ok 26 - git diff respects work tree under .git dir
ok 123 - stdin -z fails on empty line
ok 37 - ambiguous: --no matches both --noble and --no-noble
ok 867 - checkout attr=text  aeol=lf core.autocrlf=false core.eol=crlf file=LF
ok 41 - GIT_DIR=../.git, core.bare = true: --show-prefix
# passed all 37 test(s)
1..37
ok 124 - stdin -z fails on empty command
ok 69 - truncated tag (badTimezone, "tagger name <email> 1234 ")
ok 280 - really mean test
ok 28 - update-ref -d cannot delete non-ref in .git dir
ok 27 - git grep
*** t1503-rev-parse-verify.sh ***
ok 868 - checkout attr=text  aeol=lf core.autocrlf=false core.eol=crlf file=CRLF
ok 125 - stdin -z fails on only whitespace
ok 42 - GIT_DIR=../.git, core.bare undefined: --is-bare-repository
ok 70 - truncated tag (badTimezone, "tagger name <email> 1234 +")
ok 281 - really really mean test
ok 869 - checkout attr=text  aeol=lf core.autocrlf=false core.eol=crlf file=CRLF_mix_LF
ok 26 - expire one of multiple worktrees
ok 71 - truncated tree (short hash)
ok 28 - git commit
ok 126 - stdin -z fails on leading whitespace
ok 29 - update-ref -d cannot delete absolute path
ok 72 - truncated tree (missing nul)
ok 870 - checkout attr=text  aeol=lf core.autocrlf=false core.eol=crlf file=LF_mix_CR
ok 43 - GIT_DIR=../.git, core.bare undefined: --is-inside-git-dir
ok 282 - get value
ok 9 - deep changes during checkout
ok 127 - stdin -z fails on unknown command
# passed all 72 test(s)
1..72
ok 30 - update-ref --stdin fails create with bad ref name
ok 29 - absolute pathspec should fail gracefully
ok 871 - checkout attr=text  aeol=lf core.autocrlf=false core.eol=crlf file=LF_nul
ok 17 - missing < email delimiter is reported nicely
ok 128 - stdin -z fails create with no ref
*** t1504-ceiling-dirs.sh ***
ok 31 - update-ref --stdin fails update with bad ref name
ok 283 - unset
ok 44 - GIT_DIR=../.git, core.bare undefined: --is-inside-work-tree
ok 30 - make_relative_path handles double slashes in GIT_DIR
ok 872 - setup config for checkout attr=text ident= aeol=crlf core.autocrlf=false
ok 129 - stdin -z fails create with no new value
ok 32 - update-ref --stdin fails delete with bad ref name
ok 284 - multivar
ok 130 - stdin -z fails create with too many arguments
ok 285 - non-match
ok 873 - setup LF checkout  with -c core.eol=crlf
ok 33 - update-ref --stdin -z fails create with bad ref name
ok 31 - relative $GIT_WORK_TREE and git subprocesses
ok 45 - GIT_DIR=../.git, core.bare undefined: --show-prefix
ok 12 - files -> reftable: pseudo-refs
ok 131 - stdin -z fails update with no ref
ok 286 - non-match value
ok 27 - empty reflog
ok 34 - update-ref --stdin -z fails update with bad ref name
ok 32 - Multi-worktree setup
ok 874 - setup CRLF checkout  with -c core.eol=crlf
ok 287 - multi-valued get returns final one
ok 132 - stdin -z fails update with too few args
ok 35 - update-ref --stdin -z fails delete with bad ref name
ok 33 - GIT_DIR set (1)
ok 46 - GIT_DIR=../repo.git, core.bare = false: --is-bare-repository
ok 875 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 288 - multi-valued get-all returns all
ok 36 - branch rejects HEAD as a branch name
ok 133 - stdin -z emits warning with empty new value
ok 18 - missing email is reported nicely
ok 34 - GIT_DIR set (2)
ok 289 - multivar replace
ok 876 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 37 - checkout -b rejects HEAD as a branch name
ok 47 - GIT_DIR=../repo.git, core.bare = false: --is-inside-git-dir
ok 290 - ambiguous unset
ok 134 - stdin -z fails update with no new value
ok 877 - setup LF_nul checkout  with -c core.eol=crlf
ok 291 - invalid unset
ok 135 - stdin -z fails update with no old value
ok 35 - Auto discovery
ok 136 - stdin -z fails update with too many arguments
ok 292 - multivar unset
ok 38 - update-ref can operate on refs/heads/HEAD
ok 48 - GIT_DIR=../repo.git, core.bare = false: --is-inside-work-tree
ok 293 - invalid key
ok 137 - stdin -z fails delete with no ref
ok 294 - correct key
ok 39 - branch -d can remove refs/heads/HEAD
ok 138 - stdin -z fails delete with no old value
ok 878 - ls-files --eol attr=text  aeol=crlf core.autocrlf=false core.eol=crlf
ok 295 - hierarchical section
ok 28 - list reflogs
ok 296 - hierarchical section value
ok 49 - GIT_DIR=../repo.git, core.bare = false: --show-prefix
ok 139 - stdin -z fails delete with too many arguments
ok 879 - checkout attr=text  aeol=crlf core.autocrlf=false core.eol=crlf file=LF
ok 19 - > in name is reported
ok 297 - working --list
ok 140 - stdin -z fails verify with too many arguments
ok 36 - $GIT_DIR/common overrides core.worktree
ok 880 - checkout attr=text  aeol=crlf core.autocrlf=false core.eol=crlf file=CRLF
ok 298 - --list without repo produces empty output
ok 40 - branch -m can rename refs/heads/HEAD
ok 141 - stdin -z fails verify with no old value
ok 50 - GIT_DIR=../repo.git, core.bare = false: --git-dir
ok 881 - checkout attr=text  aeol=crlf core.autocrlf=false core.eol=crlf file=CRLF_mix_LF
ok 18 - git read-tree -u -m --recurse-submodules: replace submodule with a file works ignores ignored files in submodule
ok 299 - --name-only --list
ok 142 - stdin -z fails option with unknown name
ok 13 - files -> reftable: special refs are left alone
ok 37 - $GIT_WORK_TREE overrides $GIT_DIR/common
ok 143 - stdin -z fails with duplicate refs
ok 41 - branch -d can remove refs/heads/-dash
ok 882 - checkout attr=text  aeol=crlf core.autocrlf=false core.eol=crlf file=LF_mix_CR
ok 300 - --get-regexp
ok 38 - error out gracefully on invalid $GIT_WORK_TREE
ok 51 - GIT_DIR=../repo.git, core.bare = false: --absolute-git-dir
ok 883 - checkout attr=text  aeol=crlf core.autocrlf=false core.eol=crlf file=LF_nul
ok 301 - --name-only --get-regexp
ok 144 - stdin -z create ref works
ok 884 - setup config for checkout attr=auto ident= aeol=lf core.autocrlf=false
ok 52 - GIT_DIR=../repo.git, core.bare = true: --is-bare-repository
ok 302 - --add
ok 885 - setup LF checkout  with -c core.eol=crlf
ok 42 - branch -m can rename refs/heads/-dash
# still have 2 known breakage(s)
# passed all remaining 40 test(s)
1..42
ok 303 - get variable with no value
ok 20 - integer overflow in timestamps is reported
ok 886 - setup CRLF checkout  with -c core.eol=crlf
ok 145 - stdin -z update ref creates with zero old value
ok 1 - no_ceil: git rev-parse --show-prefix is ''
ok 304 - get variable with empty value
ok 2 - ceil_empty: git rev-parse --show-prefix is ''
ok 53 - GIT_DIR=../repo.git, core.bare = true: --is-inside-git-dir
*** t1505-rev-parse-last.sh ***
ok 305 - get-regexp variable with no value
ok 887 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 3 - ceil_at_parent: git rev-parse --show-prefix is ''
ok 146 - stdin -z update ref creates with empty old value
ok 39 - refs work with relative gitdir and work tree
ok 306 - get-regexp --bool variable with no value
ok 888 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 4 - ceil_at_parent_slash: git rev-parse --show-prefix is ''
# passed all 39 test(s)
1..39
ok 307 - get-regexp variable with empty value
ok 54 - GIT_DIR=../repo.git, core.bare = true: --is-inside-work-tree
ok 5 - ceil_at_trash: git rev-parse --show-prefix is ''
ok 29 - list reflogs with worktree
*** t1506-rev-parse-diagnosis.sh ***
ok 308 - get bool variable with no value
ok 889 - setup LF_nul checkout  with -c core.eol=crlf
ok 6 - ceil_at_trash_slash: git rev-parse --show-prefix is ''
ok 30 - reflog list returns error with additional args
ok 147 - stdin -z create ref works with path with space to blob
ok 309 - get bool variable with empty value
ok 7 - ceil_at_sub: git rev-parse --show-prefix is ''
ok 310 - no arguments, but no crash
ok 8 - ceil_at_sub_slash: git rev-parse --show-prefix is ''
ok 55 - GIT_DIR=../repo.git, core.bare = true: --show-prefix
ok 1 - set up basic repo with 1 file (hello) and 4 commits
ok 148 - stdin -z update ref fails with wrong old value
ok 311 - new section is partial match of another
ok 21 - commit with NUL in header
ok 890 - ls-files --eol attr=auto  aeol=lf core.autocrlf=false core.eol=crlf
ok 14 - files -> reftable: a bunch of refs
ok 56 - GIT_DIR=../repo.git, core.bare undefined: --is-bare-repository
ok 149 - stdin -z update ref fails with bad old value
ok 9 - subdir_no_ceil: git rev-parse --show-prefix is 'sub/dir/'
ok 891 - checkout attr=auto  aeol=lf core.autocrlf=false core.eol=crlf file=LF
ok 312 - new variable inserts into proper section
ok 57 - GIT_DIR=../repo.git, core.bare undefined: --is-inside-git-dir
ok 10 - subdir_ceil_empty: git rev-parse --show-prefix is 'sub/dir/'
ok 2 - works with one good rev
ok 892 - checkout attr=auto  aeol=lf core.autocrlf=false core.eol=crlf file=CRLF
ok 313 - alternative --file (non-existing file should fail)
ok 11 - subdir_ceil_at_trash: prefix
ok 12 - subdir_ceil_at_trash_slash: prefix
ok 150 - stdin -z create ref fails when ref exists
ok 31 - reflog for symref with unborn target can be listed
ok 893 - checkout attr=auto  aeol=lf core.autocrlf=false core.eol=crlf file=CRLF_mix_LF
ok 13 - subdir_ceil_at_sub: prefix
ok 58 - GIT_DIR=../repo.git, core.bare undefined: --is-inside-work-tree
ok 14 - subdir_ceil_at_sub_slash: prefix
ok 894 - checkout attr=auto  aeol=lf core.autocrlf=false core.eol=crlf file=LF_mix_CR
ok 314 - alternative GIT_CONFIG
ok 151 - stdin -z create ref fails with bad new value
ok 15 - subdir_ceil_at_top: prefix
ok 315 - alternative GIT_CONFIG (--file)
ok 895 - checkout attr=auto  aeol=lf core.autocrlf=false core.eol=crlf file=LF_nul
ok 16 - subdir_ceil_at_top_slash: prefix
ok 59 - GIT_DIR=../repo.git, core.bare undefined: --show-prefix
ok 896 - setup config for checkout attr=auto ident= aeol=crlf core.autocrlf=false
ok 152 - stdin -z create ref fails with empty new value
ok 316 - alternative GIT_CONFIG (--file=-)
ok 17 - subdir_ceil_at_top_no_resolve: git rev-parse --show-prefix is 'sub/dir/'
ok 3 - fails with any bad rev or many good revs
ok 15 - files -> reftable: dry-run migration does not modify repository
ok 317 - setting a value in stdin is an error
ok 897 - setup LF checkout  with -c core.eol=crlf
ok 18 - subdir_ceil_at_top_slash_no_resolve: git rev-parse --show-prefix is 'sub/dir/'
ok 318 - editing stdin is an error
ok 19 - subdir_ceil_at_subdir: git rev-parse --show-prefix is 'sub/dir/'
ok 898 - setup CRLF checkout  with -c core.eol=crlf
ok 153 - stdin -z update ref works with right old value
ok 22 - tree object with duplicate entries
ok 32 - reflog with invalid object ID can be listed
# still have 1 known breakage(s)
# passed all remaining 31 test(s)
1..32
ok 319 - refer config from subdirectory
ok 899 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 4 - fails silently when using -q
ok 20 - subdir_ceil_at_subdir_slash: git rev-parse --show-prefix is 'sub/dir/'
ok 21 - subdir_ceil_at_su: git rev-parse --show-prefix is 'sub/dir/'
ok 320 - --set in alternative file
ok 154 - stdin -z delete ref fails with wrong old value
ok 900 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 22 - subdir_ceil_at_su_slash: git rev-parse --show-prefix is 'sub/dir/'
ok 321 - rename section
ok 5 - fails silently when using -q with deleted reflogs
ok 23 - subdir_ceil_at_sub_di: git rev-parse --show-prefix is 'sub/dir/'
ok 322 - rename succeeded
ok 901 - setup LF_nul checkout  with -c core.eol=crlf
*** t1507-rev-parse-upstream.sh ***
ok 75 - reflog: garbage collection deletes reflog entries
ok 323 - rename non-existing section
ok 155 - stdin -z delete ref fails with zero old value
ok 24 - subdir_ceil_at_sub_di_slash: git rev-parse --show-prefix is 'sub/dir/'
ok 60 - rev-parse --path-format=absolute
ok 324 - rename succeeded
ok 6 - fails silently when using -q with not enough reflogs
ok 325 - rename another section
ok 25 - subdir_ceil_at_subdi: git rev-parse --show-prefix is 'sub/dir/'
ok 326 - rename succeeded
ok 26 - subdir_ceil_at_subdi_slash: git rev-parse --show-prefix is 'sub/dir/'
ok 327 - rename a section with a var on the same line
ok 27 - second_of_two: prefix
ok 7 - succeeds silently with -q and reflogs that do not go far back enough in time
ok 328 - rename succeeded
ok 23 - tree object with duplicate names: x x.1 x/
ok 902 - ls-files --eol attr=auto  aeol=crlf core.autocrlf=false core.eol=crlf
ok 28 - first_of_two: prefix
ok 329 - renaming empty section name is rejected
ok 29 - second_of_three: prefix
ok 156 - stdin -z update symref works option no-deref
ok 10 - checkout with modified sparse directory
ok 330 - renaming to bogus section is rejected
ok 903 - checkout attr=auto  aeol=crlf core.autocrlf=false core.eol=crlf file=LF
ok 30 - git_dir_specified: git rev-parse --show-prefix is ''
ok 331 - renaming a section with a long line
ok 31 - sd_no_ceil: git rev-parse --show-prefix is 's/d/'
ok 8 - no stdout output on error
ok 1 - set up basic repo
ok 904 - checkout attr=auto  aeol=crlf core.autocrlf=false core.eol=crlf file=CRLF
ok 332 - renaming an embedded section with a long line
ok 32 - sd_ceil_empty: git rev-parse --show-prefix is 's/d/'
ok 16 - files -> reftable: reflogs of symrefs with target deleted
ok 157 - stdin -z delete symref works option no-deref
ok 61 - rev-parse --path-format=relative
ok 33 - sd_ceil_at_trash: prefix
ok 905 - checkout attr=auto  aeol=crlf core.autocrlf=false core.eol=crlf file=CRLF_mix_LF
ok 34 - sd_ceil_at_trash_slash: prefix
ok 62 - --path-format=relative does not affect --absolute-git-dir
ok 333 - renaming a section with an overly-long line
ok 35 - sd_ceil_at_s: prefix
ok 158 - stdin -z delete ref works with right old value
ok 906 - checkout attr=auto  aeol=crlf core.autocrlf=false core.eol=crlf file=LF_mix_CR
ok 36 - sd_ceil_at_s_slash: prefix
ok 334 - remove section
ok 63 - --path-format can change in the middle of the command line
ok 907 - checkout attr=auto  aeol=crlf core.autocrlf=false core.eol=crlf file=LF_nul
ok 37 - sd_ceil_at_sd: git rev-parse --show-prefix is 's/d/'
ok 335 - section was removed properly
ok 64 - --path-format does not segfault without an argument
ok 908 - setup config for checkout attr=-text ident= aeol= core.autocrlf=input
ok 38 - sd_ceil_at_sd_slash: git rev-parse --show-prefix is 's/d/'
ok 65 - git-common-dir from worktree root
ok 2 - correct file objects
ok 39 - sd_ceil_at_su: git rev-parse --show-prefix is 's/d/'
ok 159 - stdin -z update/create/verify combination works
ok 9 - use --default
ok 24 - tree object with duplicate names: x x.1.2 x.1/ x/
ok 909 - setup LF checkout  with -c core.eol=crlf
ok 336 - section ending
ok 40 - sd_ceil_at_su_slash: git rev-parse --show-prefix is 's/d/'
ok 910 - setup CRLF checkout  with -c core.eol=crlf
ok 66 - git-common-dir inside sub-dir
ok 160 - stdin -z verify succeeds for correct value
ok 41 - sd_ceil_at_s_di: git rev-parse --show-prefix is 's/d/'
ok 3 - correct relative file objects (0)
ok 911 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 67 - git-path from worktree root
ok 42 - sd_ceil_at_s_di_slash: git rev-parse --show-prefix is 's/d/'
ok 161 - stdin -z verify succeeds for missing reference
ok 337 - numbers
ok 1 - setup
ok 912 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 4 - correct relative file objects (1)
ok 43 - sd_ceil_at_sdi: git rev-parse --show-prefix is 's/d/'
ok 10 - main@{n} for various n
ok 76 - reflog: updates via HEAD update HEAD reflog
ok 68 - git-path inside sub-dir
ok 44 - sd_ceil_at_sdi_slash: git rev-parse --show-prefix is 's/d/'
ok 5 - correct relative file objects (2)
ok 162 - stdin -z verify treats no value as missing
ok 2 - @{-1} works
ok 338 - --int is at least 64 bits
# passed all 44 test(s)
1..44
ok 913 - setup LF_nul checkout  with -c core.eol=crlf
ok 11 - options can appear after --verify
*** t1508-at-combinations.sh ***
ok 6 - correct relative file objects (3)
ok 163 - stdin -z verify fails for wrong value
ok 3 - @{-1}~2 works
ok 339 - invalid unit
ok 12 - verify respects --end-of-options
ok 7 - correct relative file objects (4)
ok 4 - @{-1}^2 works
# passed all 12 test(s)
1..12
ok 164 - stdin -z verify fails for mistaken null value
*** t1509-root-work-tree.sh ***
ok 17 - files -> reftable: reflogs order is retained
ok 25 - tree object with duplicate names: x x.1 x.1.2 x/
ok 5 - @{-1}@{1} works
ok 914 - ls-files --eol attr=-text  aeol= core.autocrlf=input core.eol=crlf
ok 340 - invalid unit boolean
ok 19 - git -c submodule.recurse=true read-tree -u -m: modified submodule updates submodule work tree
ok 8 - correct relative file objects (5)
ok 341 - line number is reported correctly
ok 915 - checkout attr=-text  aeol= core.autocrlf=input core.eol=crlf file=LF
ok 6 - @{-2} works
ok 7 - @{-3} fails
ok 342 - invalid stdin config
ok 916 - checkout attr=-text  aeol= core.autocrlf=input core.eol=crlf file=CRLF
# passed all 7 test(s)
1..7
ok 165 - stdin -z verify fails for mistaken empty value
ok 9 - correct relative file objects (6)
ok 917 - checkout attr=-text  aeol= core.autocrlf=input core.eol=crlf file=CRLF_mix_LF
*** t1510-repo-setup.sh ***
ok 77 - branch: copying branch with D/F conflict
ok 918 - checkout attr=-text  aeol= core.autocrlf=input core.eol=crlf file=LF_mix_CR
ok 10 - incorrect revision id
ok 69 - rev-parse --is-shallow-repository in shallow repo
ok 919 - checkout attr=-text  aeol= core.autocrlf=input core.eol=crlf file=LF_nul
ok 70 - rev-parse --is-shallow-repository in non-shallow repo
ok 166 - stdin -z update refs works with identity updates
ok 920 - setup config for checkout attr=-text ident= aeol=lf core.autocrlf=input
ok 921 - setup LF checkout  with -c core.eol=crlf
ok 11 - incorrect file in sha1:path
ok 922 - setup CRLF checkout  with -c core.eol=crlf
ok 71 - rev-parse --show-object-format in repo
ok 26 - unparseable tree object
ok 923 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 167 - stdin -z update refs fails with wrong old value
ok 72 - rev-parse --show-ref-format
ok 78 - branch: moving branch with D/F conflict
ok 924 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 343 - bool
ok 344 - invalid bool (--get)
ok 925 - setup LF_nul checkout  with -c core.eol=crlf
ok 345 - invalid bool (set)
ok 73 - rev-parse --show-ref-format with invalid storage
ok 74 - --show-toplevel from subdir of working tree
ok 168 - stdin -z delete refs works with packed and loose refs
ok 75 - --show-toplevel from inside .git
ok 12 - incorrect file in :path and :N:path
ok 926 - ls-files --eol attr=-text  aeol=lf core.autocrlf=input core.eol=crlf
ok 346 - set --bool
ok 927 - checkout attr=-text  aeol=lf core.autocrlf=input core.eol=crlf file=LF
ok 13 - invalid @{n} reference
ok 169 - fails with duplicate HEAD update
ok 928 - checkout attr=-text  aeol=lf core.autocrlf=input core.eol=crlf file=CRLF
ok 14 - relative path not found
1..0 # SKIP You must set env var IKNOWWHATIAMDOING=YES in order to run this test
ok 18 - files -> reftable: stash is retained
*** t1511-rev-parse-caret.sh ***
ok 347 - set --int
ok 929 - checkout attr=-text  aeol=lf core.autocrlf=input core.eol=crlf file=CRLF_mix_LF
ok 15 - relative path outside worktree
ok 79 - worktree: adding worktree creates separate stack
ok 27 - tree entry with type mismatch
ok 16 - relative path when cwd is outside worktree
ok 930 - checkout attr=-text  aeol=lf core.autocrlf=input core.eol=crlf file=LF_mix_CR
ok 931 - checkout attr=-text  aeol=lf core.autocrlf=input core.eol=crlf file=LF_nul
ok 17 - <commit>:file correctly diagnosed after a pathname
ok 932 - setup config for checkout attr=-text ident= aeol=crlf core.autocrlf=input
ok 170 - fails with duplicate ref update via symref
ok 348 - get --bool-or-int
ok 933 - setup LF checkout  with -c core.eol=crlf
ok 1 - setup
ok 934 - setup CRLF checkout  with -c core.eol=crlf
ok 18 - dotdot is not an empty set
ok 1 - #0: nonbare repo, no explicit configuration
ok 171 - large transaction creating branches does not burst open file limit
ok 935 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 2 - @{upstream} resolves to correct full name
ok 19 - files -> reftable: skip reflog with --skip-reflog
ok 936 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 349 - set --bool-or-int
ok 28 - tree entry with bogus mode
ok 19 - dotdot does not peel endpoints
ok 172 - large transaction deleting branches does not burst open file limit
ok 937 - setup LF_nul checkout  with -c core.eol=crlf
ok 3 - @{u} resolves to correct full name
ok 20 - arg before dashdash must be a revision (missing)
ok 20 - reftable: migration to same format fails
ok 4 - my-side@{upstream} resolves to correct full name
ok 350 - set --path
ok 21 - arg before dashdash must be a revision (file)
ok 2 - #1: GIT_WORK_TREE without explicit GIT_DIR is accepted
ok 80 - worktree: pack-refs in main repo packs main refs
ok 5 - upstream of branch with @ in middle
ok 938 - ls-files --eol attr=-text  aeol=crlf core.autocrlf=input core.eol=crlf
ok 6 - upstream of branch with @ at start
ok 22 - arg before dashdash must be a revision (ambiguous)
ok 351 - get --path
ok 7 - upstream of branch with @ at end
ok 23 - reject Nth parent if N is too high
ok 939 - checkout attr=-text  aeol=crlf core.autocrlf=input core.eol=crlf file=LF
ok 11 - checkout orphan then non-orphan
ok 8 - refs/heads/my-side@{upstream} does not resolve to my-side{upstream}
ok 29 - tag pointing to nonexistent
ok 24 - reject Nth ancestor if N is too high
ok 940 - checkout attr=-text  aeol=crlf core.autocrlf=input core.eol=crlf file=CRLF
ok 3 - #2: worktree defaults to cwd with explicit GIT_DIR
ok 25 - pathspecs with wildcards are not ambiguous
ok 352 - get --path copes with unset $HOME
ok 26 - backslash does not trigger wildcard rule
ok 941 - checkout attr=-text  aeol=crlf core.autocrlf=input core.eol=crlf file=CRLF_mix_LF
ok 21 - reftable -> files: migration with worktree fails
ok 353 - get --path barfs on boolean variable
ok 27 - escaped char does not trigger wildcard rule
ok 942 - checkout attr=-text  aeol=crlf core.autocrlf=input core.eol=crlf file=LF_mix_CR
ok 28 - arg after dashdash not interpreted as option
ok 29 - arg after end-of-options not interpreted as option
ok 943 - checkout attr=-text  aeol=crlf core.autocrlf=input core.eol=crlf file=LF_nul
ok 944 - setup config for checkout attr=text ident= aeol=lf core.autocrlf=input
ok 173 - handle per-worktree refs in refs/bisect
ok 30 - end-of-options still allows --
ok 4 - #2b: relative GIT_DIR
# passed all 30 test(s)
1..30
ok 945 - setup LF checkout  with -c core.eol=crlf
ok 354 - get --expiry-date
ok 174 - transaction handles empty commit
ok 30 - tag pointing to something else than its type
ok 81 - worktree: pack-refs in worktree packs worktree refs
*** t1512-rev-parse-disambiguation.sh ***
ok 5 - #3: setup
ok 946 - setup CRLF checkout  with -c core.eol=crlf
ok 175 - transaction handles empty commit with missing prepare
ok 355 - get --type=color
ok 947 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 176 - transaction handles sole commit
ok 1 - setup
ok 356 - set --type=color
ok 22 - reftable -> files: unborn HEAD
ok 357 - get --type=color barfs on non-color
ok 2 - HEAD = refs/heads/new-branch
ok 948 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 177 - transaction handles empty abort
ok 358 - set --type=color barfs on non-color
ok 3 - @{1} = new-one
ok 949 - setup LF_nul checkout  with -c core.eol=crlf
ok 9 - my-side@{u} resolves to correct commit
ok 178 - transaction exits on multiple aborts
ok 4 - HEAD@{1} = new-one
ok 5 - @{now} = new-two
ok 179 - transaction exits on start after prepare
ok 359 - quoting
ok 10 - not-tracking@{u} fails
ok 6 - HEAD@{now} = new-two
ok 31 - tag with incorrect tag name & missing tagger
ok 180 - transaction handles empty abort with missing prepare
ok 360 - key with newline
ok 6 - #3: explicit GIT_WORK_TREE and GIT_DIR at toplevel
ok 7 - @{-1} = refs/heads/old-branch
ok 361 - value with newline
ok 950 - ls-files --eol attr=text  aeol=lf core.autocrlf=input core.eol=crlf
ok 181 - transaction handles sole abort
ok 951 - checkout attr=text  aeol=lf core.autocrlf=input core.eol=crlf file=LF
ok 362 - value continued on next line
ok 8 - @{-1}@{0} = old-two
ok 952 - checkout attr=text  aeol=lf core.autocrlf=input core.eol=crlf file=CRLF
ok 9 - @{-1}@{1} = old-one
ok 182 - transaction can handle commit
ok 363 - --null --list
ok 953 - checkout attr=text  aeol=lf core.autocrlf=input core.eol=crlf file=CRLF_mix_LF
ok 10 - @{u} = refs/heads/upstream-branch
ok 82 - worktree: creating shared ref updates main stack
ok 364 - --null --get-regexp
ok 954 - checkout attr=text  aeol=lf core.autocrlf=input core.eol=crlf file=LF_mix_CR
ok 183 - transaction can handle abort
ok 11 - HEAD@{u} = refs/heads/upstream-branch
ok 32 - tag with bad tagger
ok 955 - checkout attr=text  aeol=lf core.autocrlf=input core.eol=crlf file=LF_nul
ok 12 - @{u}@{1} = upstream-one
ok 365 - inner whitespace kept verbatim, spaces only
ok 956 - setup config for checkout attr=text ident= aeol=crlf core.autocrlf=input
ok 184 - transaction aborts by default
ok 13 - @{-1}@{u} = refs/heads/main
ok 23 - reftable -> files: single ref
ok 7 - #3: explicit GIT_WORK_TREE and GIT_DIR in subdir
ok 1 - setup
ok 957 - setup LF checkout  with -c core.eol=crlf
ok 2 - ref^{non-existent}
ok 14 - @{-1}@{u}@{1} = main-one
ok 185 - transaction with prepare aborts by default
ok 366 - inner whitespace kept verbatim, horizontal tabs only
ok 958 - setup CRLF checkout  with -c core.eol=crlf
ok 15 - @ = new-two
ok 11 - <branch>@{u}@{1} resolves correctly
ok 959 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 16 - @@{u} = refs/heads/upstream-branch
ok 367 - inner whitespace kept verbatim, horizontal tabs and spaces
ok 3 - ref^{}
ok 186 - transaction can commit multiple times
ok 960 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 17 - @@/at-test = refs/heads/@@/at-test
ok 12 - @{u} without specifying branch fails on a detached HEAD
ok 18 - @/at-test = refs/heads/@/at-test
ok 961 - setup LF_nul checkout  with -c core.eol=crlf
ok 33 - tag with NUL in header
ok 187 - transaction can create and delete
ok 19 - @at-test = refs/heads/@at-test
ok 20 - git read-tree -u -m --recurse-submodules: modified submodule updates submodule recursively
ok 20 - @{u}@{-1} is nonsensical
ok 76 - showing the superproject correctly
ok 4 - ref^{commit}
ok 21 - @{0}@{0} is nonsensical
ok 13 - checkout -b new my-side@{u} forks from the same
ok 8 - #3: explicit GIT_WORK_TREE from parent of worktree
ok 34 - cleaned up
ok 368 - symlinked configuration
ok 22 - @{1}@{u} is nonsensical
ok 77 - rev-parse --since= unsqueezed ordering
ok 188 - transaction can commit after abort
ok 23 - HEAD@{-1} is nonsensical
ok 83 - worktree: creating per-worktree ref updates worktree stack
ok 35 - rev-list --verify-objects
ok 24 - @{-1}@{-1} is nonsensical
ok 962 - ls-files --eol attr=text  aeol=crlf core.autocrlf=input core.eol=crlf
ok 369 - symlink to nonexistent configuration
ok 25 - HEAD@{3} = old-two
ok 189 - transaction cannot restart ongoing transaction
ok 963 - checkout attr=text  aeol=crlf core.autocrlf=input core.eol=crlf file=LF
ok 26 - @{3} is nonsensical
ok 5 - ref^{tree}
ok 1 - ambiguous blob output
ok 964 - checkout attr=text  aeol=crlf core.autocrlf=input core.eol=crlf file=CRLF
ok 27 - switch to old-branch
ok 965 - checkout attr=text  aeol=crlf core.autocrlf=input core.eol=crlf file=CRLF_mix_LF
ok 28 - HEAD = refs/heads/old-branch
ok 6 - ref^{tag}
ok 24 - reftable -> files: bare repository
ok 966 - checkout attr=text  aeol=crlf core.autocrlf=input core.eol=crlf file=LF_mix_CR
ok 29 - HEAD@{1} = new-two
ok 967 - checkout attr=text  aeol=crlf core.autocrlf=input core.eol=crlf file=LF_nul
ok 7 - ref^{/.}
ok 9 - #3: explicit GIT_WORK_TREE from nephew of worktree
ok 30 - @{1} = old-one
ok 2 - ambiguous loose bad object parsed as OBJ_BAD
ok 968 - setup config for checkout attr=auto ident= aeol=lf core.autocrlf=input
ok 14 - merge my-side@{u} records the correct name
ok 8 - ref^{/non-existent}
ok 78 - rev-parse --bisect includes bad, excludes good
ok 969 - setup LF checkout  with -c core.eol=crlf
ok 79 - --short= truncates to the actual hash length
ok 31 - create path with @
ok 9 - ref^{/Initial}
ok 370 - check split_cmdline return
ok 10 - ref^{/!Exp}
ok 970 - setup CRLF checkout  with -c core.eol=crlf
ok 32 - @:normal = content
ok 15 - branch -d other@{u}
ok 11 - ref^{/!}
ok 33 - @:fun@ny = content
ok 84 - worktree: creating per-worktree ref from main repo
ok 971 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 36 - rev-list --verify-objects with bad sha1
ok 12 - add outside sparse cone
ok 371 - git -c "key=value" support
ok 3 - ambigous zlib corrupt loose blob
ok 972 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 12 - ref^{/!!Exp}
ok 372 - git -c can represent empty string
ok 13 - ref^{/!-}
ok 973 - setup LF_nul checkout  with -c core.eol=crlf
ok 10 - #3: chdir_to_toplevel uses worktree, not git dir
ok 14 - ref^{/!-.}
ok 4 - blob and tree
ok 16 - checkout other@{u}
ok 34 - @{1} works with only one reflog entry
ok 15 - ref^{/!-non-existent}
ok 17 - branch@{u} works when tracking a local branch
ok 5 - warn ambiguity when no candidate matches type hint
ok 6 - disambiguate tree-ish
ok 18 - branch@{u} error message when no upstream
ok 16 - ref^{/!-Changed}
ok 974 - ls-files --eol attr=auto  aeol=lf core.autocrlf=input core.eol=crlf
ok 19 - @{u} error message when no upstream
ok 975 - checkout attr=auto  aeol=lf core.autocrlf=input core.eol=crlf file=LF
ok 7 - disambiguate blob
ok 35 - @{0} works with empty reflog
ok 20 - @{u} silent error when no upstream
ok 17 - ref^{/!-!Exp}
ok 80 - :/ and HEAD^{/} favor more recent matching commits
ok 373 - key sanity-checking
# passed all 35 test(s)
1..35
# passed all 17 test(s)
1..17
# passed all 80 test(s)
1..80
ok 976 - checkout attr=auto  aeol=lf core.autocrlf=input core.eol=crlf file=CRLF
ok 21 - branch@{u} error message with misspelt branch
ok 25 - reftable -> files: dangling symref
ok 977 - checkout attr=auto  aeol=lf core.autocrlf=input core.eol=crlf file=CRLF_mix_LF
ok 37 - rev-list --verify-objects notices swapped commits
*** t1513-rev-parse-prefix.sh ***
*** t1514-rev-parse-push.sh ***
ok 8 - disambiguate tree
ok 11 - #3: chdir_to_toplevel uses worktree (from subdir)
ok 374 - git -c works with aliases of builtins
ok 978 - checkout attr=auto  aeol=lf core.autocrlf=input core.eol=crlf file=LF_mix_CR
ok 22 - @{u} error message when not on a branch
ok 9 - first commit
ok 979 - checkout attr=auto  aeol=lf core.autocrlf=input core.eol=crlf file=LF_nul
*** t1515-rev-parse-outside-repo.sh ***
ok 23 - branch@{u} error message if upstream branch not fetched
ok 980 - setup config for checkout attr=auto ident= aeol=crlf core.autocrlf=input
ok 10 - disambiguate commit-ish
ok 12 - #4: core.worktree without GIT_DIR set is accepted
ok 981 - setup LF checkout  with -c core.eol=crlf
ok 21 - git read-tree -u --reset --recurse-submodules: added submodule is checked out
ok 982 - setup CRLF checkout  with -c core.eol=crlf
ok 11 - disambiguate commit
ok 983 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 85 - worktree: creating per-worktree ref from second worktree
ok 984 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 38 - set up repository with commit-graph
ok 24 - pull works when tracking a local branch
ok 985 - setup LF_nul checkout  with -c core.eol=crlf
ok 25 - @{u} works when tracking a local branch
ok 375 - aliases can be CamelCased
ok 26 - reftable -> files: broken ref
ok 39 - rev-list --verify-objects with commit graph (tip)
ok 376 - git -c does not split values on equals
ok 12 - log name1..name2 takes only commit-ishes on both ends
ok 377 - git -c dies on bogus config
ok 26 - log -g other@{u}
ok 378 - git -c complains about empty key
ok 986 - ls-files --eol attr=auto  aeol=crlf core.autocrlf=input core.eol=crlf
ok 379 - git -c complains about empty key and value
ok 40 - rev-list --verify-objects with commit graph (parent)
ok 987 - checkout attr=auto  aeol=crlf core.autocrlf=input core.eol=crlf file=LF
ok 27 - log -g other@{u}@{now}
ok 13 - rev-parse name1..name2 takes only commit-ishes on both ends
ok 14 - git log takes only commit-ish
ok 988 - checkout attr=auto  aeol=crlf core.autocrlf=input core.eol=crlf file=CRLF
ok 380 - multiple git -c appends config
ok 15 - git reset takes only commit-ish
ok 13 - #5: core.worktree + GIT_WORK_TREE is accepted
ok 989 - checkout attr=auto  aeol=crlf core.autocrlf=input core.eol=crlf file=CRLF_mix_LF
ok 16 - first tag
ok 990 - checkout attr=auto  aeol=crlf core.autocrlf=input core.eol=crlf file=LF_mix_CR
not ok 17 - two semi-ambiguous commit-ish # TODO known breakage
ok 28 - @{reflog}-parsing does not look beyond colon
not ok 18 - three semi-ambiguous tree-ish # TODO known breakage
ok 991 - checkout attr=auto  aeol=crlf core.autocrlf=input core.eol=crlf file=LF_nul
ok 86 - worktree: can create shared and per-worktree ref in one transaction
ok 381 - last one wins: two level vars
ok 19 - parse describe name
ok 992 - setup config for checkout attr= ident= aeol= core.autocrlf=false
ok 993 - setup LF checkout  with -c core.eol=crlf
ok 29 - @{upstream}-parsing does not look beyond colon
# passed all 29 test(s)
1..29
ok 41 - force fsck to ignore double author
ok 994 - setup CRLF checkout  with -c core.eol=crlf
ok 27 - reftable -> files: pseudo-refs
ok 1 - setup
ok 1 - set up non-repo directory
ok 995 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 382 - last one wins: three level vars
ok 2 - rev-parse --sq-quote
ok 2 - empty prefix -- file
*** t1517-outside-repo.sh ***
ok 3 - rev-parse --local-env-vars
ok 996 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 3 - valid prefix -- file
ok 14 - #6: setting GIT_DIR brings core.worktree to life
ok 997 - setup LF_nul checkout  with -c core.eol=crlf
ok 190 - transaction flushes status updates
ok 4 - valid prefix -- ../file
ok 42 - fsck notices blob entry pointing to null sha1
ok 4 - rev-parse --resolve-git-dir
# passed all 4 test(s)
1..4
ok 5 - empty prefix HEAD:./path
*** t1600-index.sh ***
ok 191 - stdin  symref-verify fails without --no-deref
ok 192 - stdin  symref-verify fails with too many arguments
ok 6 - valid prefix HEAD:./path
ok 383 - old-fashioned settings are case insensitive
ok 998 - ls-files --eol attr=  aeol= core.autocrlf=false core.eol=crlf
ok 87 - worktree: can access common refs
ok 7 - valid prefix HEAD:../path
ok 43 - fsck notices submodule entry pointing to null sha1
ok 999 - checkout attr=  aeol= core.autocrlf=false core.eol=crlf file=LF
ok 8 - prefix ignored with HEAD:top
ok 1000 - checkout attr=  aeol= core.autocrlf=false core.eol=crlf file=CRLF
ok 22 - git read-tree -u --reset --recurse-submodules: added submodule is checked out in empty dir
ok 9 - disambiguate path with valid prefix
ok 193 - stdin  symref-verify succeeds for correct value
ok 384 - setting different case sensitive subsections 
ok 1001 - checkout attr=  aeol= core.autocrlf=false core.eol=crlf file=CRLF_mix_LF
ok 385 - git -c a=VAL rejects invalid 'a'
ok 15 - #6b: GIT_DIR set, core.worktree relative
ok 194 - stdin  symref-verify fails with no value
ok 1002 - checkout attr=  aeol= core.autocrlf=false core.eol=crlf file=LF_mix_CR
ok 386 - git -c .a=VAL rejects invalid '.a'
ok 10 - file and refs with prefix
ok 387 - git -c a.=VAL rejects invalid 'a.'
ok 28 - reftable -> files: special refs are left alone
ok 1003 - checkout attr=  aeol= core.autocrlf=false core.eol=crlf file=LF_nul
ok 388 - git -c a.0b=VAL rejects invalid 'a.0b'
ok 11 - two-levels deep
ok 20 - more history
ok 389 - git -c a.b c.=VAL rejects invalid 'a.b c.'
# passed all 11 test(s)
1..11
ok 1004 - setup config for checkout attr= ident= aeol= core.autocrlf=true
not ok 21 - parse describe name taking advantage of generation # TODO known breakage
ok 44 - fsck notices excessively large tree entry name
ok 390 - git -c a.b c.0d=VAL rejects invalid 'a.b c.0d'
*** t1601-index-bogus.sh ***
ok 195 - stdin  symref-verify succeeds for dangling reference
ok 1005 - setup LF checkout  with -c core.eol=crlf
ok 22 - parse describe name not ignoring ambiguity
ok 391 - git -c a.b=VAL works with valid 'a.b'
ok 392 - git -c a.b c.d=VAL works with valid 'a.b c.d'
ok 1006 - setup CRLF checkout  with -c core.eol=crlf
ok 393 - git -c is not confused by empty environment
ok 1007 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 88 - worktree: adds worktree with detached HEAD
ok 196 - stdin  symref-verify fails for missing reference
ok 394 - GIT_CONFIG_PARAMETERS handles old-style entries
ok 1 - setup
ok 1008 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 395 - GIT_CONFIG_PARAMETERS handles new-style entries
ok 197 - stdin  symref-verify fails for wrong value
ok 1009 - setup LF_nul checkout  with -c core.eol=crlf
ok 396 - old and new-style entries can mix
ok 16 - #6c: GIT_DIR set, core.worktree=../wt (absolute)
ok 2 - @{push} with default=nothing
ok 397 - old and new bools with ambiguous subsection
ok 198 - stdin  symref-verify fails for mistaken null value
ok 1 - set up a non-repo directory and test file
ok 45 - fsck notices . as blob
ok 199 - stdin  symref-delete fails without --no-deref
ok 1010 - ls-files --eol attr=  aeol= core.autocrlf=true core.eol=crlf
ok 1 - setup
ok 2 - compute a patch-id outside repository (uses SHA-1)
ok 200 - stdin  symref-delete fails with no ref
ok 398 - detect bogus GIT_CONFIG_PARAMETERS
ok 29 - reftable -> files: a bunch of refs
ok 1011 - checkout attr=  aeol= core.autocrlf=true core.eol=crlf file=LF
ok 3 - @{push} with default=simple
ok 2 - bogus GIT_INDEX_VERSION issues warning
ok 3 - hash-object outside repository (uses SHA-1)
ok 1012 - checkout attr=  aeol= core.autocrlf=true core.eol=crlf file=CRLF
ok 201 - stdin  symref-delete fails deleting regular ref
ok 4 - apply a patch outside repository
ok 1013 - checkout attr=  aeol= core.autocrlf=true core.eol=crlf file=CRLF_mix_LF
ok 4 - triangular @{push} fails with default=simple
ok 3 - out of bounds GIT_INDEX_VERSION issues warning
ok 202 - stdin  symref-delete fails with too many arguments
ok 399 - git --config-env=key=envvar support
ok 23 - ambiguous commit-ish
ok 1014 - checkout attr=  aeol= core.autocrlf=true core.eol=crlf file=LF_mix_CR
ok 24 - ambiguous tags peel to treeish
ok 4 - no warning with bogus GIT_INDEX_VERSION and existing index
ok 1015 - checkout attr=  aeol= core.autocrlf=true core.eol=crlf file=LF_nul
ok 400 - git --config-env with missing value
ok 5 - @{push} with default=current
ok 203 - stdin  symref-delete fails with wrong old value
ok 17 - #6d: GIT_DIR set, core.worktree=../wt (relative)
ok 1016 - setup config for checkout attr=auto ident= aeol= core.autocrlf=true
ok 25 - rev-parse --disambiguate
ok 5 - grep outside repository
ok 30 - reftable -> files: dry-run migration does not modify repository
ok 204 - stdin  symref-delete works with right old value
ok 1017 - setup LF checkout  with -c core.eol=crlf
ok 5 - out of bounds index.version issues warning
ok 46 - fsck notices . as tree
ok 401 - git --config-env fails with invalid parameters
ok 89 - fetch: accessing FETCH_HEAD special ref works
ok 6 - @{push} with default=matching
ok 1018 - setup CRLF checkout  with -c core.eol=crlf
# passed all 89 test(s)
1..89
ok 205 - stdin  symref-delete works with empty old value
ok 26 - rev-parse --disambiguate drops duplicates
ok 402 - git -c and --config-env work together
ok 23 - git read-tree -u --reset --recurse-submodules: replace tracked file with submodule checks out submodule
*** t1700-split-index.sh ***
ok 1019 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 1 - create tree with null sha1
ok 2 - read-tree refuses to read null sha1
ok 403 - git -c and --config-env override each other
ok 1020 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 3 - GIT_ALLOW_NULL_SHA1 overrides refusal
ok 206 - stdin  symref-delete succeeds for dangling reference
ok 404 - --config-env handles keys with equals
ok 1021 - setup LF_nul checkout  with -c core.eol=crlf
ok 4 - git write-tree refuses to write null sha1
ok 7 - @{push} with pushremote defined
ok 27 - ambiguous 40-hex ref
# passed all 4 test(s)
1..4
ok 6 - imap-send outside repository
ok 207 - stdin  symref-delete deletes regular ref without target
*** t1701-racy-split-index.sh ***
ok 405 - git config handles environment config pairs
ok 406 - git config ignores pairs without count
ok 208 - stdin  symref-create fails with too many arguments
ok 7 - check-ref-format outside repository
ok 209 - stdin  symref-create fails with no target
ok 407 - git config ignores pairs exceeding count
ok 210 - stdin  symref-create fails with empty target
ok 18 - #6e: GIT_DIR set, core.worktree=../.. (absolute)
ok 408 - git config ignores pairs with zero count
ok 1022 - ls-files --eol attr=auto  aeol= core.autocrlf=true core.eol=crlf
ok 28 - ambiguous short sha1 ref
ok 409 - git config ignores pairs with empty count
ok 47 - fsck notices .. as blob
ok 1023 - checkout attr=auto  aeol= core.autocrlf=true core.eol=crlf file=LF
ok 8 - diff outside repository
ok 29 - ambiguity errors are not repeated (raw)
ok 211 - stdin  symref-create works
ok 9 - stripspace outside repository
ok 1024 - checkout attr=auto  aeol= core.autocrlf=true core.eol=crlf file=CRLF
ok 30 - ambiguity errors are not repeated (treeish)
ok 1025 - checkout attr=auto  aeol= core.autocrlf=true core.eol=crlf file=CRLF_mix_LF
ok 410 - git config fails with invalid count
ok 212 - stdin  symref-create works with --no-deref
ok 411 - git config fails with missing config key
ok 1026 - checkout attr=auto  aeol= core.autocrlf=true core.eol=crlf file=LF_mix_CR
ok 31 - ambiguity errors are not repeated (peel)
ok 8 - @{push} with push refspecs
ok 412 - git config fails with missing config value
ok 1027 - checkout attr=auto  aeol= core.autocrlf=true core.eol=crlf file=LF_nul
ok 31 - reftable -> files: reflogs of symrefs with target deleted
ok 32 - ambiguity hints
ok 10 - remote-http outside repository
ok 1028 - setup config for checkout attr=text ident= aeol= core.autocrlf=true
ok 413 - git config fails with invalid config pair key
ok 213 - stdin  create dangling symref ref works
# passed all 10 test(s)
1..10
*** t1800-hook.sh ***
ok 33 - ambiguity hints respect type
ok 1029 - setup LF checkout  with -c core.eol=crlf
ok 9 - resolving @{push} fails with a detached HEAD
ok 414 - environment overrides config file
# passed all 9 test(s)
1..9
ok 1030 - setup CRLF checkout  with -c core.eol=crlf
ok 19 - #6f: GIT_DIR set, core.worktree=../.. (relative)
ok 415 - GIT_CONFIG_PARAMETERS overrides environment config
*** t2000-conflict-when-checking-files-out.sh ***
ok 214 - stdin  symref-create does not create reflogs by default
ok 416 - command line overrides environment config
ok 1031 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 48 - fsck notices .. as tree
ok 34 - failed type-selector still shows hint
ok 20 - #7: setup
ok 1032 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 417 - git config --edit works
ok 215 - stdin  symref-create reflogs with --create-reflog
ok 35 - core.disambiguate config can prefer types
ok 1033 - setup LF_nul checkout  with -c core.eol=crlf
ok 216 - stdin  symref-update fails with too many arguments
ok 36 - core.disambiguate does not override context
ok 217 - stdin  symref-update fails with wrong old value argument
ok 1 - setup
ok 418 - git config --edit respects core.editor
ok 419 - barf on syntax error
ok 218 - stdin  symref-update creates with zero old value
ok 1034 - ls-files --eol attr=text  aeol= core.autocrlf=true core.eol=crlf
ok 21 - #7: explicit GIT_WORK_TREE and GIT_DIR at toplevel
ok 13 - commit including unstaged changes
ok 420 - barf on incomplete section header
ok 24 - git read-tree -u --reset --recurse-submodules: replace directory with submodule
ok 49 - fsck notices .git as blob
ok 2 - enable split index
ok 1035 - checkout attr=text  aeol= core.autocrlf=true core.eol=crlf file=LF
ok 421 - barf on incomplete string
ok 6 - index.skipHash config option
ok 37 - ambiguous commits are printed by type first, then hash order
ok 219 - stdin  symref-update creates with no old value
ok 1 - setup
ok 1036 - checkout attr=text  aeol= core.autocrlf=true core.eol=crlf file=CRLF
ok 1037 - checkout attr=text  aeol= core.autocrlf=true core.eol=crlf file=CRLF_mix_LF
ok 32 - reftable -> files: reflogs order is retained
ok 38 - cat-file --batch and --batch-check show ambiguous
ok 2 - split the index while adding a racily clean file #0
ok 220 - stdin  symref-update creates dangling
ok 1038 - checkout attr=text  aeol= core.autocrlf=true core.eol=crlf file=LF_mix_CR
# still have 3 known breakage(s)
# passed all remaining 35 test(s)
1..38
ok 3 - add one file
ok 1039 - checkout attr=text  aeol= core.autocrlf=true core.eol=crlf file=LF_nul
ok 1040 - setup config for checkout attr=text ident= aeol= core.autocrlf=input
*** t2002-checkout-cache-u.sh ***
ok 3 - split the index while adding a racily clean file #1
ok 1041 - setup LF checkout  with -c core.eol=crlf
ok 22 - #7: explicit GIT_WORK_TREE and GIT_DIR in subdir
ok 221 - stdin  symref-update fails with wrong old value
ok 422 - urlmatch
ok 4 - disable split index
ok 1042 - setup CRLF checkout  with -c core.eol=crlf
ok 4 - split the index while adding a racily clean file #2
ok 50 - fsck notices .git as tree
ok 1043 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 5 - split the index while adding a racily clean file #3
ok 423 - urlmatch with --show-scope
ok 222 - stdin  symref-update updates dangling ref
ok 1044 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 5 - enable split index again, "one" now belongs to base index"
ok 1 - git hook usage
ok 1 - git update-index --add various paths.
ok 1045 - setup LF_nul checkout  with -c core.eol=crlf
ok 2 - git hook run: nonexistent hook
ok 6 - split the index while adding a racily clean file #4
ok 3 - git hook run: nonexistent hook with --ignore-missing
ok 2 - git checkout-index without -f should fail on conflicting work tree.
ok 23 - #7: explicit GIT_WORK_TREE from parent of worktree
ok 3 - git checkout-index with -f should succeed.
ok 4 - git checkout-index conflicting paths.
ok 223 - stdin  symref-update updates dangling ref with old value
ok 6 - modify original file, base index untouched
ok 1046 - ls-files --eol attr=text  aeol= core.autocrlf=input core.eol=crlf
ok 7 - add a racily clean file to an already split index #0
ok 51 - fsck notices .GIT as blob
ok 4 - git hook run: basic
ok 1047 - checkout attr=text  aeol= core.autocrlf=input core.eol=crlf file=LF
ok 5 - checkout-index -f twice with --prefix
ok 1048 - checkout attr=text  aeol= core.autocrlf=input core.eol=crlf file=CRLF
ok 224 - stdin  symref-update fails update dangling ref with wrong old value
ok 8 - add a racily clean file to an already split index #1
ok 6 - git update-index --add path2/file0
ok 7 - add another file, which stays index
ok 1049 - checkout attr=text  aeol= core.autocrlf=input core.eol=crlf file=CRLF_mix_LF
ok 5 - git hook run: stdout and stderr both write to our stderr
ok 7 - writing tree out with git write-tree
ok 1050 - checkout attr=text  aeol= core.autocrlf=input core.eol=crlf file=LF_mix_CR
ok 225 - stdin  symref-update works with right old value
ok 9 - add a racily clean file to an already split index #2
ok 8 - git update-index --add path3/file1
ok 6 - git hook run: exit code 1 is passed along
ok 1051 - checkout attr=text  aeol= core.autocrlf=input core.eol=crlf file=LF_nul
ok 24 - #7: explicit GIT_WORK_TREE from nephew of worktree
ok 9 - writing tree out with git write-tree
ok 8 - remove file not in base index
ok 1052 - setup config for checkout attr=auto ident= aeol= core.autocrlf=input
ok 1053 - setup LF checkout  with -c core.eol=crlf
ok 7 - git hook run: exit code 2 is passed along
ok 226 - stdin  symref-update works with no old value
ok 10 - add a racily clean file to an already split index #3
ok 10 - read previously written tree and checkout.
ok 9 - remove file in base index
ok 7 - index version config precedence
ok 52 - fsck notices .GIT as tree
ok 11 - add a symlink
ok 1054 - setup CRLF checkout  with -c core.eol=crlf
# passed all 7 test(s)
1..7
ok 12 - writing tree out with git write-tree
ok 1055 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 8 - git hook run: exit code 128 is passed along
ok 1 - preparation
*** t2003-checkout-cache-mkdir.sh ***
ok 11 - add a racily clean file to an already split index #4
ok 227 - stdin  symref-update fails with empty old ref-target
ok 33 - reftable -> files: stash is retained
ok 13 - read previously written tree and checkout.
ok 14 - checking out conflicting path with -f
ok 1056 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
# passed all 14 test(s)
1..14
ok 2 - without -u, git checkout-index smudges stat information.
ok 9 - git hook run: exit code 129 is passed along
ok 25 - #7: chdir_to_toplevel uses worktree, not git dir
ok 10 - add original file back
*** t2004-checkout-cache-temp.sh ***
ok 10 - git hook run arg u ments without -- is not allowed
ok 1057 - setup LF_nul checkout  with -c core.eol=crlf
ok 424 - urlmatch favors more specific URLs
ok 228 - stdin  symref-update creates (with deref)
ok 3 - with -u, git checkout-index picks up stat information from new files.
ok 25 - git read-tree -u --reset --recurse-submodules: nested submodules are checked out
# passed all 3 test(s)
1..3
ok 11 - add new file
ok 11 - git hook run -- pass arguments
*** t2005-checkout-index-symlinks.sh ***
ok 1058 - ls-files --eol attr=auto  aeol= core.autocrlf=input core.eol=crlf
ok 53 - fsck notices .gI{u200c}T as blob
ok 12 - git hook run -- out-of-repo runs excluded
ok 12 - unify index, two files remain
ok 1059 - checkout attr=auto  aeol= core.autocrlf=input core.eol=crlf file=LF
ok 1060 - checkout attr=auto  aeol= core.autocrlf=input core.eol=crlf file=CRLF
ok 26 - #7: chdir_to_toplevel uses worktree (from subdir)
ok 425 - urlmatch with wildcard
ok 1061 - checkout attr=auto  aeol= core.autocrlf=input core.eol=crlf file=CRLF_mix_LF
ok 229 - stdin  symref-update regular ref to symref with correct old-oid
ok 34 - reftable -> files: skip reflog with --skip-reflog
ok 1062 - checkout attr=auto  aeol= core.autocrlf=input core.eol=crlf file=LF_mix_CR
ok 13 - rev-parse --shared-index-path
ok 1063 - checkout attr=auto  aeol= core.autocrlf=input core.eol=crlf file=LF_nul
ok 1064 - setup config for checkout attr=-text ident= aeol= core.autocrlf=true
ok 13 - git -c core.hooksPath=<PATH> hook run
ok 1065 - setup LF checkout  with -c core.eol=native
ok 27 - #8: gitfile, easy case
ok 54 - fsck notices .gI{u200c}T as tree
ok 230 - stdin  symref-update regular ref to symref fails with wrong old-oid
ok 1066 - setup CRLF checkout  with -c core.eol=native
ok 14 # skip git hook run: stdout and stderr are connected to a TTY (missing TTY)
ok 15 # skip git commit: stdout and stderr are connected to a TTY (missing TTY)
ok 14 - set core.splitIndex config variable to true
ok 1067 - setup LF_mix_CR checkout  with -c core.eol=native
ok 426 - --unset last key removes section (except if commented)
ok 1068 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 231 - stdin  symref-update regular ref to symref fails with invalid old-oid
ok 427 - --unset-all removes section if empty & uncommented
ok 16 - git hook run a hook with a bad shebang
ok 428 - adding a key into an empty section reuses header
ok 28 - #9: GIT_WORK_TREE accepted with gitfile
ok 1069 - setup LF_nul checkout  with -c core.eol=native
ok 1 - setup
ok 15 - set core.splitIndex config variable to false
ok 17 - stdin to hooks
# passed all 17 test(s)
1..17
*** t2006-checkout-index-basic.sh ***
ok 232 - stdin  symref-update existing symref with zero old-oid
ok 2 - have symlink in place where dir is expected.
ok 429 - preserves existing permissions
ok 430 - set up --show-origin tests
ok 3 - use --prefix=path2/
ok 1070 - ls-files --eol attr=-text  aeol= core.autocrlf=true core.eol=native
ok 29 - #10: GIT_DIR can point to gitfile
ok 55 - fsck notices .Git as blob
ok 1 - setup
ok 1071 - checkout attr=-text  aeol= core.autocrlf=true core.eol=native file=LF
ok 431 - --show-origin with --list
ok 4 - use --prefix=tmp-
ok 1072 - checkout attr=-text  aeol= core.autocrlf=true core.eol=native file=CRLF
ok 1 - preparation
ok 16 - set core.splitIndex config variable back to true
ok 5 - use --prefix=tmp- but with a conflicting file and dir
ok 2 - the checked-out symlink must be a file
ok 432 - --show-origin with --list --null
ok 2 - checkout one stage 0 to temporary file
ok 1073 - checkout attr=-text  aeol= core.autocrlf=true core.eol=native file=CRLF_mix_LF
ok 3 - the file must be the blob we added during the setup
ok 433 - --show-origin with single file
# passed all 3 test(s)
1..3
ok 6 - use --prefix=tmp/orary/ where tmp is a symlink
*** t2007-checkout-symlink.sh ***
ok 1074 - checkout attr=-text  aeol= core.autocrlf=true core.eol=native file=LF_mix_CR
ok 30 - #10b: relative GIT_DIR can point to gitfile
ok 233 - stdin  symref-update regular ref to symref (with deref)
ok 434 - --show-origin with --get-regexp
ok 1075 - checkout attr=-text  aeol= core.autocrlf=true core.eol=native file=LF_nul
ok 7 - use --prefix=tmp/orary- where tmp is a symlink
ok 1076 - setup config for checkout attr=-text ident= aeol=lf core.autocrlf=true
ok 435 - --show-origin getting a single key
ok 31 - #11: setup
ok 436 - set up custom config file
ok 1077 - setup LF checkout  with -c core.eol=native
ok 8 - use --prefix=tmp- where tmp-path1 is a symlink
ok 437 - set up custom config file with special name characters
ok 17 - check behavior with splitIndex.maxPercentChange unset
ok 56 - fsck notices .Git as tree
ok 1078 - setup CRLF checkout  with -c core.eol=native
ok 438 - --show-origin escape special file name characters
ok 3 - checkout all stage 0 to temporary files
ok 234 - stdin  symref-update regular ref to symref
ok 1079 - setup LF_mix_CR checkout  with -c core.eol=native
ok 439 - --show-origin stdin
ok 4 - setup 3-way merge
ok 1080 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 235 - stdin -z symref-verify fails without --no-deref
ok 9 - apply filter from working tree .gitattributes with --prefix
ok 236 - stdin -z symref-verify fails with too many arguments
ok 440 - --show-origin stdin with file include
ok 1081 - setup LF_nul checkout  with -c core.eol=native
ok 5 - checkout one stage 2 to temporary file
ok 10 - apply CRLF filter from working tree .gitattributes with --prefix
ok 32 - #11: explicit GIT_WORK_TREE and GIT_DIR at toplevel
# passed all 10 test(s)
1..10
*** t2008-checkout-subdir.sh ***
ok 18 - check splitIndex.maxPercentChange set to 0
ok 237 - stdin -z symref-verify succeeds for correct value
ok 57 - fsck notices git~1 as blob
ok 1082 - ls-files --eol attr=-text  aeol=lf core.autocrlf=true core.eol=native
ok 441 - --show-origin blob
ok 1 - checkout-index --gobbledegook
ok 6 - checkout all stage 2 to temporary files
ok 238 - stdin -z symref-verify fails with no value
ok 1083 - checkout attr=-text  aeol=lf core.autocrlf=true core.eol=native file=LF
ok 7 - checkout all stages of unknown path
ok 1084 - checkout attr=-text  aeol=lf core.autocrlf=true core.eol=native file=CRLF
ok 2 - checkout-index -h in broken repository
ok 8 - checkout all stages/one file to nothing
ok 1085 - checkout attr=-text  aeol=lf core.autocrlf=true core.eol=native file=CRLF_mix_LF
ok 239 - stdin -z symref-verify succeeds for dangling reference
ok 3 - checkout-index reports errors (cmdline)
ok 33 - #11: explicit GIT_WORK_TREE and GIT_DIR in subdir
ok 4 - checkout-index reports errors (stdin)
ok 1086 - checkout attr=-text  aeol=lf core.autocrlf=true core.eol=native file=LF_mix_CR
ok 19 - shared index files expire after 2 weeks by default
ok 9 - checkout all stages/one file to temporary files
ok 442 - --show-origin blob ref
ok 1087 - checkout attr=-text  aeol=lf core.autocrlf=true core.eol=native file=LF_nul
ok 10 - --stage=all implies --temp
ok 240 - stdin -z symref-verify fails for missing reference
ok 443 - --show-origin with --default
ok 1088 - setup config for checkout attr=-text ident= aeol=crlf core.autocrlf=true
ok 5 # skip checkout-index with case-collision don't write to the wrong place (missing CASE_INSENSITIVE_FS of SYMLINKS,CASE_INSENSITIVE_FS)
ok 11 - overriding --stage=all resets implied --temp
ok 26 - git read-tree -u --reset --recurse-submodules: removed submodule removes submodules working tree
ok 1089 - setup LF checkout  with -c core.eol=native
ok 58 - fsck notices git~1 as tree
ok 6 # skip checkout-index with utf-8-collision don't write to the wrong place (missing UTF8_NFD_TO_NFC of SYMLINKS,UTF8_NFD_TO_NFC)
ok 241 - stdin -z symref-verify fails for wrong value
ok 12 - --stage=all --no-temp is rejected
ok 1090 - setup CRLF checkout  with -c core.eol=native
ok 20 - check splitIndex.sharedIndexExpire set to 16 days
ok 1091 - setup LF_mix_CR checkout  with -c core.eol=native
ok 242 - stdin -z symref-verify fails for mistaken null value
ok 13 - checkout some stages/one file to temporary files
ok 1092 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 34 - #11: explicit GIT_WORK_TREE from parent of worktree
ok 243 - stdin -z symref-delete fails without --no-deref
ok 14 - checkout all stages/all files to temporary files
ok 7 - checkout-index --temp correctly reports error on missing blobs
ok 1093 - setup LF_nul checkout  with -c core.eol=native
ok 15 - -- path0: no entry
ok 244 - stdin -z symref-delete fails with no ref
ok 16 - -- path1: all 3 stages
ok 21 - check splitIndex.sharedIndexExpire set to "never" and "now"
ok 245 - stdin -z symref-delete fails deleting regular ref
ok 59 - fsck notices .git. as blob
ok 17 - -- path2: no stage 1, have stage 2 and 3
ok 444 - --show-scope with --list
ok 246 - stdin -z symref-delete fails with too many arguments
ok 1094 - ls-files --eol attr=-text  aeol=crlf core.autocrlf=true core.eol=native
ok 18 - -- path3: no stage 2, have stage 1 and 3
ok 445 - --show-scope with --blob
ok 1095 - checkout attr=-text  aeol=crlf core.autocrlf=true core.eol=native file=LF
ok 247 - stdin -z symref-delete fails with wrong old value
ok 19 - -- path4: no stage 3, have stage 1 and 3
ok 446 - --show-scope with --local
ok 35 - #11: explicit GIT_WORK_TREE from nephew of worktree
ok 1096 - checkout attr=-text  aeol=crlf core.autocrlf=true core.eol=native file=CRLF
ok 20 - -- asubdir/path5: no stage 2 and 3 have stage 1
ok 1097 - checkout attr=-text  aeol=crlf core.autocrlf=true core.eol=native file=CRLF_mix_LF
ok 1 - setup
ok 248 - stdin -z symref-delete works with right old value
ok 447 - --show-scope getting a single value
ok 2 - switch from symlink to dir
ok 1098 - checkout attr=-text  aeol=crlf core.autocrlf=true core.eol=native file=LF_mix_CR
ok 21 - checkout --temp within subdir
ok 448 - --show-scope with --show-origin
ok 249 - stdin -z symref-delete works with empty old value
ok 1099 - checkout attr=-text  aeol=crlf core.autocrlf=true core.eol=native file=LF_nul
ok 449 - --show-scope with --default
ok 3 - Remove temporary directories & switch to main
ok 1100 - setup config for checkout attr=text ident= aeol=lf core.autocrlf=true
ok 22 - same mode for index & split index
ok 1 - setup
ok 4 - switch from dir to symlink
# passed all 4 test(s)
1..4
ok 250 - stdin -z symref-delete succeeds for dangling reference
ok 1101 - setup LF checkout  with -c core.eol=native
ok 60 - fsck notices .git. as tree
*** t2009-checkout-statinfo.sh ***
ok 22 - checkout --temp symlink
ok 251 - stdin -z symref-delete deletes regular ref without target
ok 1102 - setup CRLF checkout  with -c core.eol=native
ok 36 - #11: chdir_to_toplevel uses worktree, not git dir
ok 252 - stdin -z symref-create fails with too many arguments
ok 253 - stdin -z symref-create fails with no target
ok 1103 - setup LF_mix_CR checkout  with -c core.eol=native
ok 23 - emit well-formed relative path
ok 8 - checkout-index --temp correctly reports error for submodules
ok 450 - override global and system config
ok 254 - stdin -z symref-create fails with empty target
ok 2 - remove and restore with relative path
# passed all 8 test(s)
1..8
# passed all 23 test(s)
1..23
ok 23 - split index respects core.sharedrepository 0666
ok 1104 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 3 - checkout with empty prefix
*** t2010-checkout-ambiguous.sh ***
*** t2011-checkout-invalid-head.sh ***
ok 451 - override global and system config with missing file
ok 1105 - setup LF_nul checkout  with -c core.eol=native
ok 255 - stdin -z symref-create works
ok 256 - stdin -z symref-create works with --no-deref
ok 4 - checkout with simple prefix
ok 452 - system override has no effect with GIT_CONFIG_NOSYSTEM
ok 5 - checkout with complex relative path
ok 37 - #11: chdir_to_toplevel uses worktree (from subdir)
ok 61 - fsck notices .\.GIT\foobar as blob
ok 24 - split index respects core.sharedrepository 0642
ok 257 - stdin -z create dangling symref ref works
ok 6 - relative path outside tree should fail
ok 1106 - ls-files --eol attr=text  aeol=lf core.autocrlf=true core.eol=native
ok 7 - incorrect relative path to file should fail (1)
ok 453 - write to overridden global and system config
ok 1107 - checkout attr=text  aeol=lf core.autocrlf=true core.eol=native file=LF
ok 454 - --local requires a repo
ok 14 - status/add: outside sparse cone
ok 8 - incorrect relative path should fail (2)
ok 455 - --worktree requires a repo
ok 1108 - checkout attr=text  aeol=lf core.autocrlf=true core.eol=native file=CRLF
ok 9 - incorrect relative path should fail (3)
# passed all 9 test(s)
1..9
ok 258 - stdin -z symref-create does not create reflogs by default
ok 456 - identical modern --type specifiers are allowed
ok 1109 - checkout attr=text  aeol=lf core.autocrlf=true core.eol=native file=CRLF_mix_LF
*** t2012-checkout-last.sh ***
ok 457 - identical legacy --type specifiers are allowed
ok 1110 - checkout attr=text  aeol=lf core.autocrlf=true core.eol=native file=LF_mix_CR
ok 38 - #12: core.worktree with gitfile is accepted
ok 458 - identical mixed --type specifiers are allowed
ok 1111 - checkout attr=text  aeol=lf core.autocrlf=true core.eol=native file=LF_nul
ok 259 - stdin -z symref-create reflogs with --create-reflog
ok 459 - non-identical modern --type specifiers are not allowed
ok 1112 - setup config for checkout attr=text ident= aeol=crlf core.autocrlf=true
ok 260 - stdin -z symref-update fails with too many arguments
ok 460 - non-identical legacy --type specifiers are not allowed
ok 1113 - setup LF checkout  with -c core.eol=native
ok 461 - non-identical mixed --type specifiers are not allowed
ok 261 - stdin -z symref-update fails with wrong old value argument
ok 462 - --type allows valid type specifiers
ok 62 - fsck notices .\.GIT\foobar as tree
ok 1114 - setup CRLF checkout  with -c core.eol=native
ok 463 - --no-type unsets type specifiers
ok 25 - graceful handling when splitting index is not allowed
ok 464 - unset type specifiers may be reset to conflicting ones
ok 262 - stdin -z symref-update creates with zero old value
ok 1115 - setup LF_mix_CR checkout  with -c core.eol=native
ok 39 - #13: core.worktree+GIT_WORK_TREE accepted (with gitfile)
ok 465 - --type rejects unknown specifiers
ok 466 - --type=int requires at least one digit
ok 1116 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 467 - --replace-all does not invent newlines
ok 1117 - setup LF_nul checkout  with -c core.eol=native
ok 263 - stdin -z symref-update creates with no old value
ok 27 - git read-tree -u --reset --recurse-submodules: removed submodule absorbs submodules .git directory
ok 1 - setup
ok 264 - stdin -z symref-update creates dangling
ok 63 - fsck notices .git\foobar as blob
ok 1118 - ls-files --eol attr=text  aeol=crlf core.autocrlf=true core.eol=native
ok 1 - setup
ok 1 - setup
ok 2 - checkout should not start branch from a tree
ok 26 - writing split index with null sha1 does not write cache tree
ok 1119 - checkout attr=text  aeol=crlf core.autocrlf=true core.eol=native file=LF
ok 2 - reference must be a tree
ok 3 - checkout main from invalid HEAD
ok 265 - stdin -z symref-update fails with wrong old value
ok 1120 - checkout attr=text  aeol=crlf core.autocrlf=true core.eol=native file=CRLF
ok 468 - set all config with value-pattern
ok 1121 - checkout attr=text  aeol=crlf core.autocrlf=true core.eol=native file=CRLF_mix_LF
ok 2 - branch switching
ok 3 - branch switching
ok 1122 - checkout attr=text  aeol=crlf core.autocrlf=true core.eol=native file=LF_mix_CR
ok 4 - checkout world from the index
ok 1123 - checkout attr=text  aeol=crlf core.autocrlf=true core.eol=native file=LF_nul
ok 266 - stdin -z symref-update updates dangling ref
ok 1124 - setup config for checkout attr=auto ident= aeol=lf core.autocrlf=true
ok 5 - non ambiguous call
ok 469 - --replace-all and value-pattern
ok 6 - allow the most common case
ok 1125 - setup LF checkout  with -c core.eol=native
ok 64 - fsck notices .git\foobar as tree
ok 7 - check ambiguity
ok 1126 - setup CRLF checkout  with -c core.eol=native
ok 267 - stdin -z symref-update updates dangling ref with old value
ok 8 - check ambiguity in subdir
ok 1127 - setup LF_mix_CR checkout  with -c core.eol=native
ok 3 - path checkout
# passed all 3 test(s)
1..3
ok 9 - disambiguate checking out from a tree-ish
ok 1 - setup
ok 1128 - setup CRLF_mix_LF checkout  with -c core.eol=native
*** t2013-checkout-submodule.sh ***
ok 2 - "checkout -" does not work initially
ok 10 - accurate error message with more than one ref
ok 1129 - setup LF_nul checkout  with -c core.eol=native
ok 3 - first branch switch
ok 268 - stdin -z symref-update fails update dangling ref with wrong old value
# passed all 10 test(s)
1..10
*** t2014-checkout-switch.sh ***
ok 65 - fsck allows .Ňit
ok 4 - "checkout -" switches back
ok 269 - stdin -z symref-update works with right old value
ok 470 - refuse --fixed-value for incompatible actions
ok 1130 - ls-files --eol attr=auto  aeol=lf core.autocrlf=true core.eol=native
ok 27 - do not refresh null base index
ok 5 - "checkout -" switches forth
ok 1131 - checkout attr=auto  aeol=lf core.autocrlf=true core.eol=native file=LF
ok 6 - detach HEAD
ok 1132 - checkout attr=auto  aeol=lf core.autocrlf=true core.eol=native file=CRLF
ok 270 - stdin -z symref-update works with no old value
ok 1133 - checkout attr=auto  aeol=lf core.autocrlf=true core.eol=native file=CRLF_mix_LF
ok 28 - reading split index at alternate location
ok 7 - "checkout -" attaches again
ok 1134 - checkout attr=auto  aeol=lf core.autocrlf=true core.eol=native file=LF_mix_CR
ok 271 - stdin -z symref-update fails with empty old ref-target
ok 1135 - checkout attr=auto  aeol=lf core.autocrlf=true core.eol=native file=LF_nul
ok 1136 - setup config for checkout attr=auto ident= aeol=crlf core.autocrlf=true
ok 29 - GIT_TEST_SPLIT_INDEX works
ok 1137 - setup LF checkout  with -c core.eol=native
ok 8 - "checkout -" detaches again
# passed all 29 test(s)
1..29
ok 66 - NUL in commit
ok 272 - stdin -z symref-update creates (with deref)
ok 1138 - setup CRLF checkout  with -c core.eol=native
ok 1139 - setup LF_mix_CR checkout  with -c core.eol=native
*** t2015-checkout-unborn.sh ***
ok 1140 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 28 - git read-tree -u --reset --recurse-submodules: replace submodule with a file
ok 1141 - setup LF_nul checkout  with -c core.eol=native
ok 471 - --fixed-value uses exact string matching
ok 40 - #14: core.worktree with GIT_DIR pointing to gitfile
ok 273 - stdin -z symref-update regular ref to symref with correct old-oid
ok 1142 - ls-files --eol attr=auto  aeol=crlf core.autocrlf=true core.eol=native
ok 1143 - checkout attr=auto  aeol=crlf core.autocrlf=true core.eol=native file=LF
ok 1144 - checkout attr=auto  aeol=crlf core.autocrlf=true core.eol=native file=CRLF
ok 67 - fsck notices missing blob
ok 1145 - checkout attr=auto  aeol=crlf core.autocrlf=true core.eol=native file=CRLF_mix_LF
ok 274 - stdin -z symref-update regular ref to symref fails with wrong old-oid
ok 1146 - checkout attr=auto  aeol=crlf core.autocrlf=true core.eol=native file=LF_mix_CR
ok 9 - more switches
ok 1 - setup
ok 1147 - checkout attr=auto  aeol=crlf core.autocrlf=true core.eol=native file=LF_nul
ok 2 - check all changes are staged
ok 1148 - setup config for checkout attr=-text ident= aeol= core.autocrlf=false
ok 1149 - setup LF checkout  with -c core.eol=native
ok 275 - stdin -z symref-update regular ref to symref fails with invalid old-oid
ok 3 - second commit
ok 1150 - setup CRLF checkout  with -c core.eol=native
ok 4 - check
ok 472 - --get and --get-all with --fixed-value
# passed all 4 test(s)
1..4
ok 1151 - setup LF_mix_CR checkout  with -c core.eol=native
*** t2016-checkout-patch.sh ***
ok 473 - --fixed-value with value-less configuration
ok 276 - stdin -z symref-update existing symref with zero old-oid
ok 1152 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 1 - setup
ok 1153 - setup LF_nul checkout  with -c core.eol=native
ok 4 - checkout notices failure to lock HEAD
ok 68 - fsck notices missing subtree
ok 474 - includeIf.hasconfig:remote.*.url
ok 5 - create ref directory/file conflict scenario
ok 41 - #14b: core.worktree is relative to actual git dir
ok 6 - checkout away from d/f HEAD (unpacked, to branch)
ok 1154 - ls-files --eol attr=-text  aeol= core.autocrlf=false core.eol=native
ok 42 - #15: setup
ok 2 - "reset <submodule>" updates the index
ok 1155 - checkout attr=-text  aeol= core.autocrlf=false core.eol=native file=LF
ok 7 - checkout away from d/f HEAD (unpacked, to detached)
ok 8 - pack refs
ok 1156 - checkout attr=-text  aeol= core.autocrlf=false core.eol=native file=CRLF
ok 277 - stdin -z symref-update regular ref to symref (with deref)
ok 475 - includeIf.hasconfig:remote.*.url respects last-config-wins
ok 9 - checkout away from d/f HEAD (packed, to branch)
ok 1157 - checkout attr=-text  aeol= core.autocrlf=false core.eol=native file=CRLF_mix_LF
ok 1 - setup
ok 1158 - checkout attr=-text  aeol= core.autocrlf=false core.eol=native file=LF_mix_CR
ok 10 - checkout away from d/f HEAD (packed, to detached)
ok 2 - checkout from unborn preserves untracked files
# passed all 10 test(s)
1..10
ok 1159 - checkout attr=-text  aeol= core.autocrlf=false core.eol=native file=LF_nul
*** t2017-checkout-orphan.sh ***
ok 1160 - setup config for checkout attr=-text ident= aeol=lf core.autocrlf=false
ok 10 - switch to the last
ok 278 - stdin -z symref-update regular ref to symref
ok 1161 - setup LF checkout  with -c core.eol=native
ok 69 - fsck notices missing root tree
ok 43 - #15: explicit GIT_WORK_TREE and GIT_DIR at toplevel
ok 3 - checkout from unborn preserves index contents
ok 3 - "checkout <submodule>" updates the index only
ok 476 - includeIf.hasconfig:remote.*.url globs
ok 1162 - setup CRLF checkout  with -c core.eol=native
ok 4 - checkout from unborn merges identical index contents
ok 4 - "checkout <submodule>" honors diff.ignoreSubmodules
ok 1163 - setup LF_mix_CR checkout  with -c core.eol=native
not ok 29 - git read-tree -u --reset --recurse-submodules: replace submodule with a file must fail with untracked files # TODO known breakage
ok 15 - checkout and reset --hard
ok 1164 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 477 - includeIf.hasconfig:remote.*.url forbids remote url in such included files
ok 5 - checking out another branch from unborn state
ok 1165 - setup LF_nul checkout  with -c core.eol=native
ok 478 - negated mode causes failure
ok 279 - update-ref should also create reflog for HEAD
ok 5 - "checkout <submodule>" honors submodule.*.ignore from .gitmodules
# passed all 279 test(s)
1..279
ok 479 - specifying multiple modes causes failure
ok 44 - #15: explicit GIT_WORK_TREE and GIT_DIR in subdir
ok 480 - writing to stdin is rejected
*** t2018-checkout-branch.sh ***
# passed all 480 test(s)
1..480
ok 6 - checking out in a newly created repo
# passed all 6 test(s)
1..6
ok 6 - "checkout <submodule>" honors submodule.*.ignore from .git/config
ok 1166 - ls-files --eol attr=-text  aeol=lf core.autocrlf=false core.eol=native
*** t2019-checkout-ambiguous-ref.sh ***
*** t2020-checkout-detach.sh ***
ok 1167 - checkout attr=-text  aeol=lf core.autocrlf=false core.eol=native file=LF
ok 70 - fsck notices missing parent
ok 1168 - checkout attr=-text  aeol=lf core.autocrlf=false core.eol=native file=CRLF
ok 1169 - checkout attr=-text  aeol=lf core.autocrlf=false core.eol=native file=CRLF_mix_LF
ok 1170 - checkout attr=-text  aeol=lf core.autocrlf=false core.eol=native file=LF_mix_CR
ok 1 - setup
ok 1171 - checkout attr=-text  aeol=lf core.autocrlf=false core.eol=native file=LF_nul
ok 45 - #15: explicit GIT_WORK_TREE from parent of worktree
ok 1172 - setup config for checkout attr=-text ident= aeol=crlf core.autocrlf=false
ok 1173 - setup LF checkout  with -c core.eol=native
ok 11 - switch to second from the last
ok 1174 - setup CRLF checkout  with -c core.eol=native
ok 1175 - setup LF_mix_CR checkout  with -c core.eol=native
ok 1176 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 71 - fsck notices missing tagged object
ok 1177 - setup LF_nul checkout  with -c core.eol=native
ok 46 - #15: explicit GIT_WORK_TREE from nephew of worktree
ok 2 - saying "n" does nothing
ok 1 - Setup
ok 1178 - ls-files --eol attr=-text  aeol=crlf core.autocrlf=false core.eol=native
ok 1179 - checkout attr=-text  aeol=crlf core.autocrlf=false core.eol=native file=LF
ok 3 - git checkout -p
ok 2 - --orphan creates a new orphan branch from HEAD
ok 1180 - checkout attr=-text  aeol=crlf core.autocrlf=false core.eol=native file=CRLF
ok 47 - #15: chdir_to_toplevel uses worktree, not git dir
ok 1181 - checkout attr=-text  aeol=crlf core.autocrlf=false core.eol=native file=CRLF_mix_LF
ok 1182 - checkout attr=-text  aeol=crlf core.autocrlf=false core.eol=native file=LF_mix_CR
ok 72 - fsck notices ref pointing to missing commit
ok 1183 - checkout attr=-text  aeol=crlf core.autocrlf=false core.eol=native file=LF_nul
ok 1184 - setup config for checkout attr=text ident= aeol=lf core.autocrlf=false
ok 3 - --orphan creates a new orphan branch from <start_point>
ok 1 - setup
ok 4 - git checkout -p with staged changes
ok 12 - switch to third from the last
ok 1185 - setup LF checkout  with -c core.eol=native
ok 4 - --orphan must be rejected with -b
ok 1186 - setup CRLF checkout  with -c core.eol=native
ok 1187 - setup LF_mix_CR checkout  with -c core.eol=native
ok 48 - #15: chdir_to_toplevel uses worktree (from subdir)
ok 5 - --orphan must be rejected with -t
ok 1188 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 1189 - setup LF_nul checkout  with -c core.eol=native
ok 1 - setup ambiguous refs
ok 2 - checkout a branch without refs/heads/* prefix
ok 2 - checkout ambiguous ref succeeds
ok 3 - checkout produces ambiguity warning
ok 73 - fsck notices ref pointing to missing tag
ok 1190 - ls-files --eol attr=text  aeol=lf core.autocrlf=false core.eol=native
ok 4 - checkout chooses branch over tag
ok 49 - #16a: implicitly bare repo (cwd inside .git dir)
ok 5 - git checkout -p HEAD with NO staged changes: abort
ok 1191 - checkout attr=text  aeol=lf core.autocrlf=false core.eol=native file=LF
ok 5 - checkout reports switch to branch
ok 1192 - checkout attr=text  aeol=lf core.autocrlf=false core.eol=native file=CRLF
ok 6 - checkout vague ref succeeds
ok 7 - checkout produces ambiguity warning
ok 1193 - checkout attr=text  aeol=lf core.autocrlf=false core.eol=native file=CRLF_mix_LF
ok 3 - checkout -b to a new branch, set to HEAD
ok 1 - setup
ok 1194 - checkout attr=text  aeol=lf core.autocrlf=false core.eol=native file=LF_mix_CR
ok 8 - checkout chooses branch over tag
ok 6 - --orphan ignores branch.autosetupmerge
ok 9 - checkout reports switch to branch
ok 4 - checkout -b to a merge base
ok 1195 - checkout attr=text  aeol=lf core.autocrlf=false core.eol=native file=LF_nul
# passed all 9 test(s)
1..9
ok 2 - checkout branch does not detach
ok 1196 - setup config for checkout attr=text ident= aeol=crlf core.autocrlf=false
ok 13 - switch to fourth from the last
*** t2021-checkout-overwrite.sh ***
ok 6 - git checkout -p HEAD with NO staged changes: apply
ok 1197 - setup LF checkout  with -c core.eol=native
ok 50 - #16b: bare .git (cwd inside .git dir)
ok 1198 - setup CRLF checkout  with -c core.eol=native
ok 7 - --orphan makes reflog by default
ok 1199 - setup LF_mix_CR checkout  with -c core.eol=native
ok 3 - checkout HEAD no-op/don't detach
ok 5 - checkout -b to a new branch, set to an explicit ref
ok 1200 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 16 - diff --cached
ok 6 - checkout -b to a new branch with unmergeable changes fails
ok 1201 - setup LF_nul checkout  with -c core.eol=native
ok 74 - fsck --connectivity-only
ok 51 - #16c: bare .git has no worktree
ok 8 - --orphan does not make reflog when core.logAllRefUpdates = false
ok 4 - checkout @ no-op/don't detach
ok 7 - git checkout -p HEAD with change already staged
ok 1202 - ls-files --eol attr=text  aeol=crlf core.autocrlf=false core.eol=native
ok 30 - git read-tree -u --reset --recurse-submodules: worktrees of nested submodules are removed
ok 1203 - checkout attr=text  aeol=crlf core.autocrlf=false core.eol=native file=LF
ok 5 - checkout tag detaches
ok 7 - checkout -f -b to a new branch with unmergeable changes discards changes
ok 52 - #16d: bareness preserved across alias
ok 1204 - checkout attr=text  aeol=crlf core.autocrlf=false core.eol=native file=CRLF
ok 9 - --orphan with -l makes reflog when core.logAllRefUpdates = false
ok 1205 - checkout attr=text  aeol=crlf core.autocrlf=false core.eol=native file=CRLF_mix_LF
ok 53 - #16e: bareness preserved by --bare
ok 6 - checkout branch by full name detaches
ok 1206 - checkout attr=text  aeol=crlf core.autocrlf=false core.eol=native file=LF_mix_CR
ok 1207 - checkout attr=text  aeol=crlf core.autocrlf=false core.eol=native file=LF_nul
ok 75 - fsck --connectivity-only with explicit head
ok 1208 - setup config for checkout attr=auto ident= aeol=lf core.autocrlf=false
ok 14 - switch to twelfth from the last
ok 7 - checkout non-ref detaches
ok 1209 - setup LF checkout  with -c core.eol=native
ok 10 - giving up --orphan not committed when -l and core.logAllRefUpdates = false deletes reflog
ok 8 - checkout -b to a new branch preserves mergeable changes
ok 8 - git checkout -p @ with NO staged changes: abort
ok 1210 - setup CRLF checkout  with -c core.eol=native
ok 8 - checkout ref^0 detaches
ok 1211 - setup LF_mix_CR checkout  with -c core.eol=native
ok 11 - --orphan is rejected with an existing name
ok 15 - merge base test setup
ok 1212 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 1 - setup
ok 1213 - setup LF_nul checkout  with -c core.eol=native
ok 9 - checkout --detach detaches
ok 9 - checkout -f -b to a new branch with mergeable changes discards changes
ok 16 - another...main
ok 9 - git checkout -p @ with NO staged changes: apply
ok 2 - create a commit where dir a/b changed to file
ok 12 - --orphan refuses to switch if a merge is needed
ok 10 - checkout -b to an existing branch fails
ok 1214 - ls-files --eol attr=auto  aeol=lf core.autocrlf=false core.eol=native
ok 10 - checkout --detach without branch name
ok 1215 - checkout attr=auto  aeol=lf core.autocrlf=false core.eol=native file=LF
ok 3 - checkout commit with dir must not remove untracked a/b
ok 17 - ...main
ok 1216 - checkout attr=auto  aeol=lf core.autocrlf=false core.eol=native file=CRLF
ok 13 - cannot --detach on an unborn branch
# passed all 13 test(s)
1..13
ok 11 - checkout --detach errors out for non-commit
ok 11 - checkout -b to @{-1} fails with the right branch name
ok 1217 - checkout attr=auto  aeol=lf core.autocrlf=false core.eol=native file=CRLF_mix_LF
*** t2022-checkout-paths.sh ***
ok 1218 - checkout attr=auto  aeol=lf core.autocrlf=false core.eol=native file=LF_mix_CR
ok 76 - fsck --name-objects
ok 1219 - checkout attr=auto  aeol=lf core.autocrlf=false core.eol=native file=LF_nul
ok 18 - main...
ok 1220 - setup config for checkout attr=auto ident= aeol=crlf core.autocrlf=false
ok 10 - git checkout -p @ with change already staged
ok 12 - checkout --detach errors out for extra argument
ok 54 - #17: GIT_WORK_TREE without explicit GIT_DIR is accepted (bare case)
ok 1221 - setup LF checkout  with -c core.eol=native
ok 4 - create a commit where dir a/b changed to symlink
ok 12 - checkout -B to an existing branch resets branch to HEAD
ok 1222 - setup CRLF checkout  with -c core.eol=native
ok 13 - checkout --detached and -b are incompatible
ok 13 - checkout -B to a merge base
ok 19 - "checkout -" works after a rebase A
ok 1223 - setup LF_mix_CR checkout  with -c core.eol=native
ok 5 - checkout commit with dir must not remove untracked a/b
ok 6 - the symlink remained
ok 1224 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 77 - alternate objects are correctly blamed
ok 7 - cleanup after previous symlink tests
ok 1225 - setup LF_nul checkout  with -c core.eol=native
ok 11 - git checkout -p HEAD^...
ok 14 - checkout -B to an existing branch from detached HEAD resets branch to HEAD
ok 14 - checkout --detach moves HEAD
ok 8 - checkout -f must not follow symlinks when removing entries
ok 20 - "checkout -" works after a rebase A B
ok 1226 - ls-files --eol attr=auto  aeol=crlf core.autocrlf=false core.eol=native
ok 55 - #18: bare .git named by GIT_DIR has no worktree
ok 12 - git checkout -p HEAD^
ok 15 - checkout -B to an existing branch with an explicit ref resets branch to that ref
ok 1227 - checkout attr=auto  aeol=crlf core.autocrlf=false core.eol=native file=LF
ok 1228 - checkout attr=auto  aeol=crlf core.autocrlf=false core.eol=native file=CRLF
ok 56 - #19: setup
ok 78 - fsck errors in packed objects
ok 16 - checkout -B to an existing branch with unmergeable changes fails
ok 1229 - checkout attr=auto  aeol=crlf core.autocrlf=false core.eol=native file=CRLF_mix_LF
ok 21 - "checkout -" works after a rebase -i A
ok 1230 - checkout attr=auto  aeol=crlf core.autocrlf=false core.eol=native file=LF_mix_CR
ok 9 - checkout --overwrite-ignore should succeed if only ignored files in the way
ok 1231 - checkout attr=auto  aeol=crlf core.autocrlf=false core.eol=native file=LF_nul
# passed all 9 test(s)
1..9
ok 15 - checkout warns on orphan commits
ok 17 - checkout -f -B to an existing branch with unmergeable changes discards changes
ok 1232 - setup config for checkout attr=-text ident= aeol= core.autocrlf=input
ok 16 - checkout warns on orphan commits: output
*** t2023-checkout-m.sh ***
ok 13 - git checkout -p handles deletion
ok 1233 - setup LF checkout  with -c core.eol=native
ok 22 - "checkout -" works after a rebase -i A B
ok 17 - checkout warns orphaning 1 of 2 commits
# passed all 22 test(s)
ok 18 - checkout warns orphaning 1 of 2 commits: output
1..22
ok 31 - git read-tree -u --reset --recurse-submodules: modified submodule updates submodule work tree
ok 79 - fsck fails on corrupt packfile
ok 1234 - setup CRLF checkout  with -c core.eol=native
ok 57 - #19: explicit GIT_WORK_TREE and GIT_DIR at toplevel
*** t2024-checkout-dwim.sh ***
ok 1235 - setup LF_mix_CR checkout  with -c core.eol=native
ok 1236 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 1237 - setup LF_nul checkout  with -c core.eol=native
ok 18 - checkout -B to an existing branch preserves mergeable changes
ok 1 - setup
ok 14 - path limiting works: dir
ok 19 - checkout does not warn leaving ref tip
ok 20 - checkout does not warn leaving ref tip
ok 1238 - ls-files --eol attr=-text  aeol= core.autocrlf=input core.eol=native
ok 58 - #19: explicit GIT_WORK_TREE and GIT_DIR in subdir
ok 21 - checkout does not warn leaving reachable commit
ok 1239 - checkout attr=-text  aeol= core.autocrlf=input core.eol=native file=LF
ok 22 - checkout does not warn leaving reachable commit
ok 80 - fsck finds problems in duplicate loose objects
ok 1240 - checkout attr=-text  aeol= core.autocrlf=input core.eol=native file=CRLF
ok 19 - checkout -f -B to an existing branch with mergeable changes discards changes
ok 15 - path limiting works: -- dir
ok 2 - checking out paths out of a tree does not clobber unrelated paths
ok 1241 - checkout attr=-text  aeol= core.autocrlf=input core.eol=native file=CRLF_mix_LF
ok 1242 - checkout attr=-text  aeol= core.autocrlf=input core.eol=native file=LF_mix_CR
ok 1243 - checkout attr=-text  aeol= core.autocrlf=input core.eol=native file=LF_nul
ok 1244 - setup config for checkout attr=-text ident= aeol=lf core.autocrlf=input
ok 20 - checkout -b <describe>
ok 81 - fsck detects trailing loose garbage (commit)
ok 1245 - setup LF checkout  with -c core.eol=native
ok 23 - tracking count is accurate after orphan check
ok 59 - #19: explicit GIT_WORK_TREE from parent of worktree
ok 3 - do not touch unmerged entries matching $path but not in $tree
ok 1246 - setup CRLF checkout  with -c core.eol=native
ok 16 - path limiting works: HEAD^ -- dir
ok 1247 - setup LF_mix_CR checkout  with -c core.eol=native
ok 21 - checkout -B to the current branch works
ok 1248 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 82 - fsck detects trailing loose garbage (large blob)
ok 1249 - setup LF_nul checkout  with -c core.eol=native
ok 60 - #19: explicit GIT_WORK_TREE from nephew of worktree
ok 4 - do not touch files that are already up-to-date
ok 17 - path limiting works: foo inside dir
ok 18 - none of this moved HEAD
ok 1250 - ls-files --eol attr=-text  aeol=lf core.autocrlf=input core.eol=native
ok 1251 - checkout attr=-text  aeol=lf core.autocrlf=input core.eol=native file=LF
ok 19 - empty tree can be handled
# passed all 19 test(s)
1..19
ok 1252 - checkout attr=-text  aeol=lf core.autocrlf=input core.eol=native file=CRLF
*** t2025-checkout-no-overlay.sh ***
ok 1253 - checkout attr=-text  aeol=lf core.autocrlf=input core.eol=native file=CRLF_mix_LF
ok 5 - checkout HEAD adds deleted intent-to-add file back to index
ok 22 - checkout -b after clone --no-checkout does a checkout of HEAD
# passed all 5 test(s)
1..5
ok 83 - fsck detects truncated loose object
ok 1254 - checkout attr=-text  aeol=lf core.autocrlf=input core.eol=native file=LF_mix_CR
*** t2026-checkout-pathspec-file.sh ***
ok 61 - #19: chdir_to_toplevel uses worktree, not git dir
ok 1255 - checkout attr=-text  aeol=lf core.autocrlf=input core.eol=native file=LF_nul
ok 24 - no advice given for explicit detached head state
ok 1256 - setup config for checkout attr=-text ident= aeol=crlf core.autocrlf=input
ok 12 - split the index when the index contains a racily clean cache entry #0
ok 1257 - setup LF checkout  with -c core.eol=native
ok 1 - setup
ok 1258 - setup CRLF checkout  with -c core.eol=native
ok 84 - create dangling-object repository
ok 1259 - setup LF_mix_CR checkout  with -c core.eol=native
ok 2 - git merge main
ok 32 - git read-tree -u --reset --recurse-submodules: updating to a missing submodule commit fails
ok 1260 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 62 - #19: chdir_to_toplevel uses worktree (from subdir)
ok 85 - fsck notices dangling objects
ok 3 - -m restores 2-way conflicted+resolved file
ok 1261 - setup LF_nul checkout  with -c core.eol=native
ok 86 - fsck --connectivity-only notices dangling objects
ok 4 - -m restores 3-way conflicted+resolved file
ok 23 - checkout -b to a new branch preserves mergeable changes despite sparse-checkout
ok 1262 - ls-files --eol attr=-text  aeol=crlf core.autocrlf=input core.eol=native
ok 24 - checkout -b rejects an invalid start point
ok 1263 - checkout attr=-text  aeol=crlf core.autocrlf=input core.eol=native file=LF
ok 25 - checkout -b rejects an extra path argument
# passed all 25 test(s)
1..25
ok 63 - #20a: core.worktree without GIT_DIR accepted (inside .git)
ok 1264 - checkout attr=-text  aeol=crlf core.autocrlf=input core.eol=native file=CRLF
ok 87 - fsck $name notices bogus $name
*** t2027-checkout-track.sh ***
ok 1265 - checkout attr=-text  aeol=crlf core.autocrlf=input core.eol=native file=CRLF_mix_LF
ok 1266 - checkout attr=-text  aeol=crlf core.autocrlf=input core.eol=native file=LF_mix_CR
ok 1267 - checkout attr=-text  aeol=crlf core.autocrlf=input core.eol=native file=LF_nul
ok 1 - setup
ok 64 - #20b/c: core.worktree and core.bare conflict
ok 1268 - setup config for checkout attr=text ident= aeol=lf core.autocrlf=input
ok 2 - checkout --no-overlay deletes files not in <tree-ish>
ok 88 - bogus head does not fallback to all heads
ok 25 - describe_detached_head prints no SHA-1 ellipsis when not asked to
ok 1269 - setup LF checkout  with -c core.eol=native
ok 3 - checkout --no-overlay removing last file from directory
ok 4 - checkout -p --overlay is disallowed
ok 1270 - setup CRLF checkout  with -c core.eol=native
ok 65 - #20d: core.worktree and core.bare OK when working tree not needed
ok 1271 - setup LF_mix_CR checkout  with -c core.eol=native
ok 89 - detect corrupt index file in fsck
ok 1272 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 5 - force checkout a conflict file creates stage zero entry
# passed all 5 test(s)
1..5
ok 1273 - setup LF_nul checkout  with -c core.eol=native
ok 66 - #21: setup, core.worktree warns before overriding core.bare
*** t2030-unresolve-info.sh ***
ok 1 - setup
ok 1274 - ls-files --eol attr=text  aeol=lf core.autocrlf=input core.eol=native
ok 90 - fsck error and recovery on invalid object type
ok 1275 - checkout attr=text  aeol=lf core.autocrlf=input core.eol=native file=LF
ok 1276 - checkout attr=text  aeol=lf core.autocrlf=input core.eol=native file=CRLF
ok 26 - describe_detached_head does print SHA-1 ellipsis when asked to
ok 5 - --no-overlay --theirs with D/F conflict deletes file
# passed all 26 test(s)
1..26
ok 67 - #21: explicit GIT_WORK_TREE and GIT_DIR at toplevel
ok 2 - --pathspec-from-file from stdin
ok 1277 - checkout attr=text  aeol=lf core.autocrlf=input core.eol=native file=CRLF_mix_LF
*** t2050-git-dir-relative.sh ***
ok 1278 - checkout attr=text  aeol=lf core.autocrlf=input core.eol=native file=LF_mix_CR
ok 1279 - checkout attr=text  aeol=lf core.autocrlf=input core.eol=native file=LF_nul
ok 91 - fsck error on gitattributes with excessive line lengths
ok 3 - --pathspec-from-file from file
ok 1280 - setup config for checkout attr=text ident= aeol=crlf core.autocrlf=input
ok 1281 - setup LF checkout  with -c core.eol=native
ok 1282 - setup CRLF checkout  with -c core.eol=native
ok 1283 - setup LF_mix_CR checkout  with -c core.eol=native
ok 4 - NUL delimiters
ok 68 - #21: explicit GIT_WORK_TREE and GIT_DIR in subdir
ok 1284 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 6 - wildcard pathspec matches file in subdirectory
# passed all 6 test(s)
1..6
ok 1 - setup
*** t2060-switch.sh ***
ok 1285 - setup LF_nul checkout  with -c core.eol=native
ok 1 - setup
ok 5 - LF delimiters
ok 2 - checkout --track -b creates a new tracking branch
ok 3 - checkout --track -b rejects an extra path argument
ok 1286 - ls-files --eol attr=text  aeol=crlf core.autocrlf=input core.eol=native
ok 6 - no trailing delimiter
ok 69 - #21: explicit GIT_WORK_TREE from parent of worktree
ok 1287 - checkout attr=text  aeol=crlf core.autocrlf=input core.eol=native file=LF
ok 2 - checkout of non-existing branch fails
ok 1288 - checkout attr=text  aeol=crlf core.autocrlf=input core.eol=native file=CRLF
ok 7 - CRLF delimiters
ok 1289 - checkout attr=text  aeol=crlf core.autocrlf=input core.eol=native file=CRLF_mix_LF
ok 1290 - checkout attr=text  aeol=crlf core.autocrlf=input core.eol=native file=LF_mix_CR
ok 3 - checkout of branch from multiple remotes fails #1
ok 1 - Setting up post-commit hook
ok 1291 - checkout attr=text  aeol=crlf core.autocrlf=input core.eol=native file=LF_nul
ok 8 - quotes
ok 33 - git read-tree -u --reset --recurse-submodules: submodule branch is not changed, detach HEAD instead
ok 1292 - setup config for checkout attr=auto ident= aeol=lf core.autocrlf=input
ok 70 - #21: explicit GIT_WORK_TREE from nephew of worktree
ok 2 - post-commit hook used ordinarily
ok 1293 - setup LF checkout  with -c core.eol=native
ok 9 - quotes not compatible with --pathspec-file-nul
ok 1294 - setup CRLF checkout  with -c core.eol=native
ok 1295 - setup LF_mix_CR checkout  with -c core.eol=native
ok 4 - when arg matches multiple remotes, do not fallback to interpreting as pathspec
ok 10 - only touches what was listed
ok 1296 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 3 - post-commit-hook created and used from top dir
ok 1297 - setup LF_nul checkout  with -c core.eol=native
ok 71 - #21: chdir_to_toplevel uses worktree, not git dir
ok 4 - post-commit-hook from sub dir
ok 4 - checkout --track -b overrides autoSetupMerge=inherit
# passed all 4 test(s)
1..4
# passed all 4 test(s)
1..4
ok 11 - error conditions
*** t2070-restore.sh ***
*** t2071-restore-patch.sh ***
# passed all 11 test(s)
1..11
ok 1298 - ls-files --eol attr=auto  aeol=lf core.autocrlf=input core.eol=native
ok 5 - checkout of branch from multiple remotes fails with advice
*** t2072-restore-pathspec-file.sh ***
ok 1299 - checkout attr=auto  aeol=lf core.autocrlf=input core.eol=native file=LF
ok 7 - git checkout --recurse-submodules: added submodule is checked out
ok 1300 - checkout attr=auto  aeol=lf core.autocrlf=input core.eol=native file=CRLF
ok 1301 - checkout attr=auto  aeol=lf core.autocrlf=input core.eol=native file=CRLF_mix_LF
ok 6 - checkout -p with multiple remotes does not print advice
ok 1302 - checkout attr=auto  aeol=lf core.autocrlf=input core.eol=native file=LF_mix_CR
ok 1303 - checkout attr=auto  aeol=lf core.autocrlf=input core.eol=native file=LF_nul
ok 72 - #21: chdir_to_toplevel uses worktree (from subdir)
ok 1 - setup
ok 1304 - setup config for checkout attr=auto ident= aeol=crlf core.autocrlf=input
ok 1305 - setup LF checkout  with -c core.eol=native
ok 1306 - setup CRLF checkout  with -c core.eol=native
ok 1 - setup
ok 2 - switch branch no arguments
ok 7 - checkout of branch from multiple remotes succeeds with checkout.defaultRemote #1
ok 1307 - setup LF_mix_CR checkout  with -c core.eol=native
ok 3 - switch branch
ok 1308 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 34 - git read-tree -u --reset --recurse-submodules: added submodule does remove untracked unignored file with same name when forced
ok 1309 - setup LF_nul checkout  with -c core.eol=native
ok 4 - switch and detach
ok 5 - suggestion to detach
ok 1310 - ls-files --eol attr=auto  aeol=crlf core.autocrlf=input core.eol=native
ok 8 - checkout of branch from a single remote succeeds #1
ok 1311 - checkout attr=auto  aeol=crlf core.autocrlf=input core.eol=native file=LF
ok 1312 - checkout attr=auto  aeol=crlf core.autocrlf=input core.eol=native file=CRLF
ok 6 - suggestion to detach is suppressed with advice.suggestDetachingHead=false
ok 1313 - checkout attr=auto  aeol=crlf core.autocrlf=input core.eol=native file=CRLF_mix_LF
ok 2 - add records switch clears
ok 1314 - checkout attr=auto  aeol=crlf core.autocrlf=input core.eol=native file=LF_mix_CR
ok 17 - diff with renames and conflicts
ok 73 - #22a: core.worktree = GIT_DIR = .git dir
ok 1315 - checkout attr=auto  aeol=crlf core.autocrlf=input core.eol=native file=LF_nul
ok 1316 - setup config for checkout attr= ident= aeol= core.autocrlf=false
ok 7 - switch and detach current branch
ok 9 - checkout of branch from a single remote succeeds #2
ok 1317 - setup LF checkout  with -c core.eol=native
ok 8 - git checkout --recurse-submodules: added submodule is checked out in empty dir
ok 1 - setup
ok 1 - setup
ok 1318 - setup CRLF checkout  with -c core.eol=native
ok 2 - restore without pathspec is not ok
ok 1319 - setup LF_mix_CR checkout  with -c core.eol=native
ok 2 - restore -p without pathspec is fine
ok 8 - switch and create branch
ok 3 - restore a file, ignoring branch of same name
ok 1320 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 1 - setup
ok 10 - --no-guess suppresses branch auto-vivification
ok 1321 - setup LF_nul checkout  with -c core.eol=native
ok 4 - restore a file on worktree from another ref
ok 2 - --pathspec-from-file from stdin
ok 1322 - ls-files --eol attr=  aeol= core.autocrlf=false core.eol=native
ok 9 - force create branch from HEAD
ok 1323 - checkout attr=  aeol= core.autocrlf=false core.eol=native file=LF
ok 3 - saying "n" does nothing
ok 3 - --pathspec-from-file from file
ok 11 - checkout.guess = false suppresses branch auto-vivification
ok 5 - restore a file in the index from another ref
ok 1324 - checkout attr=  aeol= core.autocrlf=false core.eol=native file=CRLF
ok 1325 - checkout attr=  aeol= core.autocrlf=false core.eol=native file=CRLF_mix_LF
ok 4 - NUL delimiters
ok 1326 - checkout attr=  aeol= core.autocrlf=false core.eol=native file=LF_mix_CR
ok 6 - restore a file in both the index and worktree from another ref
ok 1327 - checkout attr=  aeol= core.autocrlf=false core.eol=native file=LF_nul
ok 10 - new orphan branch from empty
ok 1328 - setup config for checkout attr= ident= aeol= core.autocrlf=true
ok 5 - LF delimiters
ok 4 - git restore -p
ok 3 - rm records reset clears
ok 1329 - setup LF checkout  with -c core.eol=native
ok 74 - #22b: core.worktree child of .git, GIT_DIR=.git
ok 11 - orphan branch works with --discard-changes
ok 1330 - setup CRLF checkout  with -c core.eol=native
ok 7 - restore --staged uses HEAD as source
ok 1331 - setup LF_mix_CR checkout  with -c core.eol=native
ok 6 - no trailing delimiter
ok 1332 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 12 - switching ignores file of same branch name
ok 5 - git restore -p with staged changes
ok 1333 - setup LF_nul checkout  with -c core.eol=native
ok 7 - CRLF delimiters
ok 8 - restore --worktree --staged uses HEAD as source
ok 8 - quotes
ok 9 - git checkout --recurse-submodules: replace tracked file with submodule checks out submodule
ok 1334 - ls-files --eol attr=  aeol= core.autocrlf=true core.eol=native
ok 35 - git read-tree -u --reset --recurse-submodules: replace submodule with a directory
ok 1335 - checkout attr=  aeol= core.autocrlf=true core.eol=native file=LF
ok 6 - git restore -p --source=HEAD
ok 1336 - checkout attr=  aeol= core.autocrlf=true core.eol=native file=CRLF
ok 9 - quotes not compatible with --pathspec-file-nul
ok 13 - guess and create branch
ok 1337 - checkout attr=  aeol= core.autocrlf=true core.eol=native file=CRLF_mix_LF
ok 14 - not switching when something is in progress
ok 1338 - checkout attr=  aeol= core.autocrlf=true core.eol=native file=LF_mix_CR
ok 4 - plumbing clears
ok 10 - only touches what was listed
ok 1339 - checkout attr=  aeol= core.autocrlf=true core.eol=native file=LF_nul
ok 1340 - setup config for checkout attr=auto ident= aeol= core.autocrlf=true
ok 1341 - setup LF checkout  with -c core.eol=native
ok 7 - git restore -p --source=@
ok 1342 - setup CRLF checkout  with -c core.eol=native
ok 75 - #22c: core.worktree = .git/.., GIT_DIR=.git
ok 1343 - setup LF_mix_CR checkout  with -c core.eol=native
ok 9 - restore --ignore-unmerged ignores unmerged entries
ok 11 - error conditions
ok 1344 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 1345 - setup LF_nul checkout  with -c core.eol=native
ok 8 - git restore -p --source=HEAD^
ok 12 - wildcard pathspec matches file in subdirectory
ok 10 - restore --staged adds deleted intent-to-add file back to index
# passed all 12 test(s)
1..12
ok 76 - #22.2: core.worktree and core.bare conflict
*** t2080-parallel-checkout-basics.sh ***
ok 1346 - ls-files --eol attr=auto  aeol= core.autocrlf=true core.eol=native
ok 77 - #23: setup
ok 1347 - checkout attr=auto  aeol= core.autocrlf=true core.eol=native file=LF
ok 5 - add records checkout -m undoes
ok 1348 - checkout attr=auto  aeol= core.autocrlf=true core.eol=native file=CRLF
ok 9 - git restore -p --source=HEAD^...
ok 1349 - checkout attr=auto  aeol= core.autocrlf=true core.eol=native file=CRLF_mix_LF
ok 11 - restore --staged invalidates cache tree for deletions
ok 1350 - checkout attr=auto  aeol= core.autocrlf=true core.eol=native file=LF_mix_CR
ok 15 - tracking info copied with autoSetupMerge=inherit
ok 1351 - checkout attr=auto  aeol= core.autocrlf=true core.eol=native file=LF_nul
ok 1352 - setup config for checkout attr=text ident= aeol= core.autocrlf=true
ok 78 - #23: explicit GIT_WORK_TREE and GIT_DIR at toplevel
ok 1353 - setup LF checkout  with -c core.eol=native
ok 12 - restore --merge to unresolve
ok 10 - git restore -p handles deletion
ok 1354 - setup CRLF checkout  with -c core.eol=native
ok 10 - git checkout --recurse-submodules: replace directory with submodule
ok 1355 - setup LF_mix_CR checkout  with -c core.eol=native
ok 6 - unmerge with plumbing
ok 1356 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 1357 - setup LF_nul checkout  with -c core.eol=native
ok 13 - restore --merge to unresolve after (mistaken) resolution
ok 11 - path limiting works: dir
ok 12 - setup more remotes with unconventional refspecs
ok 79 - #23: explicit GIT_WORK_TREE and GIT_DIR in subdir
ok 1358 - ls-files --eol attr=text  aeol= core.autocrlf=true core.eol=native
ok 1359 - checkout attr=text  aeol= core.autocrlf=true core.eol=native file=LF
ok 14 - restore --merge to unresolve after (mistaken) resolution
ok 13 - checkout of branch from multiple remotes fails #2
ok 1360 - checkout attr=text  aeol= core.autocrlf=true core.eol=native file=CRLF
ok 12 - path limiting works: -- dir
ok 1361 - checkout attr=text  aeol= core.autocrlf=true core.eol=native file=CRLF_mix_LF
ok 1362 - checkout attr=text  aeol= core.autocrlf=true core.eol=native file=LF_mix_CR
ok 80 - #23: explicit GIT_WORK_TREE from parent of worktree
ok 1363 - checkout attr=text  aeol= core.autocrlf=true core.eol=native file=LF_nul
ok 7 - unmerge can be done even after committing
ok 36 - git read-tree -u --reset --recurse-submodules: replace submodule containing a .git directory with a directory must fail
ok 1364 - setup config for checkout attr=text ident= aeol= core.autocrlf=input
ok 14 - checkout of branch from multiple remotes fails #3
ok 1365 - setup LF checkout  with -c core.eol=native
ok 1366 - setup CRLF checkout  with -c core.eol=native
ok 13 - path limiting works: HEAD^ -- dir
ok 1367 - setup LF_mix_CR checkout  with -c core.eol=native
ok 1368 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 1369 - setup LF_nul checkout  with -c core.eol=native
ok 81 - #23: explicit GIT_WORK_TREE from nephew of worktree
ok 15 - restore with merge options are incompatible with certain options
# passed all 15 test(s)
1..15
ok 15 - checkout of branch from a single remote succeeds #3
ok 14 - path limiting works: foo inside dir
*** t2081-parallel-checkout-collisions.sh ***
ok 15 - none of this moved HEAD
ok 1370 - ls-files --eol attr=text  aeol= core.autocrlf=input core.eol=native
# passed all 15 test(s)
1..15
ok 1371 - checkout attr=text  aeol= core.autocrlf=input core.eol=native file=LF
ok 8 - unmerge removal
*** t2082-parallel-checkout-attributes.sh ***
ok 1372 - checkout attr=text  aeol= core.autocrlf=input core.eol=native file=CRLF
ok 1373 - checkout attr=text  aeol= core.autocrlf=input core.eol=native file=CRLF_mix_LF
ok 82 - #23: chdir_to_toplevel uses worktree, not git dir
ok 1374 - checkout attr=text  aeol= core.autocrlf=input core.eol=native file=LF_mix_CR
ok 1375 - checkout attr=text  aeol= core.autocrlf=input core.eol=native file=LF_nul
ok 16 - switch back when temporarily detached and checked out elsewhere 
ok 1376 - setup config for checkout attr=auto ident= aeol= core.autocrlf=input
ok 16 - checkout of branch from a single remote succeeds #4
# passed all 16 test(s)
1..16
*** t2100-update-cache-badpath.sh ***
ok 1377 - setup LF checkout  with -c core.eol=native
ok 1378 - setup CRLF checkout  with -c core.eol=native
ok 11 - git checkout --recurse-submodules: nested submodules are checked out
ok 1379 - setup LF_mix_CR checkout  with -c core.eol=native
ok 83 - #23: chdir_to_toplevel uses worktree (from subdir)
ok 17 - checkout of branch with a file having the same name fails
ok 1380 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 1381 - setup LF_nul checkout  with -c core.eol=native
ok 9 - unmerge removal after committing
ok 18 - checkout of branch with a file in subdir having the same name fails
ok 84 - #24: bare repo has no worktree (gitfile case)
ok 1382 - ls-files --eol attr=auto  aeol= core.autocrlf=input core.eol=native
ok 1383 - checkout attr=auto  aeol= core.autocrlf=input core.eol=native file=LF
ok 1 # skip setup (missing CASE_INSENSITIVE_FS)
ok 2 # skip worker detects basename collision (missing CASE_INSENSITIVE_FS)
ok 1384 - checkout attr=auto  aeol= core.autocrlf=input core.eol=native file=CRLF
ok 3 # skip worker detects dirname collision (missing CASE_INSENSITIVE_FS)
ok 4 # skip do not follow symlinks colliding with leading dir (missing CASE_INSENSITIVE_FS of SYMLINKS,CASE_INSENSITIVE_FS)
ok 1385 - checkout attr=auto  aeol= core.autocrlf=input core.eol=native file=CRLF_mix_LF
ok 5 # skip collision report on clone (w/ racy file creation) (missing CASE_INSENSITIVE_FS)
ok 6 # skip collision report on clone (w/ colliding peer after the detected entry) (missing CASE_INSENSITIVE_FS of CASE_INSENSITIVE_FS,!MINGW,!CYGWIN)
ok 1386 - checkout attr=auto  aeol= core.autocrlf=input core.eol=native file=LF_mix_CR
# passed all 6 test(s)
1..6
ok 37 - git read-tree -u --reset --recurse-submodules: replace submodule with a file ignoring ignored files
*** t2101-update-index-reupdate.sh ***
ok 85 - #25: GIT_WORK_TREE accepted if GIT_DIR unset (bare gitfile case)
ok 1387 - checkout attr=auto  aeol= core.autocrlf=input core.eol=native file=LF_nul
ok 1388 - setup config for checkout attr=text ident= aeol= core.autocrlf=false
ok 19 - checkout <branch> -- succeeds, even if a file with the same name exists
ok 1389 - setup LF checkout  with -c core.eol=crlf
ok 1390 - setup CRLF checkout  with -c core.eol=crlf
ok 1391 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 1392 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 1 - parallel-checkout with ident
ok 1 - git update-index --add to add various paths.
ok 1393 - setup LF_nul checkout  with -c core.eol=crlf
ok 2 - git update-index to add conflicting path path0/file0 should fail.
ok 3 - git update-index to add conflicting path path1/file1 should fail.
ok 10 - rerere and rerere forget
ok 86 - #26: bare repo has no worktree (GIT_DIR -> gitfile case)
ok 4 - git update-index to add conflicting path path2 should fail.
ok 1394 - ls-files --eol attr=text  aeol= core.autocrlf=false core.eol=crlf
ok 5 - git update-index to add conflicting path path3 should fail.
# passed all 5 test(s)
1..5
ok 1395 - checkout attr=text  aeol= core.autocrlf=false core.eol=crlf file=LF
*** t2102-update-index-symlinks.sh ***
ok 87 - #27: setup
ok 1396 - checkout attr=text  aeol= core.autocrlf=false core.eol=crlf file=CRLF
ok 1397 - checkout attr=text  aeol= core.autocrlf=false core.eol=crlf file=CRLF_mix_LF
ok 1398 - checkout attr=text  aeol= core.autocrlf=false core.eol=crlf file=LF_mix_CR
ok 20 - loosely defined local base branch is reported correctly
ok 1399 - checkout attr=text  aeol= core.autocrlf=false core.eol=crlf file=LF_nul
ok 1400 - setup config for checkout attr=text ident= aeol= core.autocrlf=false
ok 2 - parallel-checkout with re-encoding
ok 1401 - setup LF checkout  with -c core.eol=lf
ok 21 - reject when arg could be part of dwim branch
ok 88 - #27: explicit GIT_WORK_TREE and GIT_DIR at toplevel
ok 1 - update-index --add
ok 1402 - setup CRLF checkout  with -c core.eol=lf
ok 1403 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 22 - disambiguate dwim branch and checkout path (1)
ok 2 - update-index --again
ok 1404 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 1405 - setup LF_nul checkout  with -c core.eol=lf
ok 38 - git read-tree -u --reset --recurse-submodules: modified submodule does update submodule work tree from invalid commit
ok 3 - update-index --remove --again
ok 11 - rerere and rerere forget (subdirectory)
ok 89 - #27: explicit GIT_WORK_TREE and GIT_DIR in subdir
ok 4 - first commit
ok 23 - disambiguate dwim branch and checkout path (2)
# passed all 23 test(s)
1..23
ok 1406 - ls-files --eol attr=text  aeol= core.autocrlf=false core.eol=lf
ok 1407 - checkout attr=text  aeol= core.autocrlf=false core.eol=lf file=LF
ok 5 - update-index again
ok 12 - git checkout --recurse-submodules: removed submodule removes submodules working tree
ok 1408 - checkout attr=text  aeol= core.autocrlf=false core.eol=lf file=CRLF
ok 3 - parallel-checkout with eol conversions
ok 1409 - checkout attr=text  aeol= core.autocrlf=false core.eol=lf file=CRLF_mix_LF
*** t2103-update-index-ignore-missing.sh ***
ok 1410 - checkout attr=text  aeol= core.autocrlf=false core.eol=lf file=LF_mix_CR
ok 12 - rerere forget (binary)
ok 6 - update-index --update from subdir
ok 90 - #27: explicit GIT_WORK_TREE from parent of worktree
ok 1 - preparation
ok 1411 - checkout attr=text  aeol= core.autocrlf=false core.eol=lf file=LF_nul
ok 2 - modify the symbolic link
ok 1412 - setup config for checkout attr=text ident= aeol= core.autocrlf=false
ok 3 - the index entry must still be a symbolic link
# passed all 3 test(s)
1..3
ok 1413 - setup LF checkout 
*** t2104-update-index-skip-worktree.sh ***
ok 1414 - setup CRLF checkout 
ok 7 - update-index --update with pathspec
# passed all 7 test(s)
1..7
ok 1415 - setup LF_mix_CR checkout 
*** t2105-update-index-gitfile.sh ***
ok 1416 - setup CRLF_mix_LF checkout 
ok 13 - rerere forget (add-add conflict)
ok 1417 - setup LF_nul checkout 
ok 91 - #27: explicit GIT_WORK_TREE from nephew of worktree
ok 1418 - ls-files --eol attr=text  aeol= core.autocrlf=false core.eol=
ok 1419 - checkout attr=text  aeol= core.autocrlf=false core.eol= file=LF
ok 1420 - checkout attr=text  aeol= core.autocrlf=false core.eol= file=CRLF
ok 1421 - checkout attr=text  aeol= core.autocrlf=false core.eol= file=CRLF_mix_LF
ok 1422 - checkout attr=text  aeol= core.autocrlf=false core.eol= file=LF_mix_CR
ok 4 - parallel-checkout and external filter
ok 92 - #27: chdir_to_toplevel uses worktree, not git dir
ok 1423 - checkout attr=text  aeol= core.autocrlf=false core.eol= file=LF_nul
ok 1424 - setup config for checkout attr=text ident= aeol= core.autocrlf=false
ok 1425 - setup LF checkout  with -c core.eol=native
ok 1426 - setup CRLF checkout  with -c core.eol=native
ok 1427 - setup LF_mix_CR checkout  with -c core.eol=native
ok 1428 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 1429 - setup LF_nul checkout  with -c core.eol=native
ok 93 - #27: chdir_to_toplevel uses worktree (from subdir)
ok 1 - setup
ok 2 - index is at version 2
ok 3 - update-index --skip-worktree
ok 1430 - ls-files --eol attr=text  aeol= core.autocrlf=false core.eol=native
ok 4 - index is at version 3 after having some skip-worktree entries
ok 1 - basics
ok 5 - ls-files -t
ok 94 - #28: core.worktree and core.bare conflict (gitfile case)
ok 1431 - checkout attr=text  aeol= core.autocrlf=false core.eol=native file=LF
ok 1 - submodule with absolute .git file
ok 1432 - checkout attr=text  aeol= core.autocrlf=false core.eol=native file=CRLF
ok 6 - update-index --no-skip-worktree
ok 2 - add gitlink to absolute .git file
ok 7 - index version is back to 2 when there is no skip-worktree entry
ok 1433 - checkout attr=text  aeol= core.autocrlf=false core.eol=native file=CRLF_mix_LF
ok 39 - git read-tree -u --reset --recurse-submodules: updating submodules fixes .git links
# passed all 7 test(s)
1..7
*** t2106-update-index-assume-unchanged.sh ***
ok 1434 - checkout attr=text  aeol= core.autocrlf=false core.eol=native file=LF_mix_CR
ok 95 - #29: setup
ok 1435 - checkout attr=text  aeol= core.autocrlf=false core.eol=native file=LF_nul
ok 2 - --ignore-missing --refresh
ok 1436 - setup config for checkout attr=auto ident= aeol= core.autocrlf=false
ok 1437 - setup LF checkout 
ok 3 - submodule with relative .git file
ok 1438 - setup CRLF checkout 
ok 4 - add gitlink to relative .git file
# passed all 4 test(s)
1..4
ok 1439 - setup LF_mix_CR checkout 
*** t2107-update-index-basic.sh ***
ok 13 - git checkout --recurse-submodules: removed submodule absorbs submodules .git directory
ok 1440 - setup CRLF_mix_LF checkout 
ok 96 - #29: explicit GIT_WORK_TREE and GIT_DIR at toplevel
ok 1441 - setup LF_nul checkout 
ok 3 - --unmerged --refresh
ok 5 - parallel-checkout and delayed checkout
# passed all 5 test(s)
1..5
ok 4 - --ignore-submodules --refresh (1)
ok 1442 - ls-files --eol attr=auto  aeol= core.autocrlf=false core.eol=
*** t2108-update-index-refresh-racy.sh ***
ok 1443 - checkout attr=auto  aeol= core.autocrlf=false core.eol= file=LF
ok 1444 - checkout attr=auto  aeol= core.autocrlf=false core.eol= file=CRLF
ok 97 - #29: explicit GIT_WORK_TREE and GIT_DIR in subdir
ok 1445 - checkout attr=auto  aeol= core.autocrlf=false core.eol= file=CRLF_mix_LF
ok 1446 - checkout attr=auto  aeol= core.autocrlf=false core.eol= file=LF_mix_CR
ok 5 - --ignore-submodules --refresh (2)
# passed all 5 test(s)
1..5
ok 1447 - checkout attr=auto  aeol= core.autocrlf=false core.eol= file=LF_nul
ok 13 - split the index when the index contains a racily clean cache entry #1
*** t2200-add-update.sh ***
ok 1448 - setup config for checkout attr=auto ident= aeol= core.autocrlf=false
ok 1449 - setup LF checkout  with -c core.eol=native
ok 1450 - setup CRLF checkout  with -c core.eol=native
ok 98 - #29: explicit GIT_WORK_TREE from parent of worktree
ok 1451 - setup LF_mix_CR checkout  with -c core.eol=native
ok 1452 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 1 - setup
ok 1 - update-index --nonsense fails
ok 1453 - setup LF_nul checkout  with -c core.eol=native
ok 2 - update-index --nonsense dumps usage
ok 2 - do not switch branches with dirty file
# passed all 2 test(s)
1..2
ok 3 - update-index -h with corrupt index
*** t2201-add-update-typechange.sh ***
ok 1454 - ls-files --eol attr=auto  aeol= core.autocrlf=false core.eol=native
ok 99 - #29: explicit GIT_WORK_TREE from nephew of worktree
ok 4 - --cacheinfo complains of missing arguments
ok 1455 - checkout attr=auto  aeol= core.autocrlf=false core.eol=native file=LF
ok 1456 - checkout attr=auto  aeol= core.autocrlf=false core.eol=native file=CRLF
ok 14 - resolve-undo keeps blobs from gc
ok 1457 - checkout attr=auto  aeol= core.autocrlf=false core.eol=native file=CRLF_mix_LF
ok 5 - --cacheinfo does not accept blob null sha1
# passed all 14 test(s)
1..14
ok 1458 - checkout attr=auto  aeol= core.autocrlf=false core.eol=native file=LF_mix_CR
*** t2202-add-addremove.sh ***
ok 1459 - checkout attr=auto  aeol= core.autocrlf=false core.eol=native file=LF_nul
ok 1 - setup
ok 1460 - setup config for checkout attr= ident= aeol=lf core.autocrlf=false
ok 100 - #29: chdir_to_toplevel uses worktree, not git dir
ok 1461 - setup LF checkout 
ok 40 - git read-tree -u --reset --recurse-submodules: changed submodule worktree is reset
ok 1462 - setup CRLF checkout 
ok 1 - setup repo for checkout with various types of changes
ok 1 - setup
ok 1463 - setup LF_mix_CR checkout 
ok 6 - --cacheinfo does not accept gitlink null sha1
ok 2 - update
ok 14 - git checkout --recurse-submodules: replace submodule with a file
ok 3 - update noticed a removal
ok 4 - update touched correct path
ok 1464 - setup CRLF_mix_LF checkout 
ok 2 - --refresh has no racy timestamps to fix
ok 1465 - setup LF_nul checkout 
ok 5 - update did not touch other tracked files
ok 101 - #29: chdir_to_toplevel uses worktree (from subdir)
ok 6 - update did not touch untracked files
ok 7 - --cacheinfo mode,sha1,path (new syntax)
ok 1466 - ls-files --eol attr=  aeol=lf core.autocrlf=false core.eol=
ok 7 - error out when passing untracked path
ok 102 - #30: core.worktree and core.bare conflict (gitfile version)
ok 1467 - checkout attr=  aeol=lf core.autocrlf=false core.eol= file=LF
ok 3 - --refresh should fix racy timestamp
ok 8 - .lock files cleaned up
ok 1468 - checkout attr=  aeol=lf core.autocrlf=false core.eol= file=CRLF
ok 8 - cache tree has not been corrupted
ok 18 - diff with directory/file conflicts
ok 1469 - checkout attr=  aeol=lf core.autocrlf=false core.eol= file=CRLF_mix_LF
ok 9 - update from a subdirectory
ok 9 - --chmod=+x and chmod=-x in the same argument list
ok 10 - change gets noticed
ok 1470 - checkout attr=  aeol=lf core.autocrlf=false core.eol= file=LF_mix_CR
ok 103 - #31: setup
ok 1471 - checkout attr=  aeol=lf core.autocrlf=false core.eol= file=LF_nul
ok 1472 - setup config for checkout attr= ident= aeol=crlf core.autocrlf=false
ok 11 - non-qualified update in subdir updates from the root
ok 4 - --really-refresh should fix racy timestamp
ok 1473 - setup LF checkout 
ok 1 - setup
ok 1474 - setup CRLF checkout 
ok 12 - replace a file with a symlink
ok 1475 - setup LF_mix_CR checkout 
ok 13 - add everything changed
ok 1 - setup
ok 1476 - setup CRLF_mix_LF checkout 
ok 104 - #31: explicit GIT_WORK_TREE and GIT_DIR at toplevel
ok 14 - touch and then add -u
ok 1477 - setup LF_nul checkout 
ok 10 - --index-version
# passed all 10 test(s)
1..10
ok 15 - touch and then add explicitly
ok 2 - git add --all
*** t2203-add-intent.sh ***
ok 5 - --refresh should fix racy timestamp if other file needs update
ok 1478 - ls-files --eol attr=  aeol=crlf core.autocrlf=false core.eol=
ok 3 - Just "git add" is a no-op
# passed all 3 test(s)
1..3
ok 1479 - checkout attr=  aeol=crlf core.autocrlf=false core.eol= file=LF
ok 16 - add -n -u should not add but just report
*** t2204-add-ignored.sh ***
ok 1480 - checkout attr=  aeol=crlf core.autocrlf=false core.eol= file=CRLF
ok 105 - #31: explicit GIT_WORK_TREE and GIT_DIR in subdir
ok 1481 - checkout attr=  aeol=crlf core.autocrlf=false core.eol= file=CRLF_mix_LF
ok 1482 - checkout attr=  aeol=crlf core.autocrlf=false core.eol= file=LF_mix_CR
ok 1483 - checkout attr=  aeol=crlf core.autocrlf=false core.eol= file=LF_nul
ok 1484 - setup config for checkout attr= ident= aeol=lf core.autocrlf=true
ok 2 - modify
ok 1485 - setup LF checkout 
ok 3 - diff-files
ok 6 - --refresh should fix racy timestamp if racy file needs update
ok 1486 - setup CRLF checkout 
# passed all 6 test(s)
1..6
ok 4 - diff-index
ok 17 - add -u resolves unmerged paths
*** t2205-add-worktree-config.sh ***
ok 1487 - setup LF_mix_CR checkout 
ok 106 - #31: explicit GIT_WORK_TREE from parent of worktree
ok 1488 - setup CRLF_mix_LF checkout 
ok 18 - "add -u non-existent" should fail
ok 5 - add -u
not ok 15 - git checkout --recurse-submodules: replace submodule with a file must fail with untracked files # TODO known breakage
ok 1489 - setup LF_nul checkout 
ok 41 - git_test_func: added submodule creates empty directory
ok 6 - commit -a
ok 1490 - ls-files --eol attr=  aeol=lf core.autocrlf=true core.eol=
# passed all 6 test(s)
1..6
ok 107 - #31: explicit GIT_WORK_TREE from nephew of worktree
*** t2300-cd-to-toplevel.sh ***
ok 1491 - checkout attr=  aeol=lf core.autocrlf=true core.eol= file=LF
ok 19 - "commit -a" implies "add -u" if index becomes empty
ok 1 - setup
ok 1492 - checkout attr=  aeol=lf core.autocrlf=true core.eol= file=CRLF
# passed all 19 test(s)
1..19
ok 1493 - checkout attr=  aeol=lf core.autocrlf=true core.eol= file=CRLF_mix_LF
ok 2 - no complaints for unignored file
*** t2400-worktree-add.sh ***
ok 1494 - checkout attr=  aeol=lf core.autocrlf=true core.eol= file=LF_mix_CR
ok 1 - intent to add
ok 3 - no complaints for unignored dir/file
ok 1495 - checkout attr=  aeol=lf core.autocrlf=true core.eol= file=LF_nul
ok 2 - git status
ok 1496 - setup config for checkout attr= ident= aeol=crlf core.autocrlf=true
ok 4 - no complaints for unignored dir
ok 1497 - setup LF checkout 
ok 108 - #31: chdir_to_toplevel uses worktree, not git dir
ok 1498 - setup CRLF checkout 
ok 3 - git status with porcelain v2
ok 5 - no complaints for unignored d*
ok 4 - check result of "add -N"
ok 6 - complaints for ignored ign
ok 1499 - setup LF_mix_CR checkout 
ok 7 - complaints for ignored ign output
ok 92 - fsck error on gitattributes with excessive size
ok 1500 - setup CRLF_mix_LF checkout 
ok 5 - intent to add is just an ordinary empty blob
ok 8 - complaints for ignored ign with unignored file
ok 9 - complaints for ignored ign with unignored file output
ok 1501 - setup LF_nul checkout 
ok 6 - intent to add does not clobber existing paths
ok 10 - complaints for ignored dir/ign
ok 11 - complaints for ignored dir/ign output
ok 109 - #31: chdir_to_toplevel uses worktree (from subdir)
ok 1 - 1a: setup--config worktree
# passed all 109 test(s)
1..109
ok 2 - 1b: pre-add all
ok 12 - complaints for ignored dir/ign with unignored file
ok 13 - complaints for ignored dir/ign with unignored file output
ok 1502 - ls-files --eol attr=  aeol=crlf core.autocrlf=true core.eol=
ok 14 - complaints for ignored dir/sub
ok 3 - 1c: pre-add dir all
ok 15 - complaints for ignored dir/sub output
ok 1503 - checkout attr=  aeol=crlf core.autocrlf=true core.eol= file=LF
ok 1504 - checkout attr=  aeol=crlf core.autocrlf=true core.eol= file=CRLF
ok 93 - fsck detects problems in worktree index
ok 16 - complaints for ignored dir/sub with unignored file
ok 17 - complaints for ignored dir/sub with unignored file output
ok 2 - sequential checkout
ok 1505 - checkout attr=  aeol=crlf core.autocrlf=true core.eol= file=CRLF_mix_LF
ok 18 - complaints for ignored dir/sub/ign
ok 1506 - checkout attr=  aeol=crlf core.autocrlf=true core.eol= file=LF_mix_CR
ok 19 - complaints for ignored dir/sub/ign output
ok 4 - 1d: post-add tracked
ok 7 - i-t-a entry is simply ignored
ok 1507 - checkout attr=  aeol=crlf core.autocrlf=true core.eol= file=LF_nul
ok 1508 - setup config for checkout attr=-text ident=ident aeol= core.autocrlf=true
ok 20 - complaints for ignored dir/sub/ign with unignored file
ok 1 - at physical root
ok 21 - complaints for ignored dir/sub/ign with unignored file output
ok 5 - 1e: post-add untracked
ok 1509 - setup LF checkout  with -c core.eol=lf
ok 1 - setup
ok 22 - complaints for ignored sub/file
ok 23 - complaints for ignored sub/file output
ok 94 - fsck reports problems in current worktree index without filename
ok 1510 - setup CRLF checkout  with -c core.eol=lf
# passed all 94 test(s)
1..94
*** t2401-worktree-prune.sh ***
ok 2 - "add" an existing worktree
ok 1511 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 24 - complaints for ignored sub/file with unignored file
ok 25 - complaints for ignored sub/file with unignored file output
ok 8 - can commit with an unrelated i-t-a entry in index
ok 1512 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 3 - "add" an existing empty worktree
ok 2 - at physical subdir
ok 26 - complaints for ignored sub
ok 27 - complaints for ignored sub output
ok 4 - "add" using shorthand - fails when no previous branch
ok 1513 - setup LF_nul checkout  with -c core.eol=lf
ok 6 - 2a: setup--set git-dir
ok 19 - log with pathspec outside sparse definition
ok 28 - complaints for ignored sub with unignored file
ok 29 - complaints for ignored sub with unignored file output
ok 7 - 2b: pre-add all
ok 30 - complaints for ignored sub/file
ok 31 - complaints for ignored sub/file output
ok 9 - can "commit -a" with an i-t-a entry
ok 1514 - ls-files --eol attr=-text ident aeol= core.autocrlf=true core.eol=lf
ok 8 - 2c: pre-add dir all
ok 32 - complaints for ignored sub/file with unignored file
ok 3 - at symbolic root
ok 33 - complaints for ignored sub/file with unignored file output
ok 1515 - checkout attr=-text ident aeol= core.autocrlf=true core.eol=lf file=LF
ok 1516 - checkout attr=-text ident aeol= core.autocrlf=true core.eol=lf file=CRLF
ok 34 - complaints for ignored sub/ign
ok 35 - complaints for ignored sub/ign output
ok 1517 - checkout attr=-text ident aeol= core.autocrlf=true core.eol=lf file=CRLF_mix_LF
ok 9 - 2d: post-add tracked
*** t2402-worktree-list.sh ***
ok 36 - complaints for ignored sub/ign with unignored file
ok 37 - complaints for ignored sub/ign with unignored file output
ok 5 - "add" using - shorthand
ok 1518 - checkout attr=-text ident aeol= core.autocrlf=true core.eol=lf file=LF_mix_CR
ok 6 - "add" refuses to checkout locked branch
ok 42 - git_test_func: added submodule leaves existing empty directory alone
ok 10 - 2e: post-add untracked
ok 4 - at symbolic subdir
ok 38 - complaints for ignored sub in dir
ok 1519 - checkout attr=-text ident aeol= core.autocrlf=true core.eol=lf file=LF_nul
ok 7 - checking out paths not complaining about linked checkouts
ok 39 - complaints for ignored sub in dir output
ok 1520 - setup config for checkout attr=-text ident=ident aeol=lf core.autocrlf=true
ok 10 - cache-tree invalidates i-t-a paths
ok 1521 - setup LF checkout  with -c core.eol=lf
ok 11 - 3a: setup--add repo dir
ok 40 - complaints for ignored sub/file in dir
ok 41 - complaints for ignored sub/file in dir output
ok 1522 - setup CRLF checkout  with -c core.eol=lf
ok 12 - 3b: ignored
ok 1523 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 42 - complaints for ignored sub/ign in dir
ok 43 - complaints for ignored sub/ign in dir output
ok 1524 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 5 - at internal symbolic subdir
ok 13 - 3c: add repo
# passed all 5 test(s)
1..5
# passed all 13 test(s)
1..13
ok 44 - complaints for ignored ign in sub
ok 8 - "add" worktree
ok 1525 - setup LF_nul checkout  with -c core.eol=lf
ok 45 - complaints for ignored ign in sub output
*** t2403-worktree-move.sh ***
*** t2404-worktree-config.sh ***
ok 11 - cache-tree does not ignore dir that has i-t-a entries
ok 1 - initialize
ok 46 - complaints for ignored file in sub
ok 47 - complaints for ignored file in sub output
ok 2 - worktree prune on normal repo
ok 9 - "add" worktree with lock
# passed all 47 test(s)
1..47
ok 1526 - ls-files --eol attr=-text ident aeol=lf core.autocrlf=true core.eol=lf
*** t2405-worktree-submodule.sh ***
ok 3 - prune files inside $GIT_DIR/worktrees
ok 1527 - checkout attr=-text ident aeol=lf core.autocrlf=true core.eol=lf file=LF
ok 1528 - checkout attr=-text ident aeol=lf core.autocrlf=true core.eol=lf file=CRLF
ok 4 - prune directories without gitdir
ok 10 - "add" worktree with lock and reason
ok 12 - cache-tree does skip dir that becomes empty
ok 11 - "add" worktree with reason but no lock
ok 1529 - checkout attr=-text ident aeol=lf core.autocrlf=true core.eol=lf file=CRLF_mix_LF
ok 1530 - checkout attr=-text ident aeol=lf core.autocrlf=true core.eol=lf file=LF_mix_CR
ok 1531 - checkout attr=-text ident aeol=lf core.autocrlf=true core.eol=lf file=LF_nul
ok 13 - commit: ita entries ignored in empty initial commit check
ok 5 - prune directories with unreadable gitdir
ok 1532 - setup config for checkout attr=-text ident=ident aeol=crlf core.autocrlf=true
ok 12 - "add" worktree from a subdir
ok 6 - prune directories with invalid gitdir
ok 1533 - setup LF checkout  with -c core.eol=lf
ok 7 - prune directories with gitdir pointing to nowhere
ok 1534 - setup CRLF checkout  with -c core.eol=lf
ok 16 - git checkout --recurse-submodules: worktrees of nested submodules are removed
ok 8 - not prune locked checkout
ok 1535 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 14 - commit: ita entries ignored in empty commit check
ok 13 - "add" from a linked checkout
ok 1536 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 1537 - setup LF_nul checkout  with -c core.eol=lf
ok 1 - setup
ok 9 - not prune recent checkouts
ok 2 - rev-parse --git-common-dir on main worktree
ok 10 - not prune proper checkouts
ok 1538 - ls-files --eol attr=-text ident aeol=crlf core.autocrlf=true core.eol=lf
ok 1 - setup
ok 14 - "add" worktree creating new branch
ok 1539 - checkout attr=-text ident aeol=crlf core.autocrlf=true core.eol=lf file=LF
ok 3 - rev-parse --git-path objects linked worktree
ok 15 - die the same branch is already checked out
ok 2 - config --worktree in single worktree
ok 1540 - checkout attr=-text ident aeol=crlf core.autocrlf=true core.eol=lf file=CRLF
ok 1541 - checkout attr=-text ident aeol=crlf core.autocrlf=true core.eol=lf file=CRLF_mix_LF
ok 1542 - checkout attr=-text ident aeol=crlf core.autocrlf=true core.eol=lf file=LF_mix_CR
ok 11 - prune duplicate (linked/linked)
ok 15 - rename detection finds the right names
ok 1 - setup
ok 2 - lock main worktree
ok 1543 - checkout attr=-text ident aeol=crlf core.autocrlf=true core.eol=lf file=LF_nul
ok 1544 - setup config for checkout attr=text ident=ident aeol=lf core.autocrlf=true
ok 3 - add worktrees
ok 3 - lock linked worktree
ok 4 - config --worktree without extension
ok 1545 - setup LF checkout  with -c core.eol=lf
ok 16 - refuse to reset a branch in use elsewhere
ok 1546 - setup CRLF checkout  with -c core.eol=lf
ok 4 - "list" all worktrees from main
ok 20 - blame with pathspec inside sparse definition
ok 5 - enable worktreeConfig extension
ok 4 - lock linked worktree from another worktree
ok 1547 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 17 - die the same branch is already checked out (symlink)
ok 1548 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 5 - lock worktree twice
ok 43 - git_test_func: replace tracked file with submodule creates empty directory
ok 6 - lock worktree twice (from the locked worktree)
ok 1549 - setup LF_nul checkout  with -c core.eol=lf
ok 6 - config is shared as before
ok 7 - unlock main worktree
ok 8 - unlock linked worktree
ok 18 - not die the same branch is already checked out
ok 12 - prune duplicate (main/linked)
ok 16 - double rename detection in status
ok 9 - unlock worktree twice
ok 19 - not die on re-checking out current branch
ok 10 - move non-worktree
ok 7 - config is shared (set from another worktree)
ok 5 - "list" all worktrees from linked
ok 1550 - ls-files --eol attr=text ident aeol=lf core.autocrlf=true core.eol=lf
ok 11 - move locked worktree
ok 1551 - checkout attr=text ident aeol=lf core.autocrlf=true core.eol=lf file=LF
ok 1552 - checkout attr=text ident aeol=lf core.autocrlf=true core.eol=lf file=CRLF
ok 8 - config private to main worktree
ok 20 - "add" from a bare repo
ok 1553 - checkout attr=text ident aeol=lf core.autocrlf=true core.eol=lf file=CRLF_mix_LF
ok 21 - checkout from a bare repo without "add"
ok 12 - move worktree
ok 3 - parallel checkout
ok 13 - move main worktree
ok 1554 - checkout attr=text ident aeol=lf core.autocrlf=true core.eol=lf file=LF_mix_CR
ok 1555 - checkout attr=text ident aeol=lf core.autocrlf=true core.eol=lf file=LF_nul
ok 6 - "list" all worktrees --porcelain
ok 9 - config private to linked worktree
ok 1556 - setup config for checkout attr=text ident=ident aeol=crlf core.autocrlf=true
ok 1557 - setup LF checkout  with -c core.eol=lf
ok 14 - move worktree to another dir
ok 1558 - setup CRLF checkout  with -c core.eol=lf
ok 17 - i-t-a files shown as new for "diff", "diff-files"; not-new for "diff --cached"
ok 10 - core.bare no longer for main only
ok 13 - not prune proper worktrees inside linked worktree with relative paths
# passed all 13 test(s)
1..13
ok 1559 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 22 - "add" default branch of a bare repo
*** t2406-worktree-repair.sh ***
ok 1560 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 11 - per-worktree core.bare is picked up
ok 1561 - setup LF_nul checkout  with -c core.eol=lf
ok 7 - "list" all worktrees --porcelain -z
ok 18 - "diff HEAD" includes ita as new files
ok 8 - "list" -z fails without --porcelain
ok 12 - config.worktree no longer read without extension
ok 1562 - ls-files --eol attr=text ident aeol=crlf core.autocrlf=true core.eol=lf
# passed all 12 test(s)
1..12
ok 15 - move locked worktree (force)
ok 1563 - checkout attr=text ident aeol=crlf core.autocrlf=true core.eol=lf file=LF
*** t2407-worktree-heads.sh ***
ok 1564 - checkout attr=text ident aeol=crlf core.autocrlf=true core.eol=lf file=CRLF
ok 1565 - checkout attr=text ident aeol=crlf core.autocrlf=true core.eol=lf file=CRLF_mix_LF
ok 19 - apply --intent-to-add
ok 1566 - checkout attr=text ident aeol=crlf core.autocrlf=true core.eol=lf file=LF_mix_CR
ok 16 - refuse to move worktree atop existing path
# passed all 19 test(s)
1..19
ok 1567 - checkout attr=text ident aeol=crlf core.autocrlf=true core.eol=lf file=LF_nul
ok 9 - "list" all worktrees with locked annotation
ok 1568 - setup config for checkout attr=auto ident=ident aeol=lf core.autocrlf=true
*** t2500-untracked-overwriting.sh ***
ok 1569 - setup LF checkout  with -c core.eol=lf
ok 1 - setup: create origin repos
ok 17 - git checkout --recurse-submodules: modified submodule updates submodule work tree
ok 1570 - setup CRLF checkout  with -c core.eol=lf
ok 1571 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 23 - "add" to bare repo with worktree config
ok 1572 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 1573 - setup LF_nul checkout  with -c core.eol=lf
ok 17 - move atop existing but missing worktree
ok 1 - setup
ok 10 - "list" all worktrees --porcelain with locked
ok 1574 - ls-files --eol attr=auto ident aeol=lf core.autocrlf=true core.eol=lf
ok 1575 - checkout attr=auto ident aeol=lf core.autocrlf=true core.eol=lf file=LF
ok 1576 - checkout attr=auto ident aeol=lf core.autocrlf=true core.eol=lf file=CRLF
ok 2 - skip missing worktree
ok 21 - blame with pathspec outside sparse definition
ok 1577 - checkout attr=auto ident aeol=lf core.autocrlf=true core.eol=lf file=CRLF_mix_LF
ok 1578 - checkout attr=auto ident aeol=lf core.autocrlf=true core.eol=lf file=LF_mix_CR
ok 44 - git_test_func: replace directory with submodule
ok 1579 - checkout attr=auto ident aeol=lf core.autocrlf=true core.eol=lf file=LF_nul
ok 1580 - setup config for checkout attr=auto ident=ident aeol=crlf core.autocrlf=true
ok 3 - worktree path not directory
ok 1581 - setup LF checkout  with -c core.eol=lf
ok 11 - "list" all worktrees --porcelain with locked reason newline escaped
ok 1582 - setup CRLF checkout  with -c core.eol=lf
ok 2 - setup: clone superproject to create main worktree
ok 1583 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 1584 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 24 - checkout with grafts
ok 3 - add superproject worktree
ok 4 - don't clobber .git repo
ok 1585 - setup LF_nul checkout  with -c core.eol=lf
not ok 4 - submodule is checked out just after worktree add # TODO known breakage
ok 12 - "list" all worktrees with prunable annotation
ok 1586 - ls-files --eol attr=auto ident aeol=crlf core.autocrlf=true core.eol=lf
ok 5 - repair missing .git file
ok 1587 - checkout attr=auto ident aeol=crlf core.autocrlf=true core.eol=lf file=LF
ok 13 - "list" all worktrees --porcelain with prunable
ok 18 - move a repo with uninitialized submodule
ok 1588 - checkout attr=auto ident aeol=crlf core.autocrlf=true core.eol=lf file=CRLF
ok 1589 - checkout attr=auto ident aeol=crlf core.autocrlf=true core.eol=lf file=CRLF_mix_LF
ok 1590 - checkout attr=auto ident aeol=crlf core.autocrlf=true core.eol=lf file=LF_mix_CR
ok 1591 - checkout attr=auto ident aeol=crlf core.autocrlf=true core.eol=lf file=LF_nul
ok 1592 - setup config for checkout attr=-text ident=ident aeol= core.autocrlf=false
ok 6 - repair bogus .git file
ok 1 - reset --hard will nuke untracked files/dirs
ok 1593 - setup LF checkout  with -c core.eol=lf
ok 14 - "list" all worktrees with prunable consistent with "prune"
ok 1594 - setup CRLF checkout  with -c core.eol=lf
ok 18 - git checkout --recurse-submodules: updating to a missing submodule commit fails
ok 15 - "list" --verbose and --porcelain mutually exclusive
ok 1595 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 25 - "add" from relative HEAD
ok 5 - add superproject worktree and initialize submodules
ok 1596 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 6 - submodule is checked out just after submodule update in linked worktree
ok 1597 - setup LF_nul checkout  with -c core.eol=lf
ok 26 - "add -b" with <branch> omitted
ok 7 - repair incorrect .git file
ok 4 - sequential-fallback checkout
ok 19 - not move a repo with initialized submodule
ok 20 - remove main worktree
ok 1598 - ls-files --eol attr=-text ident aeol= core.autocrlf=false core.eol=lf
ok 7 - add superproject worktree and manually add submodule worktree
ok 1599 - checkout attr=-text ident aeol= core.autocrlf=false core.eol=lf file=LF
ok 8 - submodule is checked out after manually adding submodule worktree
ok 16 - "list" all worktrees --verbose with locked
ok 21 - remove locked worktree
ok 27 - "add --detach" with <branch> omitted
ok 1600 - checkout attr=-text ident aeol= core.autocrlf=false core.eol=lf file=CRLF
ok 2 - reset --merge will preserve untracked files/dirs
ok 8 - repair .git file from main/.git
ok 1601 - checkout attr=-text ident aeol= core.autocrlf=false core.eol=lf file=CRLF_mix_LF
ok 22 - remove worktree with dirty tracked file
ok 1602 - checkout attr=-text ident aeol= core.autocrlf=false core.eol=lf file=LF_mix_CR
ok 45 - git_test_func: removed submodule leaves submodule directory and its contents in place
ok 1603 - checkout attr=-text ident aeol= core.autocrlf=false core.eol=lf file=LF_nul
ok 23 - remove worktree with untracked file
ok 28 - "add" with <branch> omitted
ok 1604 - setup config for checkout attr=-text ident=ident aeol=lf core.autocrlf=false
ok 1605 - setup LF checkout  with -c core.eol=lf
ok 24 - force remove worktree with untracked file
ok 17 - "list" all worktrees --verbose with prunable
ok 1606 - setup CRLF checkout  with -c core.eol=lf
ok 1607 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 25 - remove missing worktree
ok 1608 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 9 - repair .git file from linked worktree
ok 29 - "add" checks out existing branch of dwimd name
ok 1609 - setup LF_nul checkout  with -c core.eol=lf
ok 30 - "add <path>" dwim fails with checked out branch
ok 26 - NOT remove missing-but-locked worktree
ok 3 - reset --keep will preserve untracked files/dirs
ok 1610 - ls-files --eol attr=-text ident aeol=lf core.autocrlf=false core.eol=lf
ok 27 - proper error when worktree not found
ok 31 - "add --force" with existing dwimd name doesnt die
ok 18 - bare repo setup
ok 10 - repair .git file from bare.git
ok 1611 - checkout attr=-text ident aeol=lf core.autocrlf=false core.eol=lf file=LF
ok 11 - invalid worktree path
ok 1612 - checkout attr=-text ident aeol=lf core.autocrlf=false core.eol=lf file=CRLF
ok 1613 - checkout attr=-text ident aeol=lf core.autocrlf=false core.eol=lf file=CRLF_mix_LF
ok 32 - "add" no auto-vivify with --detach and <branch> omitted
ok 33 - 'worktree add' with '-b poodle -B poodle bamboo main' has mutually exclusive options
ok 1614 - checkout attr=-text ident aeol=lf core.autocrlf=false core.eol=lf file=LF_mix_CR
ok 12 - repo not found; .git not file
ok 34 - 'worktree add' with '-b poodle --detach bamboo main' has mutually exclusive options
ok 1615 - checkout attr=-text ident aeol=lf core.autocrlf=false core.eol=lf file=LF_nul
ok 19 - "list" all worktrees from bare main
ok 28 - remove locked worktree (force)
ok 1616 - setup config for checkout attr=-text ident=ident aeol=crlf core.autocrlf=false
ok 35 - 'worktree add' with '-B poodle --detach bamboo main' has mutually exclusive options
ok 36 - 'worktree add' with '--orphan --detach bamboo' has mutually exclusive options
ok 22 - checkout and reset (mixed)
ok 1617 - setup LF checkout  with -c core.eol=lf
ok 37 - 'worktree add' with '--orphan --no-checkout bamboo' has mutually exclusive options
ok 13 - repo not found; .git not referencing repo
ok 1618 - setup CRLF checkout  with -c core.eol=lf
ok 38 - 'worktree add' with '--orphan bamboo main' has mutually exclusive options
ok 1619 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 39 - 'worktree add' with '--orphan -b bamboo wtdir/ main' has mutually exclusive options
ok 20 - "list" all worktrees --porcelain from bare main
ok 1620 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 4 - checkout -m does not nuke untracked file
ok 14 - repo not found; .git file broken
ok 1621 - setup LF_nul checkout  with -c core.eol=lf
ok 40 - "add -B" fails if the branch is checked out
ok 29 - remove cleans up .git/worktrees when empty
ok 9 - checkout --recurse-submodules uses $GIT_DIR for submodules in a linked worktree
ok 21 - "list" all worktrees from linked with a bare main
ok 1622 - ls-files --eol attr=-text ident aeol=crlf core.autocrlf=false core.eol=lf
ok 15 - repair broken gitdir
ok 22 - bare repo cleanup
ok 1623 - checkout attr=-text ident aeol=crlf core.autocrlf=false core.eol=lf file=LF
ok 30 - remove a repo with uninitialized submodule
ok 41 - add -B
ok 1624 - checkout attr=-text ident aeol=crlf core.autocrlf=false core.eol=lf file=CRLF
ok 1625 - checkout attr=-text ident aeol=crlf core.autocrlf=false core.eol=lf file=CRLF_mix_LF
ok 16 - repair incorrect gitdir
ok 1626 - checkout attr=-text ident aeol=crlf core.autocrlf=false core.eol=lf file=LF_mix_CR
ok 1627 - checkout attr=-text ident aeol=crlf core.autocrlf=false core.eol=lf file=LF_nul
ok 42 - add --quiet
ok 1628 - setup config for checkout attr=text ident=ident aeol=lf core.autocrlf=false
ok 1629 - setup LF checkout  with -c core.eol=lf
ok 17 - repair gitdir (implicit) from linked worktree
ok 1630 - setup CRLF checkout  with -c core.eol=lf
ok 23 - broken main worktree still at the top
ok 19 - git checkout --recurse-submodules: submodule branch is not changed, detach HEAD instead
ok 1631 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 46 - git_test_func: removed submodule leaves submodule containing a .git directory alone
ok 1632 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 1 - setup
ok 43 - add --quiet -b
ok 18 - unable to repair gitdir (implicit) from main worktree
ok 10 - core.worktree is removed in $GIT_DIR/modules/<name>/config, not in $GIT_COMMON_DIR/modules/<name>/config
ok 1633 - setup LF_nul checkout  with -c core.eol=lf
ok 11 - unsetting core.worktree does not prevent running commands directly against the submodule repository
# still have 1 known breakage(s)
# passed all remaining 10 test(s)
1..11
ok 5 - parallel checkout on clone
ok 44 - "add --orphan"
ok 1634 - ls-files --eol attr=text ident aeol=lf core.autocrlf=false core.eol=lf
*** t2501-cwd-empty.sh ***
ok 1635 - checkout attr=text ident aeol=lf core.autocrlf=false core.eol=lf file=LF
ok 1636 - checkout attr=text ident aeol=lf core.autocrlf=false core.eol=lf file=CRLF
ok 31 - not remove a repo with initialized submodule
ok 2 - refuse to overwrite: checked out in worktree
ok 19 - repair multiple gitdir files
ok 1637 - checkout attr=text ident aeol=lf core.autocrlf=false core.eol=lf file=CRLF_mix_LF
ok 45 - "add --orphan (no -b)"
ok 1638 - checkout attr=text ident aeol=lf core.autocrlf=false core.eol=lf file=LF_mix_CR
ok 24 - linked worktrees are sorted
ok 5 - git rebase --abort and untracked files
ok 1639 - checkout attr=text ident aeol=lf core.autocrlf=false core.eol=lf file=LF_nul
ok 1640 - setup config for checkout attr=text ident=ident aeol=crlf core.autocrlf=false
ok 1641 - setup LF checkout  with -c core.eol=lf
ok 46 - "add --orphan --quiet"
ok 1642 - setup CRLF checkout  with -c core.eol=lf
ok 3 - refuse to overwrite: worktree in bisect
ok 1643 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 1644 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 20 - repair moved main and linked worktrees
ok 32 - move worktree with absolute path to relative path
ok 1645 - setup LF_nul checkout  with -c core.eol=lf
ok 14 - split the index when the index contains a racily clean cache entry #2
ok 20 - git checkout --recurse-submodules: added submodule doesn't remove untracked file with same name
ok 33 - move worktree with relative path to absolute path
# passed all 33 test(s)
1..33
ok 47 - "add --orphan" fails if the branch already exists
ok 1646 - ls-files --eol attr=text ident aeol=crlf core.autocrlf=false core.eol=lf
ok 25 - linked worktrees with relative paths are shown with absolute paths
ok 1647 - checkout attr=text ident aeol=crlf core.autocrlf=false core.eol=lf file=LF
ok 4 - refuse to overwrite: worktree in rebase (apply)
ok 1648 - checkout attr=text ident aeol=crlf core.autocrlf=false core.eol=lf file=CRLF
ok 26 - worktree path when called in .git directory
# passed all 26 test(s)
1..26
ok 1649 - checkout attr=text ident aeol=crlf core.autocrlf=false core.eol=lf file=CRLF_mix_LF
*** t3000-ls-files-others.sh ***
ok 48 - "add --orphan" with empty repository
*** t3001-ls-files-others-exclude.sh ***
ok 1650 - checkout attr=text ident aeol=crlf core.autocrlf=false core.eol=lf file=LF_mix_CR
ok 1651 - checkout attr=text ident aeol=crlf core.autocrlf=false core.eol=lf file=LF_nul
ok 5 - refuse to overwrite: worktree in rebase (merge)
ok 1652 - setup config for checkout attr=auto ident=ident aeol=lf core.autocrlf=false
ok 21 - repair copied main and linked worktrees
ok 1653 - setup LF checkout  with -c core.eol=lf
ok 49 - "add" worktree with orphan branch and lock
ok 1654 - setup CRLF checkout  with -c core.eol=lf
ok 1655 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 1656 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 47 - git_test_func: replace submodule with a directory must fail
ok 1657 - setup LF_nul checkout  with -c core.eol=lf
ok 6 - git rebase fast forwarding and untracked files
ok 50 - "add" worktree with orphan branch, lock, and reason
ok 1658 - ls-files --eol attr=auto ident aeol=lf core.autocrlf=false core.eol=lf
ok 6 - refuse to overwrite: worktree in rebase with --update-refs
ok 22 - repair worktree with relative path with missing gitfile
ok 23 - checkout and reset (merge)
ok 1659 - checkout attr=auto ident aeol=lf core.autocrlf=false core.eol=lf file=LF
ok 1660 - checkout attr=auto ident aeol=lf core.autocrlf=false core.eol=lf file=CRLF
ok 1661 - checkout attr=auto ident aeol=lf core.autocrlf=false core.eol=lf file=CRLF_mix_LF
ok 1662 - checkout attr=auto ident aeol=lf core.autocrlf=false core.eol=lf file=LF_mix_CR
ok 7 - refuse to fetch over ref: checked out
ok 51 - 'worktree add' show orphan hint in bad/orphan HEAD w/ no opts
ok 1663 - checkout attr=auto ident aeol=lf core.autocrlf=false core.eol=lf file=LF_nul
ok 1664 - setup config for checkout attr=auto ident=ident aeol=crlf core.autocrlf=false
ok 21 - git checkout --recurse-submodules: added submodule removes an untracked ignored file
ok 1665 - setup LF checkout  with -c core.eol=lf
ok 23 - repair absolute worktree to use relative paths
ok 1666 - setup CRLF checkout  with -c core.eol=lf
ok 1 - git ls-files --others with various exclude options.
ok 1667 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 1668 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 2 - git ls-files --others with \r\n line endings.
ok 1 - setup 
ok 1 - setup
ok 8 - refuse to fetch over ref: worktree in bisect
ok 1669 - setup LF_nul checkout  with -c core.eol=lf
ok 2 - setup: expected output
ok 3 - setup skip-worktree gitignore
ok 3 - ls-files --others
ok 52 - 'worktree add' show orphan hint in bad/orphan HEAD w/ -b
ok 4 - git ls-files --others with various exclude options.
ok 4 - ls-files --others --directory
ok 6 - sequential-fallback checkout on clone
ok 5 - --no-empty-directory hides empty directory
ok 5 - restore gitignore
ok 6 - ls-files --others handles non-submodule .git
ok 1670 - ls-files --eol attr=auto ident aeol=crlf core.autocrlf=false core.eol=lf
ok 1671 - checkout attr=auto ident aeol=crlf core.autocrlf=false core.eol=lf file=LF
ok 6 - git status honors core.excludesfile
ok 2 - checkout does not clean cwd incidentally
ok 24 - repair relative worktree to use absolute paths
# passed all 24 test(s)
1..24
ok 7 - trailing slash in exclude allows directory match(1)
*** t3002-ls-files-dashpath.sh ***
ok 1672 - checkout attr=auto ident aeol=crlf core.autocrlf=false core.eol=lf file=CRLF
ok 8 - trailing slash in exclude allows directory match (2)
ok 1673 - checkout attr=auto ident aeol=crlf core.autocrlf=false core.eol=lf file=CRLF_mix_LF
not ok 7 - git rebase --autostash and untracked files # TODO known breakage
ok 9 - trailing slash in exclude forces directory match (1)
ok 1674 - checkout attr=auto ident aeol=crlf core.autocrlf=false core.eol=lf file=LF_mix_CR
ok 9 - refuse to fetch over ref: worktree in rebase
ok 53 - 'worktree add' show orphan hint in bad/orphan HEAD w/ -B
ok 10 - trailing slash in exclude forces directory match (2)
ok 1675 - checkout attr=auto ident aeol=crlf core.autocrlf=false core.eol=lf file=LF_nul
ok 3 - checkout fails if cwd needs to be removed
ok 11 - negated exclude matches can override previous ones
ok 1676 - setup config for checkout attr=-text ident=ident aeol= core.autocrlf=input
ok 12 - excluded directory overrides content patterns
ok 1677 - setup LF checkout  with -c core.eol=lf
ok 13 - negated directory doesn't affect content patterns
ok 1678 - setup CRLF checkout  with -c core.eol=lf
ok 14 - subdirectory ignore (setup)
ok 15 - subdirectory ignore (toplevel)
ok 1679 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 10 - refuse to overwrite when in error states
ok 4 - reset --hard does not clean cwd incidentally
ok 16 - subdirectory ignore (l1/l2)
ok 17 - subdirectory ignore (l1)
ok 54 - 'worktree add' doesn't show orphan hint in bad/orphan HEAD w/ --quiet
ok 18 - show/hide empty ignored directory (setup)
ok 1680 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 7 - ls-files --others with symlinked submodule
ok 19 - show empty ignored directory with --directory
ok 1681 - setup LF_nul checkout  with -c core.eol=lf
ok 20 - hide empty ignored directory with --no-empty-directory
ok 48 - git_test_func: replace submodule containing a .git directory with a directory must fail
ok 21 - show/hide empty ignored sub-directory (setup)
ok 8 - setup nested pathspec search
ok 5 - reset --hard fails if cwd needs to be removed
ok 7 - compare the working trees
ok 22 - show empty ignored sub-directory with --directory
ok 9 - ls-files -o --directory with single deep dir pathspec
ok 23 - hide empty ignored sub-directory with --no-empty-directory
ok 1682 - ls-files --eol attr=-text ident aeol= core.autocrlf=input core.eol=lf
ok 24 - pattern matches prefix completely
ok 10 - ls-files -o --directory with multiple dir pathspecs
ok 55 - local clone from linked checkout
ok 3 - requested identities are strict
ok 1683 - checkout attr=-text ident aeol= core.autocrlf=input core.eol=lf file=LF
ok 25 - ls-files with "**" patterns
ok 11 - refuse to overwrite during rebase with --update-refs
ok 11 - ls-files -o --directory with mix dir/file pathspecs
ok 26 - ls-files with "**" patterns and --directory
ok 1684 - checkout attr=-text ident aeol= core.autocrlf=input core.eol=lf file=CRLF
ok 27 - ls-files with "**" patterns and no slashes
# passed all 27 test(s)
1..27
ok 12 - ls-files -o --directory with glob filetype match
ok 4 - get GIT_DEFAULT_BRANCH without configuration
ok 1685 - checkout attr=-text ident aeol= core.autocrlf=input core.eol=lf file=CRLF_mix_LF
ok 12 - $EDITOR and friends are unchanged
ok 6 - merge does not clean cwd incidentally
ok 1 - setup
# passed all 12 test(s)
1..12
ok 1686 - checkout attr=-text ident aeol= core.autocrlf=input core.eol=lf file=LF_mix_CR
*** t3003-ls-files-exclude.sh ***
ok 13 - ls-files -o --directory with mix of tracked states
ok 56 - local clone --shared from linked checkout
ok 1687 - checkout attr=-text ident aeol= core.autocrlf=input core.eol=lf file=LF_nul
ok 2 - git ls-files without path restriction.
ok 5 - get GIT_DEFAULT_BRANCH with configuration
ok 14 - ls-files -o --directory with glob filetype match only
ok 1688 - setup config for checkout attr=-text ident=ident aeol=lf core.autocrlf=input
ok 6 - get GIT_EDITOR without configuration
ok 3 - git ls-files with path restriction.
ok 15 - ls-files -o --directory to get immediate paths under one dir only
ok 1689 - setup LF checkout  with -c core.eol=lf
*** t3004-ls-files-basic.sh ***
ok 4 - git ls-files with path restriction with --.
ok 7 - merge fails if cwd needs to be removed; recursive friendly
ok 7 - get GIT_EDITOR with configuration
ok 1690 - setup CRLF checkout  with -c core.eol=lf
ok 5 - git ls-files with path restriction with -- --.
ok 8 - get GIT_EDITOR with environment variable GIT_EDITOR
ok 57 - "add" worktree with --no-checkout
ok 16 - ls-files -o avoids listing untracked non-matching gitdir
ok 9 - get GIT_EDITOR with environment variable EDITOR
# passed all 16 test(s)
1..16
ok 1691 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 6 - git ls-files with no path restriction.
not ok 22 - git checkout --recurse-submodules: replace submodule with a directory # TODO known breakage
# passed all 6 test(s)
1..6
*** t3005-ls-files-relative.sh ***
ok 1692 - setup CRLF_mix_LF checkout  with -c core.eol=lf
*** t3006-ls-files-long.sh ***
ok 58 - "add" worktree with --checkout
ok 10 - get GIT_EDITOR with configuration and environment variable GIT_EDITOR
ok 1693 - setup LF_nul checkout  with -c core.eol=lf
not ok 8 - git stash and untracked files # TODO known breakage
ok 8 - merge fails if cwd needs to be removed
ok 11 - get GIT_EDITOR with configuration and environment variable EDITOR
ok 1694 - ls-files --eol attr=-text ident aeol=lf core.autocrlf=input core.eol=lf
ok 12 - get GIT_SEQUENCE_EDITOR without configuration
ok 1695 - checkout attr=-text ident aeol=lf core.autocrlf=input core.eol=lf file=LF
ok 1696 - checkout attr=-text ident aeol=lf core.autocrlf=input core.eol=lf file=CRLF
ok 13 - get GIT_SEQUENCE_EDITOR with configuration
ok 59 - put a worktree under rebase
ok 1697 - checkout attr=-text ident aeol=lf core.autocrlf=input core.eol=lf file=CRLF_mix_LF
ok 14 - get GIT_SEQUENCE_EDITOR with environment variable
ok 9 - cherry-pick does not clean cwd incidentally
ok 60 - add a worktree, checking out a rebased branch
ok 1698 - checkout attr=-text ident aeol=lf core.autocrlf=input core.eol=lf file=LF_mix_CR
ok 15 - get GIT_SEQUENCE_EDITOR with configuration and environment variable
ok 1699 - checkout attr=-text ident aeol=lf core.autocrlf=input core.eol=lf file=LF_nul
ok 1700 - setup config for checkout attr=-text ident=ident aeol=crlf core.autocrlf=input
not ok 49 - git_test_func: replace submodule with a file must fail # TODO known breakage
ok 16 - GIT_SHELL_PATH points to a valid executable
ok 17 # skip GIT_SHELL_PATH points to a suitable shell (missing MINGW)
ok 1 - create repo with file
ok 1701 - setup LF checkout  with -c core.eol=lf
ok 2 - ls-files output contains file (cached)
ok 18 - GIT_ATTR_SYSTEM produces expected output
ok 10 - cherry-pick fails if cwd needs to be removed
ok 3 - ls-files output contains file (modified)
ok 4 - add file to gitignore
ok 1702 - setup CRLF checkout  with -c core.eol=lf
ok 8 - submodules can use parallel checkout
ok 1 - ls-files in empty repository
ok 5 - ls-files output contains file (cached)
ok 19 - GIT_ATTR_GLOBAL points to the correct location
ok 6 - ls-files output contains file (modified)
ok 2 - ls-files with nonexistent path
ok 61 - checking out a rebased branch from another worktree
ok 1703 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 3 - ls-files with nonsense option
ok 7 - ls-files -i -c lists only tracked-but-ignored files
ok 24 - checkout and reset (keep)
ok 62 - not allow to delete a branch under rebase
# passed all 7 test(s)
1..7
ok 1704 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 20 - GIT_CONFIG_SYSTEM points to the correct location
*** t3007-ls-files-recurse-submodules.sh ***
ok 11 - rebase does not clean cwd incidentally
ok 63 - rename a branch under rebase not allowed
ok 1705 - setup LF_nul checkout  with -c core.eol=lf
ok 4 - ls-files -h in corrupt repository
ok 1 - setup
ok 2 - overly-long path by itself is not a problem
ok 1 - prepare
ok 21 - GIT_CONFIG_GLOBAL points to the correct location
ok 22 - git var -l lists variables
ok 1706 - ls-files --eol attr=-text ident aeol=crlf core.autocrlf=input core.eol=lf
ok 3 - overly-long path does not replace another by mistake
ok 2 - ls-files with mixed levels
# passed all 3 test(s)
1..3
ok 23 - git var -l lists config
ok 64 - check out from current worktree branch ok
ok 12 - rebase fails if cwd needs to be removed
*** t3008-ls-files-lazy-init-name-hash.sh ***
ok 1707 - checkout attr=-text ident aeol=crlf core.autocrlf=input core.eol=lf file=LF
ok 5 - ls-files with absolute paths to symlinks
ok 3 - ls-files -c
ok 9 - git am --abort and untracked dir vs. unmerged file
ok 1708 - checkout attr=-text ident aeol=crlf core.autocrlf=input core.eol=lf file=CRLF
ok 24 - git var -l lists multiple global configs
ok 4 - ls-files -o
# passed all 5 test(s)
1..5
ok 1709 - checkout attr=-text ident aeol=crlf core.autocrlf=input core.eol=lf file=CRLF_mix_LF
ok 25 - git var -l does not split multiline editors
# passed all 4 test(s)
1..4
ok 26 - listing and asking for variables are exclusive
*** t3009-ls-files-others-nonsubmodule.sh ***
*** t3010-ls-files-killed-modified.sh ***
ok 27 - `git var -l` works even without HOME
ok 1710 - checkout attr=-text ident aeol=crlf core.autocrlf=input core.eol=lf file=LF_mix_CR
# passed all 27 test(s)
1..27
*** t3011-common-prefixes-and-directory-traversal.sh ***
ok 13 - revert does not clean cwd incidentally
ok 1711 - checkout attr=-text ident aeol=crlf core.autocrlf=input core.eol=lf file=LF_nul
ok 9 - parallel checkout respects --[no]-force
ok 1712 - setup config for checkout attr=text ident=ident aeol=lf core.autocrlf=input
ok 1713 - setup LF checkout  with -c core.eol=lf
ok 1714 - setup CRLF checkout  with -c core.eol=lf
ok 14 - revert fails if cwd needs to be removed
ok 1715 - setup LF_mix_CR checkout  with -c core.eol=lf
not ok 23 - git checkout --recurse-submodules: replace submodule containing a .git directory with a directory must absorb the git dir # TODO known breakage
ok 65 - checkout a branch under bisect
ok 1716 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 66 - rename a branch under bisect not allowed
ok 1717 - setup LF_nul checkout  with -c core.eol=lf
ok 15 - rm does not clean cwd incidentally
ok 1718 - ls-files --eol attr=text ident aeol=lf core.autocrlf=input core.eol=lf
ok 1719 - checkout attr=text ident aeol=lf core.autocrlf=input core.eol=lf file=LF
ok 67 - --track sets up tracking
ok 1720 - checkout attr=text ident aeol=lf core.autocrlf=input core.eol=lf file=CRLF
ok 16 - apply does not remove cwd incidentally
not ok 50 - git_test_func: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 1721 - checkout attr=text ident aeol=lf core.autocrlf=input core.eol=lf file=CRLF_mix_LF
ok 10 - parallel checkout checks for symlinks in leading dirs
ok 1722 - checkout attr=text ident aeol=lf core.autocrlf=input core.eol=lf file=LF_mix_CR
ok 1723 - checkout attr=text ident aeol=lf core.autocrlf=input core.eol=lf file=LF_nul
ok 1724 - setup config for checkout attr=text ident=ident aeol=crlf core.autocrlf=input
ok 17 - clean does not remove cwd incidentally
ok 1725 - setup LF checkout  with -c core.eol=lf
ok 1726 - setup CRLF checkout  with -c core.eol=lf
ok 1727 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 10 - git am --skip and untracked dir vs deleted file
ok 1 - no buffer overflow in lazy_init_name_hash
# still have 2 known breakage(s)
# passed all remaining 8 test(s)
1..10
ok 1728 - setup CRLF_mix_LF checkout  with -c core.eol=lf
# passed all 1 test(s)
1..1
ok 1 - setup
*** t3012-ls-files-dedup.sh ***
ok 2 - git ls-files -o shows the right entries
ok 1 - setup directory structure and submodules
ok 1729 - setup LF_nul checkout  with -c core.eol=lf
ok 3 - git ls-files -o --exclude-standard shows the right entries
ok 2 - ls-files correctly outputs files in submodule
ok 4 - git ls-files -o untracked_dir recurses
ok 1 - setup: directories
ok 1 - git update-index --add to add various paths.
ok 18 - stash does not remove cwd incidentally
ok 5 - git ls-files -o untracked_dir/ recurses
*** t3013-ls-files-format.sh ***
ok 2 - ls-files --others handles untracked git repositories
ok 6 - git ls-files -o --directory untracked_dir does not recurse
ok 3 - --stage
# passed all 2 test(s)
1..2
ok 1730 - ls-files --eol attr=text ident aeol=crlf core.autocrlf=input core.eol=lf
ok 7 - git ls-files -o --directory untracked_dir/ does not recurse
ok 2 - git ls-files -k to show killed files.
ok 19 - `rm -rf dir` only removes a subset of dir
*** t3020-ls-files-error-unmatch.sh ***
ok 4 - ls-files correctly outputs files in submodule with -z
ok 8 - git ls-files -o untracked_repo does not recurse
ok 3 - git ls-files -k output (w/o icase)
ok 1731 - checkout attr=text ident aeol=crlf core.autocrlf=input core.eol=lf file=LF
ok 4 - git ls-files -k output (w/ icase)
ok 9 - git ls-files -o untracked_repo/ does not recurse
ok 1732 - checkout attr=text ident aeol=crlf core.autocrlf=input core.eol=lf file=CRLF
ok 5 - ls-files does not output files not added to a repo
ok 20 - `rm -rf dir` even with only tracked files will remove something else
ok 5 - git ls-files -m to show modified files.
ok 10 - git ls-files -o untracked_dir untracked_repo recurses into untracked_dir only
ok 1733 - checkout attr=text ident aeol=crlf core.autocrlf=input core.eol=lf file=CRLF_mix_LF
ok 6 - validate git ls-files -m output.
ok 21 - git version continues working from a deleted dir
# passed all 6 test(s)
1..6
ok 11 - git ls-files -o untracked_dir/ untracked_repo/ recurses into untracked_dir only
ok 1734 - checkout attr=text ident aeol=crlf core.autocrlf=input core.eol=lf file=LF_mix_CR
ok 12 - git ls-files -o --directory untracked_dir untracked_repo does not recurse
ok 1735 - checkout attr=text ident aeol=crlf core.autocrlf=input core.eol=lf file=LF_nul
*** t3040-subprojects-basic.sh ***
ok 1736 - setup config for checkout attr=auto ident=ident aeol=lf core.autocrlf=input
ok 13 - git ls-files -o --directory untracked_dir/ untracked_repo/ does not recurse
ok 1737 - setup LF checkout  with -c core.eol=lf
ok 14 - git ls-files -o .git shows nothing
ok 68 - "add" <path> <remote/branch> w/ no HEAD
ok 15 - git ls-files -o .git/ shows nothing
ok 1738 - setup CRLF checkout  with -c core.eol=lf
ok 1739 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 11 - "git checkout ." report should not include failed entries
ok 16 - git ls-files -o untracked_* recurses appropriately
# passed all 11 test(s)
1..11
ok 1740 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 24 - git checkout --recurse-submodules: replace submodule with a file works ignores ignored files in submodule
not ok 17 - git ls-files -o untracked_*/ recurses appropriately # TODO known breakage
ok 1741 - setup LF_nul checkout  with -c core.eol=lf
ok 18 - git ls-files -o --directory untracked_* does not recurse
ok 19 - git ls-files -o --directory untracked_*/ does not recurse
ok 1742 - ls-files --eol attr=auto ident aeol=lf core.autocrlf=input core.eol=lf
ok 20 - git ls-files -o consistent between one or two dirs
ok 1 - usage: --format is incompatible with -s
ok 1743 - checkout attr=auto ident aeol=lf core.autocrlf=input core.eol=lf file=LF
*** t3050-subprojects-fetch.sh ***
ok 2 - usage: --format is incompatible with -o
ok 3 - usage: --format is incompatible with -k
ok 1744 - checkout attr=auto ident aeol=lf core.autocrlf=input core.eol=lf file=CRLF
ok 4 - usage: --format is incompatible with -t
ok 21 - git status --ignored shows same files under dir with or without pathspec
# still have 1 known breakage(s)
# passed all remaining 20 test(s)
1..21
ok 5 - usage: --format is incompatible with --resolve-undo
ok 1745 - checkout attr=auto ident aeol=lf core.autocrlf=input core.eol=lf file=CRLF_mix_LF
ok 6 - usage: --format is incompatible with --deduplicate
ok 7 - usage: --format is incompatible with --eol
*** t3060-ls-files-with-tree.sh ***
ok 1746 - checkout attr=auto ident aeol=lf core.autocrlf=input core.eol=lf file=LF_mix_CR
ok 1 - setup
ok 1747 - checkout attr=auto ident aeol=lf core.autocrlf=input core.eol=lf file=LF_nul
ok 1 - setup
ok 25 - reset with pathspecs inside sparse definition
ok 1748 - setup config for checkout attr=auto ident=ident aeol=crlf core.autocrlf=input
ok 2 - git ls-files --error-unmatch should fail with unmatched path.
ok 3 - git ls-files --error-unmatch should succeed with matched paths.
# passed all 3 test(s)
1..3
ok 1749 - setup LF checkout  with -c core.eol=lf
*** t3070-wildmatch.sh ***
ok 2 - git ls-files --deduplicate to show unique unmerged path
ok 6 - ls-files recurses more than 1 level
ok 1750 - setup CRLF checkout  with -c core.eol=lf
ok 8 - setup
ok 7 - ls-files works with GIT_DIR
ok 1 - setup: create superproject
ok 1751 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 9 - git ls-files --format objectmode v.s. -s
ok 1752 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 10 - git ls-files --format objectname v.s. -s
ok 51 - git_test_func: modified submodule does not update submodule work tree
ok 22 - rm -r with -C leaves submodule if cwd inside
ok 1753 - setup LF_nul checkout  with -c core.eol=lf
ok 11 - git ls-files --format objecttype
ok 12 - git ls-files --format objectsize
ok 3 - git ls-files -d -m --deduplicate with different display options
# passed all 3 test(s)
1..3
ok 1754 - ls-files --eol attr=auto ident aeol=crlf core.autocrlf=input core.eol=lf
ok 13 - git ls-files --format objectsize:padded
*** t3100-ls-tree-restrict.sh ***
ok 1755 - checkout attr=auto ident aeol=crlf core.autocrlf=input core.eol=lf file=LF
ok 69 - --no-track avoids setting up tracking
ok 14 - git ls-files --format v.s. --eol
ok 1756 - checkout attr=auto ident aeol=crlf core.autocrlf=input core.eol=lf file=CRLF
ok 70 - "add" <path> <non-existent-branch> fails
ok 15 - git ls-files --format path v.s. -s
ok 1757 - checkout attr=auto ident aeol=crlf core.autocrlf=input core.eol=lf file=CRLF_mix_LF
ok 16 - git ls-files --format with relative path
ok 1758 - checkout attr=auto ident aeol=crlf core.autocrlf=input core.eol=lf file=LF_mix_CR
ok 17 - git ls-files --format with -m
ok 1759 - checkout attr=auto ident aeol=crlf core.autocrlf=input core.eol=lf file=LF_nul
ok 2 - setup: create subprojects
ok 1760 - setup config for checkout attr= ident=ident aeol= core.autocrlf=false
ok 3 - check if fsck ignores the subprojects
ok 18 - git ls-files --format with -d
ok 1761 - setup LF checkout  with -c core.eol=lf
ok 1 - setup
ok 19 - git ls-files --format v.s -s
ok 1762 - setup CRLF checkout  with -c core.eol=lf
ok 20 - git ls-files --format with --debug
ok 1763 - setup LF_mix_CR checkout  with -c core.eol=lf
# passed all 20 test(s)
1..20
ok 4 - check if commit in a subproject detected
ok 1 - cleanup after previous file test
*** t3101-ls-tree-dirname.sh ***
ok 1764 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 1765 - setup LF_nul checkout  with -c core.eol=lf
ok 2 - setup match file test for foo
ok 3 - wildmatch: match 'foo' 'foo'
ok 5 - check if a changed subproject HEAD can be committed
ok 1 - setup
ok 6 - check if diff-index works for subproject elements
ok 4 - wildmatch (via ls-files): match 'foo' 'foo'
ok 2 - usage
ok 5 - iwildmatch: match 'foo' 'foo'
ok 2 - clone
ok 7 - check if diff-tree works for subproject elements
ok 3 - git ls-files --with-tree should succeed from subdir
ok 8 - check if git diff works for subproject elements
ok 1766 - ls-files --eol attr= ident aeol= core.autocrlf=false core.eol=lf
ok 4 - git ls-files --with-tree should add entries from named tree.
ok 6 - iwildmatch (via ls-files): match 'foo' 'foo'
ok 7 - pathmatch: match 'foo' 'foo'
ok 8 - --recurse-submodules and pathspecs setup
ok 1767 - checkout attr= ident aeol= core.autocrlf=false core.eol=lf file=LF
ok 5 - no duplicates in --with-tree output
ok 8 - pathmatch (via ls-files): match 'foo' 'foo'
ok 23 - rm -r leaves submodule if cwd inside
ok 1768 - checkout attr= ident aeol= core.autocrlf=false core.eol=lf file=CRLF
ok 9 - ipathmatch: match 'foo' 'foo'
ok 1769 - checkout attr= ident aeol= core.autocrlf=false core.eol=lf file=CRLF_mix_LF
ok 3 - advance
ok 10 - ipathmatch (via ls-files): match 'foo' 'foo'
ok 1770 - checkout attr= ident aeol= core.autocrlf=false core.eol=lf file=LF_mix_CR
ok 9 - check if clone works
ok 1771 - checkout attr= ident aeol= core.autocrlf=false core.eol=lf file=LF_nul
ok 25 - git -c submodule.recurse=true checkout: modified submodule updates submodule work tree
ok 11 - cleanup after previous file test
ok 1772 - setup config for checkout attr= ident=ident aeol= core.autocrlf=true
ok 9 - inactive submodule
ok 1 - setup
ok 1773 - setup LF checkout  with -c core.eol=lf
ok 12 - setup match file test for foo
ok 10 - --recurse-submodules and pathspecs
ok 13 - wildmatch: no match 'foo' 'bar'
ok 2 - ls-tree plain
ok 10 - removing and adding subproject
ok 1774 - setup CRLF checkout  with -c core.eol=lf
ok 11 - --recurse-submodules and pathspecs
ok 14 - wildmatch (via ls-files): no match 'bar' 'foo'
ok 1775 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 15 - iwildmatch: no match 'foo' 'bar'
ok 3 - ls-tree recursive
ok 12 - --recurse-submodules and pathspecs
ok 11 - checkout in superproject
ok 71 - "add" <path> <branch> dwims
# passed all 11 test(s)
1..11
ok 1776 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 4 - ls-tree recursive with -t
ok 16 - iwildmatch (via ls-files): no match 'bar' 'foo'
ok 17 - pathmatch: no match 'foo' 'bar'
ok 1777 - setup LF_nul checkout  with -c core.eol=lf
ok 4 - fetch
ok 5 - ls-tree recursive with -d
ok 6 - setup: output in a conflict
ok 18 - pathmatch (via ls-files): no match 'bar' 'foo'
*** t3102-ls-tree-wildcards.sh ***
# passed all 4 test(s)
1..4
ok 19 - ipathmatch: no match 'foo' 'bar'
ok 6 - ls-tree filtered with path
*** t3103-ls-tree-misc.sh ***
ok 20 - ipathmatch (via ls-files): no match 'bar' 'foo'
ok 13 - --recurse-submodules and pathspecs
ok 1778 - ls-files --eol attr= ident aeol= core.autocrlf=true core.eol=lf
ok 7 - ls-tree filtered with path1 path0
ok 1 - setup
ok 7 - output in a conflict
ok 21 - cleanup after previous file test
ok 1779 - checkout attr= ident aeol= core.autocrlf=true core.eol=lf file=LF
ok 26 - reset with pathspecs outside sparse definition
ok 2 - ls-tree plain
ok 8 - ls-tree filtered with path0/
ok 22 - setup match file test for 
ok 23 - wildmatch: match '' ''
ok 8 - output with removed .git/index
ok 1780 - checkout attr= ident aeol= core.autocrlf=true core.eol=lf file=CRLF
not ok 24 - wildmatch (via ls-files): match skip '' '' # TODO known breakage
ok 25 - iwildmatch: match '' ''
# passed all 8 test(s)
1..8
ok 14 - --recurse-submodules and pathspecs
not ok 26 - iwildmatch (via ls-files): match skip '' '' # TODO known breakage
ok 3 - ls-tree recursive
ok 9 - ls-tree filtered with path2
ok 27 - pathmatch: match '' ''
ok 1781 - checkout attr= ident aeol= core.autocrlf=true core.eol=lf file=CRLF_mix_LF
not ok 28 - pathmatch (via ls-files): match skip '' '' # TODO known breakage
ok 24 - rm -rf removes submodule even if cwd inside
*** t3104-ls-tree-format.sh ***
ok 29 - ipathmatch: match '' ''
not ok 30 - ipathmatch (via ls-files): match skip '' '' # TODO known breakage
ok 1782 - checkout attr= ident aeol= core.autocrlf=true core.eol=lf file=LF_mix_CR
ok 10 - ls-tree filtered with path2/
# passed all 24 test(s)
1..24
ok 31 - cleanup after previous file test
ok 4 - ls-tree filter 1.txt
ok 1783 - checkout attr= ident aeol= core.autocrlf=true core.eol=lf file=LF_nul
ok 11 - ls-tree filtered with path2/baz
*** t3105-ls-tree-output.sh ***
ok 15 - --recurse-submodules and relative paths
ok 32 - setup match file test for foo
ok 5 - ls-tree filter path1/b/c/1.txt
ok 1784 - setup config for checkout attr=auto ident=ident aeol= core.autocrlf=true
ok 33 - wildmatch: match 'foo' '???'
ok 16 - --recurse-submodules does not support --error-unmatch
ok 12 - ls-tree filtered with path2/bak
ok 6 - ls-tree filter all 1.txt files
ok 34 - wildmatch (via ls-files): match '???' 'foo'
ok 1785 - setup LF checkout  with -c core.eol=lf
ok 35 - iwildmatch: match 'foo' '???'
ok 13 - ls-tree -t filtered with path2/bak
ok 1786 - setup CRLF checkout  with -c core.eol=lf
ok 7 - ls-tree filter directories
ok 17 - --recurse-submodules parses submodule repo config
ok 36 - iwildmatch (via ls-files): match '???' 'foo'
ok 14 - ls-tree with one path a prefix of the other
ok 37 - pathmatch: match 'foo' '???'
ok 1787 - setup LF_mix_CR checkout  with -c core.eol=lf
# passed all 14 test(s)
1..14
ok 52 - git_test_func: modified submodule does not update submodule work tree to invalid commit
*** t3200-branch.sh ***
ok 8 - ls-tree filter odd names
ok 38 - pathmatch (via ls-files): match '???' 'foo'
ok 1788 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 39 - ipathmatch: match 'foo' '???'
ok 9 - ls-tree filter missing files and extra slashes
ok 1789 - setup LF_nul checkout  with -c core.eol=lf
ok 40 - ipathmatch (via ls-files): match '???' 'foo'
ok 10 - ls-tree filter is leading path match
ok 18 - --recurse-submodules parses submodule worktree config
ok 11 - ls-tree --full-name
ok 41 - cleanup after previous file test
ok 12 - ls-tree --no-full-name
ok 1790 - ls-files --eol attr=auto ident aeol= core.autocrlf=true core.eol=lf
ok 42 - setup match file test for foo
ok 43 - wildmatch: no match 'foo' '??'
ok 1791 - checkout attr=auto ident aeol= core.autocrlf=true core.eol=lf file=LF
ok 13 - ls-tree --full-tree
ok 44 - wildmatch (via ls-files): no match '??' 'foo'
ok 1792 - checkout attr=auto ident aeol= core.autocrlf=true core.eol=lf file=CRLF
ok 1 - setup
ok 14 - ls-tree --full-tree -r
ok 45 - iwildmatch: no match 'foo' '??'
ok 1793 - checkout attr=auto ident aeol= core.autocrlf=true core.eol=lf file=CRLF_mix_LF
ok 2 - ls-tree a[a] matches literally
ok 46 - iwildmatch (via ls-files): no match '??' 'foo'
ok 15 - ls-tree --abbrev=5
ok 47 - pathmatch: no match 'foo' '??'
ok 1794 - checkout attr=auto ident aeol= core.autocrlf=true core.eol=lf file=LF_mix_CR
ok 3 - ls-tree outside prefix
ok 1 - setup
ok 1795 - checkout attr=auto ident aeol= core.autocrlf=true core.eol=lf file=LF_nul
ok 16 - ls-tree --name-only
ok 48 - pathmatch (via ls-files): no match '??' 'foo'
ok 19 - --recurse-submodules submodules ignore super project worktreeConfig extension
not ok 4 - ls-tree does not yet support negated pathspec # TODO known breakage
ok 1796 - setup config for checkout attr=text ident=ident aeol= core.autocrlf=true
ok 49 - ipathmatch: no match 'foo' '??'
# still have 1 known breakage(s)
# passed all remaining 3 test(s)
1..4
ok 2 - ls-tree fails with non-zero exit code on broken tree
ok 20 - --recurse-submodules and --deleted are incompatible
ok 1797 - setup LF checkout  with -c core.eol=lf
*** t3201-branch-contains.sh ***
ok 3 - usage: incompatible options: --long --name-only
ok 17 - ls-tree --name-only -r
ok 21 - --recurse-submodules and --modified are incompatible
ok 50 - ipathmatch (via ls-files): no match '??' 'foo'
ok 1 - ls-tree --format usage
ok 4 - usage: incompatible options: --long and --format
ok 22 - --recurse-submodules and --others are incompatible
ok 1798 - setup CRLF checkout  with -c core.eol=lf
ok 18 - ls-tree --name-status
ok 5 - usage: incompatible options: --name-only --name-status
ok 51 - cleanup after previous file test
ok 23 - --recurse-submodules and --killed are incompatible
ok 1799 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 6 - usage: incompatible options: --name-only and --format
ok 24 - --recurse-submodules and --unmerged are incompatible
ok 19 - ls-tree --name-status -r
ok 7 - usage: incompatible options: --name-status --object-only
ok 72 - "add" <path> <branch> dwims with checkout.defaultRemote
ok 1 - ls-tree --format usage
ok 52 - setup match file test for foo
# passed all 24 test(s)
1..24
ok 1800 - setup CRLF_mix_LF checkout  with -c core.eol=lf
# passed all 19 test(s)
1..19
ok 8 - usage: incompatible options: --name-status and --format
ok 53 - wildmatch: match 'foo' '*'
ok 9 - usage: incompatible options: --object-only --long
*** t3202-show-branch.sh ***
ok 1801 - setup LF_nul checkout  with -c core.eol=lf
*** t3203-branch-output.sh ***
ok 54 - wildmatch (via ls-files): match '*' 'foo'
ok 10 - usage: incompatible options: --object-only and --format
ok 55 - iwildmatch: match 'foo' '*'
# passed all 10 test(s)
1..10
*** t3204-branch-name-interpretation.sh ***
ok 56 - iwildmatch (via ls-files): match '*' 'foo'
ok 57 - pathmatch: match 'foo' '*'
ok 1802 - ls-files --eol attr=text ident aeol= core.autocrlf=true core.eol=lf
ok 58 - pathmatch (via ls-files): match '*' 'foo'
ok 59 - ipathmatch: match 'foo' '*'
ok 1803 - checkout attr=text ident aeol= core.autocrlf=true core.eol=lf file=LF
ok 60 - ipathmatch (via ls-files): match '*' 'foo'
ok 1804 - checkout attr=text ident aeol= core.autocrlf=true core.eol=lf file=CRLF
ok 61 - cleanup after previous file test
ok 1805 - checkout attr=text ident aeol= core.autocrlf=true core.eol=lf file=CRLF_mix_LF
ok 1806 - checkout attr=text ident aeol= core.autocrlf=true core.eol=lf file=LF_mix_CR
ok 62 - setup match file test for foo
ok 1 - prepare a trivial repository
ok 63 - wildmatch: match 'foo' 'f*'
ok 1807 - checkout attr=text ident aeol= core.autocrlf=true core.eol=lf file=LF_nul
ok 1808 - setup config for checkout attr=text ident=ident aeol= core.autocrlf=input
ok 2 - git branch --help should not have created a bogus branch
ok 64 - wildmatch (via ls-files): match 'f*' 'foo'
ok 1809 - setup LF checkout  with -c core.eol=lf
ok 65 - iwildmatch: match 'foo' 'f*'
ok 1810 - setup CRLF checkout  with -c core.eol=lf
ok 3 - branch -h in broken repository
ok 66 - iwildmatch (via ls-files): match 'f*' 'foo'
ok 67 - pathmatch: match 'foo' 'f*'
ok 1811 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 4 - git branch abc should create a branch
ok 5 - git branch abc should fail when abc exists
ok 1812 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 68 - pathmatch (via ls-files): match 'f*' 'foo'
ok 69 - ipathmatch: match 'foo' 'f*'
ok 1813 - setup LF_nul checkout  with -c core.eol=lf
ok 6 - git branch --force abc should fail when abc is checked out
ok 70 - ipathmatch (via ls-files): match 'f*' 'foo'
ok 2 - setup
ok 71 - cleanup after previous file test
ok 7 - git branch --force abc should succeed when abc exists
ok 3 - ls-tree --format='%(path) %(path) %(path)' HEAD top-file
ok 8 - git branch a/b/c should create a branch
ok 72 - setup match file test for foo
ok 2 - setup
ok 1814 - ls-files --eol attr=text ident aeol= core.autocrlf=input core.eol=lf
ok 4 - ls-tree '--format=<%(objectmode) %(objecttype) %(objectname)%x09%(path)>' is like options ' '
ok 73 - wildmatch: no match 'foo' '*f'
ok 9 - git branch mb main... should create a branch
ok 1815 - checkout attr=text ident aeol= core.autocrlf=input core.eol=lf file=LF
ok 10 - git branch HEAD should fail
ok 74 - wildmatch (via ls-files): no match '*f' 'foo'
ok 53 - git_test_func: modified submodule does not update submodule work tree from invalid commit
ok 75 - iwildmatch: no match 'foo' '*f'
ok 5 - ls-tree '--format=<%(objectmode) %(objecttype) %(objectname)%x09%(path)>' on optimized v.s. non-optimized path
ok 1816 - checkout attr=text ident aeol= core.autocrlf=input core.eol=lf file=CRLF
ok 1 - error descriptions on empty repository
ok 73 - git worktree add does not match remote
ok 3 - setup: HEAD_* variables
ok 1 - setup
ok 76 - iwildmatch (via ls-files): no match '*f' 'foo'
ok 1817 - checkout attr=text ident aeol= core.autocrlf=input core.eol=lf file=CRLF_mix_LF
ok 11 - git branch --create-reflog d/e/f should create a branch and a log
ok 4 - 'ls-tree ' output
ok 77 - pathmatch: no match 'foo' '*f'
ok 6 - ls-tree '--format=<%(objectmode) %(objecttype) %(objectname) %(objectsize:padded)%x09%(path)>' is like options '--long '
ok 2 - branch --contains=main
ok 1818 - checkout attr=text ident aeol= core.autocrlf=input core.eol=lf file=LF_mix_CR
ok 2 - fatal descriptions on empty repository
ok 1 - make commits
ok 3 - branch --contains main
ok 78 - pathmatch (via ls-files): no match '*f' 'foo'
ok 5 - 'ls-tree ' output (via subdir)
ok 79 - ipathmatch: no match 'foo' '*f'
ok 1819 - checkout attr=text ident aeol= core.autocrlf=input core.eol=lf file=LF_nul
ok 12 - git branch -d d/e/f should delete a branch and a log
ok 4 - branch --no-contains=main
ok 7 - ls-tree '--format=<%(objectmode) %(objecttype) %(objectname) %(objectsize:padded)%x09%(path)>' on optimized v.s. non-optimized path
ok 1 - set up repo
ok 6 - 'ls-tree  -t' output
ok 2 - make branches
ok 1820 - setup config for checkout attr=auto ident=ident aeol= core.autocrlf=input
ok 5 - branch --no-contains main
ok 80 - ipathmatch (via ls-files): no match '*f' 'foo'
ok 8 - ls-tree '--format=<%(path)>' is like options '--name-only '
ok 7 - 'ls-tree  -t' output (via subdir)
ok 13 - git branch j/k should work after branch j has been deleted
ok 3 - make remote branches
ok 26 - git checkout --recurse-submodules: modified submodule updates submodule recursively
ok 6 - branch --contains=side
ok 81 - cleanup after previous file test
ok 1821 - setup LF checkout  with -c core.eol=lf
ok 8 - 'ls-tree  -d' output
ok 7 - branch --no-contains=side
ok 4 - git branch shows local branches
ok 9 - ls-tree '--format=<%(path)>' on optimized v.s. non-optimized path
ok 9 - 'ls-tree  -d' output (via subdir)
ok 82 - setup match file test for foo
ok 1822 - setup CRLF checkout  with -c core.eol=lf
ok 14 - git branch l should work after branch l/m has been deleted
ok 2 - update branch via @{-1}
ok 8 - branch --contains with pattern implies --list
ok 5 - git branch --list shows local branches
ok 83 - wildmatch: match 'foo' '*foo*'
ok 10 - 'ls-tree  -r' output
ok 15 - git branch -m dumps usage
ok 1823 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 9 - branch --no-contains with pattern implies --list
ok 6 - git branch --list pattern shows matching local branches
ok 10 - ls-tree '--format=<%(objectname)>' is like options '--object-only '
ok 11 - 'ls-tree  -r' output (via subdir)
ok 84 - wildmatch (via ls-files): match '*foo*' 'foo'
ok 10 - side: branch --merged
ok 85 - iwildmatch: match 'foo' '*foo*'
ok 1824 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 12 - 'ls-tree --long' output
ok 11 - branch --merged with pattern implies --list
ok 7 - git branch -r shows remote branches
ok 3 - update branch via local @{upstream}
ok 1825 - setup LF_nul checkout  with -c core.eol=lf
ok 11 - ls-tree '--format=<%(objectname)>' on optimized v.s. non-optimized path
ok 86 - iwildmatch (via ls-files): match '*foo*' 'foo'
ok 13 - 'ls-tree --long' output (via subdir)
ok 12 - side: branch --no-merged
ok 8 - git branch --no-remotes is rejected
ok 87 - pathmatch: match 'foo' '*foo*'
ok 16 - git branch -m m broken_symref should work
ok 14 - 'ls-tree --long -t' output
ok 27 - reset with wildcard pathspec
ok 12 - ls-tree '--format=<%(objectname)>' is like options '--object-only --abbrev --abbrev'
ok 13 - main: branch --merged
ok 15 - 'ls-tree --long -t' output (via subdir)
ok 4 - disallow updating branch via remote @{upstream}
ok 88 - pathmatch (via ls-files): match '*foo*' 'foo'
ok 14 - main: branch --no-merged
ok 17 - git branch -m m m/m should work
ok 89 - ipathmatch: match 'foo' '*foo*'
ok 9 - git branch -a shows local and remote branches
ok 13 - ls-tree '--format=<%(objectname)>' on optimized v.s. non-optimized path
ok 15 - split the index when the index contains a racily clean cache entry #3
ok 16 - 'ls-tree --long -d' output
ok 1826 - ls-files --eol attr=auto ident aeol= core.autocrlf=input core.eol=lf
ok 15 - branch --no-merged with pattern implies --list
ok 10 - git branch --no-all is rejected
ok 5 - create branch with pseudo-qualified name
ok 90 - ipathmatch (via ls-files): match '*foo*' 'foo'
ok 18 - git branch -m n/n n should work
ok 17 - 'ls-tree --long -d' output (via subdir)
ok 14 - ls-tree '--format=<%(objectmode) %(objecttype) %(objectname)%x09%(path)>' is like options '-t -t'
ok 54 - git_test_func: added submodule doesn't remove untracked unignored file with same name
ok 11 - git branch -v shows branch summaries
ok 1827 - checkout attr=auto ident aeol= core.autocrlf=input core.eol=lf file=LF
ok 18 - 'ls-tree --long -r' output
ok 91 - cleanup after previous file test
ok 1828 - checkout attr=auto ident aeol= core.autocrlf=input core.eol=lf file=CRLF
ok 15 - ls-tree '--format=<%(objectmode) %(objecttype) %(objectname)%x09%(path)>' on optimized v.s. non-optimized path
ok 16 - implicit --list conflicts with modification options
ok 19 - 'ls-tree --long -r' output (via subdir)
ok 12 - git branch --list -v pattern shows branch summaries
ok 1829 - checkout attr=auto ident aeol= core.autocrlf=input core.eol=lf file=CRLF_mix_LF
ok 92 - setup match file test for foobar
ok 13 - git branch --ignore-case --list -v pattern shows branch summaries
ok 20 - 'ls-tree --name-only' output
ok 16 - ls-tree '--format=<%(objectmode) %(objecttype) %(objectname)%x09%(path)>' is like options '--full-name --full-name'
ok 93 - wildmatch: match 'foobar' '*ob*a*r*'
ok 1830 - checkout attr=auto ident aeol= core.autocrlf=input core.eol=lf file=LF_mix_CR
ok 6 - force-copy a branch to itself via @{-1} is no-op
ok 14 - git branch -v pattern does not show branch summaries
ok 21 - 'ls-tree --name-only' output (via subdir)
ok 1831 - checkout attr=auto ident aeol= core.autocrlf=input core.eol=lf file=LF_nul
ok 94 - wildmatch (via ls-files): match '*ob*a*r*' 'foobar'
ok 95 - iwildmatch: match 'foobar' '*ob*a*r*'
ok 22 - 'ls-tree --name-only -t' output
ok 1832 - setup config for checkout attr=-text ident=ident aeol= core.autocrlf=true
ok 17 - ls-tree '--format=<%(objectmode) %(objecttype) %(objectname)%x09%(path)>' on optimized v.s. non-optimized path
ok 17 - Assert that --contains only works on commits, not trees & blobs
ok 23 - 'ls-tree --name-only -t' output (via subdir)
ok 1833 - setup LF checkout  with -c core.eol=crlf
ok 96 - iwildmatch (via ls-files): match '*ob*a*r*' 'foobar'
ok 15 - git branch `--show-current` shows current branch
ok 19 - git branch -m bbb should rename checked out branch
ok 97 - pathmatch: match 'foobar' '*ob*a*r*'
ok 18 - ls-tree '--format=<%(objectmode) %(objecttype) %(objectname)%x09%(path)>' is like options '--full-tree --full-tree'
ok 74 - git worktree add --guess-remote sets up tracking
ok 7 - delete branch via @{-1}
ok 24 - 'ls-tree --name-only -d' output
ok 16 - git branch `--show-current` is silent when detached HEAD
ok 1834 - setup CRLF checkout  with -c core.eol=crlf
ok 98 - pathmatch (via ls-files): match '*ob*a*r*' 'foobar'
ok 25 - 'ls-tree --name-only -d' output (via subdir)
ok 19 - ls-tree '--format=<%(objectmode) %(objecttype) %(objectname)%x09%(path)>' on optimized v.s. non-optimized path
ok 99 - ipathmatch: match 'foobar' '*ob*a*r*'
# passed all 19 test(s)
1..19
ok 1835 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 26 - 'ls-tree --name-only -r' output
ok 100 - ipathmatch (via ls-files): match '*ob*a*r*' 'foobar'
*** t3205-branch-color.sh ***
ok 8 - delete branch via local @{upstream}
ok 27 - 'ls-tree --name-only -r' output (via subdir)
ok 101 - cleanup after previous file test
ok 1836 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 28 - 'ls-tree --object-only' output
ok 17 - git branch `--show-current` works properly when tag exists
ok 20 - renaming checked out branch works with d/f conflict
ok 27 - git checkout -f --recurse-submodules: added submodule is checked out
ok 1837 - setup LF_nul checkout  with -c core.eol=crlf
ok 18 - multiple branch --contains
ok 29 - 'ls-tree --object-only' output (via subdir)
ok 9 - delete branch via remote @{upstream}
ok 102 - setup match file test for aaaaaaabababab
ok 103 - wildmatch: match 'aaaaaaabababab' '*ab'
ok 30 - 'ls-tree --object-only -t' output
ok 19 - multiple branch --merged
ok 21 - git branch -m o/o o should fail when o/p exists
ok 31 - 'ls-tree --object-only -t' output (via subdir)
ok 20 - multiple branch --no-contains
ok 22 - git branch -m o/q o/p should fail when o/p exists
ok 104 - wildmatch (via ls-files): match '*ab' 'aaaaaaabababab'
ok 23 - git branch -M o/q o/p should work when o/p exists
ok 32 - 'ls-tree --object-only -d' output
ok 105 - iwildmatch: match 'aaaaaaabababab' '*ab'
ok 1838 - ls-files --eol attr=-text ident aeol= core.autocrlf=true core.eol=crlf
ok 33 - 'ls-tree --object-only -d' output (via subdir)
ok 21 - multiple branch --no-merged
ok 24 - git branch -m -f o/q o/p should work when o/p exists
ok 106 - iwildmatch (via ls-files): match '*ab' 'aaaaaaabababab'
ok 1839 - checkout attr=-text ident aeol= core.autocrlf=true core.eol=crlf file=LF
ok 107 - pathmatch: match 'aaaaaaabababab' '*ab'
ok 34 - 'ls-tree --object-only -r' output
ok 1840 - checkout attr=-text ident aeol= core.autocrlf=true core.eol=crlf file=CRLF
ok 18 - git branch `--show-current` works properly with worktrees
ok 25 - git branch -m q r/q should fail when r exists
ok 108 - pathmatch (via ls-files): match '*ab' 'aaaaaaabababab'
ok 109 - ipathmatch: match 'aaaaaaabababab' '*ab'
ok 35 - 'ls-tree --object-only -r' output (via subdir)
ok 10 - delete @{upstream} expansion matches -r option
ok 1841 - checkout attr=-text ident aeol= core.autocrlf=true core.eol=crlf file=CRLF_mix_LF
ok 110 - ipathmatch (via ls-files): match '*ab' 'aaaaaaabababab'
ok 19 - git branch shows detached HEAD properly
ok 26 - git branch -M foo bar should fail when bar is checked out
ok 1842 - checkout attr=-text ident aeol= core.autocrlf=true core.eol=crlf file=LF_mix_CR
ok 3 - setup
ok 36 - setup: HEAD_short_* variables
ok 111 - cleanup after previous file test
ok 1843 - checkout attr=-text ident aeol= core.autocrlf=true core.eol=crlf file=LF_nul
ok 37 - 'ls-tree --object-only --abbrev' output
ok 22 - branch --contains combined with --no-contains
ok 1844 - setup config for checkout attr=-text ident=ident aeol=lf core.autocrlf=true
ok 11 - disallow deleting remote branch via @{-1}
ok 38 - 'ls-tree --object-only --abbrev' output (via subdir)
ok 112 - setup match file test for foo*
ok 1845 - setup LF checkout  with -c core.eol=crlf
ok 23 - branch --merged combined with --no-merged
ok 4 - show-branch with more than 8 branches
ok 113 - wildmatch: match 'foo*' 'foo\*'
ok 20 - git branch shows detached HEAD properly after checkout --detach
ok 39 - 'ls-tree --object-only --abbrev -t' output
ok 1846 - setup CRLF checkout  with -c core.eol=crlf
ok 40 - 'ls-tree --object-only --abbrev -t' output (via subdir)
ok 12 - create branch named "@"
ok 114 - wildmatch (via ls-files): match 'foo\*' 'foo*'
ok 115 - iwildmatch: match 'foo*' 'foo\*'
ok 1847 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 41 - 'ls-tree --object-only --abbrev -d' output
ok 27 - git branch -M foo bar should fail when bar is checked out in worktree
ok 42 - 'ls-tree --object-only --abbrev -d' output (via subdir)
ok 1848 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 21 - git branch shows detached HEAD properly after moving
ok 13 - delete branch named "@"
ok 116 - iwildmatch (via ls-files): match 'foo\*' 'foo*'
ok 117 - pathmatch: match 'foo*' 'foo\*'
ok 43 - 'ls-tree --object-only --abbrev -r' output
ok 1849 - setup LF_nul checkout  with -c core.eol=crlf
ok 44 - 'ls-tree --object-only --abbrev -r' output (via subdir)
ok 118 - pathmatch (via ls-files): match 'foo\*' 'foo*'
ok 75 - git worktree add --guess-remote sets up tracking (quiet)
ok 119 - ipathmatch: match 'foo*' 'foo\*'
ok 22 - git branch shows detached HEAD properly from tag
ok 6 - slow response
ok 28 - git branch -M baz bam should succeed when baz is checked out
ok 45 - 'ls-tree --full-name' output
ok 1 - set up some sample branches
ok 120 - ipathmatch (via ls-files): match 'foo\*' 'foo*'
ok 29 - git branch -M baz bam should add entries to HEAD reflog
ok 46 - 'ls-tree --full-name' output (via subdir)
ok 7 - sendbytes
ok 1850 - ls-files --eol attr=-text ident aeol=lf core.autocrlf=true core.eol=crlf
ok 23 - git branch shows detached HEAD properly after moving from tag
ok 2 - set up some color config
ok 14 - checkout does not treat remote @{upstream} as a branch
ok 47 - 'ls-tree --full-name -d' output
ok 24 - branch --merged with --verbose
ok 121 - cleanup after previous file test
ok 1851 - checkout attr=-text ident aeol=lf core.autocrlf=true core.eol=crlf file=LF
ok 48 - 'ls-tree --full-name -d' output (via subdir)
# passed all 24 test(s)
1..24
ok 122 - setup match file test for foobar
ok 1852 - checkout attr=-text ident aeol=lf core.autocrlf=true core.eol=crlf file=CRLF
ok 24 - git branch `--sort=[-]objectsize` option
ok 3 - regular output shows colors
ok 123 - wildmatch: no match 'foobar' 'foo\*bar'
*** t3206-range-diff.sh ***
ok 49 - 'ls-tree --full-name -r' output
ok 1853 - checkout attr=-text ident aeol=lf core.autocrlf=true core.eol=crlf file=CRLF_mix_LF
ok 50 - 'ls-tree --full-name -r' output (via subdir)
ok 124 - wildmatch (via ls-files): no match 'foo\*bar' 'foobar'
ok 4 - verbose output shows colors
ok 125 - iwildmatch: no match 'foobar' 'foo\*bar'
ok 5 - show-branch with showbranch.default
ok 1854 - checkout attr=-text ident aeol=lf core.autocrlf=true core.eol=crlf file=LF_mix_CR
# passed all 4 test(s)
1..4
ok 25 - git branch `--sort=[-]type` option
ok 51 - 'ls-tree --full-name -t' output
ok 55 - git_test_func: added submodule creates empty directory
ok 52 - 'ls-tree --full-name -t' output (via subdir)
ok 126 - iwildmatch (via ls-files): no match 'foo\*bar' 'foobar'
ok 1855 - checkout attr=-text ident aeol=lf core.autocrlf=true core.eol=crlf file=LF_nul
*** t3207-branch-submodule.sh ***
ok 15 - edit-description via @{-1}
ok 127 - pathmatch: no match 'foobar' 'foo\*bar'
ok 1856 - setup config for checkout attr=-text ident=ident aeol=crlf core.autocrlf=true
ok 8 - stress test threads
ok 53 - 'ls-tree --full-tree' output
ok 26 - git branch `--sort=[-]version:refname` option
ok 54 - 'ls-tree --full-tree' output (via subdir, fails)
ok 6 - show-branch --color output
ok 128 - pathmatch (via ls-files): no match 'foo\*bar' 'foobar'
ok 30 - git branch -M should leave orphaned HEAD alone
ok 1857 - setup LF checkout  with -c core.eol=crlf
ok 129 - ipathmatch: no match 'foobar' 'foo\*bar'
ok 55 - 'ls-tree --full-tree -t' output
ok 7 - show branch --remotes
ok 28 - git checkout -f --recurse-submodules: added submodule is checked out in empty dir
ok 27 - git branch --points-at option
ok 1858 - setup CRLF checkout  with -c core.eol=crlf
ok 130 - ipathmatch (via ls-files): no match 'foo\*bar' 'foobar'
ok 56 - 'ls-tree --full-tree -t' output (via subdir, fails)
ok 31 - resulting reflog can be shown by log -g
ok 1859 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 28 - ambiguous branch/tag not marked
ok 57 - 'ls-tree --full-tree -d' output
ok 131 - cleanup after previous file test
ok 1860 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 28 - reset hard with removed sparse dir
ok 58 - 'ls-tree --full-tree -d' output (via subdir, fails)
ok 132 - setup match file test for f\oo
ok 29 - local-branch symrefs shortened properly
ok 1861 - setup LF_nul checkout  with -c core.eol=crlf
ok 133 - wildmatch: match 'f\oo' 'f\\oo'
ok 16 - modify branch upstream via "@{-1}" and "@{-1}@{upstream}"
# passed all 16 test(s)
1..16
ok 59 - 'ls-tree --full-tree -r' output
ok 60 - 'ls-tree --full-tree -r' output (via subdir, fails)
ok 134 - wildmatch (via ls-files): match 'f\\oo' 'f\oo'
*** t3211-peel-ref.sh ***
# passed all 60 test(s)
1..60
ok 135 - iwildmatch: match 'f\oo' 'f\\oo'
*** t3300-funny-names.sh ***
ok 32 - git branch -M baz bam should succeed when baz is checked out as linked working tree
ok 136 - iwildmatch (via ls-files): match 'f\\oo' 'f\oo'
ok 137 - pathmatch: match 'f\oo' 'f\\oo'
ok 1862 - ls-files --eol attr=-text ident aeol=crlf core.autocrlf=true core.eol=crlf
ok 138 - pathmatch (via ls-files): match 'f\\oo' 'f\oo'
ok 1863 - checkout attr=-text ident aeol=crlf core.autocrlf=true core.eol=crlf file=LF
ok 139 - ipathmatch: match 'f\oo' 'f\\oo'
ok 1864 - checkout attr=-text ident aeol=crlf core.autocrlf=true core.eol=crlf file=CRLF
ok 8 - show-branch --sparse
ok 9 - setup show branch --list
ok 140 - ipathmatch (via ls-files): match 'f\\oo' 'f\oo'
ok 76 - git worktree --no-guess-remote (quiet)
ok 1865 - checkout attr=-text ident aeol=crlf core.autocrlf=true core.eol=crlf file=CRLF_mix_LF
ok 10 - show branch --list
ok 30 - sort branches, ignore case
ok 1866 - checkout attr=-text ident aeol=crlf core.autocrlf=true core.eol=crlf file=LF_mix_CR
ok 141 - cleanup after previous file test
ok 31 - git branch --format option
ok 11 - show branch --list has no --color output
ok 1867 - checkout attr=-text ident aeol=crlf core.autocrlf=true core.eol=crlf file=LF_nul
ok 1868 - setup config for checkout attr=text ident=ident aeol=lf core.autocrlf=true
ok 142 - setup match file test for ball
ok 143 - wildmatch: match 'ball' '*[al]?'
ok 32 - git branch --format with ahead-behind
ok 1869 - setup LF checkout  with -c core.eol=crlf
ok 144 - wildmatch (via ls-files): match '*[al]?' 'ball'
ok 1870 - setup CRLF checkout  with -c core.eol=crlf
ok 145 - iwildmatch: match 'ball' '*[al]?'
ok 33 - git branch `--sort=[-]ahead-behind` option
ok 1871 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 146 - iwildmatch (via ls-files): match '*[al]?' 'ball'
ok 34 - git branch with --format=%(rest) must fail
ok 147 - pathmatch: match 'ball' '*[al]?'
ok 1872 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 148 - pathmatch (via ls-files): match '*[al]?' 'ball'
ok 1873 - setup LF_nul checkout  with -c core.eol=crlf
ok 149 - ipathmatch: match 'ball' '*[al]?'
ok 35 - git branch --format --omit-empty
ok 150 - ipathmatch (via ls-files): match '*[al]?' 'ball'
ok 151 - cleanup after previous file test
ok 1874 - ls-files --eol attr=text ident aeol=lf core.autocrlf=true core.eol=crlf
ok 9 - stop-daemon works
ok 1875 - checkout attr=text ident aeol=lf core.autocrlf=true core.eol=crlf file=LF
ok 1 - setup
ok 152 - setup match file test for ten
# passed all 9 test(s)
1..9
ok 36 - worktree colors correct
ok 37 - set up color tests
ok 153 - wildmatch: no match 'ten' '[ten]'
ok 1876 - checkout attr=text ident aeol=lf core.autocrlf=true core.eol=crlf file=CRLF
*** t3301-notes.sh ***
ok 38 - %(color) omitted without tty
ok 2 - setup: populate index and tree
ok 29 - git checkout -f --recurse-submodules: replace tracked file with submodule checks out submodule
ok 1877 - checkout attr=text ident aeol=lf core.autocrlf=true core.eol=crlf file=CRLF_mix_LF
ok 154 - wildmatch (via ls-files): no match '[ten]' 'ten'
ok 12 - show branch --merge-base with one argument
ok 3 - ls-files prints space in filename verbatim
ok 1878 - checkout attr=text ident aeol=lf core.autocrlf=true core.eol=crlf file=LF_mix_CR
ok 155 - iwildmatch: no match 'ten' '[ten]'
ok 1 - create annotated tag in refs/tags
ok 1879 - checkout attr=text ident aeol=lf core.autocrlf=true core.eol=crlf file=LF_nul
ok 2 - create annotated tag outside of refs/tags
ok 156 - iwildmatch (via ls-files): no match '[ten]' 'ten'
ok 4 - setup: add funny filename
ok 39 # skip %(color) present with tty (missing TTY)
ok 1880 - setup config for checkout attr=text ident=ident aeol=crlf core.autocrlf=true
ok 157 - pathmatch: no match 'ten' '[ten]'
ok 5 - ls-files quotes funny filename
ok 40 - --color overrides auto-color
ok 158 - pathmatch (via ls-files): no match '[ten]' 'ten'
ok 1881 - setup LF checkout  with -c core.eol=crlf
ok 159 - ipathmatch: no match 'ten' '[ten]'
ok 6 - ls-files -z does not quote funny filename
ok 3 - set up expected show-ref output
ok 1882 - setup CRLF checkout  with -c core.eol=crlf
ok 160 - ipathmatch (via ls-files): no match '[ten]' 'ten'
ok 4 - refs are peeled outside of refs/tags (loose)
ok 56 - git_test_func: added submodule leaves existing empty directory alone
ok 7 - ls-tree quotes funny filename
ok 1883 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 5 - refs are peeled outside of refs/tags (packed)
ok 161 - cleanup after previous file test
ok 1884 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 8 - diff-index --name-status quotes funny filename
ok 41 - verbose output lists worktree path
ok 1885 - setup LF_nul checkout  with -c core.eol=crlf
# passed all 41 test(s)
1..41
ok 9 - diff-tree --name-status quotes funny filename
ok 162 - setup match file test for ten
ok 163 - wildmatch: match 'ten' '**[!te]'
ok 6 - create old-style pack-refs without fully-peeled
*** t3302-notes-index-expensive.sh ***
ok 77 - git worktree add with worktree.guessRemote sets up tracking
ok 7 - refs are peeled outside of refs/tags (old packed)
ok 10 - diff-index -z does not quote funny filename
ok 164 - wildmatch (via ls-files): match '**[!te]' 'ten'
ok 165 - iwildmatch: match 'ten' '**[!te]'
ok 166 - iwildmatch (via ls-files): match '**[!te]' 'ten'
ok 11 - diff-tree -z does not quote funny filename
ok 167 - pathmatch: match 'ten' '**[!te]'
ok 1886 - ls-files --eol attr=text ident aeol=crlf core.autocrlf=true core.eol=crlf
ok 8 - peeled refs survive deletion of packed ref
ok 12 - diff-tree --find-copies-harder quotes funny filename
ok 1887 - checkout attr=text ident aeol=crlf core.autocrlf=true core.eol=crlf file=LF
ok 168 - pathmatch (via ls-files): match '**[!te]' 'ten'
# passed all 8 test(s)
1..8
ok 13 - setup: remove unfunny index entry
ok 169 - ipathmatch: match 'ten' '**[!te]'
ok 13 - show branch --merge-base with two arguments
*** t3303-notes-subtrees.sh ***
ok 1888 - checkout attr=text ident aeol=crlf core.autocrlf=true core.eol=crlf file=CRLF
ok 170 - ipathmatch (via ls-files): match '**[!te]' 'ten'
ok 14 - diff-tree -M quotes funny filename
ok 1889 - checkout attr=text ident aeol=crlf core.autocrlf=true core.eol=crlf file=CRLF_mix_LF
ok 1 - cannot annotate non-existing HEAD
ok 1890 - checkout attr=text ident aeol=crlf core.autocrlf=true core.eol=crlf file=LF_mix_CR
ok 171 - cleanup after previous file test
ok 15 - diff-index -M -p quotes funny filename
ok 14 - show branch --merge-base with N arguments
ok 16 - setup: mode change
ok 1 - setup
ok 1891 - checkout attr=text ident aeol=crlf core.autocrlf=true core.eol=crlf file=LF_nul
ok 1892 - setup config for checkout attr=auto ident=ident aeol=lf core.autocrlf=true
ok 15 - show-branch --all --reflog (should fail)
ok 17 - diff-index -M -p with mode change quotes funny filename
ok 172 - setup match file test for ten
ok 1893 - setup LF checkout  with -c core.eol=crlf
ok 173 - wildmatch: no match 'ten' '**[!ten]'
ok 16 - show-branch --merge-base --reflog (should fail)
ok 1894 - setup CRLF checkout  with -c core.eol=crlf
ok 17 - show-branch --list --merge-base (should fail)
ok 174 - wildmatch (via ls-files): no match '**[!ten]' 'ten'
ok 18 - diffstat for rename quotes funny filename
ok 175 - iwildmatch: no match 'ten' '**[!ten]'
ok 1895 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 18 - show-branch --reflog --current (should fail)
ok 19 - numstat for rename quotes funny filename
ok 176 - iwildmatch (via ls-files): no match '**[!ten]' 'ten'
ok 19 - show-branch --no-topo-order (should fail)
ok 2 - setup
ok 2 - simple A..B A..C (unmodified)
ok 1896 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 30 - git checkout -f --recurse-submodules: replace directory with submodule
ok 177 - pathmatch: no match 'ten' '**[!ten]'
ok 20 - show-branch --no-date-order (should fail)
ok 3 - need valid notes ref
ok 178 - pathmatch (via ls-files): no match '**[!ten]' 'ten'
ok 20 - numstat without -M quotes funny filename
ok 1897 - setup LF_nul checkout  with -c core.eol=crlf
ok 21 - show-branch --no-reflog (should fail)
ok 4 - refusing to add notes in refs/heads/
ok 179 - ipathmatch: no match 'ten' '**[!ten]'
ok 5 - refusing to edit notes in refs/remotes/
ok 3 - simple B...C (unmodified)
ok 22 - error descriptions on non-existent branch
ok 6 - handle empty notes gracefully
ok 180 - ipathmatch (via ls-files): no match '**[!ten]' 'ten'
ok 21 - numstat for non-git rename diff quotes funny filename
# passed all 21 test(s)
1..21
ok 7 - show non-existent notes entry with %N
*** t3304-notes-mixed.sh ***
ok 181 - cleanup after previous file test
ok 1898 - ls-files --eol attr=auto ident aeol=lf core.autocrlf=true core.eol=crlf
ok 23 - fatal descriptions on non-existent branch
ok 4 - simple A B C (unmodified)
ok 1899 - checkout attr=auto ident aeol=lf core.autocrlf=true core.eol=crlf file=LF
ok 182 - setup match file test for ten
ok 183 - wildmatch: match 'ten' 't[a-g]n'
ok 1900 - checkout attr=auto ident aeol=lf core.autocrlf=true core.eol=crlf file=CRLF
ok 184 - wildmatch (via ls-files): match 't[a-g]n' 'ten'
ok 1901 - checkout attr=auto ident aeol=lf core.autocrlf=true core.eol=crlf file=CRLF_mix_LF
ok 78 - git worktree --no-guess-remote option overrides config
ok 185 - iwildmatch: match 'ten' 't[a-g]n'
ok 1902 - checkout attr=auto ident aeol=lf core.autocrlf=true core.eol=crlf file=LF_mix_CR
ok 186 - iwildmatch (via ls-files): match 't[a-g]n' 'ten'
ok 1903 - checkout attr=auto ident aeol=lf core.autocrlf=true core.eol=crlf file=LF_nul
ok 8 - create notes
ok 5 - simple A..B A..C (unmodified) with --abbrev
ok 29 - update-index modify outside sparse definition
ok 187 - pathmatch: match 'ten' 't[a-g]n'
ok 1904 - setup config for checkout attr=auto ident=ident aeol=crlf core.autocrlf=true
ok 9 - show notes entry with %N
ok 188 - pathmatch (via ls-files): match 't[a-g]n' 'ten'
ok 1905 - setup LF checkout  with -c core.eol=crlf
ok 189 - ipathmatch: match 'ten' 't[a-g]n'
ok 1906 - setup CRLF checkout  with -c core.eol=crlf
ok 10 - create reflog entry
ok 190 - ipathmatch (via ls-files): match 't[a-g]n' 'ten'
ok 6 - A^! and A^-<n> (unmodified)
ok 1 - setup 10
ok 1907 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 79 - "add" DWIM infer --orphan w/ empty repo, DWIM (no --branch), no --quiet (expect output), 'cd repo && git', no --branch
ok 191 - cleanup after previous file test
ok 7 - A^{/..} is not mistaken for a range
ok 1908 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 2 - notes work
ok 192 - setup match file test for ten
ok 1909 - setup LF_nul checkout  with -c core.eol=crlf
ok 24 - error descriptions on orphan branch
ok 193 - wildmatch: no match 'ten' 't[!a-g]n'
ok 194 - wildmatch (via ls-files): no match 't[!a-g]n' 'ten'
ok 11 - edit existing notes
ok 195 - iwildmatch: no match 'ten' 't[!a-g]n'
ok 8 - trivial reordering
ok 196 - iwildmatch (via ls-files): no match 't[!a-g]n' 'ten'
ok 197 - pathmatch: no match 'ten' 't[!a-g]n'
ok 1910 - ls-files --eol attr=auto ident aeol=crlf core.autocrlf=true core.eol=crlf
ok 57 - git_test_func: replace tracked file with submodule creates empty directory
ok 12 - show notes from treeish
ok 198 - pathmatch (via ls-files): no match 't[!a-g]n' 'ten'
ok 1911 - checkout attr=auto ident aeol=crlf core.autocrlf=true core.eol=crlf file=LF
ok 199 - ipathmatch: no match 'ten' 't[!a-g]n'
ok 13 - cannot edit notes from non-ref
ok 1912 - checkout attr=auto ident aeol=crlf core.autocrlf=true core.eol=crlf file=CRLF
ok 80 - "add" DWIM doesnt infer --orphan w/ DWIM (no --branch), no --quiet (expect output), 'cd repo && git', no --branch, >=1 local branches, valid HEAD
ok 1913 - checkout attr=auto ident aeol=crlf core.autocrlf=true core.eol=crlf file=CRLF_mix_LF
ok 200 - ipathmatch (via ls-files): no match 't[!a-g]n' 'ten'
ok 9 - removed a commit
ok 1914 - checkout attr=auto ident aeol=crlf core.autocrlf=true core.eol=crlf file=LF_mix_CR
ok 201 - cleanup after previous file test
ok 1 - setup: create a couple of commits
ok 1915 - checkout attr=auto ident aeol=crlf core.autocrlf=true core.eol=crlf file=LF_nul
ok 1916 - setup config for checkout attr=-text ident=ident aeol= core.autocrlf=false
ok 202 - setup match file test for ton
ok 14 - cannot "git notes add -m" where notes already exists
ok 203 - wildmatch: match 'ton' 't[!a-g]n'
ok 1917 - setup LF checkout  with -c core.eol=crlf
ok 204 - wildmatch (via ls-files): match 't[!a-g]n' 'ton'
ok 10 - added a commit
ok 1 - setup superproject and submodule
ok 205 - iwildmatch: match 'ton' 't[!a-g]n'
ok 31 - git checkout -f --recurse-submodules: nested submodules are checked out
ok 1918 - setup CRLF checkout  with -c core.eol=crlf
ok 81 - "add" DWIM infer --orphan w/ DWIM (no --branch), no --quiet (expect output), 'cd repo && git', no --branch, 0 local branches, 0 remotes, 0 fetched remote branches, --no-guess-remote
ok 25 - setup reflogs
ok 206 - iwildmatch (via ls-files): match 't[!a-g]n' 'ton'
ok 1919 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 207 - pathmatch: match 'ton' 't[!a-g]n'
ok 2 - create a notes tree with both notes and non-notes
ok 15 - can overwrite existing note with "git notes add -f -m"
ok 26 - --reflog shows reflog entries
ok 1920 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 1 - setup: create 100 commits
ok 208 - pathmatch (via ls-files): match 't[!a-g]n' 'ton'
ok 3 - verify contents of notes
ok 27 - --reflog handles missing reflog
ok 1921 - setup LF_nul checkout  with -c core.eol=crlf
ok 209 - ipathmatch: match 'ton' 't[!a-g]n'
ok 11 - new base, A B C
# passed all 27 test(s)
1..27
*** t3305-notes-fanout.sh ***
ok 210 - ipathmatch (via ls-files): match 't[!a-g]n' 'ton'
ok 211 - cleanup after previous file test
ok 1922 - ls-files --eol attr=-text ident aeol= core.autocrlf=false core.eol=crlf
ok 4 - verify contents of non-notes
ok 33 - git branch -M fails if updating any linked working tree fails
ok 1923 - checkout attr=-text ident aeol= core.autocrlf=false core.eol=crlf file=LF
ok 5 - git-notes preserves non-notes
ok 212 - setup match file test for ton
ok 16 - add w/no options on existing note morphs into edit
ok 213 - wildmatch: match 'ton' 't[^a-g]n'
ok 1924 - checkout attr=-text ident aeol= core.autocrlf=false core.eol=crlf file=CRLF
ok 12 - new base, B...C
ok 1925 - checkout attr=-text ident aeol= core.autocrlf=false core.eol=crlf file=CRLF_mix_LF
ok 214 - wildmatch (via ls-files): match 't[^a-g]n' 'ton'
ok 215 - iwildmatch: match 'ton' 't[^a-g]n'
ok 1926 - checkout attr=-text ident aeol= core.autocrlf=false core.eol=crlf file=LF_mix_CR
ok 6 - verify contents of non-notes after git-notes
ok 216 - iwildmatch (via ls-files): match 't[^a-g]n' 'ton'
# passed all 6 test(s)
1..6
ok 1927 - checkout attr=-text ident aeol= core.autocrlf=false core.eol=crlf file=LF_nul
ok 217 - pathmatch: match 'ton' 't[^a-g]n'
ok 1928 - setup config for checkout attr=-text ident=ident aeol=lf core.autocrlf=false
*** t3306-notes-prune.sh ***
ok 34 - git branch -M baz bam should succeed within a worktree in which baz is checked out
ok 82 - "add" DWIM infer --orphan w/ DWIM (no --branch), no --quiet (expect output), 'cd repo && git', no --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --no-guess-remote
ok 218 - pathmatch (via ls-files): match 't[^a-g]n' 'ton'
ok 13 - changed commit
ok 2 - --recurse-submodules should create branches
ok 219 - ipathmatch: match 'ton' 't[^a-g]n'
ok 1929 - setup LF checkout  with -c core.eol=crlf
ok 17 - can overwrite existing note with "git notes add -f"
ok 35 - git branch -M main should work when main is checked out
ok 220 - ipathmatch (via ls-files): match 't[^a-g]n' 'ton'
ok 1930 - setup CRLF checkout  with -c core.eol=crlf
ok 1931 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 36 - git branch -M main main should work when main is checked out
ok 221 - cleanup after previous file test
ok 18 - show notes
ok 1932 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 222 - setup match file test for a]b
ok 37 - git branch -M topic topic should work when main is checked out
ok 14 - changed commit with --no-patch diff option
ok 223 - wildmatch: match 'a]b' 'a[]]b'
ok 1933 - setup LF_nul checkout  with -c core.eol=crlf
ok 224 - wildmatch (via ls-files): match 'a[]]b' 'a]b'
ok 30 - update-index --add outside sparse definition
ok 225 - iwildmatch: match 'a]b' 'a[]]b'
ok 83 - "add" error need fetch w/ DWIM (no --branch), no --quiet (expect output), 'cd repo && git', no --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --guess-remote
ok 3 - --recurse-submodules should die if submodule.propagateBranches is false
ok 226 - iwildmatch (via ls-files): match 'a[]]b' 'a]b'
ok 38 - git branch -M and -C fail on detached HEAD
ok 227 - pathmatch: match 'a]b' 'a[]]b'
ok 1934 - ls-files --eol attr=-text ident aeol=lf core.autocrlf=false core.eol=crlf
ok 15 - changed commit with --stat diff option
ok 19 - show multi-line notes
ok 228 - pathmatch (via ls-files): match 'a[]]b' 'a]b'
ok 229 - ipathmatch: match 'a]b' 'a[]]b'
ok 1935 - checkout attr=-text ident aeol=lf core.autocrlf=false core.eol=crlf file=LF
ok 1936 - checkout attr=-text ident aeol=lf core.autocrlf=false core.eol=crlf file=CRLF
ok 230 - ipathmatch (via ls-files): match 'a[]]b' 'a]b'
ok 1937 - checkout attr=-text ident aeol=lf core.autocrlf=false core.eol=crlf file=CRLF_mix_LF
ok 16 - changed commit with sm config
ok 231 - cleanup after previous file test
ok 1938 - checkout attr=-text ident aeol=lf core.autocrlf=false core.eol=crlf file=LF_mix_CR
ok 232 - setup match file test for a-b
ok 1939 - checkout attr=-text ident aeol=lf core.autocrlf=false core.eol=crlf file=LF_nul
ok 39 - git branch -m should work with orphan branches
ok 233 - wildmatch: match 'a-b' 'a[]-]b'
ok 20 - show -F notes
ok 1 - tweak test environment
ok 1940 - setup config for checkout attr=-text ident=ident aeol=crlf core.autocrlf=false
ok 234 - wildmatch (via ls-files): match 'a[]-]b' 'a-b'
ok 58 - git_test_func: replace directory with submodule
ok 235 - iwildmatch: match 'a-b' 'a[]-]b'
ok 21 - Re-adding -F notes without -f fails
ok 1941 - setup LF checkout  with -c core.eol=crlf
ok 17 - renamed file
ok 1942 - setup CRLF checkout  with -c core.eol=crlf
ok 236 - iwildmatch (via ls-files): match 'a[]-]b' 'a-b'
ok 237 - pathmatch: match 'a-b' 'a[]-]b'
ok 22 - git log --pretty=raw does not show notes
ok 1943 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 84 - "add" DWIM infer --orphan w/ DWIM (no --branch), no --quiet (expect output), 'cd repo && git', no --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --guess-remote, --force
ok 40 - git branch -d on orphan HEAD (merged)
ok 238 - pathmatch (via ls-files): match 'a[]-]b' 'a-b'
ok 23 - git log --show-notes
ok 239 - ipathmatch: match 'a-b' 'a[]-]b'
ok 1944 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 4 - --recurse-submodules should fail when not creating branches
ok 24 - git log --no-notes
ok 1945 - setup LF_nul checkout  with -c core.eol=crlf
ok 240 - ipathmatch (via ls-files): match 'a[]-]b' 'a-b'
ok 32 - git checkout -f --recurse-submodules: removed submodule removes submodules working tree
ok 25 - git format-patch does not show notes
ok 18 - file with mode only change
ok 41 - git branch -d on orphan HEAD (merged, graph)
ok 26 - git format-patch --show-notes does show notes
ok 241 - cleanup after previous file test
ok 27 - git show  does show notes
ok 242 - setup match file test for a]b
ok 1946 - ls-files --eol attr=-text ident aeol=crlf core.autocrlf=false core.eol=crlf
ok 28 - git show --pretty does not show notes
ok 243 - wildmatch: match 'a]b' 'a[]-]b'
ok 1947 - checkout attr=-text ident aeol=crlf core.autocrlf=false core.eol=crlf file=LF
ok 29 - git show --pretty=raw does not show notes
ok 1948 - checkout attr=-text ident aeol=crlf core.autocrlf=false core.eol=crlf file=CRLF
ok 244 - wildmatch (via ls-files): match 'a[]-]b' 'a]b'
ok 42 - git branch -d on orphan HEAD (unmerged)
ok 245 - iwildmatch: match 'a]b' 'a[]-]b'
ok 30 - git show --pretty=short does not show notes
ok 19 - file added and later removed
ok 1949 - checkout attr=-text ident aeol=crlf core.autocrlf=false core.eol=crlf file=CRLF_mix_LF
ok 31 - git show --pretty=medium does not show notes
ok 1 - setup: create a few commits with notes
ok 246 - iwildmatch (via ls-files): match 'a[]-]b' 'a]b'
ok 1950 - checkout attr=-text ident aeol=crlf core.autocrlf=false core.eol=crlf file=LF_mix_CR
ok 32 - git show --pretty=full does not show notes
ok 2 - verify commits and notes
ok 247 - pathmatch: match 'a]b' 'a[]-]b'
ok 1951 - checkout attr=-text ident aeol=crlf core.autocrlf=false core.eol=crlf file=LF_nul
ok 33 - git show --pretty=fuller does not show notes
ok 1952 - setup config for checkout attr=text ident=ident aeol=lf core.autocrlf=false
ok 20 - no commits on one side
ok 34 - git show --pretty=format:%s does not show notes
ok 248 - pathmatch (via ls-files): match 'a[]-]b' 'a]b'
ok 249 - ipathmatch: match 'a]b' 'a[]-]b'
ok 1953 - setup LF checkout  with -c core.eol=crlf
ok 35 - git show --oneline does not show notes
ok 43 - git branch -d on orphan HEAD (unmerged, graph)
ok 36 - setup alternate notes ref
ok 250 - ipathmatch (via ls-files): match 'a[]-]b' 'a]b'
ok 1954 - setup CRLF checkout  with -c core.eol=crlf
ok 5 - should respect submodule.recurse when creating branches
ok 37 - git log --notes shows default notes
ok 1955 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 85 - "add" DWIM doesnt infer --orphan w/ DWIM (no --branch), no --quiet (expect output), 'cd repo && git', no --branch, 0 local branches, >=1 remotes, >=1 fetched remote branches, --guess-remote
ok 251 - cleanup after previous file test
ok 38 - git log --notes=X shows only X
ok 44 - git branch -v -d t should work
ok 1956 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 21 - changed message
ok 39 - git log --notes --notes=X shows both
ok 1957 - setup LF_nul checkout  with -c core.eol=crlf
ok 252 - setup match file test for aab
ok 253 - wildmatch: no match 'aab' 'a[]-]b'
ok 40 - git log --no-notes resets default state
ok 254 - wildmatch (via ls-files): no match 'a[]-]b' 'aab'
ok 41 - git log --no-notes resets ref list
ok 3 - remove some commits
ok 255 - iwildmatch: no match 'aab' 'a[]-]b'
ok 45 - git branch -v -m t s should work
ok 1958 - ls-files --eol attr=text ident aeol=lf core.autocrlf=false core.eol=crlf
ok 256 - iwildmatch (via ls-files): no match 'a[]-]b' 'aab'
ok 86 - "add" DWIM infer --orphan w/ empty repo, no --quiet (expect output), 'cd repo && git', --branch
ok 257 - pathmatch: no match 'aab' 'a[]-]b'
ok 4 - verify that commits are gone
ok 1959 - checkout attr=text ident aeol=lf core.autocrlf=false core.eol=crlf file=LF
ok 258 - pathmatch (via ls-files): no match 'a[]-]b' 'aab'
ok 22 - dual-coloring
ok 1960 - checkout attr=text ident aeol=lf core.autocrlf=false core.eol=crlf file=CRLF
ok 259 - ipathmatch: no match 'aab' 'a[]-]b'
ok 46 - git branch -m -d t s should fail
ok 1961 - checkout attr=text ident aeol=lf core.autocrlf=false core.eol=crlf file=CRLF_mix_LF
ok 59 - git_test_func: removed submodule leaves submodule directory and its contents in place
ok 5 - verify that notes are still present
ok 260 - ipathmatch (via ls-files): no match 'a[]-]b' 'aab'
ok 1962 - checkout attr=text ident aeol=lf core.autocrlf=false core.eol=crlf file=LF_mix_CR
ok 1963 - checkout attr=text ident aeol=lf core.autocrlf=false core.eol=crlf file=LF_nul
ok 42 - show -m notes
ok 261 - cleanup after previous file test
ok 1964 - setup config for checkout attr=text ident=ident aeol=crlf core.autocrlf=false
ok 6 - prune -n does not remove notes
ok 47 - git branch --list -d t should fail
ok 262 - setup match file test for aab
ok 7 - prune -n lists prunable notes
ok 23 - format-patch --range-diff=topic
ok 1965 - setup LF checkout  with -c core.eol=crlf
ok 6 - should ignore submodule.recurse when not creating branches
ok 8 - prune notes
ok 263 - wildmatch: match 'aab' 'a[]a-]b'
ok 1966 - setup CRLF checkout  with -c core.eol=crlf
ok 43 - remove note with add -f -F /dev/null
ok 264 - wildmatch (via ls-files): match 'a[]a-]b' 'aab'
ok 265 - iwildmatch: match 'aab' 'a[]a-]b'
ok 87 - "add" DWIM doesnt infer --orphan w/ no --quiet (expect output), 'cd repo && git', --branch, >=1 local branches, valid HEAD
ok 1967 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 44 - do not create empty note with -m ""
ok 1968 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 9 - verify that notes are gone
ok 266 - iwildmatch (via ls-files): match 'a[]a-]b' 'aab'
ok 24 - format-patch --range-diff=main..topic
ok 1969 - setup LF_nul checkout  with -c core.eol=crlf
ok 267 - pathmatch: match 'aab' 'a[]a-]b'
ok 268 - pathmatch (via ls-files): match 'a[]a-]b' 'aab'
ok 45 - create note with combination of -m and -F
ok 269 - ipathmatch: match 'aab' 'a[]a-]b'
ok 88 - "add" DWIM infer --orphan w/ no --quiet (expect output), 'cd repo && git', --branch, 0 local branches, 0 remotes, 0 fetched remote branches, --no-guess-remote
ok 1970 - ls-files --eol attr=text ident aeol=crlf core.autocrlf=false core.eol=crlf
ok 270 - ipathmatch (via ls-files): match 'a[]a-]b' 'aab'
ok 1971 - checkout attr=text ident aeol=crlf core.autocrlf=false core.eol=crlf file=LF
ok 25 - --range-diff implies --cover-letter for multi-patch series
ok 2 - test notes in 2/38-fanout
ok 271 - cleanup after previous file test
ok 1972 - checkout attr=text ident aeol=crlf core.autocrlf=false core.eol=crlf file=CRLF
ok 33 - git checkout -f --recurse-submodules: removed submodule absorbs submodules .git directory
ok 46 - create note with combination of -m and -F and --separator
ok 3 - verify notes in 2/38-fanout
ok 272 - setup match file test for ]
ok 10 - remove some commits
ok 1973 - checkout attr=text ident aeol=crlf core.autocrlf=false core.eol=crlf file=CRLF_mix_LF
ok 26 - explicit --no-cover-letter defeats implied --cover-letter
ok 273 - wildmatch: match ']' ']'
ok 11 - prune -v notes
ok 1974 - checkout attr=text ident aeol=crlf core.autocrlf=false core.eol=crlf file=LF_mix_CR
ok 47 - create note with combination of -m and -F and --no-separator
ok 1975 - checkout attr=text ident aeol=crlf core.autocrlf=false core.eol=crlf file=LF_nul
ok 274 - wildmatch (via ls-files): match ']' ']'
ok 275 - iwildmatch: match ']' ']'
ok 1976 - setup config for checkout attr=auto ident=ident aeol=lf core.autocrlf=false
ok 12 - verify that notes are gone
# passed all 12 test(s)
1..12
ok 27 - format-patch --range-diff as commentary
ok 276 - iwildmatch (via ls-files): match ']' ']'
ok 1977 - setup LF checkout  with -c core.eol=crlf
*** t3307-notes-man.sh ***
ok 277 - pathmatch: match ']' ']'
ok 1978 - setup CRLF checkout  with -c core.eol=crlf
ok 278 - pathmatch (via ls-files): match ']' ']'
ok 48 - remove note with "git notes remove"
ok 279 - ipathmatch: match ']' ']'
ok 28 - format-patch --range-diff reroll-count with a non-integer
ok 1979 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 89 - "add" DWIM infer --orphan w/ no --quiet (expect output), 'cd repo && git', --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --no-guess-remote
ok 1980 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 280 - ipathmatch (via ls-files): match ']' ']'
ok 31 - update-index --remove outside sparse definition
ok 49 - removing non-existing note should not create new commit
ok 1981 - setup LF_nul checkout  with -c core.eol=crlf
ok 281 - cleanup after previous file test
ok 29 - format-patch --range-diff reroll-count with a integer
ok 282 - setup match file test for foo/baz/bar
ok 283 - wildmatch: no match 'foo/baz/bar' 'foo*bar'
ok 1982 - ls-files --eol attr=auto ident aeol=lf core.autocrlf=false core.eol=crlf
ok 284 - wildmatch (via ls-files): no match 'foo*bar' 'foo/baz/bar'
ok 1983 - checkout attr=auto ident aeol=lf core.autocrlf=false core.eol=crlf file=LF
ok 285 - iwildmatch: no match 'foo/baz/bar' 'foo*bar'
ok 50 - removing more than one
ok 30 - format-patch --range-diff with v0
ok 1984 - checkout attr=auto ident aeol=lf core.autocrlf=false core.eol=crlf file=CRLF
ok 1985 - checkout attr=auto ident aeol=lf core.autocrlf=false core.eol=crlf file=CRLF_mix_LF
ok 286 - iwildmatch (via ls-files): no match 'foo*bar' 'foo/baz/bar'
ok 31 - range-diff overrides diff.noprefix internally
ok 287 - pathmatch: match 'foo/baz/bar' 'foo*bar'
ok 1986 - checkout attr=auto ident aeol=lf core.autocrlf=false core.eol=crlf file=LF_mix_CR
ok 51 - removing is atomic
ok 1987 - checkout attr=auto ident aeol=lf core.autocrlf=false core.eol=crlf file=LF_nul
ok 90 - "add" DWIM infer --orphan w/ no --quiet (expect output), 'cd repo && git', --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --guess-remote
ok 288 - pathmatch (via ls-files): match 'foo*bar' 'foo/baz/bar'
ok 7 - should create branches based off commit id in superproject
ok 1988 - setup config for checkout attr=auto ident=ident aeol=crlf core.autocrlf=false
ok 289 - ipathmatch: match 'foo/baz/bar' 'foo*bar'
ok 32 - basic with modified format.pretty with suffix
ok 1989 - setup LF checkout  with -c core.eol=crlf
ok 48 - deleting checked-out branch from repo that is a submodule
ok 290 - ipathmatch (via ls-files): match 'foo*bar' 'foo/baz/bar'
ok 60 - git_test_func: removed submodule leaves submodule containing a .git directory alone
ok 1990 - setup CRLF checkout  with -c core.eol=crlf
ok 52 - removing with --ignore-missing
ok 1991 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 291 - cleanup after previous file test
ok 33 - basic with modified format.pretty without "commit "
ok 1992 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 53 - removing with --ignore-missing but bogus ref
ok 292 - setup match file test for foo/baz/bar
ok 293 - wildmatch: no match 'foo/baz/bar' 'foo**bar'
ok 1993 - setup LF_nul checkout  with -c core.eol=crlf
ok 294 - wildmatch (via ls-files): no match 'foo**bar' 'foo/baz/bar'
ok 295 - iwildmatch: no match 'foo/baz/bar' 'foo**bar'
ok 296 - iwildmatch (via ls-files): no match 'foo**bar' 'foo/baz/bar'
ok 34 - git checkout -f --recurse-submodules: replace submodule with a file
ok 297 - pathmatch: match 'foo/baz/bar' 'foo**bar'
ok 54 - remove reads from --stdin
ok 1994 - ls-files --eol attr=auto ident aeol=crlf core.autocrlf=false core.eol=crlf
ok 8 - should not create any branches if branch is not valid for all repos
ok 298 - pathmatch (via ls-files): match 'foo**bar' 'foo/baz/bar'
ok 34 - range-diff compares notes by default
ok 49 - bare main worktree has HEAD at branch deleted by secondary worktree
ok 299 - ipathmatch: match 'foo/baz/bar' 'foo**bar'
ok 1995 - checkout attr=auto ident aeol=crlf core.autocrlf=false core.eol=crlf file=LF
ok 1996 - checkout attr=auto ident aeol=crlf core.autocrlf=false core.eol=crlf file=CRLF
ok 300 - ipathmatch (via ls-files): match 'foo**bar' 'foo/baz/bar'
ok 55 - remove --stdin is also atomic
ok 91 - "add" DWIM infer --orphan w/ no --quiet (expect output), 'cd repo && git', --branch, 0 local branches, >=1 remotes, >=1 fetched remote branches, --guess-remote
ok 1997 - checkout attr=auto ident aeol=crlf core.autocrlf=false core.eol=crlf file=CRLF_mix_LF
ok 1 - setup
ok 301 - cleanup after previous file test
ok 1998 - checkout attr=auto ident aeol=crlf core.autocrlf=false core.eol=crlf file=LF_mix_CR
ok 1999 - checkout attr=auto ident aeol=crlf core.autocrlf=false core.eol=crlf file=LF_nul
ok 302 - setup match file test for foobazbar
ok 2 - example 1: notes to add an Acked-by line
ok 303 - wildmatch: match 'foobazbar' 'foo**bar'
ok 2000 - setup config for checkout attr=-text ident=ident aeol= core.autocrlf=input
ok 304 - wildmatch (via ls-files): match 'foo**bar' 'foobazbar'
ok 2001 - setup LF checkout  with -c core.eol=crlf
ok 35 - range-diff with --no-notes
ok 305 - iwildmatch: match 'foobazbar' 'foo**bar'
ok 56 - removing with --stdin --ignore-missing
ok 2002 - setup CRLF checkout  with -c core.eol=crlf
ok 306 - iwildmatch (via ls-files): match 'foo**bar' 'foobazbar'
ok 307 - pathmatch: match 'foobazbar' 'foo**bar'
ok 2003 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 3 - example 2: binary notes
ok 2004 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 308 - pathmatch (via ls-files): match 'foo**bar' 'foobazbar'
# passed all 3 test(s)
1..3
ok 92 - "add" error, warn on bad HEAD, hint use orphan w/ DWIM (no --branch), no --quiet (expect output), 'cd repo && git', no --branch, >=1 local branches, invalid (or orphan) HEAD
ok 50 - secondary worktrees recognize core.bare=true in main config.worktree
ok 57 - list notes with "git notes list"
ok 309 - ipathmatch: match 'foobazbar' 'foo**bar'
ok 2005 - setup LF_nul checkout  with -c core.eol=crlf
*** t3308-notes-merge.sh ***
ok 58 - list notes with "git notes"
ok 310 - ipathmatch (via ls-files): match 'foo**bar' 'foobazbar'
ok 59 - "git notes" without subcommand does not take arguments
ok 311 - cleanup after previous file test
ok 60 - list specific note with "git notes list <object>"
ok 61 - listing non-existing notes fails
ok 2006 - ls-files --eol attr=-text ident aeol= core.autocrlf=input core.eol=crlf
ok 312 - setup match file test for foo/baz/bar
ok 36 - range-diff with multiple --notes
ok 313 - wildmatch: match 'foo/baz/bar' 'foo/**/bar'
ok 2007 - checkout attr=-text ident aeol= core.autocrlf=input core.eol=crlf file=LF
ok 9 - should create branches if branch exists and --force is given
ok 16 - split the index when the index contains a racily clean cache entry #4
ok 314 - wildmatch (via ls-files): match 'foo/**/bar' 'foo/baz/bar'
ok 2008 - checkout attr=-text ident aeol= core.autocrlf=input core.eol=crlf file=CRLF
ok 315 - iwildmatch: match 'foo/baz/bar' 'foo/**/bar'
not ok 61 - git_test_func: replace submodule with a directory must fail # TODO known breakage
ok 2009 - checkout attr=-text ident aeol= core.autocrlf=input core.eol=crlf file=CRLF_mix_LF
ok 316 - iwildmatch (via ls-files): match 'foo/**/bar' 'foo/baz/bar'
ok 62 - append: specify a separator with an empty arg
ok 317 - pathmatch: match 'foo/baz/bar' 'foo/**/bar'
ok 93 - "add" error, warn on bad HEAD, hint use orphan w/ no --quiet (expect output), 'cd repo && git', --branch, >=1 local branches, invalid (or orphan) HEAD
ok 51 - git branch --list -v with --abbrev
ok 2010 - checkout attr=-text ident aeol= core.autocrlf=input core.eol=crlf file=LF_mix_CR
ok 52 - git branch --column
ok 318 - pathmatch (via ls-files): match 'foo/**/bar' 'foo/baz/bar'
ok 2011 - checkout attr=-text ident aeol= core.autocrlf=input core.eol=crlf file=LF_nul
ok 319 - ipathmatch: match 'foo/baz/bar' 'foo/**/bar'
ok 2012 - setup config for checkout attr=-text ident=ident aeol=lf core.autocrlf=input
ok 320 - ipathmatch (via ls-files): match 'foo/**/bar' 'foo/baz/bar'
ok 2013 - setup LF checkout  with -c core.eol=crlf
ok 32 - update-index with directories
ok 37 - range-diff with --notes=custom does not show default notes
ok 63 - append: specify a separator without arg
ok 2014 - setup CRLF checkout  with -c core.eol=crlf
ok 321 - cleanup after previous file test
ok 2015 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 53 - git branch --column with an extremely long branch name
ok 322 - setup match file test for foo/baz/bar
ok 323 - wildmatch: match 'foo/baz/bar' 'foo/**/**/bar'
ok 2016 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
not ok 35 - git checkout -f --recurse-submodules: replace submodule with a file must fail with untracked files # TODO known breakage
ok 94 - "add" error, warn on bad HEAD, hint use orphan w/ no --quiet (expect output), 'cd repo && git', --detach, >=1 local branches, invalid (or orphan) HEAD
ok 324 - wildmatch (via ls-files): match 'foo/**/**/bar' 'foo/baz/bar'
ok 64 - append: specify as --no-separator
ok 325 - iwildmatch: match 'foo/baz/bar' 'foo/**/**/bar'
ok 2017 - setup LF_nul checkout  with -c core.eol=crlf
ok 54 - git branch with column.*
ok 55 - git branch --column -v should fail
ok 326 - iwildmatch (via ls-files): match 'foo/**/**/bar' 'foo/baz/bar'
ok 327 - pathmatch: no match 'foo/baz/bar' 'foo/**/**/bar'
ok 56 - git branch -v with column.ui ignored
ok 328 - pathmatch (via ls-files): no match 'foo/**/**/bar' 'foo/baz/bar'
ok 329 - ipathmatch: no match 'foo/baz/bar' 'foo/**/**/bar'
ok 65 - append: specify separator with line break
ok 2018 - ls-files --eol attr=-text ident aeol=lf core.autocrlf=input core.eol=crlf
ok 38 - format-patch --range-diff does not compare notes by default
ok 3 - notes timing with /usr/bin/time
ok 2019 - checkout attr=-text ident aeol=lf core.autocrlf=input core.eol=crlf file=LF
ok 330 - ipathmatch (via ls-files): no match 'foo/**/**/bar' 'foo/baz/bar'
ok 4 # skip setup 100 (missing EXPENSIVE)
ok 95 - "add" DWIM infer --orphan w/ empty repo, DWIM (no --branch), no --quiet (expect output), 'cd wt && git', no --branch
ok 5 # skip notes work (missing EXPENSIVE)
ok 57 - git branch -m q q2 without config should succeed
ok 6 # skip notes timing with /usr/bin/time (missing EXPENSIVE of USR_BIN_TIME,EXPENSIVE)
ok 2020 - checkout attr=-text ident aeol=lf core.autocrlf=input core.eol=crlf file=CRLF
ok 331 - cleanup after previous file test
ok 7 # skip setup 1000 (missing EXPENSIVE)
ok 8 # skip notes work (missing EXPENSIVE)
ok 9 # skip notes timing with /usr/bin/time (missing EXPENSIVE of USR_BIN_TIME,EXPENSIVE)
ok 10 # skip setup 10000 (missing EXPENSIVE)
ok 2021 - checkout attr=-text ident aeol=lf core.autocrlf=input core.eol=crlf file=CRLF_mix_LF
ok 66 - append: specify separator without line break
ok 11 # skip notes work (missing EXPENSIVE)
ok 332 - setup match file test for foo/b/a/z/bar
ok 333 - wildmatch: match 'foo/b/a/z/bar' 'foo/**/bar'
ok 12 # skip notes timing with /usr/bin/time (missing EXPENSIVE of USR_BIN_TIME,EXPENSIVE)
ok 4 - test notes in 2/2/36-fanout
ok 2022 - checkout attr=-text ident aeol=lf core.autocrlf=input core.eol=crlf file=LF_mix_CR
# passed all 12 test(s)
1..12
ok 2023 - checkout attr=-text ident aeol=lf core.autocrlf=input core.eol=crlf file=LF_nul
ok 334 - wildmatch (via ls-files): match 'foo/**/bar' 'foo/b/a/z/bar'
ok 2024 - setup config for checkout attr=-text ident=ident aeol=crlf core.autocrlf=input
*** t3309-notes-merge-auto-resolve.sh ***
ok 335 - iwildmatch: match 'foo/b/a/z/bar' 'foo/**/bar'
ok 5 - verify notes in 2/2/36-fanout
ok 58 - git branch -m s/s s should work when s/t is deleted
ok 2025 - setup LF checkout  with -c core.eol=crlf
ok 336 - iwildmatch (via ls-files): match 'foo/**/bar' 'foo/b/a/z/bar'
ok 337 - pathmatch: match 'foo/b/a/z/bar' 'foo/**/bar'
ok 67 - append: specify separator with multiple messages
ok 59 - config information was renamed, too
ok 2026 - setup CRLF checkout  with -c core.eol=crlf
ok 2027 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 338 - pathmatch (via ls-files): match 'foo/**/bar' 'foo/b/a/z/bar'
ok 339 - ipathmatch: match 'foo/b/a/z/bar' 'foo/**/bar'
ok 39 - format-patch --notes=custom --range-diff only compares custom notes
ok 2028 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 340 - ipathmatch (via ls-files): match 'foo/**/bar' 'foo/b/a/z/bar'
ok 68 - append note with combination of -m and -F and --separator
ok 2029 - setup LF_nul checkout  with -c core.eol=crlf
not ok 62 - git_test_func: replace submodule containing a .git directory with a directory must fail # TODO known breakage
ok 60 - git branch -m correctly renames multiple config sections
ok 341 - cleanup after previous file test
ok 69 - append to existing note with "git notes append"
ok 61 - git branch -c dumps usage
ok 96 - "add" DWIM doesnt infer --orphan w/ DWIM (no --branch), no --quiet (expect output), 'cd wt && git', no --branch, >=1 local branches, valid HEAD
ok 62 - git branch --copy dumps usage
ok 2030 - ls-files --eol attr=-text ident aeol=crlf core.autocrlf=input core.eol=crlf
ok 342 - setup match file test for foo/b/a/z/bar
ok 343 - wildmatch: match 'foo/b/a/z/bar' 'foo/**/**/bar'
ok 2031 - checkout attr=-text ident aeol=crlf core.autocrlf=input core.eol=crlf file=LF
ok 70 - "git notes list" does not expand to "git notes list HEAD"
ok 344 - wildmatch (via ls-files): match 'foo/**/**/bar' 'foo/b/a/z/bar'
ok 2032 - checkout attr=-text ident aeol=crlf core.autocrlf=input core.eol=crlf file=CRLF
ok 345 - iwildmatch: match 'foo/b/a/z/bar' 'foo/**/**/bar'
ok 2033 - checkout attr=-text ident aeol=crlf core.autocrlf=input core.eol=crlf file=CRLF_mix_LF
ok 346 - iwildmatch (via ls-files): match 'foo/**/**/bar' 'foo/b/a/z/bar'
ok 71 - appending empty string does not change existing note
ok 347 - pathmatch: match 'foo/b/a/z/bar' 'foo/**/**/bar'
ok 2034 - checkout attr=-text ident aeol=crlf core.autocrlf=input core.eol=crlf file=LF_mix_CR
ok 40 - format-patch --range-diff with --no-notes
ok 348 - pathmatch (via ls-files): match 'foo/**/**/bar' 'foo/b/a/z/bar'
ok 63 - git branch -c d e should work
ok 349 - ipathmatch: match 'foo/b/a/z/bar' 'foo/**/**/bar'
ok 2035 - checkout attr=-text ident aeol=crlf core.autocrlf=input core.eol=crlf file=LF_nul
ok 72 - git notes append == add when there is no existing note
ok 350 - ipathmatch (via ls-files): match 'foo/**/**/bar' 'foo/b/a/z/bar'
ok 2036 - setup config for checkout attr=text ident=ident aeol=lf core.autocrlf=input
ok 97 - "add" DWIM infer --orphan w/ DWIM (no --branch), no --quiet (expect output), 'cd wt && git', no --branch, 0 local branches, 0 remotes, 0 fetched remote branches, --no-guess-remote
ok 2037 - setup LF checkout  with -c core.eol=crlf
ok 1 - setup
ok 351 - cleanup after previous file test
ok 2038 - setup CRLF checkout  with -c core.eol=crlf
ok 2039 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 73 - appending empty string to non-existing note does not create note
ok 352 - setup match file test for foo/bar
ok 353 - wildmatch: match 'foo/bar' 'foo/**/bar'
ok 2040 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 64 - git branch --copy is a synonym for -c
ok 2041 - setup LF_nul checkout  with -c core.eol=crlf
ok 354 - wildmatch (via ls-files): match 'foo/**/bar' 'foo/bar'
ok 355 - iwildmatch: match 'foo/bar' 'foo/**/bar'
ok 41 - format-patch --range-diff with --notes
ok 356 - iwildmatch (via ls-files): match 'foo/**/bar' 'foo/bar'
ok 357 - pathmatch: no match 'foo/bar' 'foo/**/bar'
ok 2 - verify initial notes (x)
ok 358 - pathmatch (via ls-files): no match 'foo/**/bar' 'foo/bar'
ok 3 - fail to merge empty notes ref into empty notes ref (z => y)
ok 2042 - ls-files --eol attr=text ident aeol=lf core.autocrlf=input core.eol=crlf
ok 74 - create other note on a different notes ref (setup)
ok 359 - ipathmatch: no match 'foo/bar' 'foo/**/bar'
ok 65 - git branch -c ee ef should copy ee to create branch ef
ok 2043 - checkout attr=text ident aeol=lf core.autocrlf=input core.eol=crlf file=LF
ok 75 - Do not show note on other ref by default
ok 360 - ipathmatch (via ls-files): no match 'foo/**/bar' 'foo/bar'
ok 76 - Do show note when ref is given in GIT_NOTES_REF
ok 2044 - checkout attr=text ident aeol=lf core.autocrlf=input core.eol=crlf file=CRLF
ok 2045 - checkout attr=text ident aeol=lf core.autocrlf=input core.eol=crlf file=CRLF_mix_LF
ok 361 - cleanup after previous file test
ok 33 - update-index --again file outside sparse definition
ok 2046 - checkout attr=text ident aeol=lf core.autocrlf=input core.eol=crlf file=LF_mix_CR
ok 4 - fail to merge into various non-notes refs
ok 66 - git branch -c f/f g/g should work
ok 362 - setup match file test for foo/bar
ok 77 - Do show note when ref is given in core.notesRef config
ok 2047 - checkout attr=text ident aeol=lf core.autocrlf=input core.eol=crlf file=LF_nul
ok 363 - wildmatch: match 'foo/bar' 'foo/**/**/bar'
ok 2048 - setup config for checkout attr=text ident=ident aeol=crlf core.autocrlf=input
ok 98 - "add" DWIM infer --orphan w/ DWIM (no --branch), no --quiet (expect output), 'cd wt && git', no --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --no-guess-remote
ok 2049 - setup LF checkout  with -c core.eol=crlf
ok 364 - wildmatch (via ls-files): match 'foo/**/**/bar' 'foo/bar'
ok 42 - format-patch --range-diff with format.notes config
ok 365 - iwildmatch: match 'foo/bar' 'foo/**/**/bar'
ok 78 - Do not show note when core.notesRef is overridden
ok 2050 - setup CRLF checkout  with -c core.eol=crlf
ok 5 - merge non-notes ref into empty notes ref (remote-notes/origin/x => v)
ok 67 - git branch -c m2 m2 should work
ok 2051 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 366 - iwildmatch (via ls-files): match 'foo/**/**/bar' 'foo/bar'
not ok 63 - git_test_func: replace submodule with a file must fail # TODO known breakage
ok 367 - pathmatch: no match 'foo/bar' 'foo/**/**/bar'
ok 2052 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 368 - pathmatch (via ls-files): no match 'foo/**/**/bar' 'foo/bar'
ok 68 - git branch -c zz zz/zz should fail
ok 2053 - setup LF_nul checkout  with -c core.eol=crlf
ok 369 - ipathmatch: no match 'foo/bar' 'foo/**/**/bar'
ok 6 - merge notes into empty notes ref (x => y)
ok 69 - git branch -c b/b b should fail
ok 370 - ipathmatch (via ls-files): no match 'foo/**/**/bar' 'foo/bar'
ok 79 - Show all notes when notes.displayRef=refs/notes/*
ok 7 - merge empty notes ref (z => y)
ok 371 - cleanup after previous file test
ok 2054 - ls-files --eol attr=text ident aeol=crlf core.autocrlf=input core.eol=crlf
ok 36 - git checkout -f --recurse-submodules: worktrees of nested submodules are removed
ok 372 - setup match file test for foo/bar
ok 70 - git branch -C o/q o/p should work when o/p exists
ok 373 - wildmatch: no match 'foo/bar' 'foo?bar'
ok 99 - "add" error need fetch w/ DWIM (no --branch), no --quiet (expect output), 'cd wt && git', no --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --guess-remote
ok 2055 - checkout attr=text ident aeol=crlf core.autocrlf=input core.eol=crlf file=LF
ok 80 - core.notesRef is implicitly in notes.displayRef
ok 374 - wildmatch (via ls-files): no match 'foo?bar' 'foo/bar'
ok 2056 - checkout attr=text ident aeol=crlf core.autocrlf=input core.eol=crlf file=CRLF
ok 8 - change notes on other notes ref (y)
ok 375 - iwildmatch: no match 'foo/bar' 'foo?bar'
ok 71 - git branch -c -f o/q o/p should work when o/p exists
ok 43 - format-patch --range-diff with multiple notes
ok 376 - iwildmatch (via ls-files): no match 'foo?bar' 'foo/bar'
ok 2057 - checkout attr=text ident aeol=crlf core.autocrlf=input core.eol=crlf file=CRLF_mix_LF
ok 9 - merge previous notes commit (y^ => y) => No-op
ok 377 - pathmatch: match 'foo/bar' 'foo?bar'
ok 2058 - checkout attr=text ident aeol=crlf core.autocrlf=input core.eol=crlf file=LF_mix_CR
ok 72 - git branch -c qq rr/qq should fail when rr exists
ok 81 - notes.displayRef can be given more than once
ok 378 - pathmatch (via ls-files): match 'foo?bar' 'foo/bar'
ok 379 - ipathmatch: match 'foo/bar' 'foo?bar'
ok 2059 - checkout attr=text ident aeol=crlf core.autocrlf=input core.eol=crlf file=LF_nul
ok 73 - git branch -C b1 b2 should fail when b2 is checked out
ok 10 - verify changed notes on other notes ref (y)
ok 2060 - setup config for checkout attr=auto ident=ident aeol=lf core.autocrlf=input
ok 380 - ipathmatch (via ls-files): match 'foo?bar' 'foo/bar'
ok 10 - should create branch when submodule is not in HEAD:.gitmodules
ok 2061 - setup LF checkout  with -c core.eol=crlf
ok 11 - verify unchanged notes on original notes ref (x)
ok 2062 - setup CRLF checkout  with -c core.eol=crlf
ok 381 - cleanup after previous file test
ok 82 - notes.displayRef respects order
ok 74 - git branch -C c1 c2 should succeed when c1 is checked out
ok 2063 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 83 - notes.displayRef with no value handled gracefully
ok 75 - git branch -C c1 c2 should never touch HEAD
ok 2064 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 84 - GIT_NOTES_DISPLAY_REF works
ok 382 - setup match file test for foo/bar
ok 383 - wildmatch: no match 'foo/bar' 'foo[/]bar'
ok 2065 - setup LF_nul checkout  with -c core.eol=crlf
ok 76 - git branch -C main should work when main is checked out
ok 12 - merge original notes (x) into changed notes (y) => No-op
ok 384 - wildmatch (via ls-files): no match 'foo[/]bar' 'foo/bar'
ok 385 - iwildmatch: no match 'foo/bar' 'foo[/]bar'
ok 85 - GIT_NOTES_DISPLAY_REF overrides config
ok 77 - git branch -C main main should work when main is checked out
ok 386 - iwildmatch (via ls-files): no match 'foo[/]bar' 'foo/bar'
ok 86 - --show-notes=* adds to GIT_NOTES_DISPLAY_REF
ok 387 - pathmatch: match 'foo/bar' 'foo[/]bar'
ok 2066 - ls-files --eol attr=auto ident aeol=lf core.autocrlf=input core.eol=crlf
ok 100 - "add" DWIM infer --orphan w/ DWIM (no --branch), no --quiet (expect output), 'cd wt && git', no --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --guess-remote, --force
ok 78 - git branch -C main5 main5 should work when main is checked out
ok 44 - --left-only/--right-only
ok 2067 - checkout attr=auto ident aeol=lf core.autocrlf=input core.eol=crlf file=LF
ok 388 - pathmatch (via ls-files): match 'foo[/]bar' 'foo/bar'
ok 87 - --no-standard-notes
ok 389 - ipathmatch: match 'foo/bar' 'foo[/]bar'
ok 2068 - checkout attr=auto ident aeol=lf core.autocrlf=input core.eol=crlf file=CRLF
ok 390 - ipathmatch (via ls-files): match 'foo[/]bar' 'foo/bar'
ok 2069 - checkout attr=auto ident aeol=lf core.autocrlf=input core.eol=crlf file=CRLF_mix_LF
ok 11 - should not create branches in inactive submodules
ok 88 - --standard-notes
ok 2070 - checkout attr=auto ident aeol=lf core.autocrlf=input core.eol=crlf file=LF_mix_CR
ok 391 - cleanup after previous file test
ok 13 - merge changed (y) into original (x) => Fast-forward
ok 89 - --show-notes=ref accumulates
ok 45 - ranges with pathspecs
ok 2071 - checkout attr=auto ident aeol=lf core.autocrlf=input core.eol=crlf file=LF_nul
ok 2072 - setup config for checkout attr=auto ident=ident aeol=crlf core.autocrlf=input
ok 392 - setup match file test for foo/bar
ok 393 - wildmatch: no match 'foo/bar' 'foo[^a-z]bar'
ok 2073 - setup LF checkout  with -c core.eol=crlf
ok 79 - git branch -C ab cd should overwrite existing config for cd
not ok 64 - git_test_func: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 394 - wildmatch (via ls-files): no match 'foo[^a-z]bar' 'foo/bar'
ok 2074 - setup CRLF checkout  with -c core.eol=crlf
ok 395 - iwildmatch: no match 'foo/bar' 'foo[^a-z]bar'
ok 2075 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 396 - iwildmatch (via ls-files): no match 'foo[^a-z]bar' 'foo/bar'
ok 2076 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 397 - pathmatch: match 'foo/bar' 'foo[^a-z]bar'
ok 2077 - setup LF_nul checkout  with -c core.eol=crlf
ok 398 - pathmatch (via ls-files): match 'foo[^a-z]bar' 'foo/bar'
ok 14 - merge empty notes ref (z => y)
ok 399 - ipathmatch: match 'foo/bar' 'foo[^a-z]bar'
ok 400 - ipathmatch (via ls-files): match 'foo[^a-z]bar' 'foo/bar'
ok 80 - git branch -c correctly copies multiple config sections
ok 401 - cleanup after previous file test
ok 2078 - ls-files --eol attr=auto ident aeol=crlf core.autocrlf=input core.eol=crlf
ok 90 - Allow notes on non-commits (trees, blobs, tags)
ok 6 - test notes in 2/2/2/34-fanout
ok 15 - change notes on other notes ref (y)
ok 402 - setup match file test for foo/bar
ok 81 - deleting a symref
ok 2079 - checkout attr=auto ident aeol=crlf core.autocrlf=input core.eol=crlf file=LF
ok 403 - wildmatch: no match 'foo/bar' 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r'
ok 7 - verify notes in 2/2/2/34-fanout
ok 404 - wildmatch (via ls-files): no match 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r' 'foo/bar'
ok 2080 - checkout attr=auto ident aeol=crlf core.autocrlf=input core.eol=crlf file=CRLF
ok 405 - iwildmatch: no match 'foo/bar' 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r'
ok 12 - should set up tracking of local branches with track=always
ok 2081 - checkout attr=auto ident aeol=crlf core.autocrlf=input core.eol=crlf file=CRLF_mix_LF
ok 101 - "add" DWIM doesnt infer --orphan w/ DWIM (no --branch), no --quiet (expect output), 'cd wt && git', no --branch, 0 local branches, >=1 remotes, >=1 fetched remote branches, --guess-remote
ok 406 - iwildmatch (via ls-files): no match 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r' 'foo/bar'
ok 82 - deleting a dangling symref
ok 2082 - checkout attr=auto ident aeol=crlf core.autocrlf=input core.eol=crlf file=LF_mix_CR
ok 407 - pathmatch: match 'foo/bar' 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r'
ok 2083 - checkout attr=auto ident aeol=crlf core.autocrlf=input core.eol=crlf file=LF_nul
ok 1 - setup commits
ok 16 - change notes on notes ref (x)
ok 91 - create note from other note with "git notes add -C"
ok 408 - pathmatch (via ls-files): match 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r' 'foo/bar'
ok 2084 - setup config for checkout attr= ident=ident aeol= core.autocrlf=false
ok 409 - ipathmatch: match 'foo/bar' 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r'
ok 83 - deleting a self-referential symref
ok 2085 - setup LF checkout  with -c core.eol=crlf
ok 410 - ipathmatch (via ls-files): match 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r' 'foo/bar'
ok 34 - update-index --cacheinfo
ok 2086 - setup CRLF checkout  with -c core.eol=crlf
ok 411 - cleanup after previous file test
ok 2087 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 37 - git checkout -f --recurse-submodules: modified submodule updates submodule work tree
ok 84 - renaming a symref is not allowed
ok 17 - merge y into x => Non-conflicting 3-way merge
ok 92 - create note from non-existing note with "git notes add -C" fails
ok 2088 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 102 - "add" DWIM infer --orphan w/ empty repo, no --quiet (expect output), 'cd wt && git', --branch
ok 412 - setup match file test for foo-bar
ok 2089 - setup LF_nul checkout  with -c core.eol=crlf
ok 413 - wildmatch: match 'foo-bar' 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r'
ok 414 - wildmatch (via ls-files): match 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r' 'foo-bar'
ok 93 - create note from non-blob with "git notes add -C" fails
ok 415 - iwildmatch: match 'foo-bar' 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r'
ok 416 - iwildmatch (via ls-files): match 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r' 'foo-bar'
ok 417 - pathmatch: match 'foo-bar' 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r'
ok 18 - create notes on new, separate notes ref (w)
ok 2090 - ls-files --eol attr= ident aeol= core.autocrlf=false core.eol=crlf
ok 13 - should set up tracking of local branches with explicit track
ok 418 - pathmatch (via ls-files): match 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r' 'foo-bar'
ok 2091 - checkout attr= ident aeol= core.autocrlf=false core.eol=crlf file=LF
ok 419 - ipathmatch: match 'foo-bar' 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r'
ok 94 - create note from blob with "git notes add -C" reuses blob id
ok 420 - ipathmatch (via ls-files): match 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r' 'foo-bar'
ok 2092 - checkout attr= ident aeol= core.autocrlf=false core.eol=crlf file=CRLF
ok 2093 - checkout attr= ident aeol= core.autocrlf=false core.eol=crlf file=CRLF_mix_LF
ok 421 - cleanup after previous file test
ok 85 - test tracking setup via --track
ok 2094 - checkout attr= ident aeol= core.autocrlf=false core.eol=crlf file=LF_mix_CR
ok 422 - setup match file test for foo
ok 423 - wildmatch: match 'foo' '**/foo'
ok 2095 - checkout attr= ident aeol= core.autocrlf=false core.eol=crlf file=LF_nul
ok 2096 - setup config for checkout attr= ident=ident aeol= core.autocrlf=true
ok 424 - wildmatch (via ls-files): match '**/foo' 'foo'
ok 2 - setup merge base (x)
ok 2097 - setup LF checkout  with -c core.eol=crlf
ok 19 - merge w into x => Non-conflicting history-less merge
ok 425 - iwildmatch: match 'foo' '**/foo'
ok 103 - "add" DWIM doesnt infer --orphan w/ no --quiet (expect output), 'cd wt && git', --branch, >=1 local branches, valid HEAD
# passed all 19 test(s)
1..19
ok 2098 - setup CRLF checkout  with -c core.eol=crlf
ok 95 - create note from blob with "-C", also specify "-m", "-F" and "--separator"
ok 86 - test tracking setup (non-wildcard, matching)
ok 426 - iwildmatch (via ls-files): match '**/foo' 'foo'
ok 2099 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 427 - pathmatch: no match 'foo' '**/foo'
ok 2100 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 3 - verify state of merge base (x)
ok 428 - pathmatch (via ls-files): no match '**/foo' 'foo'
*** t3310-notes-merge-manual-resolve.sh ***
ok 2101 - setup LF_nul checkout  with -c core.eol=crlf
ok 429 - ipathmatch: no match 'foo' '**/foo'
ok 87 - tracking setup fails on non-matching refspec
ok 430 - ipathmatch (via ls-files): no match '**/foo' 'foo'
ok 2102 - ls-files --eol attr= ident aeol= core.autocrlf=true core.eol=crlf
ok 431 - cleanup after previous file test
ok 2103 - checkout attr= ident aeol= core.autocrlf=true core.eol=crlf file=LF
ok 14 - should not set up unnecessary tracking of local branches
ok 432 - setup match file test for XXX/foo
ok 2104 - checkout attr= ident aeol= core.autocrlf=true core.eol=crlf file=CRLF
ok 104 - "add" DWIM infer --orphan w/ no --quiet (expect output), 'cd wt && git', --branch, 0 local branches, 0 remotes, 0 fetched remote branches, --no-guess-remote
ok 96 - create note from other note with "git notes add -c"
ok 433 - wildmatch: match 'XXX/foo' '**/foo'
ok 2105 - checkout attr= ident aeol= core.autocrlf=true core.eol=crlf file=CRLF_mix_LF
ok 434 - wildmatch (via ls-files): match '**/foo' 'XXX/foo'
ok 65 - git_test_func: modified submodule does not update submodule work tree
ok 435 - iwildmatch: match 'XXX/foo' '**/foo'
ok 88 - test tracking setup via config
ok 2106 - checkout attr= ident aeol= core.autocrlf=true core.eol=crlf file=LF_mix_CR
ok 2107 - checkout attr= ident aeol= core.autocrlf=true core.eol=crlf file=LF_nul
ok 436 - iwildmatch (via ls-files): match '**/foo' 'XXX/foo'
ok 437 - pathmatch: match 'XXX/foo' '**/foo'
ok 2108 - setup config for checkout attr=auto ident=ident aeol= core.autocrlf=true
ok 97 - create note from non-existing note with "git notes add -c" fails
ok 438 - pathmatch (via ls-files): match '**/foo' 'XXX/foo'
ok 2109 - setup LF checkout  with -c core.eol=crlf
ok 4 - setup local branch (y)
ok 439 - ipathmatch: match 'XXX/foo' '**/foo'
ok 46 - submodule changes are shown irrespective of diff.submodule
ok 2110 - setup CRLF checkout  with -c core.eol=crlf
ok 440 - ipathmatch (via ls-files): match '**/foo' 'XXX/foo'
ok 89 - test overriding tracking setup via --no-track
ok 98 - append to note from other note with "git notes append -C"
ok 2111 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 441 - cleanup after previous file test
ok 2112 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 2113 - setup LF_nul checkout  with -c core.eol=crlf
ok 5 - verify state of local branch (y)
ok 442 - setup match file test for bar/baz/foo
ok 90 - no tracking without .fetch entries
ok 38 - git checkout -f --recurse-submodules: updating to a missing submodule commit fails
ok 443 - wildmatch: match 'bar/baz/foo' '**/foo'
ok 99 - create note from other note with "git notes append -c"
ok 444 - wildmatch (via ls-files): match '**/foo' 'bar/baz/foo'
ok 445 - iwildmatch: match 'bar/baz/foo' '**/foo'
ok 47 - --diff-merges
# passed all 47 test(s)
1..47
ok 2114 - ls-files --eol attr=auto ident aeol= core.autocrlf=true core.eol=crlf
ok 446 - iwildmatch (via ls-files): match '**/foo' 'bar/baz/foo'
ok 447 - pathmatch: match 'bar/baz/foo' '**/foo'
ok 2115 - checkout attr=auto ident aeol= core.autocrlf=true core.eol=crlf file=LF
ok 2116 - checkout attr=auto ident aeol= core.autocrlf=true core.eol=crlf file=CRLF
ok 105 - "add" DWIM infer --orphan w/ no --quiet (expect output), 'cd wt && git', --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --no-guess-remote
ok 91 - test tracking setup via --track but deeper
*** t3311-notes-merge-fanout.sh ***
ok 448 - pathmatch (via ls-files): match '**/foo' 'bar/baz/foo'
ok 449 - ipathmatch: match 'bar/baz/foo' '**/foo'
ok 100 - append to note from other note with "git notes append -c"
ok 2117 - checkout attr=auto ident aeol= core.autocrlf=true core.eol=crlf file=CRLF_mix_LF
ok 92 - test deleting branch deletes branch config
ok 450 - ipathmatch (via ls-files): match '**/foo' 'bar/baz/foo'
ok 2118 - checkout attr=auto ident aeol= core.autocrlf=true core.eol=crlf file=LF_mix_CR
ok 2119 - checkout attr=auto ident aeol= core.autocrlf=true core.eol=crlf file=LF_nul
ok 451 - cleanup after previous file test
ok 6 - setup remote branch (z)
ok 93 - test deleting branch without config
ok 2120 - setup config for checkout attr=text ident=ident aeol= core.autocrlf=true
ok 101 - copy note with "git notes copy"
ok 2121 - setup LF checkout  with -c core.eol=crlf
ok 452 - setup match file test for bar/baz/foo
ok 453 - wildmatch: no match 'bar/baz/foo' '*/foo'
ok 2122 - setup CRLF checkout  with -c core.eol=crlf
ok 454 - wildmatch (via ls-files): no match '*/foo' 'bar/baz/foo'
ok 2123 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 455 - iwildmatch: no match 'bar/baz/foo' '*/foo'
ok 7 - verify state of remote branch (z)
ok 2124 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 94 - deleting currently checked out branch fails
ok 456 - iwildmatch (via ls-files): no match '*/foo' 'bar/baz/foo'
ok 2125 - setup LF_nul checkout  with -c core.eol=crlf
ok 457 - pathmatch: match 'bar/baz/foo' '*/foo'
ok 102 - copy note with "git notes copy" with default
ok 458 - pathmatch (via ls-files): match '*/foo' 'bar/baz/foo'
ok 8 - merge z into y with invalid strategy => Fail/No changes
ok 459 - ipathmatch: match 'bar/baz/foo' '*/foo'
ok 106 - "add" DWIM infer --orphan w/ no --quiet (expect output), 'cd wt && git', --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --guess-remote
ok 460 - ipathmatch (via ls-files): match '*/foo' 'bar/baz/foo'
ok 2126 - ls-files --eol attr=text ident aeol= core.autocrlf=true core.eol=crlf
ok 103 - prevent overwrite with "git notes copy"
ok 2127 - checkout attr=text ident aeol= core.autocrlf=true core.eol=crlf file=LF
ok 9 - merge z into y with invalid configuration option => Fail/No changes
ok 461 - cleanup after previous file test
ok 2128 - checkout attr=text ident aeol= core.autocrlf=true core.eol=crlf file=CRLF
ok 2129 - checkout attr=text ident aeol= core.autocrlf=true core.eol=crlf file=CRLF_mix_LF
ok 462 - setup match file test for foo/bar/baz
ok 463 - wildmatch: no match 'foo/bar/baz' '**/bar*'
ok 104 - allow overwrite with "git notes copy -f"
ok 2130 - checkout attr=text ident aeol= core.autocrlf=true core.eol=crlf file=LF_mix_CR
ok 464 - wildmatch (via ls-files): no match '**/bar*' 'foo/bar/baz'
ok 465 - iwildmatch: no match 'foo/bar/baz' '**/bar*'
ok 1 - setup commits
ok 2131 - checkout attr=text ident aeol= core.autocrlf=true core.eol=crlf file=LF_nul
ok 95 - deleting in-use branch fails
ok 2132 - setup config for checkout attr=text ident=ident aeol= core.autocrlf=input
ok 10 - merge z into y with "ours" strategy => Non-conflicting 3-way merge
ok 466 - iwildmatch (via ls-files): no match '**/bar*' 'foo/bar/baz'
ok 2133 - setup LF checkout  with -c core.eol=crlf
ok 467 - pathmatch: match 'foo/bar/baz' '**/bar*'
ok 35 - 'read-tree -mu base HEAD update-folder2' with files outside sparse definition
ok 96 - test --track without .fetch entries
ok 2134 - setup CRLF checkout  with -c core.eol=crlf
ok 105 - allow overwrite with "git notes copy -f" with default
ok 2135 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 468 - pathmatch (via ls-files): match '**/bar*' 'foo/bar/baz'
ok 11 - reset to pre-merge state (y)
ok 97 - branch from non-branch HEAD w/autosetupmerge=always
ok 469 - ipathmatch: match 'foo/bar/baz' '**/bar*'
ok 2136 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 98 - branch from non-branch HEAD w/--track causes failure
ok 2137 - setup LF_nul checkout  with -c core.eol=crlf
ok 99 - branch from tag w/--track causes failure
ok 470 - ipathmatch (via ls-files): match '**/bar*' 'foo/bar/baz'
ok 12 - merge z into y with "ours" configuration option => Non-conflicting 3-way merge
ok 471 - cleanup after previous file test
ok 2 - setup merge base (x)
ok 106 - cannot copy note from object without notes
ok 472 - setup match file test for deep/foo/bar/baz
ok 473 - wildmatch: match 'deep/foo/bar/baz' '**/bar/*'
ok 2138 - ls-files --eol attr=text ident aeol= core.autocrlf=input core.eol=crlf
ok 66 - git_test_func: modified submodule does not update submodule work tree to invalid commit
ok 13 - reset to pre-merge state (y)
ok 2139 - checkout attr=text ident aeol= core.autocrlf=input core.eol=crlf file=LF
ok 107 - "add" DWIM infer --orphan w/ no --quiet (expect output), 'cd wt && git', --branch, 0 local branches, >=1 remotes, >=1 fetched remote branches, --guess-remote
ok 474 - wildmatch (via ls-files): match '**/bar/*' 'deep/foo/bar/baz'
ok 475 - iwildmatch: match 'deep/foo/bar/baz' '**/bar/*'
ok 2140 - checkout attr=text ident aeol= core.autocrlf=input core.eol=crlf file=CRLF
ok 476 - iwildmatch (via ls-files): match '**/bar/*' 'deep/foo/bar/baz'
ok 2141 - checkout attr=text ident aeol= core.autocrlf=input core.eol=crlf file=CRLF_mix_LF
ok 477 - pathmatch: match 'deep/foo/bar/baz' '**/bar/*'
ok 14 - merge z into y with "ours" per-ref configuration option => Non-conflicting 3-way merge
ok 15 - setup tests with remotes
ok 2142 - checkout attr=text ident aeol= core.autocrlf=input core.eol=crlf file=LF_mix_CR
ok 478 - pathmatch (via ls-files): match '**/bar/*' 'deep/foo/bar/baz'
ok 479 - ipathmatch: match 'deep/foo/bar/baz' '**/bar/*'
ok 2143 - checkout attr=text ident aeol= core.autocrlf=input core.eol=crlf file=LF_nul
ok 2144 - setup config for checkout attr=auto ident=ident aeol= core.autocrlf=input
ok 3 - setup local branch (y)
ok 15 - reset to pre-merge state (y)
ok 480 - ipathmatch (via ls-files): match '**/bar/*' 'deep/foo/bar/baz'
ok 2145 - setup LF checkout  with -c core.eol=crlf
ok 107 - git notes copy --stdin
ok 2146 - setup CRLF checkout  with -c core.eol=crlf
ok 481 - cleanup after previous file test
ok 2147 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 482 - setup match file test for deep/foo/bar/baz/
ok 39 - git checkout -f --recurse-submodules: submodule branch is not changed, detach HEAD instead
ok 483 - wildmatch: no match 'deep/foo/bar/baz/' '**/bar/*'
ok 2148 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
not ok 484 - wildmatch (via ls-files): no match skip '**/bar/*' 'deep/foo/bar/baz/' # TODO known breakage
ok 16 - merge z into y with "theirs" strategy => Non-conflicting 3-way merge
ok 485 - iwildmatch: no match 'deep/foo/bar/baz/' '**/bar/*'
ok 100 - simple tracking works when remote branch name matches
ok 2149 - setup LF_nul checkout  with -c core.eol=crlf
not ok 486 - iwildmatch (via ls-files): no match skip '**/bar/*' 'deep/foo/bar/baz/' # TODO known breakage
ok 487 - pathmatch: match 'deep/foo/bar/baz/' '**/bar/*'
not ok 488 - pathmatch (via ls-files): match skip '**/bar/*' 'deep/foo/bar/baz/' # TODO known breakage
ok 1 - setup a few initial commits with notes (notes ref: x)
ok 489 - ipathmatch: match 'deep/foo/bar/baz/' '**/bar/*'
ok 108 - "add" error, warn on bad HEAD, hint use orphan w/ DWIM (no --branch), no --quiet (expect output), 'cd wt && git', no --branch, >=1 local branches, invalid (or orphan) HEAD
ok 17 - reset to pre-merge state (y)
not ok 490 - ipathmatch (via ls-files): match skip '**/bar/*' 'deep/foo/bar/baz/' # TODO known breakage
ok 4 - setup remote branch (z)
ok 491 - cleanup after previous file test
ok 492 - setup match file test for deep/foo/bar/baz/
ok 2150 - ls-files --eol attr=auto ident aeol= core.autocrlf=input core.eol=crlf
ok 493 - wildmatch: match 'deep/foo/bar/baz/' '**/bar/**'
not ok 494 - wildmatch (via ls-files): match skip '**/bar/**' 'deep/foo/bar/baz/' # TODO known breakage
ok 2151 - checkout attr=auto ident aeol= core.autocrlf=input core.eol=crlf file=LF
ok 495 - iwildmatch: match 'deep/foo/bar/baz/' '**/bar/**'
ok 18 - merge z into y with "theirs" strategy overriding configuration option "ours" => Non-conflicting 3-way merge
not ok 496 - iwildmatch (via ls-files): match skip '**/bar/**' 'deep/foo/bar/baz/' # TODO known breakage
ok 497 - pathmatch: match 'deep/foo/bar/baz/' '**/bar/**'
not ok 498 - pathmatch (via ls-files): match skip '**/bar/**' 'deep/foo/bar/baz/' # TODO known breakage
ok 2152 - checkout attr=auto ident aeol= core.autocrlf=input core.eol=crlf file=CRLF
ok 499 - ipathmatch: match 'deep/foo/bar/baz/' '**/bar/**'
ok 2153 - checkout attr=auto ident aeol= core.autocrlf=input core.eol=crlf file=CRLF_mix_LF
not ok 500 - ipathmatch (via ls-files): match skip '**/bar/**' 'deep/foo/bar/baz/' # TODO known breakage
ok 501 - cleanup after previous file test
ok 2154 - checkout attr=auto ident aeol= core.autocrlf=input core.eol=crlf file=LF_mix_CR
ok 19 - reset to pre-merge state (y)
ok 108 - git notes copy --for-rewrite (unconfigured)
ok 2155 - checkout attr=auto ident aeol= core.autocrlf=input core.eol=crlf file=LF_nul
ok 2 - sanity check (x)
ok 502 - setup match file test for deep/foo/bar
ok 2156 - setup config for checkout attr=-text ident=ident aeol= core.autocrlf=true
ok 503 - wildmatch: no match 'deep/foo/bar' '**/bar/*'
ok 2157 - setup LF checkout  with -c core.eol=native
ok 504 - wildmatch (via ls-files): no match '**/bar/*' 'deep/foo/bar'
ok 505 - iwildmatch: no match 'deep/foo/bar' '**/bar/*'
ok 2158 - setup CRLF checkout  with -c core.eol=native
ok 506 - iwildmatch (via ls-files): no match '**/bar/*' 'deep/foo/bar'
ok 8 - test same notes in no fanout and 2/38-fanout
ok 2159 - setup LF_mix_CR checkout  with -c core.eol=native
ok 101 - simple tracking skips when remote branch name does not match
ok 507 - pathmatch: no match 'deep/foo/bar' '**/bar/*'
ok 109 - "add" error, warn on bad HEAD, hint use orphan w/ no --quiet (expect output), 'cd wt && git', --branch, >=1 local branches, invalid (or orphan) HEAD
ok 20 - merge z into y with "union" strategy => Non-conflicting 3-way merge
ok 2160 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 508 - pathmatch (via ls-files): no match '**/bar/*' 'deep/foo/bar'
ok 9 - verify same notes in no fanout and 2/38-fanout
ok 509 - ipathmatch: no match 'deep/foo/bar' '**/bar/*'
ok 5 - merge z into m (== y) with default ("manual") resolver => Conflicting 3-way merge
ok 2161 - setup LF_nul checkout  with -c core.eol=native
ok 21 - reset to pre-merge state (y)
ok 510 - ipathmatch (via ls-files): no match '**/bar/*' 'deep/foo/bar'
ok 109 - git notes copy --for-rewrite (enabled)
ok 6 - change notes in z
ok 22 - merge z into y with "union" strategy overriding per-ref configuration => Non-conflicting 3-way merge
ok 511 - cleanup after previous file test
ok 7 - cannot do merge w/conflicts when previous merge is unfinished
ok 512 - setup match file test for deep/foo/bar/
ok 2162 - ls-files --eol attr=-text ident aeol= core.autocrlf=true core.eol=native
ok 110 - git notes copy --for-rewrite (disabled)
ok 513 - wildmatch: match 'deep/foo/bar/' '**/bar/**'
not ok 514 - wildmatch (via ls-files): match skip '**/bar/**' 'deep/foo/bar/' # TODO known breakage
ok 2163 - checkout attr=-text ident aeol= core.autocrlf=true core.eol=native file=LF
ok 515 - iwildmatch: match 'deep/foo/bar/' '**/bar/**'
not ok 516 - iwildmatch (via ls-files): match skip '**/bar/**' 'deep/foo/bar/' # TODO known breakage
ok 67 - git_test_func: modified submodule does not update submodule work tree from invalid commit
ok 517 - pathmatch: match 'deep/foo/bar/' '**/bar/**'
ok 2164 - checkout attr=-text ident aeol= core.autocrlf=true core.eol=native file=CRLF
ok 23 - reset to pre-merge state (y)
not ok 518 - pathmatch (via ls-files): match skip '**/bar/**' 'deep/foo/bar/' # TODO known breakage
ok 110 - "add" error, warn on bad HEAD, hint use orphan w/ no --quiet (expect output), 'cd wt && git', --detach, >=1 local branches, invalid (or orphan) HEAD
ok 519 - ipathmatch: match 'deep/foo/bar/' '**/bar/**'
ok 40 - git checkout -f --recurse-submodules: added submodule does remove untracked unignored file with same name when forced
not ok 520 - ipathmatch (via ls-files): match skip '**/bar/**' 'deep/foo/bar/' # TODO known breakage
ok 521 - cleanup after previous file test
ok 2165 - checkout attr=-text ident aeol= core.autocrlf=true core.eol=native file=CRLF_mix_LF
ok 102 - simple tracking skips when remote ref is not a branch
ok 103 - --set-upstream-to fails on multiple branches
ok 2166 - checkout attr=-text ident aeol= core.autocrlf=true core.eol=native file=LF_mix_CR
ok 522 - setup match file test for foo/bar/baz
ok 523 - wildmatch: no match 'foo/bar/baz' '**/bar**'
ok 2167 - checkout attr=-text ident aeol= core.autocrlf=true core.eol=native file=LF_nul
ok 24 - merge z into y with "union" per-ref overriding general configuration => Non-conflicting 3-way merge
ok 8 - setup unrelated notes ref (w)
ok 2168 - setup config for checkout attr=-text ident=ident aeol=lf core.autocrlf=true
ok 524 - wildmatch (via ls-files): no match '**/bar**' 'foo/bar/baz'
ok 104 - --set-upstream-to fails on detached HEAD
ok 111 - git notes copy --for-rewrite (overwrite)
ok 2169 - setup LF checkout  with -c core.eol=native
ok 525 - iwildmatch: no match 'foo/bar/baz' '**/bar**'
ok 25 - reset to pre-merge state (y)
ok 105 - --set-upstream-to fails on a missing dst branch
ok 111 - "add" DWIM infer --orphan w/ empty repo, DWIM (no --branch), no --quiet (expect output), 'git -C repo', no --branch
ok 2170 - setup CRLF checkout  with -c core.eol=native
ok 526 - iwildmatch (via ls-files): no match '**/bar**' 'foo/bar/baz'
ok 106 - --set-upstream-to fails on a missing src branch
ok 527 - pathmatch: match 'foo/bar/baz' '**/bar**'
ok 2171 - setup LF_mix_CR checkout  with -c core.eol=native
ok 107 - --set-upstream-to fails on a non-ref
ok 528 - pathmatch (via ls-files): match '**/bar**' 'foo/bar/baz'
ok 529 - ipathmatch: match 'foo/bar/baz' '**/bar**'
ok 2172 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 26 - merge z into y with "manual" per-ref only checks specific ref configuration => Conflicting 3-way merge
ok 112 - git notes copy --for-rewrite (ignore)
ok 530 - ipathmatch (via ls-files): match '**/bar**' 'foo/bar/baz'
ok 2173 - setup LF_nul checkout  with -c core.eol=native
ok 108 - --set-upstream-to fails on locked config
ok 531 - cleanup after previous file test
ok 9 - can do merge without conflicts even if previous merge is unfinished (x => w)
ok 532 - setup match file test for foo/bar/baz/x
ok 10 - do not allow mixing --commit and --abort
ok 533 - wildmatch: match 'foo/bar/baz/x' '*/bar/**'
ok 2174 - ls-files --eol attr=-text ident aeol=lf core.autocrlf=true core.eol=native
ok 11 - do not allow mixing --commit and --strategy
ok 12 - do not allow mixing --abort and --strategy
ok 534 - wildmatch (via ls-files): match '*/bar/**' 'foo/bar/baz/x'
ok 112 - "add" DWIM doesnt infer --orphan w/ DWIM (no --branch), no --quiet (expect output), 'git -C repo', no --branch, >=1 local branches, valid HEAD
ok 68 - git_test_func: added submodule does remove untracked unignored file with same name when forced
ok 535 - iwildmatch: match 'foo/bar/baz/x' '*/bar/**'
ok 27 - merge y into z with "union" strategy => Non-conflicting 3-way merge
ok 2175 - checkout attr=-text ident aeol=lf core.autocrlf=true core.eol=native file=LF
# still have 10 known breakage(s)
# passed all remaining 58 test(s)
1..68
ok 536 - iwildmatch (via ls-files): match '*/bar/**' 'foo/bar/baz/x'
ok 2176 - checkout attr=-text ident aeol=lf core.autocrlf=true core.eol=native file=CRLF
ok 109 - use --set-upstream-to modify HEAD
ok 113 - git notes copy --for-rewrite (append)
ok 537 - pathmatch: match 'foo/bar/baz/x' '*/bar/**'
ok 2177 - checkout attr=-text ident aeol=lf core.autocrlf=true core.eol=native file=CRLF_mix_LF
ok 28 - reset to pre-merge state (z)
ok 538 - pathmatch (via ls-files): match '*/bar/**' 'foo/bar/baz/x'
ok 539 - ipathmatch: match 'foo/bar/baz/x' '*/bar/**'
*** t3320-notes-merge-worktrees.sh ***
ok 36 - 'read-tree -mu update-folder1 update-folder2' with files outside sparse definition
ok 2178 - checkout attr=-text ident aeol=lf core.autocrlf=true core.eol=native file=LF_mix_CR
ok 17 - update the split index when it contains a new racily clean cache entry #0
ok 540 - ipathmatch (via ls-files): match '*/bar/**' 'foo/bar/baz/x'
ok 2179 - checkout attr=-text ident aeol=lf core.autocrlf=true core.eol=native file=LF_nul
ok 113 - "add" DWIM infer --orphan w/ DWIM (no --branch), no --quiet (expect output), 'git -C repo', no --branch, 0 local branches, 0 remotes, 0 fetched remote branches, --no-guess-remote
ok 2180 - setup config for checkout attr=-text ident=ident aeol=crlf core.autocrlf=true
ok 110 - use --set-upstream-to modify a particular branch
ok 2181 - setup LF checkout  with -c core.eol=native
ok 111 - --unset-upstream should fail if given a non-existent branch
ok 541 - cleanup after previous file test
ok 2182 - setup CRLF checkout  with -c core.eol=native
ok 29 - merge y into z with "cat_sort_uniq" strategy => Non-conflicting 3-way merge
ok 542 - setup match file test for deep/foo/bar/baz/x
ok 2183 - setup LF_mix_CR checkout  with -c core.eol=native
ok 543 - wildmatch: no match 'deep/foo/bar/baz/x' '*/bar/**'
ok 112 - --unset-upstream should fail if config is locked
ok 2184 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 114 - git notes copy --for-rewrite (append two to one)
ok 544 - wildmatch (via ls-files): no match '*/bar/**' 'deep/foo/bar/baz/x'
ok 30 - reset to pre-merge state (z)
ok 2185 - setup LF_nul checkout  with -c core.eol=native
ok 16 - should get fatal error upon branch creation when submodule is not in .git/modules
ok 545 - iwildmatch: no match 'deep/foo/bar/baz/x' '*/bar/**'
ok 546 - iwildmatch (via ls-files): no match '*/bar/**' 'deep/foo/bar/baz/x'
ok 31 - merge y into z with "cat_sort_uniq" strategy configuration option => Non-conflicting 3-way merge
ok 547 - pathmatch: match 'deep/foo/bar/baz/x' '*/bar/**'
# passed all 31 test(s)
1..31
ok 13 - finalize conflicting merge (z => m)
ok 548 - pathmatch (via ls-files): match '*/bar/**' 'deep/foo/bar/baz/x'
ok 2186 - ls-files --eol attr=-text ident aeol=crlf core.autocrlf=true core.eol=native
ok 113 - test --unset-upstream on HEAD
ok 115 - git notes copy --for-rewrite (append empty)
ok 114 - "add" DWIM infer --orphan w/ DWIM (no --branch), no --quiet (expect output), 'git -C repo', no --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --no-guess-remote
*** t3321-notes-stripspace.sh ***
ok 114 - --unset-upstream should fail on multiple branches
ok 549 - ipathmatch: match 'deep/foo/bar/baz/x' '*/bar/**'
ok 2187 - checkout attr=-text ident aeol=crlf core.autocrlf=true core.eol=native file=LF
ok 550 - ipathmatch (via ls-files): match '*/bar/**' 'deep/foo/bar/baz/x'
ok 2188 - checkout attr=-text ident aeol=crlf core.autocrlf=true core.eol=native file=CRLF
ok 2189 - checkout attr=-text ident aeol=crlf core.autocrlf=true core.eol=native file=CRLF_mix_LF
ok 551 - cleanup after previous file test
ok 115 - --unset-upstream should fail on detached HEAD
ok 2190 - checkout attr=-text ident aeol=crlf core.autocrlf=true core.eol=native file=LF_mix_CR
ok 552 - setup match file test for deep/foo/bar/baz/x
ok 2191 - checkout attr=-text ident aeol=crlf core.autocrlf=true core.eol=native file=LF_nul
ok 553 - wildmatch: match 'deep/foo/bar/baz/x' '**/bar/*/*'
ok 2192 - setup config for checkout attr=text ident=ident aeol=lf core.autocrlf=true
ok 554 - wildmatch (via ls-files): match '**/bar/*/*' 'deep/foo/bar/baz/x'
ok 116 - GIT_NOTES_REWRITE_MODE works
ok 555 - iwildmatch: match 'deep/foo/bar/baz/x' '**/bar/*/*'
ok 2193 - setup LF checkout  with -c core.eol=native
ok 116 - test --unset-upstream on a particular branch
ok 41 - git checkout -f --recurse-submodules: replace submodule with a directory
ok 2194 - setup CRLF checkout  with -c core.eol=native
ok 14 - redo merge of z into m (== y) with default ("manual") resolver => Conflicting 3-way merge
ok 115 - "add" error need fetch w/ DWIM (no --branch), no --quiet (expect output), 'git -C repo', no --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --guess-remote
ok 117 - disabled option --set-upstream fails
ok 1 - setup commit
ok 556 - iwildmatch (via ls-files): match '**/bar/*/*' 'deep/foo/bar/baz/x'
ok 557 - pathmatch: match 'deep/foo/bar/baz/x' '**/bar/*/*'
ok 2195 - setup LF_mix_CR checkout  with -c core.eol=native
ok 118 - --set-upstream-to notices an error to set branch as own upstream
ok 2 - setup notes ref (x)
ok 558 - pathmatch (via ls-files): match '**/bar/*/*' 'deep/foo/bar/baz/x'
ok 2196 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 559 - ipathmatch: match 'deep/foo/bar/baz/x' '**/bar/*/*'
ok 2197 - setup LF_nul checkout  with -c core.eol=native
ok 3 - setup local branch (y)
ok 560 - ipathmatch (via ls-files): match '**/bar/*/*' 'deep/foo/bar/baz/x'
ok 119 - git checkout -b g/h/i -l should create a branch and a log
ok 117 - GIT_NOTES_REWRITE_REF works
ok 561 - cleanup after previous file test
ok 4 - setup remote branch (z)
ok 17 - should set up tracking of remote-tracking branches by default
ok 2198 - ls-files --eol attr=text ident aeol=lf core.autocrlf=true core.eol=native
ok 5 - modify notes ref ourselves (x)
ok 562 - setup match file test for acrt
ok 2199 - checkout attr=text ident aeol=lf core.autocrlf=true core.eol=native file=LF
ok 563 - wildmatch: no match 'acrt' 'a[c-c]st'
ok 15 - abort notes merge
ok 120 - checkout -b makes reflog by default
ok 2200 - checkout attr=text ident aeol=lf core.autocrlf=true core.eol=native file=CRLF
ok 564 - wildmatch (via ls-files): no match 'a[c-c]st' 'acrt'
ok 565 - iwildmatch: no match 'acrt' 'a[c-c]st'
ok 116 - "add" DWIM infer --orphan w/ DWIM (no --branch), no --quiet (expect output), 'git -C repo', no --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --guess-remote, --force
ok 2201 - checkout attr=text ident aeol=lf core.autocrlf=true core.eol=native file=CRLF_mix_LF
ok 566 - iwildmatch (via ls-files): no match 'a[c-c]st' 'acrt'
ok 6 - create some new worktrees
ok 2202 - checkout attr=text ident aeol=lf core.autocrlf=true core.eol=native file=LF_mix_CR
ok 118 - GIT_NOTES_REWRITE_REF overrides config
ok 567 - pathmatch: no match 'acrt' 'a[c-c]st'
ok 121 - checkout -b does not make reflog when core.logAllRefUpdates = false
ok 2203 - checkout attr=text ident aeol=lf core.autocrlf=true core.eol=native file=LF_nul
ok 1 - setup the commit
ok 2204 - setup config for checkout attr=text ident=ident aeol=crlf core.autocrlf=true
ok 568 - pathmatch (via ls-files): no match 'a[c-c]st' 'acrt'
ok 119 - git notes copy diagnoses too many or too few arguments
ok 7 - merge z into y fails and sets NOTES_MERGE_REF
ok 569 - ipathmatch: no match 'acrt' 'a[c-c]st'
ok 120 - git notes get-ref expands refs/heads/main to refs/notes/refs/heads/main
ok 2205 - setup LF checkout  with -c core.eol=native
ok 122 - checkout -b with -l makes reflog when core.logAllRefUpdates = false
ok 570 - ipathmatch (via ls-files): no match 'a[c-c]st' 'acrt'
ok 2206 - setup CRLF checkout  with -c core.eol=native
ok 121 - git notes get-ref (no overrides)
ok 2 - add note by editor
ok 8 - merge z into y while mid-merge in another workdir fails
ok 571 - cleanup after previous file test
ok 2207 - setup LF_mix_CR checkout  with -c core.eol=native
ok 16 - redo merge of z into m (== y) with default ("manual") resolver => Conflicting 3-way merge
ok 122 - git notes get-ref (core.notesRef)
ok 572 - setup match file test for acrt
ok 2208 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 123 - git notes get-ref (GIT_NOTES_REF)
ok 573 - wildmatch: match 'acrt' 'a[c-c]rt'
ok 2209 - setup LF_nul checkout  with -c core.eol=native
ok 9 - merge z into x while mid-merge on y succeeds
ok 124 - git notes get-ref (--ref)
# passed all 9 test(s)
1..9
ok 574 - wildmatch (via ls-files): match 'a[c-c]rt' 'acrt'
ok 123 - avoid ambiguous track and advise
ok 575 - iwildmatch: match 'acrt' 'a[c-c]rt'
*** t3400-rebase.sh ***
ok 3 - add note by specifying single "-m", "--stripspace" is the default behavior
ok 576 - iwildmatch (via ls-files): match 'a[c-c]rt' 'acrt'
ok 577 - pathmatch: match 'acrt' 'a[c-c]rt'
ok 125 - setup testing of empty notes
ok 2210 - ls-files --eol attr=text ident aeol=crlf core.autocrlf=true core.eol=native
ok 578 - pathmatch (via ls-files): match 'a[c-c]rt' 'acrt'
ok 2211 - checkout attr=text ident aeol=crlf core.autocrlf=true core.eol=native file=LF
ok 18 - should not fail when unable to set up tracking in submodule
ok 579 - ipathmatch: match 'acrt' 'a[c-c]rt'
ok 126 - 'git notes add' removes empty note
ok 2212 - checkout attr=text ident aeol=crlf core.autocrlf=true core.eol=native file=CRLF
ok 117 - "add" DWIM doesnt infer --orphan w/ DWIM (no --branch), no --quiet (expect output), 'git -C repo', no --branch, 0 local branches, >=1 remotes, >=1 fetched remote branches, --guess-remote
ok 580 - ipathmatch (via ls-files): match 'a[c-c]rt' 'acrt'
ok 4 - add note by specifying single "-m" and "--no-stripspace" 
ok 2213 - checkout attr=text ident aeol=crlf core.autocrlf=true core.eol=native file=CRLF_mix_LF
ok 2214 - checkout attr=text ident aeol=crlf core.autocrlf=true core.eol=native file=LF_mix_CR
ok 127 - 'git notes add --allow-empty' stores empty note
ok 581 - cleanup after previous file test
ok 2215 - checkout attr=text ident aeol=crlf core.autocrlf=true core.eol=native file=LF_nul
ok 2216 - setup config for checkout attr=auto ident=ident aeol=lf core.autocrlf=true
ok 582 - setup match file test for ]
ok 118 - "add" DWIM infer --orphan w/ empty repo, no --quiet (expect output), 'git -C repo', --branch
ok 128 - 'git notes add -F /dev/null' removes empty note
ok 583 - wildmatch: no match ']' '[!]-]'
ok 2217 - setup LF checkout  with -c core.eol=native
ok 2218 - setup CRLF checkout  with -c core.eol=native
ok 124 - autosetuprebase local on a tracked local branch
ok 584 - wildmatch (via ls-files): no match '[!]-]' ']'
ok 5 - add note by specifying multiple "-m", "--stripspace" is the default behavior
ok 585 - iwildmatch: no match ']' '[!]-]'
ok 2219 - setup LF_mix_CR checkout  with -c core.eol=native
ok 129 - 'git notes add -F /dev/null --allow-empty' stores empty note
ok 17 - add + remove notes in finalized merge (z => m)
ok 2220 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 586 - iwildmatch (via ls-files): no match '[!]-]' ']'
ok 587 - pathmatch: no match ']' '[!]-]'
ok 6 - add notes by specifying multiple "-m" and "--no-stripspace"
ok 130 - 'git notes add -m ""' removes empty note
ok 42 - git checkout -f --recurse-submodules: replace submodule containing a .git directory with a directory must fail
ok 2221 - setup LF_nul checkout  with -c core.eol=native
ok 588 - pathmatch (via ls-files): no match '[!]-]' ']'
ok 589 - ipathmatch: no match ']' '[!]-]'
ok 131 - 'git notes add -m "" --allow-empty' stores empty note
ok 590 - ipathmatch (via ls-files): no match '[!]-]' ']'
ok 2222 - ls-files --eol attr=auto ident aeol=lf core.autocrlf=true core.eol=native
ok 37 - 'read-tree -mu update-folder2' with files outside sparse definition
ok 119 - "add" DWIM doesnt infer --orphan w/ no --quiet (expect output), 'git -C repo', --branch, >=1 local branches, valid HEAD
ok 2223 - checkout attr=auto ident aeol=lf core.autocrlf=true core.eol=native file=LF
ok 591 - cleanup after previous file test
ok 132 - 'git notes add -c "$empty_blob"' removes empty note
ok 2224 - checkout attr=auto ident aeol=lf core.autocrlf=true core.eol=native file=CRLF
ok 7 - add note by specifying single "-F", "--stripspace" is the default behavior
ok 592 - setup match file test for a
ok 2225 - checkout attr=auto ident aeol=lf core.autocrlf=true core.eol=native file=CRLF_mix_LF
ok 593 - wildmatch: match 'a' '[!]-]'
ok 18 - redo merge of z into m (== y) with default ("manual") resolver => Conflicting 3-way merge
ok 125 - autosetuprebase always on a tracked local branch
ok 2226 - checkout attr=auto ident aeol=lf core.autocrlf=true core.eol=native file=LF_mix_CR
ok 594 - wildmatch (via ls-files): match '[!]-]' 'a'
ok 133 - 'git notes add -c "$empty_blob" --allow-empty' stores empty note
ok 595 - iwildmatch: match 'a' '[!]-]'
ok 2227 - checkout attr=auto ident aeol=lf core.autocrlf=true core.eol=native file=LF_nul
ok 2228 - setup config for checkout attr=auto ident=ident aeol=crlf core.autocrlf=true
ok 596 - iwildmatch (via ls-files): match '[!]-]' 'a'
ok 120 - "add" DWIM infer --orphan w/ no --quiet (expect output), 'git -C repo', --branch, 0 local branches, 0 remotes, 0 fetched remote branches, --no-guess-remote
ok 597 - pathmatch: match 'a' '[!]-]'
ok 134 - 'git notes add -C "$empty_blob"' removes empty note
ok 2229 - setup LF checkout  with -c core.eol=native
ok 8 - add note by specifying single "-F" and "--no-stripspace"
ok 598 - pathmatch (via ls-files): match '[!]-]' 'a'
ok 2230 - setup CRLF checkout  with -c core.eol=native
ok 19 - reset notes ref m to somewhere else (w)
ok 599 - ipathmatch: match 'a' '[!]-]'
ok 135 - 'git notes add -C "$empty_blob" --allow-empty' stores empty note
ok 2231 - setup LF_mix_CR checkout  with -c core.eol=native
ok 600 - ipathmatch (via ls-files): match '[!]-]' 'a'
ok 2232 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 601 - cleanup after previous file test
ok 136 - 'git notes append' removes empty note
ok 2233 - setup LF_nul checkout  with -c core.eol=native
ok 602 - setup match file test for 
ok 19 - --track=inherit should set up tracking correctly
ok 603 - wildmatch: no match '' '\'
ok 10 - test same notes in no fanout and 2/2/36-fanout
not ok 604 - wildmatch (via ls-files): no match skip '\' '' # TODO known breakage
ok 605 - iwildmatch: no match '' '\'
not ok 606 - iwildmatch (via ls-files): no match skip '\' '' # TODO known breakage
ok 607 - pathmatch: no match '' '\'
ok 9 - add note by specifying multiple "-F", "--stripspace" is the default behavior
not ok 608 - pathmatch (via ls-files): no match skip '\' '' # TODO known breakage
ok 609 - ipathmatch: no match '' '\'
ok 11 - verify same notes in no fanout and 2/2/36-fanout
not ok 610 - ipathmatch (via ls-files): no match skip '\' '' # TODO known breakage
ok 137 - 'git notes append --allow-empty' stores empty note
ok 2234 - ls-files --eol attr=auto ident aeol=crlf core.autocrlf=true core.eol=native
ok 611 - cleanup after previous file test
ok 126 - autosetuprebase remote on a tracked local branch
ok 121 - "add" DWIM infer --orphan w/ no --quiet (expect output), 'git -C repo', --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --no-guess-remote
ok 2235 - checkout attr=auto ident aeol=crlf core.autocrlf=true core.eol=native file=LF
ok 138 - 'git notes append -F /dev/null' removes empty note
ok 2236 - checkout attr=auto ident aeol=crlf core.autocrlf=true core.eol=native file=CRLF
ok 612 - setup match file test for \
ok 10 - add note by specifying multiple "-F" with "--no-stripspace"
ok 613 - wildmatch: no match '\' '\'
ok 2237 - checkout attr=auto ident aeol=crlf core.autocrlf=true core.eol=native file=CRLF_mix_LF
ok 139 - 'git notes append -F /dev/null --allow-empty' stores empty note
ok 2238 - checkout attr=auto ident aeol=crlf core.autocrlf=true core.eol=native file=LF_mix_CR
ok 614 - wildmatch (via ls-files): match '\' '\'
ok 615 - iwildmatch: no match '\' '\'
ok 1 - prepare repository with topic branches
ok 2239 - checkout attr=auto ident aeol=crlf core.autocrlf=true core.eol=native file=LF_nul
ok 616 - iwildmatch (via ls-files): match '\' '\'
ok 140 - 'git notes append -m ""' removes empty note
ok 2240 - setup config for checkout attr=-text ident=ident aeol= core.autocrlf=false
ok 617 - pathmatch: no match '\' '\'
ok 2 - rebase on dirty worktree
ok 2241 - setup LF checkout  with -c core.eol=native
ok 20 - fail to finalize conflicting merge if underlying ref has moved in the meantime (m != NOTES_MERGE_PARTIAL^1)
ok 618 - pathmatch (via ls-files): match '\' '\'
ok 3 - rebase on dirty cache
ok 11 - append note by editor
ok 619 - ipathmatch: no match '\' '\'
ok 2242 - setup CRLF checkout  with -c core.eol=native
ok 141 - 'git notes append -m "" --allow-empty' stores empty note
ok 620 - ipathmatch (via ls-files): match '\' '\'
ok 2243 - setup LF_mix_CR checkout  with -c core.eol=native
ok 621 - cleanup after previous file test
ok 4 - rebase against main
ok 2244 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 43 - git checkout -f --recurse-submodules: replace submodule with a file ignoring ignored files
ok 12 - append note by specifying single "-m"
ok 142 - 'git notes append -c "$empty_blob"' removes empty note
ok 127 - autosetuprebase never on a tracked local branch
ok 2245 - setup LF_nul checkout  with -c core.eol=native
ok 622 - setup match file test for XXX/\
ok 623 - wildmatch: no match 'XXX/\' '*/\'
ok 122 - "add" DWIM infer --orphan w/ no --quiet (expect output), 'git -C repo', --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --guess-remote
ok 143 - 'git notes append -c "$empty_blob" --allow-empty' stores empty note
ok 624 - wildmatch (via ls-files): no match '*/\' 'XXX/\'
ok 625 - iwildmatch: no match 'XXX/\' '*/\'
ok 13 - append note by specifying multiple "-m"
ok 2246 - ls-files --eol attr=-text ident aeol= core.autocrlf=false core.eol=native
ok 5 - rebase sets ORIG_HEAD to pre-rebase state
ok 21 - resolve situation by aborting the notes merge
ok 144 - 'git notes append -C "$empty_blob"' removes empty note
ok 626 - iwildmatch (via ls-files): no match '*/\' 'XXX/\'
ok 2247 - checkout attr=-text ident aeol= core.autocrlf=false core.eol=native file=LF
ok 627 - pathmatch: no match 'XXX/\' '*/\'
ok 128 - autosetuprebase local on a tracked remote branch
ok 2248 - checkout attr=-text ident aeol= core.autocrlf=false core.eol=native file=CRLF
ok 628 - pathmatch (via ls-files): no match '*/\' 'XXX/\'
ok 145 - 'git notes append -C "$empty_blob" --allow-empty' stores empty note
ok 14 - add note by specifying single "-F"
ok 629 - ipathmatch: no match 'XXX/\' '*/\'
ok 2249 - checkout attr=-text ident aeol= core.autocrlf=false core.eol=native file=CRLF_mix_LF
ok 630 - ipathmatch (via ls-files): no match '*/\' 'XXX/\'
ok 20 - --no-track should not set up tracking
ok 2250 - checkout attr=-text ident aeol= core.autocrlf=false core.eol=native file=LF_mix_CR
# passed all 20 test(s)
1..20
ok 2251 - checkout attr=-text ident aeol= core.autocrlf=false core.eol=native file=LF_nul
ok 631 - cleanup after previous file test
ok 146 - 'git notes edit' removes empty note
ok 2252 - setup config for checkout attr=-text ident=ident aeol=lf core.autocrlf=false
ok 129 - autosetuprebase never on a tracked remote branch
ok 15 - add notes by specifying multiple "-F"
ok 22 - switch cwd before committing notes merge
ok 2253 - setup LF checkout  with -c core.eol=native
# passed all 22 test(s)
1..22
ok 632 - setup match file test for XXX/\
ok 2254 - setup CRLF checkout  with -c core.eol=native
ok 633 - wildmatch: match 'XXX/\' '*/\\'
ok 147 - 'git notes edit --allow-empty' stores empty note
ok 6 - rebase, with <onto> and <upstream> specified as :/quuxery
ok 2255 - setup LF_mix_CR checkout  with -c core.eol=native
ok 7 - the rebase operation should not have destroyed author information
*** t3401-rebase-and-am-rename.sh ***
ok 634 - wildmatch (via ls-files): match '*/\\' 'XXX/\'
ok 635 - iwildmatch: match 'XXX/\' '*/\\'
ok 8 - the rebase operation should not have destroyed author information (2)
*** t3402-rebase-merge.sh ***
ok 2256 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 9 - HEAD was detached during rebase
ok 16 - append note by specifying single "-F"
ok 636 - iwildmatch (via ls-files): match '*/\\' 'XXX/\'
ok 637 - pathmatch: match 'XXX/\' '*/\\'
ok 2257 - setup LF_nul checkout  with -c core.eol=native
ok 130 - autosetuprebase remote on a tracked remote branch
ok 638 - pathmatch (via ls-files): match '*/\\' 'XXX/\'
ok 123 - "add" DWIM infer --orphan w/ no --quiet (expect output), 'git -C repo', --branch, 0 local branches, >=1 remotes, >=1 fetched remote branches, --guess-remote
ok 639 - ipathmatch: match 'XXX/\' '*/\\'
ok 148 - empty notes are displayed by git log
ok 640 - ipathmatch (via ls-files): match '*/\\' 'XXX/\'
ok 2258 - ls-files --eol attr=-text ident aeol=lf core.autocrlf=false core.eol=native
ok 17 - append notes by specifying multiple "-F"
ok 641 - cleanup after previous file test
ok 10 - rebase from ambiguous branch name
ok 2259 - checkout attr=-text ident aeol=lf core.autocrlf=false core.eol=native file=LF
ok 44 - git checkout -f --recurse-submodules: modified submodule does update submodule work tree from invalid commit
ok 2260 - checkout attr=-text ident aeol=lf core.autocrlf=false core.eol=native file=CRLF
ok 642 - setup match file test for foo
ok 643 - wildmatch: match 'foo' 'foo'
ok 2261 - checkout attr=-text ident aeol=lf core.autocrlf=false core.eol=native file=CRLF_mix_LF
ok 131 - autosetuprebase always on a tracked remote branch
ok 2262 - checkout attr=-text ident aeol=lf core.autocrlf=false core.eol=native file=LF_mix_CR
ok 644 - wildmatch (via ls-files): match 'foo' 'foo'
ok 645 - iwildmatch: match 'foo' 'foo'
ok 2263 - checkout attr=-text ident aeol=lf core.autocrlf=false core.eol=native file=LF_nul
ok 2264 - setup config for checkout attr=-text ident=ident aeol=crlf core.autocrlf=false
ok 18 - append note by specifying multiple "-F" with "--no-stripspace"
ok 149 - empty notes do not invoke the editor
ok 646 - iwildmatch (via ls-files): match 'foo' 'foo'
ok 124 - "add" error, warn on bad HEAD, hint use orphan w/ DWIM (no --branch), no --quiet (expect output), 'git -C repo', no --branch, >=1 local branches, invalid (or orphan) HEAD
ok 647 - pathmatch: match 'foo' 'foo'
ok 2265 - setup LF checkout  with -c core.eol=native
ok 19 - add notes with empty messages
ok 648 - pathmatch (via ls-files): match 'foo' 'foo'
ok 2266 - setup CRLF checkout  with -c core.eol=native
ok 649 - ipathmatch: match 'foo' 'foo'
ok 11 - rebase off of the previous branch using "-"
ok 650 - ipathmatch (via ls-files): match 'foo' 'foo'
ok 2267 - setup LF_mix_CR checkout  with -c core.eol=native
ok 132 - autosetuprebase unconfigured on a tracked remote branch
ok 2268 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 651 - cleanup after previous file test
ok 2269 - setup LF_nul checkout  with -c core.eol=native
ok 652 - setup match file test for @foo
ok 653 - wildmatch: match '@foo' '@foo'
ok 20 - add note by specifying "-C", "--no-stripspace" is the default behavior
ok 150 - git notes add with -m/-F invokes editor with -e
ok 125 - "add" error, warn on bad HEAD, hint use orphan w/ no --quiet (expect output), 'git -C repo', --branch, >=1 local branches, invalid (or orphan) HEAD
ok 38 - read-tree --merge with edit/edit conflicts in sparse directories
ok 654 - wildmatch (via ls-files): match '@foo' '@foo'
ok 655 - iwildmatch: match '@foo' '@foo'
ok 2270 - ls-files --eol attr=-text ident aeol=crlf core.autocrlf=false core.eol=native
ok 656 - iwildmatch (via ls-files): match '@foo' '@foo'
ok 657 - pathmatch: match '@foo' '@foo'
ok 2271 - checkout attr=-text ident aeol=crlf core.autocrlf=false core.eol=native file=LF
ok 21 - reuse note by specifying "-C" and "--stripspace"
ok 2272 - checkout attr=-text ident aeol=crlf core.autocrlf=false core.eol=native file=CRLF
ok 658 - pathmatch (via ls-files): match '@foo' '@foo'
ok 659 - ipathmatch: match '@foo' '@foo'
ok 2273 - checkout attr=-text ident aeol=crlf core.autocrlf=false core.eol=native file=CRLF_mix_LF
ok 133 - autosetuprebase unconfigured on a tracked local branch
ok 660 - ipathmatch (via ls-files): match '@foo' '@foo'
ok 12 - rebase a single mode change
ok 2274 - checkout attr=-text ident aeol=crlf core.autocrlf=false core.eol=native file=LF_mix_CR
ok 2275 - checkout attr=-text ident aeol=crlf core.autocrlf=false core.eol=native file=LF_nul
ok 661 - cleanup after previous file test
ok 126 - "add" error, warn on bad HEAD, hint use orphan w/ no --quiet (expect output), 'git -C repo', --detach, >=1 local branches, invalid (or orphan) HEAD
ok 2276 - setup config for checkout attr=text ident=ident aeol=lf core.autocrlf=false
ok 22 - reuse with "-C" and add note with "-m", "-m" will stripspace all together
ok 2277 - setup LF checkout  with -c core.eol=native
ok 662 - setup match file test for foo
ok 2278 - setup CRLF checkout  with -c core.eol=native
ok 663 - wildmatch: no match 'foo' '@foo'
ok 134 - autosetuprebase unconfigured on untracked local branch
ok 1 - setup testcase where directory rename should be detected
ok 2279 - setup LF_mix_CR checkout  with -c core.eol=native
ok 664 - wildmatch (via ls-files): no match '@foo' 'foo'
ok 665 - iwildmatch: no match 'foo' '@foo'
ok 2280 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 13 - rebase is not broken by diff.renames
ok 151 - git notes append with -m/-F invokes the editor with -e
ok 23 - add note with "-m" and reuse note with "-C", "-C" will not stripspace all together
ok 2281 - setup LF_nul checkout  with -c core.eol=native
ok 666 - iwildmatch (via ls-files): no match '@foo' 'foo'
ok 667 - pathmatch: no match 'foo' '@foo'
ok 14 - setup: recover
ok 668 - pathmatch (via ls-files): no match '@foo' 'foo'
ok 135 - autosetuprebase unconfigured on untracked remote branch
ok 669 - ipathmatch: no match 'foo' '@foo'
ok 2282 - ls-files --eol attr=text ident aeol=lf core.autocrlf=false core.eol=native
ok 1 - setup
ok 670 - ipathmatch (via ls-files): no match '@foo' 'foo'
ok 127 - "add" DWIM infer --orphan w/ empty repo, DWIM (no --branch), no --quiet (expect output), 'git -C wt', no --branch
ok 2 - rebase --interactive: directory rename detected
ok 15 - Show verbose error when HEAD could not be detached
ok 671 - cleanup after previous file test
ok 152 - git notes with a combination of -m, -F and -e invokes editor
ok 2283 - checkout attr=text ident aeol=lf core.autocrlf=false core.eol=native file=LF
ok 16 - fail when upstream arg is missing and not on branch
ok 672 - setup match file test for [ab]
ok 2284 - checkout attr=text ident aeol=lf core.autocrlf=false core.eol=native file=CRLF
ok 673 - wildmatch: match '[ab]' '\[ab]'
ok 2 - reference merge
ok 2285 - checkout attr=text ident aeol=lf core.autocrlf=false core.eol=native file=CRLF_mix_LF
ok 17 - fail when upstream arg is missing and not configured
ok 24 - add note by specifying "-c", "--stripspace" is the default behavior
ok 674 - wildmatch (via ls-files): match '\[ab]' '[ab]'
ok 675 - iwildmatch: match '[ab]' '\[ab]'
ok 2286 - checkout attr=text ident aeol=lf core.autocrlf=false core.eol=native file=LF_mix_CR
ok 136 - autosetuprebase never on an untracked local branch
ok 45 - git checkout -f --recurse-submodules: updating submodules fixes .git links
ok 676 - iwildmatch (via ls-files): match '\[ab]' '[ab]'
ok 2287 - checkout attr=text ident aeol=lf core.autocrlf=false core.eol=native file=LF_nul
ok 677 - pathmatch: match '[ab]' '\[ab]'
ok 2288 - setup config for checkout attr=text ident=ident aeol=crlf core.autocrlf=false
ok 153 - git notes append aborts when editor fails with -e
# passed all 153 test(s)
1..153
not ok 3 - rebase --apply: directory rename detected # TODO known breakage
ok 2289 - setup LF checkout  with -c core.eol=native
ok 678 - pathmatch (via ls-files): match '\[ab]' '[ab]'
ok 25 - add note by specifying "-c" with "--no-stripspace"
ok 679 - ipathmatch: match '[ab]' '\[ab]'
ok 3 - rebase
ok 4 - test-rebase@{1} is pre rebase
ok 18 - rebase works with format.useAutoBase
ok 2290 - setup CRLF checkout  with -c core.eol=native
ok 5 - merge and rebase should match
ok 137 - autosetuprebase local on an untracked local branch
ok 2291 - setup LF_mix_CR checkout  with -c core.eol=native
ok 680 - ipathmatch (via ls-files): match '\[ab]' '[ab]'
ok 2292 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 4 - rebase --merge: directory rename detected
*** t3403-rebase-skip.sh ***
ok 2293 - setup LF_nul checkout  with -c core.eol=native
ok 681 - cleanup after previous file test
ok 128 - "add" DWIM doesnt infer --orphan w/ DWIM (no --branch), no --quiet (expect output), 'git -C wt', no --branch, >=1 local branches, valid HEAD
ok 682 - setup match file test for [ab]
ok 683 - wildmatch: match '[ab]' '[[]ab]'
ok 26 - edit note by specifying "-c", "--stripspace" is the default behavior
ok 684 - wildmatch (via ls-files): match '[[]ab]' '[ab]'
ok 138 - autosetuprebase remote on an untracked local branch
ok 6 - rebase the other way
ok 685 - iwildmatch: match '[ab]' '[[]ab]'
ok 2294 - ls-files --eol attr=text ident aeol=crlf core.autocrlf=false core.eol=native
ok 2295 - checkout attr=text ident aeol=crlf core.autocrlf=false core.eol=native file=LF
ok 686 - iwildmatch (via ls-files): match '[[]ab]' '[ab]'
ok 687 - pathmatch: match '[ab]' '[[]ab]'
not ok 5 - am: directory rename detected # TODO known breakage
ok 2296 - checkout attr=text ident aeol=crlf core.autocrlf=false core.eol=native file=CRLF
ok 2297 - checkout attr=text ident aeol=crlf core.autocrlf=false core.eol=native file=CRLF_mix_LF
ok 688 - pathmatch (via ls-files): match '[[]ab]' '[ab]'
ok 27 - edit note by specifying "-c" with "--no-stripspace"
ok 689 - ipathmatch: match '[ab]' '[[]ab]'
# passed all 27 test(s)
1..27
ok 2298 - checkout attr=text ident aeol=crlf core.autocrlf=false core.eol=native file=LF_mix_CR
ok 129 - "add" DWIM infer --orphan w/ DWIM (no --branch), no --quiet (expect output), 'git -C wt', no --branch, 0 local branches, 0 remotes, 0 fetched remote branches, --no-guess-remote
ok 690 - ipathmatch (via ls-files): match '[[]ab]' '[ab]'
ok 2299 - checkout attr=text ident aeol=crlf core.autocrlf=false core.eol=native file=LF_nul
*** t3404-rebase-interactive.sh ***
ok 139 - autosetuprebase always on an untracked local branch
ok 2300 - setup config for checkout attr=auto ident=ident aeol=lf core.autocrlf=false
ok 691 - cleanup after previous file test
ok 2301 - setup LF checkout  with -c core.eol=native
ok 7 - rebase -Xtheirs
ok 19 - default to common base in @{upstream}s reflog if no upstream arg (--merge)
ok 692 - setup match file test for [ab]
ok 2302 - setup CRLF checkout  with -c core.eol=native
ok 693 - wildmatch: match '[ab]' '[[:]ab]'
ok 2303 - setup LF_mix_CR checkout  with -c core.eol=native
ok 694 - wildmatch (via ls-files): match '[[:]ab]' '[ab]'
ok 695 - iwildmatch: match '[ab]' '[[:]ab]'
ok 140 - autosetuprebase never on an untracked remote branch
ok 696 - iwildmatch (via ls-files): match '[[:]ab]' '[ab]'
ok 2304 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 697 - pathmatch: match '[ab]' '[[:]ab]'
ok 2305 - setup LF_nul checkout  with -c core.eol=native
ok 698 - pathmatch (via ls-files): match '[[:]ab]' '[ab]'
ok 699 - ipathmatch: match '[ab]' '[[:]ab]'
ok 8 - rebase -Xtheirs from orphan
ok 9 - merge and rebase should match
ok 700 - ipathmatch (via ls-files): match '[[:]ab]' '[ab]'
ok 2306 - ls-files --eol attr=auto ident aeol=lf core.autocrlf=false core.eol=native
ok 141 - autosetuprebase local on an untracked remote branch
ok 6 - setup testcase where directory rename should NOT be detected
ok 2307 - checkout attr=auto ident aeol=lf core.autocrlf=false core.eol=native file=LF
ok 701 - cleanup after previous file test
ok 2308 - checkout attr=auto ident aeol=lf core.autocrlf=false core.eol=native file=CRLF
ok 702 - setup match file test for [ab]
ok 703 - wildmatch: no match '[ab]' '[[::]ab]'
ok 2309 - checkout attr=auto ident aeol=lf core.autocrlf=false core.eol=native file=CRLF_mix_LF
ok 12 - test same notes in 2/38-fanout and 2/2/36-fanout
ok 130 - "add" DWIM infer --orphan w/ DWIM (no --branch), no --quiet (expect output), 'git -C wt', no --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --no-guess-remote
ok 704 - wildmatch (via ls-files): no match '[[::]ab]' '[ab]'
ok 705 - iwildmatch: no match '[ab]' '[[::]ab]'
ok 2310 - checkout attr=auto ident aeol=lf core.autocrlf=false core.eol=native file=LF_mix_CR
ok 10 - picking rebase
ok 142 - autosetuprebase remote on an untracked remote branch
ok 2311 - checkout attr=auto ident aeol=lf core.autocrlf=false core.eol=native file=LF_nul
ok 706 - iwildmatch (via ls-files): no match '[[::]ab]' '[ab]'
ok 2312 - setup config for checkout attr=auto ident=ident aeol=crlf core.autocrlf=false
ok 707 - pathmatch: no match '[ab]' '[[::]ab]'
ok 2313 - setup LF checkout  with -c core.eol=native
ok 708 - pathmatch (via ls-files): no match '[[::]ab]' '[ab]'
ok 709 - ipathmatch: no match '[ab]' '[[::]ab]'
ok 2314 - setup CRLF checkout  with -c core.eol=native
ok 13 - verify same notes in 2/38-fanout and 2/2/36-fanout
ok 7 - rebase --interactive: NO directory rename
ok 710 - ipathmatch (via ls-files): no match '[[::]ab]' '[ab]'
ok 2315 - setup LF_mix_CR checkout  with -c core.eol=native
ok 20 - default to common base in @{upstream}s reflog if no upstream arg (--apply)
ok 711 - cleanup after previous file test
ok 2316 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 143 - autosetuprebase always on an untracked remote branch
ok 46 - git checkout -f --recurse-submodules: changed submodule worktree is reset
ok 2317 - setup LF_nul checkout  with -c core.eol=native
ok 712 - setup match file test for [ab]
ok 713 - wildmatch: match '[ab]' '[[:digit]ab]'
ok 714 - wildmatch (via ls-files): match '[[:digit]ab]' '[ab]'
ok 715 - iwildmatch: match '[ab]' '[[:digit]ab]'
ok 2318 - ls-files --eol attr=auto ident aeol=crlf core.autocrlf=false core.eol=native
ok 716 - iwildmatch (via ls-files): match '[[:digit]ab]' '[ab]'
ok 144 - autosetuprebase always on detached HEAD
ok 8 - rebase (am): NO directory rename
ok 131 - "add" error need fetch w/ DWIM (no --branch), no --quiet (expect output), 'git -C wt', no --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --guess-remote
ok 717 - pathmatch: match '[ab]' '[[:digit]ab]'
ok 2319 - checkout attr=auto ident aeol=crlf core.autocrlf=false core.eol=native file=LF
ok 145 - detect misconfigured autosetuprebase (bad value)
ok 2320 - checkout attr=auto ident aeol=crlf core.autocrlf=false core.eol=native file=CRLF
ok 718 - pathmatch (via ls-files): match '[[:digit]ab]' '[ab]'
ok 11 - rebase --skip works with two conflicts in a row
ok 719 - ipathmatch: match '[ab]' '[[:digit]ab]'
ok 146 - detect misconfigured autosetuprebase (no value)
ok 2321 - checkout attr=auto ident aeol=crlf core.autocrlf=false core.eol=native file=CRLF_mix_LF
ok 1 - setup
ok 720 - ipathmatch (via ls-files): match '[[:digit]ab]' '[ab]'
ok 2322 - checkout attr=auto ident aeol=crlf core.autocrlf=false core.eol=native file=LF_mix_CR
ok 2323 - checkout attr=auto ident aeol=crlf core.autocrlf=false core.eol=native file=LF_nul
ok 147 - attempt to delete a branch without base and unmerged to HEAD
ok 721 - cleanup after previous file test
ok 2324 - setup config for checkout attr=-text ident=ident aeol= core.autocrlf=input
ok 2325 - setup LF checkout  with -c core.eol=native
ok 722 - setup match file test for [ab]
ok 2 - rebase with git am -3 (default)
ok 148 - attempt to delete a branch merged to its base
ok 723 - wildmatch: match '[ab]' '[\[:]ab]'
ok 9 - rebase --merge: NO directory rename
ok 2326 - setup CRLF checkout  with -c core.eol=native
ok 3 - rebase --skip can not be used with other options
ok 724 - wildmatch (via ls-files): match '[\[:]ab]' '[ab]'
ok 725 - iwildmatch: match '[ab]' '[\[:]ab]'
ok 2327 - setup LF_mix_CR checkout  with -c core.eol=native
ok 726 - iwildmatch (via ls-files): match '[\[:]ab]' '[ab]'
ok 2328 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 727 - pathmatch: match '[ab]' '[\[:]ab]'
ok 4 - rebase --skip with am -3
ok 2329 - setup LF_nul checkout  with -c core.eol=native
ok 149 - attempt to delete a branch merged to its base
ok 728 - pathmatch (via ls-files): match '[\[:]ab]' '[ab]'
ok 10 - am: NO directory rename
ok 729 - ipathmatch: match '[ab]' '[\[:]ab]'
# still have 2 known breakage(s)
# passed all remaining 8 test(s)
1..10
ok 730 - ipathmatch (via ls-files): match '[\[:]ab]' '[ab]'
ok 132 - "add" DWIM infer --orphan w/ DWIM (no --branch), no --quiet (expect output), 'git -C wt', no --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --guess-remote, --force
ok 2330 - ls-files --eol attr=-text ident aeol= core.autocrlf=input core.eol=native
*** t3405-rebase-malformed.sh ***
ok 2331 - checkout attr=-text ident aeol= core.autocrlf=input core.eol=native file=LF
ok 731 - cleanup after previous file test
ok 2332 - checkout attr=-text ident aeol= core.autocrlf=input core.eol=native file=CRLF
ok 732 - setup match file test for ?a?b
ok 733 - wildmatch: match '?a?b' '\??\?b'
ok 2333 - checkout attr=-text ident aeol= core.autocrlf=input core.eol=native file=CRLF_mix_LF
ok 734 - wildmatch (via ls-files): match '\??\?b' '?a?b'
ok 735 - iwildmatch: match '?a?b' '\??\?b'
ok 2334 - checkout attr=-text ident aeol= core.autocrlf=input core.eol=native file=LF_mix_CR
ok 150 - branch --delete --force removes dangling branch
ok 21 - cherry-picked commits and fork-point work together
ok 736 - iwildmatch (via ls-files): match '\??\?b' '?a?b'
ok 2335 - checkout attr=-text ident aeol= core.autocrlf=input core.eol=native file=LF_nul
ok 737 - pathmatch: match '?a?b' '\??\?b'
ok 2336 - setup config for checkout attr=-text ident=ident aeol=lf core.autocrlf=input
ok 5 - rebase moves back to skip-reference
ok 2337 - setup LF checkout  with -c core.eol=native
ok 738 - pathmatch (via ls-files): match '\??\?b' '?a?b'
ok 6 - checkout skip-merge
ok 739 - ipathmatch: match '?a?b' '\??\?b'
ok 2338 - setup CRLF checkout  with -c core.eol=native
ok 740 - ipathmatch (via ls-files): match '\??\?b' '?a?b'
ok 2339 - setup LF_mix_CR checkout  with -c core.eol=native
ok 151 - use --edit-description
ok 7 - rebase with --merge
ok 12 - --reapply-cherry-picks
ok 22 - rebase --apply -q is quiet
ok 2340 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 741 - cleanup after previous file test
ok 39 - read-tree --prefix
ok 152 - detect typo in branch name when using --edit-description
ok 8 - rebase --skip with --merge
ok 2341 - setup LF_nul checkout  with -c core.eol=native
ok 742 - setup match file test for abc
ok 9 - merge and reference trees equal
ok 743 - wildmatch: match 'abc' '\a\b\c'
ok 10 - moved back to branch correctly
ok 23 - rebase --merge -q is quiet
ok 153 - refuse --edit-description on unborn branch for now
ok 744 - wildmatch (via ls-files): match '\a\b\c' 'abc'
ok 745 - iwildmatch: match 'abc' '\a\b\c'
ok 154 - --merged catches invalid object names
ok 2342 - ls-files --eol attr=-text ident aeol=lf core.autocrlf=input core.eol=native
ok 11 - skipping final pick removes .git/MERGE_MSG
ok 2343 - checkout attr=-text ident aeol=lf core.autocrlf=input core.eol=native file=LF
ok 746 - iwildmatch (via ls-files): match '\a\b\c' 'abc'
ok 747 - pathmatch: match 'abc' '\a\b\c'
ok 2344 - checkout attr=-text ident aeol=lf core.autocrlf=input core.eol=native file=CRLF
ok 133 - "add" DWIM doesnt infer --orphan w/ DWIM (no --branch), no --quiet (expect output), 'git -C wt', no --branch, 0 local branches, >=1 remotes, >=1 fetched remote branches, --guess-remote
ok 748 - pathmatch (via ls-files): match '\a\b\c' 'abc'
ok 2345 - checkout attr=-text ident aeol=lf core.autocrlf=input core.eol=native file=CRLF_mix_LF
ok 24 - rebase --exec -q is quiet
ok 749 - ipathmatch: match 'abc' '\a\b\c'
ok 2346 - checkout attr=-text ident aeol=lf core.autocrlf=input core.eol=native file=LF_mix_CR
ok 47 - git_test_func: added submodule creates empty directory
ok 750 - ipathmatch (via ls-files): match '\a\b\c' 'abc'
ok 2347 - checkout attr=-text ident aeol=lf core.autocrlf=input core.eol=native file=LF_nul
ok 2348 - setup config for checkout attr=-text ident=ident aeol=crlf core.autocrlf=input
ok 12 - correct advice upon picking empty commit
ok 751 - cleanup after previous file test
ok 2349 - setup LF checkout  with -c core.eol=native
ok 2350 - setup CRLF checkout  with -c core.eol=native
ok 752 - setup match file test for foo
ok 753 - wildmatch: no match 'foo' ''
ok 2351 - setup LF_mix_CR checkout  with -c core.eol=native
ok 754 - wildmatch (via ls-files): match dies on '' 'foo'
ok 2352 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 755 - iwildmatch: no match 'foo' ''
ok 134 - "add" DWIM infer --orphan w/ empty repo, no --quiet (expect output), 'git -C wt', --branch
ok 155 - --list during rebase
ok 25 - Rebase a commit that sprinkles CRs in
ok 756 - iwildmatch (via ls-files): match dies on '' 'foo'
ok 757 - pathmatch: no match 'foo' ''
ok 2353 - setup LF_nul checkout  with -c core.eol=native
ok 758 - pathmatch (via ls-files): match dies on '' 'foo'
ok 759 - ipathmatch: no match 'foo' ''
ok 760 - ipathmatch (via ls-files): match dies on '' 'foo'
ok 18 - update the split index when it contains a new racily clean cache entry #1
ok 2354 - ls-files --eol attr=-text ident aeol=crlf core.autocrlf=input core.eol=native
ok 761 - cleanup after previous file test
ok 13 - correct authorship when committing empty pick
ok 2355 - checkout attr=-text ident aeol=crlf core.autocrlf=input core.eol=native file=LF
ok 2356 - checkout attr=-text ident aeol=crlf core.autocrlf=input core.eol=native file=CRLF
ok 762 - setup match file test for foo/bar/baz/to
ok 763 - wildmatch: match 'foo/bar/baz/to' '**/t[o]'
ok 2357 - checkout attr=-text ident aeol=crlf core.autocrlf=input core.eol=native file=CRLF_mix_LF
ok 764 - wildmatch (via ls-files): match '**/t[o]' 'foo/bar/baz/to'
ok 2358 - checkout attr=-text ident aeol=crlf core.autocrlf=input core.eol=native file=LF_mix_CR
ok 765 - iwildmatch: match 'foo/bar/baz/to' '**/t[o]'
ok 2359 - checkout attr=-text ident aeol=crlf core.autocrlf=input core.eol=native file=LF_nul
ok 766 - iwildmatch (via ls-files): match '**/t[o]' 'foo/bar/baz/to'
ok 767 - pathmatch: match 'foo/bar/baz/to' '**/t[o]'
ok 2360 - setup config for checkout attr=text ident=ident aeol=lf core.autocrlf=input
ok 1 - setup
ok 1 - setup
ok 768 - pathmatch (via ls-files): match '**/t[o]' 'foo/bar/baz/to'
ok 156 - --list during rebase from detached HEAD
ok 769 - ipathmatch: match 'foo/bar/baz/to' '**/t[o]'
ok 135 - "add" DWIM doesnt infer --orphan w/ no --quiet (expect output), 'git -C wt', --branch, >=1 local branches, valid HEAD
ok 2361 - setup LF checkout  with -c core.eol=native
ok 2362 - setup CRLF checkout  with -c core.eol=native
ok 14 - correct advice upon rewording empty commit
ok 770 - ipathmatch (via ls-files): match '**/t[o]' 'foo/bar/baz/to'
ok 2363 - setup LF_mix_CR checkout  with -c core.eol=native
ok 771 - cleanup after previous file test
ok 26 - rebase can copy notes
ok 2364 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 2 - rebase commit with multi-line subject
ok 2 - rebase --keep-empty
ok 772 - setup match file test for a1B
ok 2365 - setup LF_nul checkout  with -c core.eol=native
ok 773 - wildmatch: match 'a1B' '[[:alpha:]][[:digit:]][[:upper:]]'
ok 774 - wildmatch (via ls-files): match '[[:alpha:]][[:digit:]][[:upper:]]' 'a1B'
ok 775 - iwildmatch: match 'a1B' '[[:alpha:]][[:digit:]][[:upper:]]'
ok 136 - "add" DWIM infer --orphan w/ no --quiet (expect output), 'git -C wt', --branch, 0 local branches, 0 remotes, 0 fetched remote branches, --no-guess-remote
ok 3 - rebase commit with diff in message
ok 3 - rebase -i with empty todo list
ok 13 - --reapply-cherry-picks refrains from reading unneeded blobs
ok 776 - iwildmatch (via ls-files): match '[[:alpha:]][[:digit:]][[:upper:]]' 'a1B'
# passed all 13 test(s)
1..13
ok 777 - pathmatch: match 'a1B' '[[:alpha:]][[:digit:]][[:upper:]]'
ok 27 - rebase -m can copy notes
ok 2366 - ls-files --eol attr=text ident aeol=lf core.autocrlf=input core.eol=native
ok 15 - correct advice upon editing empty commit
ok 778 - pathmatch (via ls-files): match '[[:alpha:]][[:digit:]][[:upper:]]' 'a1B'
ok 2367 - checkout attr=text ident aeol=lf core.autocrlf=input core.eol=native file=LF
ok 779 - ipathmatch: match 'a1B' '[[:alpha:]][[:digit:]][[:upper:]]'
ok 2368 - checkout attr=text ident aeol=lf core.autocrlf=input core.eol=native file=CRLF
ok 4 - rebase -m commit with empty message
ok 780 - ipathmatch (via ls-files): match '[[:alpha:]][[:digit:]][[:upper:]]' 'a1B'
*** t3406-rebase-message.sh ***
ok 2369 - checkout attr=text ident aeol=lf core.autocrlf=input core.eol=native file=CRLF_mix_LF
ok 2370 - checkout attr=text ident aeol=lf core.autocrlf=input core.eol=native file=LF_mix_CR
ok 781 - cleanup after previous file test
ok 2371 - checkout attr=text ident aeol=lf core.autocrlf=input core.eol=native file=LF_nul
ok 782 - setup match file test for a
ok 2372 - setup config for checkout attr=text ident=ident aeol=crlf core.autocrlf=input
ok 783 - wildmatch: no match 'a' '[[:digit:][:upper:][:space:]]'
ok 2373 - setup LF checkout  with -c core.eol=native
ok 784 - wildmatch (via ls-files): no match '[[:digit:][:upper:][:space:]]' 'a'
ok 2374 - setup CRLF checkout  with -c core.eol=native
ok 785 - iwildmatch: match 'a' '[[:digit:][:upper:][:space:]]'
ok 16 - correct advice upon cherry-picking an empty commit during a rebase
ok 2375 - setup LF_mix_CR checkout  with -c core.eol=native
ok 786 - iwildmatch (via ls-files): match '[[:digit:][:upper:][:space:]]' 'a'
ok 787 - pathmatch: no match 'a' '[[:digit:][:upper:][:space:]]'
ok 5 - rebase -i commit with empty message
ok 2376 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 48 - git_test_func: added submodule leaves existing empty directory alone
# passed all 5 test(s)
1..5
ok 788 - pathmatch (via ls-files): no match '[[:digit:][:upper:][:space:]]' 'a'
ok 28 - rebase commit with an ancient timestamp
ok 789 - ipathmatch: match 'a' '[[:digit:][:upper:][:space:]]'
*** t3407-rebase-abort.sh ***
ok 2377 - setup LF_nul checkout  with -c core.eol=native
ok 137 - "add" DWIM infer --orphan w/ no --quiet (expect output), 'git -C wt', --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --no-guess-remote
ok 790 - ipathmatch (via ls-files): match '[[:digit:][:upper:][:space:]]' 'a'
ok 4 - rebase -i with the exec command
ok 791 - cleanup after previous file test
ok 2378 - ls-files --eol attr=text ident aeol=crlf core.autocrlf=input core.eol=native
ok 792 - setup match file test for A
ok 2379 - checkout attr=text ident aeol=crlf core.autocrlf=input core.eol=native file=LF
ok 793 - wildmatch: match 'A' '[[:digit:][:upper:][:space:]]'
ok 40 - read-tree --merge with directory-file conflicts
ok 2380 - checkout attr=text ident aeol=crlf core.autocrlf=input core.eol=native file=CRLF
ok 794 - wildmatch (via ls-files): match '[[:digit:][:upper:][:space:]]' 'A'
ok 795 - iwildmatch: match 'A' '[[:digit:][:upper:][:space:]]'
ok 2381 - checkout attr=text ident aeol=crlf core.autocrlf=input core.eol=native file=CRLF_mix_LF
ok 5 - rebase -i with the exec command runs from tree root
ok 17 - correct advice upon multi cherry-pick picking an empty commit during a rebase
ok 796 - iwildmatch (via ls-files): match '[[:digit:][:upper:][:space:]]' 'A'
ok 2382 - checkout attr=text ident aeol=crlf core.autocrlf=input core.eol=native file=LF_mix_CR
ok 157 - tracking with unexpected .fetch refspec
ok 797 - pathmatch: match 'A' '[[:digit:][:upper:][:space:]]'
ok 2383 - checkout attr=text ident aeol=crlf core.autocrlf=input core.eol=native file=LF_nul
ok 798 - pathmatch (via ls-files): match '[[:digit:][:upper:][:space:]]' 'A'
ok 2384 - setup config for checkout attr=auto ident=ident aeol=lf core.autocrlf=input
ok 29 - rebase with "From " line in commit message
ok 799 - ipathmatch: match 'A' '[[:digit:][:upper:][:space:]]'
ok 2385 - setup LF checkout  with -c core.eol=native
ok 800 - ipathmatch (via ls-files): match '[[:digit:][:upper:][:space:]]' 'A'
ok 2386 - setup CRLF checkout  with -c core.eol=native
ok 801 - cleanup after previous file test
ok 2387 - setup LF_mix_CR checkout  with -c core.eol=native
ok 6 - rebase -i with exec allows git commands in subdirs
ok 802 - setup match file test for 1
ok 2388 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 803 - wildmatch: match '1' '[[:digit:][:upper:][:space:]]'
ok 138 - "add" DWIM infer --orphan w/ no --quiet (expect output), 'git -C wt', --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --guess-remote
ok 18 - fixup that empties commit fails
ok 2389 - setup LF_nul checkout  with -c core.eol=native
ok 804 - wildmatch (via ls-files): match '[[:digit:][:upper:][:space:]]' '1'
ok 805 - iwildmatch: match '1' '[[:digit:][:upper:][:space:]]'
ok 7 - rebase -i sets work tree properly
ok 806 - iwildmatch (via ls-files): match '[[:digit:][:upper:][:space:]]' '1'
ok 807 - pathmatch: match '1' '[[:digit:][:upper:][:space:]]'
ok 2390 - ls-files --eol attr=auto ident aeol=lf core.autocrlf=input core.eol=native
ok 14 - test same notes in 2/2/2/34-fanout and 2/2/36-fanout
ok 808 - pathmatch (via ls-files): match '[[:digit:][:upper:][:space:]]' '1'
ok 809 - ipathmatch: match '1' '[[:digit:][:upper:][:space:]]'
ok 2391 - checkout attr=auto ident aeol=lf core.autocrlf=input core.eol=native file=LF
ok 19 - squash that empties commit fails
ok 15 - verify same notes in 2/2/2/34-fanout and 2/2/36-fanout
ok 810 - ipathmatch (via ls-files): match '[[:digit:][:upper:][:space:]]' '1'
ok 2392 - checkout attr=auto ident aeol=lf core.autocrlf=input core.eol=native file=CRLF
ok 20 - $EDITOR and friends are unchanged
# passed all 20 test(s)
1..20
ok 2393 - checkout attr=auto ident aeol=lf core.autocrlf=input core.eol=native file=CRLF_mix_LF
ok 811 - cleanup after previous file test
*** t3408-rebase-multi-line.sh ***
ok 2394 - checkout attr=auto ident aeol=lf core.autocrlf=input core.eol=native file=LF_mix_CR
ok 812 - setup match file test for 1
ok 30 - rebase --apply and --show-current-patch
ok 813 - wildmatch: no match '1' '[[:digit:][:upper:][:spaci:]]'
ok 2395 - checkout attr=auto ident aeol=lf core.autocrlf=input core.eol=native file=LF_nul
ok 8 - rebase -i with the exec command checks tree cleanness
ok 2396 - setup config for checkout attr=auto ident=ident aeol=crlf core.autocrlf=input
ok 814 - wildmatch (via ls-files): no match '[[:digit:][:upper:][:spaci:]]' '1'
ok 158 - configured committerdate sort
ok 815 - iwildmatch: no match '1' '[[:digit:][:upper:][:spaci:]]'
ok 2397 - setup LF checkout  with -c core.eol=native
ok 2398 - setup CRLF checkout  with -c core.eol=native
ok 816 - iwildmatch (via ls-files): no match '[[:digit:][:upper:][:spaci:]]' '1'
ok 2399 - setup LF_mix_CR checkout  with -c core.eol=native
ok 159 - option override configured sort
ok 817 - pathmatch: no match '1' '[[:digit:][:upper:][:spaci:]]'
ok 2400 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 818 - pathmatch (via ls-files): no match '[[:digit:][:upper:][:spaci:]]' '1'
ok 819 - ipathmatch: no match '1' '[[:digit:][:upper:][:spaci:]]'
ok 139 - "add" DWIM infer --orphan w/ no --quiet (expect output), 'git -C wt', --branch, 0 local branches, >=1 remotes, >=1 fetched remote branches, --guess-remote
ok 160 - --no-sort cancels config sort keys
ok 820 - ipathmatch (via ls-files): no match '[[:digit:][:upper:][:spaci:]]' '1'
ok 2401 - setup LF_nul checkout  with -c core.eol=native
ok 161 - --no-sort cancels command line sort keys
ok 1 - setup
ok 821 - cleanup after previous file test
ok 49 - git_test_func: replace tracked file with submodule creates empty directory
ok 822 - setup match file test for  
ok 162 - --no-sort without subsequent --sort prints expected branches
ok 823 - wildmatch: match ' ' '[[:digit:][:upper:][:space:]]'
ok 2402 - ls-files --eol attr=auto ident aeol=crlf core.autocrlf=input core.eol=native
ok 9 - cherry-pick works with rebase --exec
ok 824 - wildmatch (via ls-files): match '[[:digit:][:upper:][:space:]]' ' '
ok 2403 - checkout attr=auto ident aeol=crlf core.autocrlf=input core.eol=native file=LF
ok 825 - iwildmatch: match ' ' '[[:digit:][:upper:][:space:]]'
ok 2404 - checkout attr=auto ident aeol=crlf core.autocrlf=input core.eol=native file=CRLF
ok 826 - iwildmatch (via ls-files): match '[[:digit:][:upper:][:space:]]' ' '
ok 10 - rebase -x with empty command fails
ok 2405 - checkout attr=auto ident aeol=crlf core.autocrlf=input core.eol=native file=CRLF_mix_LF
ok 827 - pathmatch: match ' ' '[[:digit:][:upper:][:space:]]'
ok 1 - setup
ok 163 - invalid sort parameter in configuration
ok 2406 - checkout attr=auto ident aeol=crlf core.autocrlf=input core.eol=native file=LF_mix_CR
ok 11 - rebase -x with newline in command fails
ok 828 - pathmatch (via ls-files): match '[[:digit:][:upper:][:space:]]' ' '
ok 2 - rebase --apply --abort
ok 829 - ipathmatch: match ' ' '[[:digit:][:upper:][:space:]]'
ok 2407 - checkout attr=auto ident aeol=crlf core.autocrlf=input core.eol=native file=LF_nul
ok 2408 - setup config for checkout attr= ident=ident aeol= core.autocrlf=false
ok 140 - "add" error, warn on bad HEAD, hint use orphan w/ DWIM (no --branch), no --quiet (expect output), 'git -C wt', no --branch, >=1 local branches, invalid (or orphan) HEAD
ok 830 - ipathmatch (via ls-files): match '[[:digit:][:upper:][:space:]]' ' '
ok 2 - rebase -m
ok 164 - tracking info copied with --track=inherit
ok 2409 - setup LF checkout  with -c core.eol=native
ok 3 - rebase against main twice
ok 831 - cleanup after previous file test
ok 2410 - setup CRLF checkout  with -c core.eol=native
ok 832 - setup match file test for .
ok 2411 - setup LF_mix_CR checkout  with -c core.eol=native
ok 833 - wildmatch: no match '.' '[[:digit:][:upper:][:space:]]'
not ok 834 - wildmatch (via ls-files): no match skip '[[:digit:][:upper:][:space:]]' '.' # TODO known breakage
ok 835 - iwildmatch: no match '.' '[[:digit:][:upper:][:space:]]'
not ok 836 - iwildmatch (via ls-files): no match skip '[[:digit:][:upper:][:space:]]' '.' # TODO known breakage
ok 2412 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 837 - pathmatch: no match '.' '[[:digit:][:upper:][:space:]]'
not ok 838 - pathmatch (via ls-files): no match skip '[[:digit:][:upper:][:space:]]' '.' # TODO known breakage
ok 12 - rebase -i with exec of inexistent command
ok 839 - ipathmatch: no match '.' '[[:digit:][:upper:][:space:]]'
not ok 840 - ipathmatch (via ls-files): no match skip '[[:digit:][:upper:][:space:]]' '.' # TODO known breakage
ok 4 - rebase against main twice with --force
ok 2413 - setup LF_nul checkout  with -c core.eol=native
ok 841 - cleanup after previous file test
ok 842 - setup match file test for .
ok 843 - wildmatch: match '.' '[[:digit:][:punct:][:space:]]'
not ok 844 - wildmatch (via ls-files): match skip '[[:digit:][:punct:][:space:]]' '.' # TODO known breakage
ok 845 - iwildmatch: match '.' '[[:digit:][:punct:][:space:]]'
ok 13 - implicit interactive rebase does not invoke sequence editor
not ok 846 - iwildmatch (via ls-files): match skip '[[:digit:][:punct:][:space:]]' '.' # TODO known breakage
ok 847 - pathmatch: match '.' '[[:digit:][:punct:][:space:]]'
ok 5 - rebase against main twice from another branch
not ok 848 - pathmatch (via ls-files): match skip '[[:digit:][:punct:][:space:]]' '.' # TODO known breakage
ok 849 - ipathmatch: match '.' '[[:digit:][:punct:][:space:]]'
not ok 850 - ipathmatch (via ls-files): match skip '[[:digit:][:punct:][:space:]]' '.' # TODO known breakage
ok 2414 - ls-files --eol attr= ident aeol= core.autocrlf=false core.eol=native
ok 851 - cleanup after previous file test
ok 165 - tracking info copied with autoSetupMerge=inherit
ok 3 - pre rebase --apply head is marked as reachable
ok 2415 - checkout attr= ident aeol= core.autocrlf=false core.eol=native file=LF
ok 6 - rebase fast-forward to main
ok 141 - "add" error, warn on bad HEAD, hint use orphan w/ no --quiet (expect output), 'git -C wt', --branch, >=1 local branches, invalid (or orphan) HEAD
ok 852 - setup match file test for 5
ok 14 - no changes are a nop
ok 853 - wildmatch: match '5' '[[:xdigit:]]'
ok 2416 - checkout attr= ident aeol= core.autocrlf=false core.eol=native file=CRLF
ok 2417 - checkout attr= ident aeol= core.autocrlf=false core.eol=native file=CRLF_mix_LF
ok 854 - wildmatch (via ls-files): match '[[:xdigit:]]' '5'
ok 855 - iwildmatch: match '5' '[[:xdigit:]]'
ok 2418 - checkout attr= ident aeol= core.autocrlf=false core.eol=native file=LF_mix_CR
ok 7 - rebase --stat
ok 2419 - checkout attr= ident aeol= core.autocrlf=false core.eol=native file=LF_nul
ok 856 - iwildmatch (via ls-files): match '[[:xdigit:]]' '5'
ok 1 - setup
ok 2420 - setup config for checkout attr= ident=ident aeol= core.autocrlf=true
ok 857 - pathmatch: match '5' '[[:xdigit:]]'
ok 2421 - setup LF checkout  with -c core.eol=native
ok 858 - pathmatch (via ls-files): match '[[:xdigit:]]' '5'
ok 166 - --track overrides branch.autoSetupMerge
ok 2422 - setup CRLF checkout  with -c core.eol=native
ok 859 - ipathmatch: match '5' '[[:xdigit:]]'
ok 8 - rebase w/config rebase.stat
ok 15 - test the [branch] option
ok 860 - ipathmatch (via ls-files): match '[[:xdigit:]]' '5'
ok 167 - errors if given a bad branch name
ok 2423 - setup LF_mix_CR checkout  with -c core.eol=native
# passed all 167 test(s)
1..167
ok 31 - rebase --apply and .gitattributes
ok 2424 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 2 - rebase
ok 861 - cleanup after previous file test
# passed all 2 test(s)
1..2
*** t3409-rebase-environ.sh ***
ok 2425 - setup LF_nul checkout  with -c core.eol=native
ok 862 - setup match file test for f
ok 9 - rebase -n overrides config rebase.stat config
ok 863 - wildmatch: match 'f' '[[:xdigit:]]'
ok 10 - rebase --onto outputs the invalid ref
ok 864 - wildmatch (via ls-files): match '[[:xdigit:]]' 'f'
ok 865 - iwildmatch: match 'f' '[[:xdigit:]]'
ok 142 - "add" error, warn on bad HEAD, hint use orphan w/ no --quiet (expect output), 'git -C wt', --detach, >=1 local branches, invalid (or orphan) HEAD
ok 16 - test --onto <branch>
ok 866 - iwildmatch (via ls-files): match '[[:xdigit:]]' 'f'
ok 2426 - ls-files --eol attr= ident aeol= core.autocrlf=true core.eol=native
ok 4 - rebase --apply --abort after --skip
ok 11 - error out early upon -C<n> or --whitespace=<bad>
ok 867 - pathmatch: match 'f' '[[:xdigit:]]'
ok 2427 - checkout attr= ident aeol= core.autocrlf=true core.eol=native file=LF
*** t3412-rebase-root.sh ***
ok 143 - "add" error inferred "--orphan" gives illegal opts combo w/ empty repo, DWIM (no --branch), no --quiet (expect output), no --branch, --no-checkout
ok 868 - pathmatch (via ls-files): match '[[:xdigit:]]' 'f'
ok 2428 - checkout attr= ident aeol= core.autocrlf=true core.eol=native file=CRLF
ok 869 - ipathmatch: match 'f' '[[:xdigit:]]'
ok 2429 - checkout attr= ident aeol= core.autocrlf=true core.eol=native file=CRLF_mix_LF
ok 870 - ipathmatch (via ls-files): match '[[:xdigit:]]' 'f'
ok 50 - git_test_func: replace directory with submodule
ok 2430 - checkout attr= ident aeol= core.autocrlf=true core.eol=native file=LF_mix_CR
ok 144 - "add" error inferred "--orphan" gives illegal opts combo w/ empty repo, DWIM (no --branch), no --quiet (expect output), no --branch, --track
ok 2431 - checkout attr= ident aeol= core.autocrlf=true core.eol=native file=LF_nul
ok 871 - cleanup after previous file test
ok 2432 - setup config for checkout attr=auto ident=ident aeol= core.autocrlf=true
ok 872 - setup match file test for D
ok 2433 - setup LF checkout  with -c core.eol=native
ok 145 - "add" error inferred "--orphan" gives illegal opts combo w/ empty repo, no --quiet (expect output), --branch, --no-checkout
ok 873 - wildmatch: match 'D' '[[:xdigit:]]'
ok 32 - rebase--merge.sh and --show-current-patch
ok 2434 - setup CRLF checkout  with -c core.eol=native
ok 17 - rebase on top of a non-conflicting commit
ok 874 - wildmatch (via ls-files): match '[[:xdigit:]]' 'D'
ok 2435 - setup LF_mix_CR checkout  with -c core.eol=native
ok 875 - iwildmatch: match 'D' '[[:xdigit:]]'
ok 18 - reflog for the branch shows state before rebase
ok 146 - "add" error inferred "--orphan" gives illegal opts combo w/ empty repo, no --quiet (expect output), --branch, --track
ok 33 - switch to branch checked out here
ok 2436 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 19 - reflog for the branch shows correct finish message
ok 876 - iwildmatch (via ls-files): match '[[:xdigit:]]' 'D'
ok 877 - pathmatch: match 'D' '[[:xdigit:]]'
ok 2437 - setup LF_nul checkout  with -c core.eol=native
ok 12 - rebase --merge reflog
ok 5 - rebase --apply --abort after --continue
ok 878 - pathmatch (via ls-files): match '[[:xdigit:]]' 'D'
ok 879 - ipathmatch: match 'D' '[[:xdigit:]]'
ok 2438 - ls-files --eol attr=auto ident aeol= core.autocrlf=true core.eol=native
ok 880 - ipathmatch (via ls-files): match '[[:xdigit:]]' 'D'
ok 147 - "add" DWIM infer --orphan w/ empty repo, DWIM (no --branch), --quiet, 'cd repo && git', no --branch
ok 2439 - checkout attr=auto ident aeol= core.autocrlf=true core.eol=native file=LF
ok 881 - cleanup after previous file test
ok 2440 - checkout attr=auto ident aeol= core.autocrlf=true core.eol=native file=CRLF
ok 2441 - checkout attr=auto ident aeol= core.autocrlf=true core.eol=native file=CRLF_mix_LF
ok 2442 - checkout attr=auto ident aeol= core.autocrlf=true core.eol=native file=LF_mix_CR
ok 882 - setup match file test for _
ok 883 - wildmatch: match '_' '[[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:graph:][:lower:][:print:][:punct:][:space:][:upper:][:xdigit:]]'
ok 2443 - checkout attr=auto ident aeol= core.autocrlf=true core.eol=native file=LF_nul
ok 884 - wildmatch (via ls-files): match '[[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:graph:][:lower:][:print:][:punct:][:space:][:upper:][:xdigit:]]' '_'
ok 2444 - setup config for checkout attr=text ident=ident aeol= core.autocrlf=true
ok 885 - iwildmatch: match '_' '[[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:graph:][:lower:][:print:][:punct:][:space:][:upper:][:xdigit:]]'
ok 34 - switch to branch checked out elsewhere fails
ok 2445 - setup LF checkout  with -c core.eol=native
ok 886 - iwildmatch (via ls-files): match '[[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:graph:][:lower:][:print:][:punct:][:space:][:upper:][:xdigit:]]' '_'
ok 2446 - setup CRLF checkout  with -c core.eol=native
ok 887 - pathmatch: match '_' '[[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:graph:][:lower:][:print:][:punct:][:space:][:upper:][:xdigit:]]'
ok 20 - exchange two commits
ok 13 - rebase --merge fast-forward reflog
ok 2447 - setup LF_mix_CR checkout  with -c core.eol=native
ok 1 - setup
ok 2448 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 35 - switch to branch not checked out
ok 888 - pathmatch (via ls-files): match '[[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:graph:][:lower:][:print:][:punct:][:space:][:upper:][:xdigit:]]' '_'
ok 889 - ipathmatch: match '_' '[[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:graph:][:lower:][:print:][:punct:][:space:][:upper:][:xdigit:]]'
ok 148 - "add" DWIM doesnt infer --orphan w/ DWIM (no --branch), --quiet, 'cd repo && git', no --branch, >=1 local branches, valid HEAD
ok 2449 - setup LF_nul checkout  with -c core.eol=native
ok 2 - rebase --exec does not muck with GIT_DIR
ok 890 - ipathmatch (via ls-files): match '[[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:graph:][:lower:][:print:][:punct:][:space:][:upper:][:xdigit:]]' '_'
ok 6 - rebase --apply --abort when checking out a tag
ok 3 - rebase --exec does not muck with GIT_WORK_TREE
ok 891 - cleanup after previous file test
ok 2450 - ls-files --eol attr=text ident aeol= core.autocrlf=true core.eol=native
# passed all 3 test(s)
1..3
ok 892 - setup match file test for .
ok 2451 - checkout attr=text ident aeol= core.autocrlf=true core.eol=native file=LF
ok 893 - wildmatch: match '.' '[^[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:lower:][:space:][:upper:][:xdigit:]]'
ok 36 - switch to non-branch detaches HEAD
not ok 894 - wildmatch (via ls-files): match skip '[^[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:lower:][:space:][:upper:][:xdigit:]]' '.' # TODO known breakage
*** t3413-rebase-hook.sh ***
ok 2452 - checkout attr=text ident aeol= core.autocrlf=true core.eol=native file=CRLF
ok 895 - iwildmatch: match '.' '[^[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:lower:][:space:][:upper:][:xdigit:]]'
not ok 896 - iwildmatch (via ls-files): match skip '[^[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:lower:][:space:][:upper:][:xdigit:]]' '.' # TODO known breakage
ok 149 - "add" DWIM infer --orphan w/ DWIM (no --branch), --quiet, 'cd repo && git', no --branch, 0 local branches, 0 remotes, 0 fetched remote branches, --no-guess-remote
ok 2453 - checkout attr=text ident aeol= core.autocrlf=true core.eol=native file=CRLF_mix_LF
ok 897 - pathmatch: match '.' '[^[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:lower:][:space:][:upper:][:xdigit:]]'
not ok 898 - pathmatch (via ls-files): match skip '[^[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:lower:][:space:][:upper:][:xdigit:]]' '.' # TODO known breakage
ok 21 - stop on conflicting pick
ok 2454 - checkout attr=text ident aeol= core.autocrlf=true core.eol=native file=LF_mix_CR
ok 899 - ipathmatch: match '.' '[^[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:lower:][:space:][:upper:][:xdigit:]]'
not ok 900 - ipathmatch (via ls-files): match skip '[^[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:lower:][:space:][:upper:][:xdigit:]]' '.' # TODO known breakage
ok 51 - git_test_func: removed submodule leaves submodule directory and its contents in place
ok 901 - cleanup after previous file test
ok 2455 - checkout attr=text ident aeol= core.autocrlf=true core.eol=native file=LF_nul
ok 1 - prepare repository
ok 2456 - setup config for checkout attr=text ident=ident aeol= core.autocrlf=input
ok 14 - rebase --merge --skip reflog
ok 902 - setup match file test for 5
ok 22 - show conflicted patch
ok 903 - wildmatch: match '5' '[a-c[:digit:]x-z]'
ok 2457 - setup LF checkout  with -c core.eol=native
ok 7 - rebase --apply --abort does not update reflog
ok 2 - rebase --root fails with too many args
ok 37 - refuse to switch to branch checked out elsewhere
ok 904 - wildmatch (via ls-files): match '[a-c[:digit:]x-z]' '5'
ok 2458 - setup CRLF checkout  with -c core.eol=native
ok 905 - iwildmatch: match '5' '[a-c[:digit:]x-z]'
ok 3 - setup pre-rebase hook
ok 906 - iwildmatch (via ls-files): match '[a-c[:digit:]x-z]' '5'
ok 23 - abort
ok 2459 - setup LF_mix_CR checkout  with -c core.eol=native
ok 907 - pathmatch: match '5' '[a-c[:digit:]x-z]'
ok 2460 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 908 - pathmatch (via ls-files): match '[a-c[:digit:]x-z]' '5'
ok 2461 - setup LF_nul checkout  with -c core.eol=native
ok 909 - ipathmatch: match '5' '[a-c[:digit:]x-z]'
ok 910 - ipathmatch (via ls-files): match '[a-c[:digit:]x-z]' '5'
ok 4 - rebase --root --onto <newbase>
ok 5 - pre-rebase got correct input (1)
ok 150 - "add" DWIM infer --orphan w/ DWIM (no --branch), --quiet, 'cd repo && git', no --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --no-guess-remote
ok 24 - abort with error when new base cannot be checked out
ok 911 - cleanup after previous file test
ok 8 - rebase --abort can not be used with other options
ok 2462 - ls-files --eol attr=text ident aeol= core.autocrlf=input core.eol=native
ok 912 - setup match file test for b
ok 15 - rebase --merge --abort reflog
ok 913 - wildmatch: match 'b' '[a-c[:digit:]x-z]'
ok 2463 - checkout attr=text ident aeol= core.autocrlf=input core.eol=native file=LF
ok 914 - wildmatch (via ls-files): match '[a-c[:digit:]x-z]' 'b'
ok 2464 - checkout attr=text ident aeol= core.autocrlf=input core.eol=native file=CRLF
ok 6 - rebase --root --onto <newbase> <branch>
ok 915 - iwildmatch: match 'b' '[a-c[:digit:]x-z]'
ok 7 - pre-rebase got correct input (2)
ok 2465 - checkout attr=text ident aeol= core.autocrlf=input core.eol=native file=CRLF_mix_LF
ok 916 - iwildmatch (via ls-files): match '[a-c[:digit:]x-z]' 'b'
ok 917 - pathmatch: match 'b' '[a-c[:digit:]x-z]'
ok 38 - rebase when inside worktree subdirectory
ok 25 - retain authorship
ok 2466 - checkout attr=text ident aeol= core.autocrlf=input core.eol=native file=LF_mix_CR
ok 918 - pathmatch (via ls-files): match '[a-c[:digit:]x-z]' 'b'
ok 919 - ipathmatch: match 'b' '[a-c[:digit:]x-z]'
ok 2467 - checkout attr=text ident aeol= core.autocrlf=input core.eol=native file=LF_nul
ok 9 - rebase --apply --quit
ok 2468 - setup config for checkout attr=auto ident=ident aeol= core.autocrlf=input
ok 920 - ipathmatch (via ls-files): match '[a-c[:digit:]x-z]' 'b'
ok 151 - "add" error need fetch w/ DWIM (no --branch), --quiet, 'cd repo && git', no --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --guess-remote
ok 16 - rebase --merge --abort detached HEAD reflog
ok 16 - test notes in no fanout concatenated with 2/38-fanout
ok 2469 - setup LF checkout  with -c core.eol=native
ok 8 - rebase -i --root --onto <newbase>
ok 921 - cleanup after previous file test
ok 9 - pre-rebase got correct input (3)
ok 2470 - setup CRLF checkout  with -c core.eol=native
ok 2471 - setup LF_mix_CR checkout  with -c core.eol=native
ok 922 - setup match file test for y
ok 923 - wildmatch: match 'y' '[a-c[:digit:]x-z]'
ok 2472 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 924 - wildmatch (via ls-files): match '[a-c[:digit:]x-z]' 'y'
ok 2473 - setup LF_nul checkout  with -c core.eol=native
ok 925 - iwildmatch: match 'y' '[a-c[:digit:]x-z]'
ok 1 - setup
ok 17 - verify notes in no fanout concatenated with 2/38-fanout
ok 10 - rebase --merge --abort
ok 926 - iwildmatch (via ls-files): match '[a-c[:digit:]x-z]' 'y'
ok 927 - pathmatch: match 'y' '[a-c[:digit:]x-z]'
ok 10 - rebase -i --root --onto <newbase> <branch>
ok 928 - pathmatch (via ls-files): match '[a-c[:digit:]x-z]' 'y'
ok 2474 - ls-files --eol attr=auto ident aeol= core.autocrlf=input core.eol=native
ok 11 - pre-rebase got correct input (4)
ok 929 - ipathmatch: match 'y' '[a-c[:digit:]x-z]'
ok 2475 - checkout attr=auto ident aeol= core.autocrlf=input core.eol=native file=LF
ok 930 - ipathmatch (via ls-files): match '[a-c[:digit:]x-z]' 'y'
ok 2476 - checkout attr=auto ident aeol= core.autocrlf=input core.eol=native file=CRLF
ok 2 - rebase
ok 2477 - checkout attr=auto ident aeol= core.autocrlf=input core.eol=native file=CRLF_mix_LF
ok 931 - cleanup after previous file test
ok 152 - "add" DWIM infer --orphan w/ DWIM (no --branch), --quiet, 'cd repo && git', no --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --guess-remote, --force
ok 17 - rebase --merge reflog GIT_REFLOG_ACTION=my-reflog-action
ok 2478 - checkout attr=auto ident aeol= core.autocrlf=input core.eol=native file=LF_mix_CR
ok 932 - setup match file test for q
ok 933 - wildmatch: no match 'q' '[a-c[:digit:]x-z]'
ok 26 - retain authorship w/ conflicts
ok 2479 - checkout attr=auto ident aeol= core.autocrlf=input core.eol=native file=LF_nul
ok 2480 - setup config for checkout attr=text ident=ident aeol= core.autocrlf=false
ok 934 - wildmatch (via ls-files): no match '[a-c[:digit:]x-z]' 'q'
ok 3 - rebase -i
ok 52 - git_test_func: removed submodule leaves submodule containing a .git directory alone
ok 935 - iwildmatch: no match 'q' '[a-c[:digit:]x-z]'
ok 2481 - setup LF checkout  with -c core.eol=crlf
ok 12 - set up merge history
ok 4 - setup pre-rebase hook
ok 936 - iwildmatch (via ls-files): no match '[a-c[:digit:]x-z]' 'q'
ok 937 - pathmatch: no match 'q' '[a-c[:digit:]x-z]'
ok 2482 - setup CRLF checkout  with -c core.eol=crlf
ok 39 - git rebase --update-ref with core.commentChar and branch on worktree
# passed all 39 test(s)
ok 11 - pre rebase --merge head is marked as reachable
1..39
ok 938 - pathmatch (via ls-files): no match '[a-c[:digit:]x-z]' 'q'
ok 2483 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 939 - ipathmatch: no match 'q' '[a-c[:digit:]x-z]'
ok 2484 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 18 - rebase --merge fast-forward reflog GIT_REFLOG_ACTION=my-reflog-action
ok 940 - ipathmatch (via ls-files): no match '[a-c[:digit:]x-z]' 'q'
ok 2485 - setup LF_nul checkout  with -c core.eol=crlf
ok 5 - pre-rebase hook gets correct input (1)
ok 941 - cleanup after previous file test
ok 13 - set up second root and merge
ok 2486 - ls-files --eol attr=text ident aeol= core.autocrlf=false core.eol=crlf
ok 942 - setup match file test for ]
*** t3415-rebase-autosquash.sh ***
ok 14 - setup pre-rebase hook that fails
ok 943 - wildmatch: match ']' '[\\-^]'
ok 2487 - checkout attr=text ident aeol= core.autocrlf=false core.eol=crlf file=LF
ok 27 - squash
ok 944 - wildmatch (via ls-files): match '[\\-^]' ']'
ok 945 - iwildmatch: match ']' '[\\-^]'
ok 28 - retain authorship when squashing
ok 2488 - checkout attr=text ident aeol= core.autocrlf=false core.eol=crlf file=CRLF
ok 6 - pre-rebase hook gets correct input (2)
ok 15 - pre-rebase hook stops rebase
ok 2489 - checkout attr=text ident aeol= core.autocrlf=false core.eol=crlf file=CRLF_mix_LF
ok 946 - iwildmatch (via ls-files): match '[\\-^]' ']'
ok 947 - pathmatch: match ']' '[\\-^]'
ok 2490 - checkout attr=text ident aeol= core.autocrlf=false core.eol=crlf file=LF_mix_CR
ok 153 - "add" DWIM doesnt infer --orphan w/ DWIM (no --branch), --quiet, 'cd repo && git', no --branch, 0 local branches, >=1 remotes, >=1 fetched remote branches, --guess-remote
ok 19 - rebase --merge --skip reflog GIT_REFLOG_ACTION=my-reflog-action
ok 12 - rebase --merge --abort after --skip
ok 948 - pathmatch (via ls-files): match '[\\-^]' ']'
ok 949 - ipathmatch: match ']' '[\\-^]'
ok 2491 - checkout attr=text ident aeol= core.autocrlf=false core.eol=crlf file=LF_nul
ok 2492 - setup config for checkout attr=text ident=ident aeol= core.autocrlf=false
ok 950 - ipathmatch (via ls-files): match '[\\-^]' ']'
ok 16 - pre-rebase hook stops rebase -i
ok 17 - remove pre-rebase hook
ok 2493 - setup LF checkout  with -c core.eol=lf
ok 951 - cleanup after previous file test
ok 2494 - setup CRLF checkout  with -c core.eol=lf
ok 2495 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 18 - set up a conflict
ok 952 - setup match file test for [
ok 7 - pre-rebase hook gets correct input (3)
ok 953 - wildmatch: no match '[' '[\\-^]'
ok 154 - "add" DWIM infer --orphan w/ empty repo, --quiet, 'cd repo && git', --branch
ok 2496 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 954 - wildmatch (via ls-files): no match '[\\-^]' '['
ok 2497 - setup LF_nul checkout  with -c core.eol=lf
ok 955 - iwildmatch: no match '[' '[\\-^]'
ok 20 - rebase --merge --abort reflog GIT_REFLOG_ACTION=my-reflog-action
ok 29 - --continue tries to commit
ok 956 - iwildmatch (via ls-files): no match '[\\-^]' '['
ok 957 - pathmatch: no match '[' '[\\-^]'
ok 19 - rebase --root with conflict (first part)
ok 20 - fix the conflict
ok 958 - pathmatch (via ls-files): no match '[\\-^]' '['
ok 2498 - ls-files --eol attr=text ident aeol= core.autocrlf=false core.eol=lf
ok 959 - ipathmatch: no match '[' '[\\-^]'
ok 8 - pre-rebase hook gets correct input (4)
ok 2499 - checkout attr=text ident aeol= core.autocrlf=false core.eol=lf file=LF
ok 960 - ipathmatch (via ls-files): no match '[\\-^]' '['
ok 13 - rebase --merge --abort after --continue
ok 2500 - checkout attr=text ident aeol= core.autocrlf=false core.eol=lf file=CRLF
ok 961 - cleanup after previous file test
ok 2501 - checkout attr=text ident aeol= core.autocrlf=false core.eol=lf file=CRLF_mix_LF
ok 2502 - checkout attr=text ident aeol= core.autocrlf=false core.eol=lf file=LF_mix_CR
ok 962 - setup match file test for -
ok 21 - rebase --merge --abort detached HEAD reflog GIT_REFLOG_ACTION=my-reflog-action
ok 155 - "add" DWIM doesnt infer --orphan w/ --quiet, 'cd repo && git', --branch, >=1 local branches, valid HEAD
ok 53 - git_test_func: replace submodule with a directory must fail
ok 963 - wildmatch: match '-' '[\-_]'
ok 2503 - checkout attr=text ident aeol= core.autocrlf=false core.eol=lf file=LF_nul
ok 30 - verbose flag is heeded, even after --continue
ok 9 - pre-rebase hook gets correct input (5)
ok 2504 - setup config for checkout attr=text ident=ident aeol= core.autocrlf=false
ok 21 - rebase --root with conflict (second part)
ok 964 - wildmatch (via ls-files): match '[\-_]' '-'
ok 965 - iwildmatch: match '-' '[\-_]'
ok 2505 - setup LF checkout 
ok 966 - iwildmatch (via ls-files): match '[\-_]' '-'
ok 2506 - setup CRLF checkout 
ok 967 - pathmatch: match '-' '[\-_]'
ok 1 - setup
ok 22 - rebase -i --root with conflict (first part)
ok 2507 - setup LF_mix_CR checkout 
ok 968 - pathmatch (via ls-files): match '[\-_]' '-'
ok 156 - "add" DWIM infer --orphan w/ --quiet, 'cd repo && git', --branch, 0 local branches, 0 remotes, 0 fetched remote branches, --no-guess-remote
ok 23 - fix the conflict
ok 969 - ipathmatch: match '-' '[\-_]'
ok 2508 - setup CRLF_mix_LF checkout 
ok 10 - pre-rebase hook gets correct input (6)
ok 14 - rebase --merge --abort when checking out a tag
ok 3 - Add a few hundred commits w/notes to trigger fanout (x -> y)
ok 41 - merge, cherry-pick, and rebase
ok 2509 - setup LF_nul checkout 
ok 11 - setup pre-rebase hook that fails
ok 970 - ipathmatch (via ls-files): match '[\-_]' '-'
ok 971 - cleanup after previous file test
ok 972 - setup match file test for ]
ok 2510 - ls-files --eol attr=text ident aeol= core.autocrlf=false core.eol=
ok 973 - wildmatch: match ']' '[\]]'
ok 2511 - checkout attr=text ident aeol= core.autocrlf=false core.eol= file=LF
ok 974 - wildmatch (via ls-files): match '[\]]' ']'
ok 24 - rebase -i --root with conflict (second part)
ok 975 - iwildmatch: match ']' '[\]]'
ok 2512 - checkout attr=text ident aeol= core.autocrlf=false core.eol= file=CRLF
ok 31 - multi-squash only fires up editor once
ok 2513 - checkout attr=text ident aeol= core.autocrlf=false core.eol= file=CRLF_mix_LF
ok 25 - fix the conflict
ok 976 - iwildmatch (via ls-files): match '[\]]' ']'
# passed all 25 test(s)
1..25
ok 12 - pre-rebase hook stops rebase (1)
ok 977 - pathmatch: match ']' '[\]]'
ok 15 - rebase --merge --abort does not update reflog
ok 2514 - checkout attr=text ident aeol= core.autocrlf=false core.eol= file=LF_mix_CR
ok 22 - rebase --apply reflog
ok 978 - pathmatch (via ls-files): match '[\]]' ']'
*** t3416-rebase-onto-threedots.sh ***
ok 979 - ipathmatch: match ']' '[\]]'
ok 2515 - checkout attr=text ident aeol= core.autocrlf=false core.eol= file=LF_nul
ok 2516 - setup config for checkout attr=text ident=ident aeol= core.autocrlf=false
ok 980 - ipathmatch (via ls-files): match '[\]]' ']'
ok 157 - "add" DWIM infer --orphan w/ --quiet, 'cd repo && git', --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --no-guess-remote
ok 2517 - setup LF checkout  with -c core.eol=native
ok 13 - pre-rebase hook stops rebase (2)
ok 981 - cleanup after previous file test
ok 2518 - setup CRLF checkout  with -c core.eol=native
ok 982 - setup match file test for \]
ok 983 - wildmatch: no match '\]' '[\]]'
ok 16 - rebase --abort can not be used with other options
ok 984 - wildmatch (via ls-files): no match '[\]]' '\]'
ok 23 - rebase --apply fast-forward reflog
ok 2519 - setup LF_mix_CR checkout  with -c core.eol=native
ok 985 - iwildmatch: no match '\]' '[\]]'
ok 2520 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 986 - iwildmatch (via ls-files): no match '[\]]' '\]'
ok 32 - multi-fixup does not fire up editor
ok 14 - rebase --no-verify overrides pre-rebase (1)
ok 987 - pathmatch: no match '\]' '[\]]'
ok 2521 - setup LF_nul checkout  with -c core.eol=native
ok 988 - pathmatch (via ls-files): no match '[\]]' '\]'
ok 989 - ipathmatch: no match '\]' '[\]]'
ok 990 - ipathmatch (via ls-files): no match '[\]]' '\]'
ok 2522 - ls-files --eol attr=text ident aeol= core.autocrlf=false core.eol=native
ok 17 - rebase --merge --quit
# passed all 17 test(s)
1..17
ok 2523 - checkout attr=text ident aeol= core.autocrlf=false core.eol=native file=LF
ok 991 - cleanup after previous file test
ok 2 - auto fixup (option)
*** t3417-rebase-whitespace-fix.sh ***
ok 158 - "add" DWIM infer --orphan w/ --quiet, 'cd repo && git', --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --guess-remote
ok 2524 - checkout attr=text ident aeol= core.autocrlf=false core.eol=native file=CRLF
ok 15 - rebase --no-verify overrides pre-rebase (2)
ok 992 - setup match file test for \
# passed all 15 test(s)
1..15
ok 2525 - checkout attr=text ident aeol= core.autocrlf=false core.eol=native file=CRLF_mix_LF
ok 993 - wildmatch: no match '\' '[\]]'
*** t3418-rebase-continue.sh ***
ok 2526 - checkout attr=text ident aeol= core.autocrlf=false core.eol=native file=LF_mix_CR
ok 994 - wildmatch (via ls-files): no match '[\]]' '\'
ok 995 - iwildmatch: no match '\' '[\]]'
ok 24 - rebase --apply --skip reflog
ok 19 - update the split index when it contains a new racily clean cache entry #2
ok 2527 - checkout attr=text ident aeol= core.autocrlf=false core.eol=native file=LF_nul
ok 2528 - setup config for checkout attr=auto ident=ident aeol= core.autocrlf=false
ok 996 - iwildmatch (via ls-files): no match '[\]]' '\'
ok 997 - pathmatch: no match '\' '[\]]'
ok 2529 - setup LF checkout 
ok 2530 - setup CRLF checkout 
ok 998 - pathmatch (via ls-files): no match '[\]]' '\'
ok 999 - ipathmatch: no match '\' '[\]]'
ok 54 - git_test_func: replace submodule containing a .git directory with a directory must fail
ok 2531 - setup LF_mix_CR checkout 
ok 1000 - ipathmatch (via ls-files): no match '[\]]' '\'
ok 2532 - setup CRLF_mix_LF checkout 
ok 1001 - cleanup after previous file test
ok 2533 - setup LF_nul checkout 
ok 33 - commit message used after conflict
ok 1002 - setup match file test for ab
ok 1003 - wildmatch: no match 'ab' 'a[]b'
ok 1004 - wildmatch (via ls-files): no match 'a[]b' 'ab'
ok 159 - "add" DWIM infer --orphan w/ --quiet, 'cd repo && git', --branch, 0 local branches, >=1 remotes, >=1 fetched remote branches, --guess-remote
ok 1005 - iwildmatch: no match 'ab' 'a[]b'
ok 2534 - ls-files --eol attr=auto ident aeol= core.autocrlf=false core.eol=
ok 25 - rebase --apply --abort reflog
ok 1006 - iwildmatch (via ls-files): no match 'a[]b' 'ab'
ok 2535 - checkout attr=auto ident aeol= core.autocrlf=false core.eol= file=LF
ok 1007 - pathmatch: no match 'ab' 'a[]b'
ok 2536 - checkout attr=auto ident aeol= core.autocrlf=false core.eol= file=CRLF
ok 2537 - checkout attr=auto ident aeol= core.autocrlf=false core.eol= file=CRLF_mix_LF
ok 1008 - pathmatch (via ls-files): no match 'a[]b' 'ab'
ok 1009 - ipathmatch: no match 'ab' 'a[]b'
ok 2538 - checkout attr=auto ident aeol= core.autocrlf=false core.eol= file=LF_mix_CR
ok 1010 - ipathmatch (via ls-files): no match 'a[]b' 'ab'
ok 2539 - checkout attr=auto ident aeol= core.autocrlf=false core.eol= file=LF_nul
ok 2540 - setup config for checkout attr=auto ident=ident aeol= core.autocrlf=false
ok 1011 - cleanup after previous file test
ok 160 - "add" error, warn on bad HEAD, hint use orphan w/ DWIM (no --branch), --quiet, 'cd repo && git', no --branch, >=1 local branches, invalid (or orphan) HEAD
ok 2541 - setup LF checkout  with -c core.eol=native
ok 1012 - setup match file test for a[]b
ok 2542 - setup CRLF checkout  with -c core.eol=native
ok 1013 - wildmatch: no match 'a[]b' 'a[]b'
ok 1014 - wildmatch (via ls-files): match 'a[]b' 'a[]b'
ok 2543 - setup LF_mix_CR checkout  with -c core.eol=native
ok 1015 - iwildmatch: no match 'a[]b' 'a[]b'
ok 26 - rebase --apply --abort detached HEAD reflog
ok 2544 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 1016 - iwildmatch (via ls-files): match 'a[]b' 'a[]b'
ok 1017 - pathmatch: no match 'a[]b' 'a[]b'
ok 2545 - setup LF_nul checkout  with -c core.eol=native
ok 161 - "add" error, warn on bad HEAD, hint use orphan w/ --quiet, 'cd repo && git', --branch, >=1 local branches, invalid (or orphan) HEAD
ok 34 - commit message retained after conflict
ok 1018 - pathmatch (via ls-files): match 'a[]b' 'a[]b'
ok 1019 - ipathmatch: no match 'a[]b' 'a[]b'
ok 3 - auto fixup (config true)
ok 1020 - ipathmatch (via ls-files): match 'a[]b' 'a[]b'
ok 2546 - ls-files --eol attr=auto ident aeol= core.autocrlf=false core.eol=native
ok 1021 - cleanup after previous file test
ok 2547 - checkout attr=auto ident aeol= core.autocrlf=false core.eol=native file=LF
ok 1 - setup
ok 1 - blank line at end of file; extend at end of file
ok 1022 - setup match file test for ab[
not ok 55 - git_test_func: replace submodule with a file must fail # TODO known breakage
ok 2548 - checkout attr=auto ident aeol= core.autocrlf=false core.eol=native file=CRLF
ok 1023 - wildmatch: no match 'ab[' 'ab['
ok 162 - "add" error, warn on bad HEAD, hint use orphan w/ --quiet, 'cd repo && git', --detach, >=1 local branches, invalid (or orphan) HEAD
ok 2549 - checkout attr=auto ident aeol= core.autocrlf=false core.eol=native file=CRLF_mix_LF
ok 18 - test notes in no fanout concatenated with 2/2/36-fanout
ok 1024 - wildmatch (via ls-files): match 'ab[' 'ab['
ok 2550 - checkout attr=auto ident aeol= core.autocrlf=false core.eol=native file=LF_mix_CR
ok 1025 - iwildmatch: no match 'ab[' 'ab['
ok 1026 - iwildmatch (via ls-files): match 'ab[' 'ab['
ok 1027 - pathmatch: no match 'ab[' 'ab['
ok 2551 - checkout attr=auto ident aeol= core.autocrlf=false core.eol=native file=LF_nul
ok 2552 - setup config for checkout attr= ident=ident aeol=lf core.autocrlf=false
ok 1028 - pathmatch (via ls-files): match 'ab[' 'ab['
ok 1029 - ipathmatch: no match 'ab[' 'ab['
ok 2553 - setup LF checkout 
ok 2554 - setup CRLF checkout 
ok 27 - rebase --apply reflog GIT_REFLOG_ACTION=my-reflog-action
ok 1030 - ipathmatch (via ls-files): match 'ab[' 'ab['
ok 19 - verify notes in no fanout concatenated with 2/2/36-fanout
ok 2555 - setup LF_mix_CR checkout 
ok 2 - merge based rebase --continue with works with touched file
ok 1031 - cleanup after previous file test
ok 2556 - setup CRLF_mix_LF checkout 
ok 2 - two blanks line at end of file; extend at end of file
ok 1032 - setup match file test for ab
ok 163 - "add" DWIM infer --orphan w/ empty repo, DWIM (no --branch), --quiet, 'cd wt && git', no --branch
ok 2557 - setup LF_nul checkout 
ok 1033 - wildmatch: no match 'ab' '[!'
ok 1 - setup
ok 35 - squash and fixup generate correct log messages
ok 1034 - wildmatch (via ls-files): no match '[!' 'ab'
ok 1035 - iwildmatch: no match 'ab' '[!'
ok 3 - merge based rebase --continue removes .git/MERGE_MSG
ok 2558 - ls-files --eol attr= ident aeol=lf core.autocrlf=false core.eol=
ok 1036 - iwildmatch (via ls-files): no match '[!' 'ab'
ok 2559 - checkout attr= ident aeol=lf core.autocrlf=false core.eol= file=LF
ok 1037 - pathmatch: no match 'ab' '[!'
ok 2560 - checkout attr= ident aeol=lf core.autocrlf=false core.eol= file=CRLF
ok 28 - rebase --apply fast-forward reflog GIT_REFLOG_ACTION=my-reflog-action
ok 1038 - pathmatch (via ls-files): no match '[!' 'ab'
ok 1039 - ipathmatch: no match 'ab' '[!'
ok 2561 - checkout attr= ident aeol=lf core.autocrlf=false core.eol= file=CRLF_mix_LF
ok 2 - rebase --onto main...topic
ok 1040 - ipathmatch (via ls-files): no match '[!' 'ab'
ok 2562 - checkout attr= ident aeol=lf core.autocrlf=false core.eol= file=LF_mix_CR
ok 3 - same, but do not remove trailing spaces
ok 2563 - checkout attr= ident aeol=lf core.autocrlf=false core.eol= file=LF_nul
ok 1041 - cleanup after previous file test
ok 2564 - setup config for checkout attr= ident=ident aeol=crlf core.autocrlf=false
ok 1042 - setup match file test for ab
ok 2565 - setup LF checkout 
ok 1043 - wildmatch: no match 'ab' '[-'
ok 4 - notes tree has fanout (y)
ok 4 - apply based rebase --continue works with touched file
ok 2566 - setup CRLF checkout 
ok 1044 - wildmatch (via ls-files): no match '[-' 'ab'
ok 164 - "add" DWIM doesnt infer --orphan w/ DWIM (no --branch), --quiet, 'cd wt && git', no --branch, >=1 local branches, valid HEAD
ok 1045 - iwildmatch: no match 'ab' '[-'
ok 2567 - setup LF_mix_CR checkout 
ok 5 - rebase --continue can not be used with other options
ok 3 - rebase --onto main...
ok 2568 - setup CRLF_mix_LF checkout 
ok 1046 - iwildmatch (via ls-files): no match '[-' 'ab'
ok 1047 - pathmatch: no match 'ab' '[-'
ok 36 - squash ignores comments
ok 2569 - setup LF_nul checkout 
ok 1048 - pathmatch (via ls-files): no match '[-' 'ab'
ok 1049 - ipathmatch: no match 'ab' '[-'
ok 5 - No-op merge (already included) (x => y)
ok 1050 - ipathmatch (via ls-files): no match '[-' 'ab'
ok 4 - rebase --onto main...side
ok 29 - rebase --apply --skip reflog GIT_REFLOG_ACTION=my-reflog-action
ok 4 - at beginning of file
# passed all 4 test(s)
1..4
ok 1051 - cleanup after previous file test
ok 2570 - ls-files --eol attr= ident aeol=crlf core.autocrlf=false core.eol=
*** t3419-rebase-patch-id.sh ***
ok 165 - "add" DWIM infer --orphan w/ DWIM (no --branch), --quiet, 'cd wt && git', no --branch, 0 local branches, 0 remotes, 0 fetched remote branches, --no-guess-remote
not ok 56 - git_test_func: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 2571 - checkout attr= ident aeol=crlf core.autocrlf=false core.eol= file=LF
ok 1052 - setup match file test for -
ok 6 - Fast-forward merge (y => x)
ok 4 - auto fixup (config false)
ok 1053 - wildmatch: match '-' '[-]'
ok 2572 - checkout attr= ident aeol=crlf core.autocrlf=false core.eol= file=CRLF
ok 1054 - wildmatch (via ls-files): match '[-]' '-'
ok 1055 - iwildmatch: match '-' '[-]'
ok 2573 - checkout attr= ident aeol=crlf core.autocrlf=false core.eol= file=CRLF_mix_LF
ok 2574 - checkout attr= ident aeol=crlf core.autocrlf=false core.eol= file=LF_mix_CR
ok 5 - rebase -i --onto main...topic
ok 1056 - iwildmatch (via ls-files): match '[-]' '-'
ok 2575 - checkout attr= ident aeol=crlf core.autocrlf=false core.eol= file=LF_nul
ok 1057 - pathmatch: match '-' '[-]'
ok 2576 - setup config for checkout attr= ident=ident aeol=lf core.autocrlf=true
ok 2577 - setup LF checkout 
ok 1058 - pathmatch (via ls-files): match '[-]' '-'
ok 1059 - ipathmatch: match '-' '[-]'
ok 2578 - setup CRLF checkout 
ok 6 - rebase --continue remembers merge strategy and options
ok 7 - change some of the initial 5 notes (x -> z)
ok 1060 - ipathmatch (via ls-files): match '[-]' '-'
ok 2579 - setup LF_mix_CR checkout 
ok 30 - rebase --apply --abort reflog GIT_REFLOG_ACTION=my-reflog-action
ok 2580 - setup CRLF_mix_LF checkout 
ok 8 - notes tree has no fanout (z)
ok 1061 - cleanup after previous file test
ok 37 - squash ignores blank lines
ok 2581 - setup LF_nul checkout 
ok 1062 - setup match file test for -
ok 1063 - wildmatch: no match '-' '[a-'
ok 6 - rebase -i --onto main...
ok 1064 - wildmatch (via ls-files): no match '[a-' '-'
ok 1065 - iwildmatch: no match '-' '[a-'
ok 166 - "add" DWIM infer --orphan w/ DWIM (no --branch), --quiet, 'cd wt && git', no --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --no-guess-remote
ok 1066 - iwildmatch (via ls-files): no match '[a-' '-'
ok 2582 - ls-files --eol attr= ident aeol=lf core.autocrlf=true core.eol=
ok 1067 - pathmatch: no match '-' '[a-'
ok 2583 - checkout attr= ident aeol=lf core.autocrlf=true core.eol= file=LF
ok 42 - merge with conflict outside cone
ok 1068 - pathmatch (via ls-files): no match '[a-' '-'
ok 2584 - checkout attr= ident aeol=lf core.autocrlf=true core.eol= file=CRLF
ok 1069 - ipathmatch: no match '-' '[a-'
ok 2585 - checkout attr= ident aeol=lf core.autocrlf=true core.eol= file=CRLF_mix_LF
ok 1070 - ipathmatch (via ls-files): no match '[a-' '-'
ok 7 - rebase --onto main...side requires a single merge-base
ok 8 - rebase --keep-base --onto incompatible
ok 9 - rebase --keep-base --root incompatible
ok 31 - rebase --apply --abort detached HEAD reflog GIT_REFLOG_ACTION=my-reflog-action
ok 1071 - cleanup after previous file test
ok 2586 - checkout attr= ident aeol=lf core.autocrlf=true core.eol= file=LF_mix_CR
ok 1 - setup
ok 2587 - checkout attr= ident aeol=lf core.autocrlf=true core.eol= file=LF_nul
ok 1072 - setup match file test for -
ok 9 - successful merge without conflicts (y => z)
ok 1073 - wildmatch: no match '-' '[!a-'
ok 2588 - setup config for checkout attr= ident=ident aeol=crlf core.autocrlf=true
ok 38 - squash works as expected
ok 1074 - wildmatch (via ls-files): no match '[!a-' '-'
ok 2589 - setup LF checkout 
ok 1075 - iwildmatch: no match '-' '[!a-'
ok 167 - "add" error need fetch w/ DWIM (no --branch), --quiet, 'cd wt && git', no --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --guess-remote
ok 5 - auto squash (option)
ok 2590 - setup CRLF checkout 
ok 1076 - iwildmatch (via ls-files): no match '[!a-' '-'
ok 10 - rebase --keep-base main from topic
ok 2591 - setup LF_mix_CR checkout 
ok 1077 - pathmatch: no match '-' '[!a-'
ok 2592 - setup CRLF_mix_LF checkout 
ok 1078 - pathmatch (via ls-files): no match '[!a-' '-'
ok 1079 - ipathmatch: no match '-' '[!a-'
ok 2593 - setup LF_nul checkout 
ok 1080 - ipathmatch (via ls-files): no match '[!a-' '-'
ok 11 - rebase --keep-base main topic from main
ok 1081 - cleanup after previous file test
ok 2594 - ls-files --eol attr= ident aeol=crlf core.autocrlf=true core.eol=
ok 1082 - setup match file test for -
ok 1083 - wildmatch: match '-' '[--A]'
ok 7 - rebase -r passes merge strategy options correctly
ok 2595 - checkout attr= ident aeol=crlf core.autocrlf=true core.eol= file=LF
ok 1084 - wildmatch (via ls-files): match '[--A]' '-'
ok 1085 - iwildmatch: match '-' '[--A]'
ok 2596 - checkout attr= ident aeol=crlf core.autocrlf=true core.eol= file=CRLF
ok 12 - rebase --keep-base main from side
ok 1086 - iwildmatch (via ls-files): match '[--A]' '-'
ok 2597 - checkout attr= ident aeol=crlf core.autocrlf=true core.eol= file=CRLF_mix_LF
ok 1087 - pathmatch: match '-' '[--A]'
ok 2598 - checkout attr= ident aeol=crlf core.autocrlf=true core.eol= file=LF_mix_CR
ok 1088 - pathmatch (via ls-files): match '[--A]' '-'
ok 2599 - checkout attr= ident aeol=crlf core.autocrlf=true core.eol= file=LF_nul
ok 1089 - ipathmatch: match '-' '[--A]'
ok 168 - "add" DWIM infer --orphan w/ DWIM (no --branch), --quiet, 'cd wt && git', no --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --guess-remote, --force
ok 39 - interrupted squash works as expected
ok 1090 - ipathmatch (via ls-files): match '[--A]' '-'
ok 2600 - ls-files --eol -d -z
# passed all 2600 test(s)
1..2600
ok 32 - rebase -i onto unrelated history
ok 1091 - cleanup after previous file test
# passed all 32 test(s)
1..32
ok 1092 - setup match file test for 5
*** t3420-rebase-autostash.sh ***
ok 57 - git_test_func: modified submodule does not update submodule work tree
ok 1093 - wildmatch: match '5' '[--A]'
ok 13 - rebase -i --keep-base main from topic
ok 1094 - wildmatch (via ls-files): match '[--A]' '5'
ok 1095 - iwildmatch: match '5' '[--A]'
*** t3421-rebase-topology-linear.sh ***
ok 1096 - iwildmatch (via ls-files): match '[--A]' '5'
ok 2 - setup: 500 lines
ok 1097 - pathmatch: match '5' '[--A]'
ok 1098 - pathmatch (via ls-files): match '[--A]' '5'
ok 1099 - ipathmatch: match '5' '[--A]'
ok 1100 - ipathmatch (via ls-files): match '[--A]' '5'
ok 14 - rebase -i --keep-base main topic from main
ok 1101 - cleanup after previous file test
ok 1102 - setup match file test for  
ok 1103 - wildmatch: match ' ' '[ --]'
ok 15 - rebase --keep-base requires a single merge base
ok 3 - detect upstream patch
ok 1104 - wildmatch (via ls-files): match '[ --]' ' '
ok 1105 - iwildmatch: match ' ' '[ --]'
ok 6 - auto squash (config true)
ok 169 - "add" DWIM doesnt infer --orphan w/ DWIM (no --branch), --quiet, 'cd wt && git', no --branch, 0 local branches, >=1 remotes, >=1 fetched remote branches, --guess-remote
ok 40 - interrupted squash works as expected (case 2)
ok 1106 - iwildmatch (via ls-files): match '[ --]' ' '
ok 1107 - pathmatch: match ' ' '[ --]'
ok 1108 - pathmatch (via ls-files): match '[ --]' ' '
ok 1109 - ipathmatch: match ' ' '[ --]'
ok 4 - detect upstream patch binary
ok 16 - rebase --keep-base keeps cherry picks
ok 1110 - ipathmatch (via ls-files): match '[ --]' ' '
ok 1111 - cleanup after previous file test
ok 1112 - setup match file test for $
ok 5 - detect upstream patch modechange
ok 1113 - wildmatch: match '$' '[ --]'
ok 1114 - wildmatch (via ls-files): match '[ --]' '$'
ok 1115 - iwildmatch: match '$' '[ --]'
ok 170 - "add" DWIM infer --orphan w/ empty repo, --quiet, 'cd wt && git', --branch
ok 1116 - iwildmatch (via ls-files): match '[ --]' '$'
ok 17 - rebase --keep-base --no-reapply-cherry-picks
ok 1117 - pathmatch: match '$' '[ --]'
ok 6 - do not drop patch
ok 1118 - pathmatch (via ls-files): match '[ --]' '$'
ok 41 - --continue tries to commit, even for "edit"
ok 1119 - ipathmatch: match '$' '[ --]'
ok 18 - $EDITOR and friends are unchanged
# passed all 18 test(s)
1..18
ok 1120 - ipathmatch (via ls-files): match '[ --]' '$'
*** t3422-rebase-incompatible-options.sh ***
ok 1121 - cleanup after previous file test
ok 1 - setup
ok 7 - do not drop patch binary
ok 1122 - setup match file test for -
ok 1123 - wildmatch: match '-' '[ --]'
ok 1124 - wildmatch (via ls-files): match '[ --]' '-'
ok 8 - --skip after failed fixup cleans commit message
ok 1125 - iwildmatch: match '-' '[ --]'
ok 8 - do not drop patch modechange
ok 171 - "add" DWIM doesnt infer --orphan w/ --quiet, 'cd wt && git', --branch, >=1 local branches, valid HEAD
# passed all 8 test(s)
1..8
ok 1126 - iwildmatch (via ls-files): match '[ --]' '-'
ok 1127 - pathmatch: match '-' '[ --]'
ok 42 - aborted --continue does not squash commits after "edit"
*** t3423-rebase-reword.sh ***
ok 1128 - pathmatch (via ls-files): match '[ --]' '-'
ok 1 - setup
ok 1129 - ipathmatch: match '-' '[ --]'
ok 1130 - ipathmatch (via ls-files): match '[ --]' '-'
ok 2 - rebase: fast-forward rebase
ok 1131 - cleanup after previous file test
ok 1132 - setup match file test for 0
ok 172 - "add" DWIM infer --orphan w/ --quiet, 'cd wt && git', --branch, 0 local branches, 0 remotes, 0 fetched remote branches, --no-guess-remote
ok 1133 - wildmatch: no match '0' '[ --]'
ok 20 - test notes in 2/38-fanout concatenated with 2/2/36-fanout
ok 1134 - wildmatch (via ls-files): no match '[ --]' '0'
ok 1135 - iwildmatch: no match '0' '[ --]'
ok 2 - simple rebase --apply
ok 21 - verify notes in 2/38-fanout concatenated with 2/2/36-fanout
ok 58 - git_test_func: modified submodule does not update submodule work tree to invalid commit
ok 1136 - iwildmatch (via ls-files): no match '[ --]' '0'
ok 1137 - pathmatch: no match '0' '[ --]'
ok 43 - auto-amend only edited commits after "edit"
ok 1138 - pathmatch (via ls-files): no match '[ --]' '0'
ok 1139 - ipathmatch: no match '0' '[ --]'
ok 1140 - ipathmatch (via ls-files): no match '[ --]' '0'
ok 3 - rebase: noop rebase
ok 1141 - cleanup after previous file test
ok 7 - auto squash (config false)
ok 1142 - setup match file test for -
ok 9 - setup rerere database
ok 3 - simple rebase -m
ok 1143 - wildmatch: match '-' '[---]'
ok 1144 - wildmatch (via ls-files): match '[---]' '-'
ok 44 - clean error after failed "exec"
ok 1145 - iwildmatch: match '-' '[---]'
ok 173 - "add" DWIM infer --orphan w/ --quiet, 'cd wt && git', --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --no-guess-remote
ok 1146 - iwildmatch (via ls-files): match '[---]' '-'
ok 1147 - pathmatch: match '-' '[---]'
ok 1148 - pathmatch (via ls-files): match '[---]' '-'
ok 8 - misspelled auto squash
ok 1149 - ipathmatch: match '-' '[---]'
ok 1 - setup
ok 4 - rebase --apply: restore autostash when pre-rebase hook fails
ok 1150 - ipathmatch (via ls-files): match '[---]' '-'
ok 2 - --whitespace=fix incompatible with --merge
ok 4 - simple rebase -i
ok 1151 - cleanup after previous file test
ok 3 - --whitespace=fix incompatible with --strategy=ours
ok 45 - rebase a detached HEAD
ok 1152 - setup match file test for -
ok 2 - creating many notes with git-notes
ok 1 - setup
ok 1153 - wildmatch: match '-' '[------]'
ok 4 - --whitespace=fix incompatible with --strategy-option=ours
ok 10 - notes tree still has fanout after merge (m)
ok 1154 - wildmatch (via ls-files): match '[------]' '-'
ok 5 - --whitespace=fix incompatible with --autosquash
ok 1155 - iwildmatch: match '-' '[------]'
ok 5 - rebase --apply: restore autostash when checkout onto fails
ok 6 - --whitespace=fix incompatible with --interactive
ok 1156 - iwildmatch (via ls-files): match '[------]' '-'
ok 1157 - pathmatch: match '-' '[------]'
ok 7 - --whitespace=fix incompatible with --exec
ok 10 - rebase --apply --continue remembers --rerere-autoupdate
ok 1158 - pathmatch (via ls-files): match '[------]' '-'
ok 174 - "add" DWIM infer --orphan w/ --quiet, 'cd wt && git', --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --guess-remote
ok 5 - setup branches and remote tracking
ok 8 - --whitespace=fix incompatible with --keep-empty
ok 1159 - ipathmatch: match '-' '[------]'
ok 1160 - ipathmatch (via ls-files): match '[------]' '-'
ok 11 - introduce conflicting changes (y -> w)
ok 9 - --whitespace=fix incompatible with --empty=...
ok 10 - --whitespace=fix incompatible with --no-reapply-cherry-picks
ok 6 - rebase --apply: restore autostash when branch checkout fails
ok 1161 - cleanup after previous file test
ok 46 - rebase a commit violating pre-commit
ok 11 - --whitespace=fix incompatible with --reapply-cherry-picks
ok 9 - auto squash that matches 2 commits
ok 3 - many notes created correctly with git-notes
ok 6 - rebase --apply is no-op if upstream is an ancestor
ok 2 - reword without issues functions as intended
ok 1162 - setup match file test for j
ok 1163 - wildmatch: no match 'j' '[a-e-n]'
ok 12 - --whitespace=fix incompatible with --rebase-merges
ok 1164 - wildmatch (via ls-files): no match '[a-e-n]' 'j'
ok 1165 - iwildmatch: no match 'j' '[a-e-n]'
ok 13 - --whitespace=fix incompatible with --update-refs
ok 7 - rebase --apply: dirty worktree, --no-autostash
ok 1166 - iwildmatch (via ls-files): no match '[a-e-n]' 'j'
ok 14 - --whitespace=fix incompatible with --root without --onto
ok 1167 - pathmatch: no match 'j' '[a-e-n]'
ok 7 - rebase -m is no-op if upstream is an ancestor
ok 1168 - pathmatch (via ls-files): no match '[a-e-n]' 'j'
ok 1169 - ipathmatch: no match 'j' '[a-e-n]'
ok 15 - --whitespace=fix incompatible with rebase.rebaseMerges
ok 1170 - ipathmatch (via ls-files): no match '[a-e-n]' 'j'
ok 16 - --whitespace=fix incompatible with rebase.updateRefs
ok 1171 - cleanup after previous file test
ok 59 - git_test_func: modified submodule does not update submodule work tree from invalid commit
ok 8 - rebase -i is no-op if upstream is an ancestor
ok 12 - successful merge using "ours" strategy (z => w)
ok 1172 - setup match file test for -
ok 1173 - wildmatch: match '-' '[a-e-n]'
ok 175 - "add" DWIM infer --orphan w/ --quiet, 'cd wt && git', --branch, 0 local branches, >=1 remotes, >=1 fetched remote branches, --guess-remote
ok 1174 - wildmatch (via ls-files): match '[a-e-n]' '-'
ok 11 - rebase --apply --continue honors rerere.autoUpdate
ok 1175 - iwildmatch: match '-' '[a-e-n]'
ok 10 - auto squash that matches a commit after the squash
ok 17 - --whitespace=fix okay with overridden rebase.rebaseMerges
ok 1176 - iwildmatch (via ls-files): match '[a-e-n]' '-'
ok 3 - reword after a conflict preserves commit
ok 1177 - pathmatch: match '-' '[a-e-n]'
# passed all 3 test(s)
1..3
*** t3424-rebase-empty.sh ***
ok 1178 - pathmatch (via ls-files): match '[a-e-n]' '-'
ok 8 - rebase --apply: dirty worktree, non-conflicting rebase
ok 47 - rebase with a file named HEAD in worktree
ok 1179 - ipathmatch: match '-' '[a-e-n]'
ok 1180 - ipathmatch (via ls-files): match '[a-e-n]' '-'
ok 9 - rebase --apply --autostash: check output
ok 9 - rebase --apply -f rewrites even if upstream is an ancestor
ok 1181 - cleanup after previous file test
ok 18 - --whitespace=fix okay with overridden rebase.updateRefs
ok 1182 - setup match file test for a
ok 1183 - wildmatch: match 'a' '[!------]'
ok 48 - do "noop" when there is nothing to cherry-pick
ok 176 - "add" error, warn on bad HEAD, hint use orphan w/ DWIM (no --branch), --quiet, 'cd wt && git', no --branch, >=1 local branches, invalid (or orphan) HEAD
ok 19 - -C4 incompatible with --merge
ok 1184 - wildmatch (via ls-files): match '[!------]' 'a'
ok 20 - -C4 incompatible with --strategy=ours
ok 1185 - iwildmatch: match 'a' '[!------]'
ok 1186 - iwildmatch (via ls-files): match '[!------]' 'a'
ok 60 - git_test_func: added submodule doesn't remove untracked unignored file with same name
ok 1187 - pathmatch: match 'a' '[!------]'
ok 21 - -C4 incompatible with --strategy-option=ours
ok 1188 - pathmatch (via ls-files): match '[!------]' 'a'
ok 11 - auto squash that matches a sha1
ok 1189 - ipathmatch: match 'a' '[!------]'
ok 22 - -C4 incompatible with --autosquash
ok 1190 - ipathmatch (via ls-files): match '[!------]' 'a'
ok 10 - rebase --fork-point -f rewrites even if upstream is an ancestor
ok 23 - -C4 incompatible with --interactive
ok 1191 - cleanup after previous file test
ok 12 - rebase --apply --continue remembers --no-rerere-autoupdate
ok 24 - -C4 incompatible with --exec
ok 1192 - setup match file test for [
ok 177 - "add" error, warn on bad HEAD, hint use orphan w/ --quiet, 'cd wt && git', --branch, >=1 local branches, invalid (or orphan) HEAD
ok 1193 - wildmatch: no match '[' '[]-a]'
ok 25 - -C4 incompatible with --keep-empty
ok 26 - -C4 incompatible with --empty=...
ok 1194 - wildmatch (via ls-files): no match '[]-a]' '['
ok 10 - rebase --apply: dirty index, non-conflicting rebase
ok 1195 - iwildmatch: no match '[' '[]-a]'
ok 49 - submodule rebase setup
ok 27 - -C4 incompatible with --no-reapply-cherry-picks
ok 1196 - iwildmatch (via ls-files): no match '[]-a]' '['
ok 1197 - pathmatch: no match '[' '[]-a]'
ok 11 - rebase -m -f rewrites even if upstream is an ancestor
ok 28 - -C4 incompatible with --reapply-cherry-picks
ok 1198 - pathmatch (via ls-files): no match '[]-a]' '['
ok 29 - -C4 incompatible with --rebase-merges
ok 1199 - ipathmatch: no match '[' '[]-a]'
ok 30 - -C4 incompatible with --update-refs
ok 12 - auto squash that matches longer sha1
ok 1200 - ipathmatch (via ls-files): no match '[]-a]' '['
ok 31 - -C4 incompatible with --root without --onto
ok 32 - -C4 incompatible with rebase.rebaseMerges
ok 1201 - cleanup after previous file test
ok 178 - "add" error, warn on bad HEAD, hint use orphan w/ --quiet, 'cd wt && git', --detach, >=1 local branches, invalid (or orphan) HEAD
ok 1202 - setup match file test for ^
ok 33 - -C4 incompatible with rebase.updateRefs
ok 1203 - wildmatch: match '^' '[]-a]'
ok 12 - rebase -i -f rewrites even if upstream is an ancestor
ok 50 - submodule rebase -i
ok 1204 - wildmatch (via ls-files): match '[]-a]' '^'
ok 13 - auto squash of fixup commit that matches branch name which points back to fixup commit
ok 1205 - iwildmatch: match '^' '[]-a]'
ok 11 - rebase --apply: conflicting rebase
ok 1206 - iwildmatch (via ls-files): match '[]-a]' '^'
ok 179 - "add" DWIM infer --orphan w/ empty repo, DWIM (no --branch), --quiet, 'git -C repo', no --branch
ok 13 - rebase -m --continue remembers --rerere-autoupdate
ok 1 - setup test repository
ok 1207 - pathmatch: match '^' '[]-a]'
ok 1208 - pathmatch (via ls-files): match '[]-a]' '^'
ok 1209 - ipathmatch: match '^' '[]-a]'
ok 34 - -C4 okay with overridden rebase.rebaseMerges
ok 1210 - ipathmatch (via ls-files): match '[]-a]' '^'
ok 1211 - cleanup after previous file test
ok 20 - update the split index when it contains a new racily clean cache entry #3
ok 13 - rebase --apply -f rewrites even if remote upstream is an ancestor
ok 51 - submodule conflict setup
ok 1212 - setup match file test for ^
ok 1213 - wildmatch: no match '^' '[!]-a]'
ok 1214 - wildmatch (via ls-files): no match '[!]-a]' '^'
not ok 2 - rebase (apply-backend) # TODO known breakage
ok 1215 - iwildmatch: no match '^' '[!]-a]'
ok 180 - "add" DWIM doesnt infer --orphan w/ DWIM (no --branch), --quiet, 'git -C repo', no --branch, >=1 local branches, valid HEAD
ok 35 - -C4 okay with overridden rebase.updateRefs
ok 1216 - iwildmatch (via ls-files): no match '[!]-a]' '^'
ok 14 - use commit --fixup
ok 36 - --apply incompatible with --merge
ok 1217 - pathmatch: no match '^' '[!]-a]'
ok 37 - --apply incompatible with --strategy=ours
ok 1218 - pathmatch (via ls-files): no match '[!]-a]' '^'
ok 1219 - ipathmatch: no match '^' '[!]-a]'
ok 38 - --apply incompatible with --strategy-option=ours
ok 61 - git_test_func: added submodule creates empty directory
ok 181 - "add" DWIM infer --orphan w/ DWIM (no --branch), --quiet, 'git -C repo', no --branch, 0 local branches, 0 remotes, 0 fetched remote branches, --no-guess-remote
ok 1220 - ipathmatch (via ls-files): no match '[!]-a]' '^'
ok 14 - rebase --fork-point -f rewrites even if remote upstream is an ancestor
ok 39 - --apply incompatible with --autosquash
ok 52 - rebase -i continue with only submodule staged
ok 14 - rebase -m --continue honors rerere.autoUpdate
ok 1221 - cleanup after previous file test
ok 3 - rebase --merge --empty=drop
ok 12 - rebase --apply: --continue
ok 40 - --apply incompatible with --interactive
ok 1222 - setup match file test for [
ok 41 - --apply incompatible with --exec
ok 1223 - wildmatch: match '[' '[!]-a]'
ok 42 - --apply incompatible with --keep-empty
ok 1224 - wildmatch (via ls-files): match '[!]-a]' '['
ok 1225 - iwildmatch: match '[' '[!]-a]'
ok 4 - rebase --merge uses default of --empty=drop
ok 43 - --apply incompatible with --empty=...
ok 1226 - iwildmatch (via ls-files): match '[!]-a]' '['
ok 15 - rebase -m -f rewrites even if remote upstream is an ancestor
ok 1227 - pathmatch: match '[' '[!]-a]'
ok 44 - --apply incompatible with --no-reapply-cherry-picks
ok 15 - use commit --squash
ok 53 - rebase -i continue with unstaged submodule
ok 1228 - pathmatch (via ls-files): match '[!]-a]' '['
ok 45 - --apply incompatible with --reapply-cherry-picks
ok 1229 - ipathmatch: match '[' '[!]-a]'
ok 1230 - ipathmatch (via ls-files): match '[!]-a]' '['
ok 46 - --apply incompatible with --rebase-merges
ok 182 - "add" DWIM infer --orphan w/ DWIM (no --branch), --quiet, 'git -C repo', no --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --no-guess-remote
ok 47 - --apply incompatible with --update-refs
ok 1231 - cleanup after previous file test
ok 5 - rebase --merge --empty=keep
ok 48 - --apply incompatible with --root without --onto
ok 1232 - setup match file test for ^
ok 1233 - wildmatch: match '^' '[a^bc]'
ok 54 - avoid unnecessary reset
ok 16 - rebase -i -f rewrites even if remote upstream is an ancestor
ok 49 - --apply incompatible with rebase.rebaseMerges
ok 1234 - wildmatch (via ls-files): match '[a^bc]' '^'
ok 1235 - iwildmatch: match '^' '[a^bc]'
ok 15 - rebase -m --continue remembers --no-rerere-autoupdate
ok 13 - rebase --apply: --skip
ok 22 - test notes in 2/2/36-fanout concatenated with 2/2/2/34-fanout
ok 50 - --apply incompatible with rebase.updateRefs
ok 1236 - iwildmatch (via ls-files): match '[a^bc]' '^'
ok 1237 - pathmatch: match '^' '[a^bc]'
ok 17 - rebase --apply fast-forwards from ancestor of upstream
ok 1238 - pathmatch (via ls-files): match '[a^bc]' '^'
ok 1239 - ipathmatch: match '^' '[a^bc]'
ok 23 - verify notes in 2/2/36-fanout concatenated with 2/2/2/34-fanout
ok 6 - rebase --merge --empty=stop
ok 183 - "add" error need fetch w/ DWIM (no --branch), --quiet, 'git -C repo', no --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --guess-remote
ok 1240 - ipathmatch (via ls-files): match '[a^bc]' '^'
# passed all 23 test(s)
1..23
ok 18 - rebase --fork-point fast-forwards from ancestor of upstream
ok 1241 - cleanup after previous file test
ok 1242 - setup match file test for -b]
ok 51 - --apply okay with overridden rebase.rebaseMerges
ok 1243 - wildmatch: match '-b]' '[a-]b]'
*** t3425-rebase-topology-merges.sh ***
ok 1244 - wildmatch (via ls-files): match '[a-]b]' '-b]'
ok 1245 - iwildmatch: match '-b]' '[a-]b]'
ok 19 - rebase -m fast-forwards from ancestor of upstream
ok 16 - fixup! fixup!
ok 7 - rebase --merge --empty=ask
ok 1246 - iwildmatch (via ls-files): match '[a-]b]' '-b]'
ok 1247 - pathmatch: match '-b]' '[a-]b]'
ok 1248 - pathmatch (via ls-files): match '[a-]b]' '-b]'
ok 20 - rebase -i fast-forwards from ancestor of upstream
ok 52 - --apply okay with overridden rebase.updateRefs
ok 1249 - ipathmatch: match '-b]' '[a-]b]'
# passed all 52 test(s)
1..52
ok 16 - rebase -i --continue remembers --rerere-autoupdate
ok 1250 - ipathmatch (via ls-files): match '[a-]b]' '-b]'
ok 14 - rebase --apply: --abort
ok 184 - "add" DWIM infer --orphan w/ DWIM (no --branch), --quiet, 'git -C repo', no --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --guess-remote, --force
ok 8 - rebase --interactive --empty=drop
*** t3426-rebase-submodule.sh ***
ok 13 - notes tree still has fanout after merge (m)
ok 1251 - cleanup after previous file test
ok 1252 - setup match file test for \
ok 1253 - wildmatch: no match '\' '[\]'
ok 9 - rebase --interactive --empty=keep
ok 1254 - wildmatch (via ls-files): no match '[\]' '\'
ok 62 - git_test_func: added submodule leaves existing empty directory alone
ok 1255 - iwildmatch: no match '\' '[\]'
ok 1256 - iwildmatch (via ls-files): no match '[\]' '\'
ok 1257 - pathmatch: no match '\' '[\]'
ok 43 - cherry-pick/rebase with conflict outside cone
ok 1258 - pathmatch (via ls-files): no match '[\]' '\'
ok 1259 - ipathmatch: no match '\' '[\]'
ok 1260 - ipathmatch (via ls-files): no match '[\]' '\'
ok 10 - rebase --interactive --empty=stop
ok 1261 - cleanup after previous file test
ok 1262 - setup match file test for \
ok 17 - fixup! squash!
ok 14 - successful merge using "theirs" strategy (z => w)
ok 1263 - wildmatch: match '\' '[\\]'
ok 1264 - wildmatch (via ls-files): match '[\\]' '\'
ok 21 - setup of linear history for range selection tests
ok 1265 - iwildmatch: match '\' '[\\]'
ok 17 - rebase -i --continue honors rerere.autoUpdate
ok 15 - rebase --apply: --quit
ok 1266 - iwildmatch (via ls-files): match '[\\]' '\'
ok 185 - "add" DWIM doesnt infer --orphan w/ DWIM (no --branch), --quiet, 'git -C repo', no --branch, 0 local branches, >=1 remotes, >=1 fetched remote branches, --guess-remote
ok 1267 - pathmatch: match '\' '[\\]'
ok 11 - rebase --interactive uses default of --empty=stop
ok 1268 - pathmatch (via ls-files): match '[\\]' '\'
ok 1269 - ipathmatch: match '\' '[\\]'
ok 55 - reword
ok 1270 - ipathmatch (via ls-files): match '[\\]' '\'
ok 186 - "add" DWIM infer --orphan w/ empty repo, --quiet, 'git -C repo', --branch
ok 1271 - cleanup after previous file test
ok 1272 - setup match file test for \
ok 12 - rebase --merge --empty=drop --keep-empty
ok 1273 - wildmatch: no match '\' '[!\\]'
ok 22 - rebase --apply drops patches in upstream
ok 1274 - wildmatch (via ls-files): no match '[!\\]' '\'
ok 1275 - iwildmatch: no match '\' '[!\\]'
ok 1276 - iwildmatch (via ls-files): no match '[!\\]' '\'
ok 13 - rebase --merge --empty=drop --no-keep-empty
ok 1277 - pathmatch: no match '\' '[!\\]'
ok 1278 - pathmatch (via ls-files): no match '[!\\]' '\'
ok 56 - reword fast-forwarded empty commit
ok 1279 - ipathmatch: no match '\' '[!\\]'
ok 187 - "add" DWIM doesnt infer --orphan w/ --quiet, 'git -C repo', --branch, >=1 local branches, valid HEAD
ok 1280 - ipathmatch (via ls-files): no match '[!\\]' '\'
ok 23 - rebase -m drops patches in upstream
ok 18 - rebase -i --continue remembers --no-rerere-autoupdate
ok 1281 - cleanup after previous file test
ok 14 - rebase --merge --empty=keep --keep-empty
ok 16 - rebase --apply: non-conflicting rebase, conflicting stash
ok 1282 - setup match file test for G
ok 1283 - wildmatch: match 'G' '[A-\\]'
ok 188 - "add" DWIM infer --orphan w/ --quiet, 'git -C repo', --branch, 0 local branches, 0 remotes, 0 fetched remote branches, --no-guess-remote
ok 17 - rebase --apply: check output with conflicting stash
ok 1284 - wildmatch (via ls-files): match '[A-\\]' 'G'
ok 1285 - iwildmatch: match 'G' '[A-\\]'
ok 18 - squash! squash!
ok 19 - the todo command "break" works
ok 1286 - iwildmatch (via ls-files): match '[A-\\]' 'G'
ok 1287 - pathmatch: match 'G' '[A-\\]'
ok 15 - rebase --merge --empty=keep --no-keep-empty
ok 1288 - pathmatch (via ls-files): match '[A-\\]' 'G'
ok 1289 - ipathmatch: match 'G' '[A-\\]'
ok 24 - rebase -i drops patches in upstream
ok 1290 - ipathmatch (via ls-files): match '[A-\\]' 'G'
ok 18 - rebase --merge: restore autostash when pre-rebase hook fails
ok 16 - rebase --merge does not leave state laying around
ok 1291 - cleanup after previous file test
ok 1292 - setup match file test for aaabbb
ok 63 - git_test_func: replace tracked file with submodule creates empty directory
ok 1293 - wildmatch: no match 'aaabbb' 'b*a'
ok 189 - "add" DWIM infer --orphan w/ --quiet, 'git -C repo', --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --no-guess-remote
ok 1294 - wildmatch (via ls-files): no match 'b*a' 'aaabbb'
ok 1295 - iwildmatch: no match 'aaabbb' 'b*a'
ok 20 - patch file is removed before break command
ok 1296 - iwildmatch (via ls-files): no match 'b*a' 'aaabbb'
ok 1297 - pathmatch: no match 'aaabbb' 'b*a'
ok 25 - rebase --apply can drop last patch if in upstream
ok 17 - rebase --exec --empty=drop
ok 1298 - pathmatch (via ls-files): no match 'b*a' 'aaabbb'
ok 1299 - ipathmatch: no match 'aaabbb' 'b*a'
ok 19 - rebase --merge: restore autostash when checkout onto fails
ok 57 - no uncommitted changes when rewording and the todo list is reloaded
ok 1300 - ipathmatch (via ls-files): no match 'b*a' 'aaabbb'
ok 1301 - cleanup after previous file test
ok 1302 - setup match file test for aabcaa
ok 1303 - wildmatch: no match 'aabcaa' '*ba*'
ok 1304 - wildmatch (via ls-files): no match '*ba*' 'aabcaa'
ok 21 - --reschedule-failed-exec
ok 26 - rebase -m can drop last patch if in upstream
ok 1305 - iwildmatch: no match 'aabcaa' '*ba*'
ok 19 - squash! fixup!
ok 20 - rebase --merge: restore autostash when branch checkout fails
ok 18 - rebase --exec --empty=keep
ok 1306 - iwildmatch (via ls-files): no match '*ba*' 'aabcaa'
ok 1307 - pathmatch: no match 'aabcaa' '*ba*'
ok 190 - "add" DWIM infer --orphan w/ --quiet, 'git -C repo', --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --guess-remote
ok 1308 - pathmatch (via ls-files): no match '*ba*' 'aabcaa'
ok 1 - setup of non-linear-history
ok 1309 - ipathmatch: no match 'aabcaa' '*ba*'
ok 1310 - ipathmatch (via ls-files): no match '*ba*' 'aabcaa'
ok 22 - rebase.rescheduleFailedExec only affects `rebase -i`
ok 1311 - cleanup after previous file test
ok 21 - rebase --merge: dirty worktree, --no-autostash
ok 1312 - setup match file test for ,
ok 27 - rebase -i can drop last patch if in upstream
ok 1313 - wildmatch: match ',' '[,]'
ok 19 - rebase --exec uses default of --empty=keep
ok 58 - rebase -i can copy notes
ok 1314 - wildmatch (via ls-files): match '[,]' ','
ok 1315 - iwildmatch: match ',' '[,]'
ok 23 - rebase.rescheduleFailedExec=true & --no-reschedule-failed-exec
ok 1316 - iwildmatch (via ls-files): match '[,]' ','
ok 1317 - pathmatch: match ',' '[,]'
ok 2 - rebase --apply after merge from upstream
ok 1318 - pathmatch (via ls-files): match '[,]' ','
ok 1319 - ipathmatch: match ',' '[,]'
ok 1320 - ipathmatch (via ls-files): match '[,]' ','
ok 28 - rebase --apply --onto drops patches in upstream
ok 22 - rebase --merge: dirty worktree, non-conflicting rebase
ok 24 - new rebase.rescheduleFailedExec=true setting in an ongoing rebase is ignored
ok 1321 - cleanup after previous file test
ok 191 - "add" DWIM infer --orphan w/ --quiet, 'git -C repo', --branch, 0 local branches, >=1 remotes, >=1 fetched remote branches, --guess-remote
ok 20 - rebase --exec --empty=stop
ok 20 - autosquash with custom inst format
# still have 1 known breakage(s)
# passed all remaining 19 test(s)
1..20
ok 1322 - setup match file test for ,
ok 23 - rebase --merge --autostash: check output
ok 1323 - wildmatch: match ',' '[\\,]'
ok 59 - rebase -i can copy notes over a fixup
*** t3427-rebase-subtree.sh ***
ok 1324 - wildmatch (via ls-files): match '[\\,]' ','
ok 3 - rebase -m after merge from upstream
ok 1325 - iwildmatch: match ',' '[\\,]'
ok 1326 - iwildmatch (via ls-files): match '[\\,]' ','
ok 25 - there is no --no-reschedule-failed-exec in an ongoing rebase
ok 1327 - pathmatch: match ',' '[\\,]'
ok 192 - "add" error, warn on bad HEAD, hint use orphan w/ DWIM (no --branch), --quiet, 'git -C repo', no --branch, >=1 local branches, invalid (or orphan) HEAD
ok 1328 - pathmatch (via ls-files): match '[\\,]' ','
ok 29 - rebase -m --onto drops patches in upstream
ok 1329 - ipathmatch: match ',' '[\\,]'
ok 21 - autosquash with empty custom instructionFormat
ok 1330 - ipathmatch (via ls-files): match '[\\,]' ','
ok 4 - rebase -i after merge from upstream
ok 1331 - cleanup after previous file test
ok 64 - git_test_func: replace directory with submodule
ok 60 - rebase while detaching HEAD
ok 1332 - setup match file test for \
ok 1333 - wildmatch: match '\' '[\\,]'
ok 193 - "add" error, warn on bad HEAD, hint use orphan w/ --quiet, 'git -C repo', --branch, >=1 local branches, invalid (or orphan) HEAD
ok 24 - rebase --merge: dirty index, non-conflicting rebase
ok 30 - rebase -i --onto drops patches in upstream
ok 1334 - wildmatch (via ls-files): match '[\\,]' '\'
ok 1335 - iwildmatch: match '\' '[\\,]'
ok 1336 - iwildmatch (via ls-files): match '[\\,]' '\'
ok 35 - multiple reftable blocks with multiple entries
ok 1337 - pathmatch: match '\' '[\\,]'
ok 22 - autosquash with multiple empty patches
ok 26 - rebase --apply sets ORIG_HEAD correctly
ok 1338 - pathmatch (via ls-files): match '[\\,]' '\'
ok 1339 - ipathmatch: match '\' '[\\,]'
ok 5 - rebase --apply of non-linear history is linearized in place
ok 194 - "add" error, warn on bad HEAD, hint use orphan w/ --quiet, 'git -C repo', --detach, >=1 local branches, invalid (or orphan) HEAD
ok 1340 - ipathmatch (via ls-files): match '[\\,]' '\'
ok 1341 - cleanup after previous file test
ok 25 - rebase --merge: conflicting rebase
ok 1342 - setup match file test for -
ok 15 - notes tree still has fanout after merge (m)
ok 1343 - wildmatch: match '-' '[,-.]'
ok 31 - rebase --apply --onto does not drop patches in onto
ok 23 - extra spaces after fixup!
ok 1344 - wildmatch (via ls-files): match '[,-.]' '-'
ok 6 - rebase -m of non-linear history is linearized in place
ok 1345 - iwildmatch: match '-' '[,-.]'
ok 61 - always cherry-pick with --no-ff
ok 27 - rebase --apply <upstream> <branch> sets ORIG_HEAD correctly
ok 1346 - iwildmatch (via ls-files): match '[,-.]' '-'
ok 1347 - pathmatch: match '-' '[,-.]'
ok 1348 - pathmatch (via ls-files): match '[,-.]' '-'
ok 195 - "add" DWIM infer --orphan w/ empty repo, DWIM (no --branch), --quiet, 'git -C wt', no --branch
ok 1349 - ipathmatch: match '-' '[,-.]'
ok 1350 - ipathmatch (via ls-files): match '[,-.]' '-'
ok 7 - rebase -i of non-linear history is linearized in place
ok 36 - migrating from files format deletes backend files
ok 1351 - cleanup after previous file test
ok 62 - set up commits with funny messages
ok 32 - rebase -m --onto does not drop patches in onto
ok 1352 - setup match file test for +
ok 24 - wrapped original subject
ok 1353 - wildmatch: no match '+' '[,-.]'
ok 44 - merge with outside renames
ok 28 - rebase --merge sets ORIG_HEAD correctly
ok 1354 - wildmatch (via ls-files): no match '[,-.]' '+'
ok 1355 - iwildmatch: no match '+' '[,-.]'
ok 1356 - iwildmatch (via ls-files): no match '[,-.]' '+'
ok 63 - rebase-i history with funny messages
ok 1357 - pathmatch: no match '+' '[,-.]'
ok 16 - successful merge using "union" strategy (z => w)
ok 26 - rebase --merge: --continue
ok 1358 - pathmatch (via ls-files): no match '[,-.]' '+'
ok 1359 - ipathmatch: no match '+' '[,-.]'
ok 196 - "add" DWIM doesnt infer --orphan w/ DWIM (no --branch), --quiet, 'git -C wt', no --branch, >=1 local branches, valid HEAD
ok 1360 - ipathmatch (via ls-files): no match '[,-.]' '+'
ok 65 - git_test_func: removed submodule leaves submodule directory and its contents in place
ok 1361 - cleanup after previous file test
ok 33 - rebase -i --onto does not drop patches in onto
ok 8 - rebase --apply of non-linear history is linearized upstream
ok 29 - rebase --merge <upstream> <branch> sets ORIG_HEAD correctly
# passed all 29 test(s)
1..29
ok 1362 - setup match file test for -.]
ok 37 - migrating from reftable format deletes backend files
ok 1363 - wildmatch: no match '-.]' '[,-.]'
# passed all 37 test(s)
1..37
*** t3428-rebase-signoff.sh ***
*** t3429-rebase-edit-todo.sh ***
ok 1364 - wildmatch (via ls-files): no match '[,-.]' '-.]'
ok 1365 - iwildmatch: no match '-.]' '[,-.]'
ok 197 - "add" DWIM infer --orphan w/ DWIM (no --branch), --quiet, 'git -C wt', no --branch, 0 local branches, 0 remotes, 0 fetched remote branches, --no-guess-remote
ok 1366 - iwildmatch (via ls-files): no match '[,-.]' '-.]'
ok 1367 - pathmatch: no match '-.]' '[,-.]'
ok 64 - prepare for rebase -i --exec
ok 1368 - pathmatch (via ls-files): no match '[,-.]' '-.]'
ok 1369 - ipathmatch: no match '-.]' '[,-.]'
ok 9 - rebase -m of non-linear history is linearized upstream
ok 1370 - ipathmatch (via ls-files): no match '[,-.]' '-.]'
ok 34 - setup of linear history for empty commit tests
ok 1371 - cleanup after previous file test
ok 27 - rebase --merge: --skip
ok 1372 - setup match file test for 2
ok 1373 - wildmatch: match '2' '[\1-\3]'
ok 25 - abort last squash
ok 1374 - wildmatch (via ls-files): match '[\1-\3]' '2'
ok 1375 - iwildmatch: match '2' '[\1-\3]'
ok 1 - setup
ok 1376 - iwildmatch (via ls-files): match '[\1-\3]' '2'
ok 1377 - pathmatch: match '2' '[\1-\3]'
not ok 35 - rebase --apply keeps begin-empty commits # TODO known breakage
ok 1378 - pathmatch (via ls-files): match '[\1-\3]' '2'
ok 198 - "add" DWIM infer --orphan w/ DWIM (no --branch), --quiet, 'git -C wt', no --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --no-guess-remote
ok 1379 - ipathmatch: match '2' '[\1-\3]'
ok 10 - rebase -i of non-linear history is linearized upstream
ok 1380 - ipathmatch (via ls-files): match '[\1-\3]' '2'
ok 65 - running "git rebase -i --exec git show HEAD"
ok 1381 - cleanup after previous file test
ok 1382 - setup match file test for 3
ok 28 - rebase --merge: --abort
ok 1383 - wildmatch: match '3' '[\1-\3]'
ok 2 - Rebase -Xsubtree --empty=ask --onto commit
ok 1384 - wildmatch (via ls-files): match '[\1-\3]' '3'
ok 1385 - iwildmatch: match '3' '[\1-\3]'
ok 36 - rebase -m keeps begin-empty commits
ok 1386 - iwildmatch (via ls-files): match '[\1-\3]' '3'
ok 1387 - pathmatch: match '3' '[\1-\3]'
ok 26 - fixup a fixup
ok 1388 - pathmatch (via ls-files): match '[\1-\3]' '3'
ok 1389 - ipathmatch: match '3' '[\1-\3]'
ok 11 - rebase --apply of non-linear history with merges after upstream merge is linearized
ok 1 - setup
ok 1390 - ipathmatch (via ls-files): match '[\1-\3]' '3'
ok 199 - "add" error need fetch w/ DWIM (no --branch), --quiet, 'git -C wt', no --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --guess-remote
ok 2 - rebase exec modifies rebase-todo
ok 1391 - cleanup after previous file test
ok 37 - rebase -i keeps begin-empty commits
ok 66 - git_test_func: removed submodule leaves submodule containing a .git directory alone
ok 3 - rebase exec with an empty list does not exec anything
ok 66 - running "git rebase --exec git show HEAD -i"
ok 27 - fixup does not clean up commit message
ok 1392 - setup match file test for 4
# passed all 27 test(s)
1..27
ok 1393 - wildmatch: no match '4' '[\1-\3]'
ok 3 - Rebase -Xsubtree --empty=ask --rebase-merges --onto commit
ok 4 - loose object cache vs re-reading todo list
# passed all 3 test(s)
1..3
ok 1394 - wildmatch (via ls-files): no match '[\1-\3]' '4'
ok 29 - rebase --merge: --quit
ok 1395 - iwildmatch: no match '4' '[\1-\3]'
*** t3430-rebase-merges.sh ***
ok 1396 - iwildmatch (via ls-files): no match '[\1-\3]' '4'
*** t3431-rebase-fork-point.sh ***
ok 1397 - pathmatch: no match '4' '[\1-\3]'
ok 12 - rebase -m of non-linear history with merges after upstream merge is linearized
ok 1 - setup
ok 1398 - pathmatch (via ls-files): no match '[\1-\3]' '4'
ok 38 - rebase -m --no-keep-empty drops begin-empty commits
ok 1399 - ipathmatch: no match '4' '[\1-\3]'
ok 1400 - ipathmatch (via ls-files): no match '[\1-\3]' '4'
ok 1401 - cleanup after previous file test
ok 1402 - setup match file test for \
ok 1403 - wildmatch: match '\' '[[-\]]'
ok 200 - "add" DWIM infer --orphan w/ DWIM (no --branch), --quiet, 'git -C wt', no --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --guess-remote, --force
ok 13 - rebase -i of non-linear history with merges after upstream merge is linearized
ok 1404 - wildmatch (via ls-files): match '[[-\]]' '\'
ok 67 - running "git rebase -ix git show HEAD"
ok 1405 - iwildmatch: match '\' '[[-\]]'
# passed all 13 test(s)
1..13
ok 39 - rebase -i --no-keep-empty drops begin-empty commits
*** t3432-rebase-fast-forward.sh ***
ok 1406 - iwildmatch (via ls-files): match '[[-\]]' '\'
ok 1407 - pathmatch: match '\' '[[-\]]'
ok 5 - todo is re-read after reword and squash
ok 2 - rebase --apply --signoff adds a sign-off line
ok 1408 - pathmatch (via ls-files): match '[[-\]]' '\'
ok 1409 - ipathmatch: match '\' '[[-\]]'
ok 30 - rebase --merge: non-conflicting rebase, conflicting stash
ok 1410 - ipathmatch (via ls-files): match '[[-\]]' '\'
ok 1411 - cleanup after previous file test
ok 31 - rebase --merge: check output with conflicting stash
ok 3 - rebase --no-signoff does not add a sign-off line
ok 1412 - setup match file test for [
ok 1413 - wildmatch: match '[' '[[-\]]'
ok 6 - re-reading todo doesnt interfere with revert --edit
ok 40 - rebase -m --keep-empty keeps empty even if already in upstream
ok 45 - cherry-pick with conflicts
ok 1414 - wildmatch (via ls-files): match '[[-\]]' '['
ok 1415 - iwildmatch: match '[' '[[-\]]'
ok 4 - rebase --exec --signoff adds a sign-off line
ok 1416 - iwildmatch (via ls-files): match '[[-\]]' '['
ok 1417 - pathmatch: match '[' '[[-\]]'
ok 1418 - pathmatch (via ls-files): match '[[-\]]' '['
not ok 67 - git_test_func: replace submodule with a directory must fail # TODO known breakage
ok 1419 - ipathmatch: match '[' '[[-\]]'
ok 68 - rebase -ix with several <CMD>
ok 32 - rebase --interactive: restore autostash when pre-rebase hook fails
ok 1420 - ipathmatch (via ls-files): match '[[-\]]' '['
ok 5 - rebase --root --signoff adds a sign-off line
ok 7 - re-reading todo doesnt interfere with cherry-pick --edit
# passed all 7 test(s)
1..7
ok 1421 - cleanup after previous file test
ok 201 - "add" DWIM doesnt infer --orphan w/ DWIM (no --branch), --quiet, 'git -C wt', no --branch, 0 local branches, >=1 remotes, >=1 fetched remote branches, --guess-remote
*** t3433-rebase-across-mode-change.sh ***
ok 1422 - setup match file test for ]
ok 1423 - wildmatch: match ']' '[[-\]]'
ok 41 - rebase -i --keep-empty keeps empty even if already in upstream
ok 1424 - wildmatch (via ls-files): match '[[-\]]' ']'
ok 1425 - iwildmatch: match ']' '[[-\]]'
ok 33 - rebase --interactive: restore autostash when checkout onto fails
ok 1426 - iwildmatch (via ls-files): match '[[-\]]' ']'
ok 1427 - pathmatch: match ']' '[[-\]]'
ok 1428 - pathmatch (via ls-files): match '[[-\]]' ']'
ok 1429 - ipathmatch: match ']' '[[-\]]'
ok 21 - update the split index when it contains a new racily clean cache entry #4
ok 202 - "add" DWIM infer --orphan w/ empty repo, --quiet, 'git -C wt', --branch
ok 1430 - ipathmatch (via ls-files): match '[[-\]]' ']'
ok 6 - rebase -m --signoff adds a sign-off line
ok 1431 - cleanup after previous file test
ok 1432 - setup match file test for -
ok 42 - rebase --rebase-merges --keep-empty keeps empty even if already in upstream
ok 34 - rebase --interactive: restore autostash when branch checkout fails
ok 1433 - wildmatch: no match '-' '[[-\]]'
ok 17 - notes tree still has fanout after merge (m)
ok 1434 - wildmatch (via ls-files): no match '[[-\]]' '-'
ok 69 - rebase -ix with several instances of --exec
ok 1435 - iwildmatch: no match '-' '[[-\]]'
ok 1 - setup
ok 1 - setup
ok 1436 - iwildmatch (via ls-files): no match '[[-\]]' '-'
ok 1437 - pathmatch: no match '-' '[[-\]]'
ok 1438 - pathmatch (via ls-files): no match '[[-\]]' '-'
ok 1439 - ipathmatch: no match '-' '[[-\]]'
ok 35 - rebase --interactive: dirty worktree, --no-autostash
ok 1440 - ipathmatch (via ls-files): no match '[[-\]]' '-'
ok 2 - git rebase --apply  with no changes is noop with same HEAD
ok 1441 - cleanup after previous file test
ok 203 - "add" DWIM doesnt infer --orphan w/ --quiet, 'git -C wt', --branch, >=1 local branches, valid HEAD
ok 1442 - setup match file test for -adobe-courier-bold-o-normal--12-120-75-75-m-70-iso8859-1
ok 1443 - wildmatch: match '-adobe-courier-bold-o-normal--12-120-75-75-m-70-iso8859-1' '-*-*-*-*-*-*-12-*-*-*-m-*-*-*'
not ok 68 - git_test_func: replace submodule containing a .git directory with a directory must fail # TODO known breakage
ok 2 - git rebase 
ok 1 - setup
ok 1444 - wildmatch (via ls-files): match '-*-*-*-*-*-*-12-*-*-*-m-*-*-*' '-adobe-courier-bold-o-normal--12-120-75-75-m-70-iso8859-1'
ok 7 - rebase -i --signoff adds a sign-off line when editing commit
ok 1445 - iwildmatch: match '-adobe-courier-bold-o-normal--12-120-75-75-m-70-iso8859-1' '-*-*-*-*-*-*-12-*-*-*-m-*-*-*'
# passed all 7 test(s)
1..7
ok 18 - successful merge using "cat_sort_uniq" strategy (z => w)
ok 1446 - iwildmatch (via ls-files): match '-*-*-*-*-*-*-12-*-*-*-m-*-*-*' '-adobe-courier-bold-o-normal--12-120-75-75-m-70-iso8859-1'
*** t3434-rebase-i18n.sh ***
ok 1447 - pathmatch: match '-adobe-courier-bold-o-normal--12-120-75-75-m-70-iso8859-1' '-*-*-*-*-*-*-12-*-*-*-m-*-*-*'
ok 43 - setup of linear history for test involving root
ok 3 - git rebase --apply --no-ff  with no changes is work with same HEAD
ok 1448 - pathmatch (via ls-files): match '-*-*-*-*-*-*-12-*-*-*-m-*-*-*' '-adobe-courier-bold-o-normal--12-120-75-75-m-70-iso8859-1'
ok 1449 - ipathmatch: match '-adobe-courier-bold-o-normal--12-120-75-75-m-70-iso8859-1' '-*-*-*-*-*-*-12-*-*-*-m-*-*-*'
ok 36 - rebase --interactive: dirty worktree, non-conflicting rebase
ok 204 - "add" DWIM infer --orphan w/ --quiet, 'git -C wt', --branch, 0 local branches, 0 remotes, 0 fetched remote branches, --no-guess-remote
ok 1450 - ipathmatch (via ls-files): match '-*-*-*-*-*-*-12-*-*-*-m-*-*-*' '-adobe-courier-bold-o-normal--12-120-75-75-m-70-iso8859-1'
ok 37 - rebase --interactive --autostash: check output
ok 3 - git rebase --onto D
ok 1 - setup
ok 1451 - cleanup after previous file test
ok 1452 - setup match file test for -adobe-courier-bold-o-normal--12-120-75-75-X-70-iso8859-1
ok 1453 - wildmatch: no match '-adobe-courier-bold-o-normal--12-120-75-75-X-70-iso8859-1' '-*-*-*-*-*-*-12-*-*-*-m-*-*-*'
ok 1 - git_rebase: added submodule creates empty directory
ok 4 - git rebase --merge  with no changes is noop with same HEAD
ok 1454 - wildmatch (via ls-files): no match '-*-*-*-*-*-*-12-*-*-*-m-*-*-*' '-adobe-courier-bold-o-normal--12-120-75-75-X-70-iso8859-1'
ok 1455 - iwildmatch: no match '-adobe-courier-bold-o-normal--12-120-75-75-X-70-iso8859-1' '-*-*-*-*-*-*-12-*-*-*-m-*-*-*'
ok 2 - rebase changes with the apply backend
ok 4 - git rebase --keep-base
ok 2 - create completely different structure
ok 1456 - iwildmatch (via ls-files): no match '-*-*-*-*-*-*-12-*-*-*-m-*-*-*' '-adobe-courier-bold-o-normal--12-120-75-75-X-70-iso8859-1'
ok 44 - rebase --apply --onto --root
ok 1457 - pathmatch: no match '-adobe-courier-bold-o-normal--12-120-75-75-X-70-iso8859-1' '-*-*-*-*-*-*-12-*-*-*-m-*-*-*'
ok 3 - generate correct todo list
ok 1458 - pathmatch (via ls-files): no match '-*-*-*-*-*-*-12-*-*-*-m-*-*-*' '-adobe-courier-bold-o-normal--12-120-75-75-X-70-iso8859-1'
ok 5 - git rebase --merge --no-ff  with no changes is work with same HEAD
ok 1459 - ipathmatch: no match '-adobe-courier-bold-o-normal--12-120-75-75-X-70-iso8859-1' '-*-*-*-*-*-*-12-*-*-*-m-*-*-*'
ok 1460 - ipathmatch (via ls-files): no match '-*-*-*-*-*-*-12-*-*-*-m-*-*-*' '-adobe-courier-bold-o-normal--12-120-75-75-X-70-iso8859-1'
ok 3 - rebase changes with the merge backend
ok 1461 - cleanup after previous file test
ok 38 - rebase --interactive: dirty index, non-conflicting rebase
ok 45 - rebase -m --onto --root
ok 1462 - setup match file test for -adobe-courier-bold-o-normal--12-120-75-75-/-70-iso8859-1
ok 205 - "add" DWIM infer --orphan w/ --quiet, 'git -C wt', --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --no-guess-remote
ok 70 - rebase -ix with --autosquash
ok 1463 - wildmatch: no match '-adobe-courier-bold-o-normal--12-120-75-75-/-70-iso8859-1' '-*-*-*-*-*-*-12-*-*-*-m-*-*-*'
ok 1464 - wildmatch (via ls-files): no match '-*-*-*-*-*-*-12-*-*-*-m-*-*-*' '-adobe-courier-bold-o-normal--12-120-75-75-/-70-iso8859-1'
ok 6 - git rebase --merge  (rebase.abbreviateCommands = true) with no changes is noop with same HEAD
ok 1465 - iwildmatch: no match '-adobe-courier-bold-o-normal--12-120-75-75-/-70-iso8859-1' '-*-*-*-*-*-*-12-*-*-*-m-*-*-*'
ok 5 - git rebase --no-fork-point
ok 1466 - iwildmatch (via ls-files): no match '-*-*-*-*-*-*-12-*-*-*-m-*-*-*' '-adobe-courier-bold-o-normal--12-120-75-75-/-70-iso8859-1'
ok 1467 - pathmatch: no match '-adobe-courier-bold-o-normal--12-120-75-75-/-70-iso8859-1' '-*-*-*-*-*-*-12-*-*-*-m-*-*-*'
not ok 69 - git_test_func: replace submodule with a file must fail # TODO known breakage
ok 1468 - pathmatch (via ls-files): no match '-*-*-*-*-*-*-12-*-*-*-m-*-*-*' '-adobe-courier-bold-o-normal--12-120-75-75-/-70-iso8859-1'
ok 1469 - ipathmatch: no match '-adobe-courier-bold-o-normal--12-120-75-75-/-70-iso8859-1' '-*-*-*-*-*-*-12-*-*-*-m-*-*-*'
ok 71 - rebase --exec works without -i 
ok 46 - rebase -i --onto --root
ok 1470 - ipathmatch (via ls-files): no match '-*-*-*-*-*-*-12-*-*-*-m-*-*-*' '-adobe-courier-bold-o-normal--12-120-75-75-/-70-iso8859-1'
ok 1471 - cleanup after previous file test
ok 4 - `reset` refuses to overwrite untracked files
ok 72 - rebase -i --exec without <CMD>
ok 1472 - setup match file test for XXX/adobe/courier/bold/o/normal//12/120/75/75/m/70/iso8859/1
ok 39 - rebase --interactive: conflicting rebase
ok 1473 - wildmatch: match 'XXX/adobe/courier/bold/o/normal//12/120/75/75/m/70/iso8859/1' 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*'
not ok 1474 - wildmatch (via ls-files): match skip 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*' 'XXX/adobe/courier/bold/o/normal//12/120/75/75/m/70/iso8859/1' # TODO known breakage
ok 1475 - iwildmatch: match 'XXX/adobe/courier/bold/o/normal//12/120/75/75/m/70/iso8859/1' 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*'
ok 7 - git rebase --merge --no-ff  (rebase.abbreviateCommands = true) with no changes is work with same HEAD
not ok 1476 - iwildmatch (via ls-files): match skip 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*' 'XXX/adobe/courier/bold/o/normal//12/120/75/75/m/70/iso8859/1' # TODO known breakage
ok 1477 - pathmatch: match 'XXX/adobe/courier/bold/o/normal//12/120/75/75/m/70/iso8859/1' 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*'
not ok 1478 - pathmatch (via ls-files): match skip 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*' 'XXX/adobe/courier/bold/o/normal//12/120/75/75/m/70/iso8859/1' # TODO known breakage
ok 1479 - ipathmatch: match 'XXX/adobe/courier/bold/o/normal//12/120/75/75/m/70/iso8859/1' 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*'
ok 6 - git rebase --no-fork-point --onto D
ok 5 - `reset` rejects trees
not ok 1480 - ipathmatch (via ls-files): match skip 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*' 'XXX/adobe/courier/bold/o/normal//12/120/75/75/m/70/iso8859/1' # TODO known breakage
ok 1481 - cleanup after previous file test
ok 1482 - setup match file test for XXX/adobe/courier/bold/o/normal//12/120/75/75/X/70/iso8859/1
ok 1483 - wildmatch: no match 'XXX/adobe/courier/bold/o/normal//12/120/75/75/X/70/iso8859/1' 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*'
ok 206 - "add" DWIM infer --orphan w/ --quiet, 'git -C wt', --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --guess-remote
not ok 1484 - wildmatch (via ls-files): no match skip 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*' 'XXX/adobe/courier/bold/o/normal//12/120/75/75/X/70/iso8859/1' # TODO known breakage
ok 1485 - iwildmatch: no match 'XXX/adobe/courier/bold/o/normal//12/120/75/75/X/70/iso8859/1' 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*'
not ok 1486 - iwildmatch (via ls-files): no match skip 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*' 'XXX/adobe/courier/bold/o/normal//12/120/75/75/X/70/iso8859/1' # TODO known breakage
ok 1487 - pathmatch: no match 'XXX/adobe/courier/bold/o/normal//12/120/75/75/X/70/iso8859/1' 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*'
ok 47 - rebase --apply without --onto --root with disjoint history
not ok 1488 - pathmatch (via ls-files): no match skip 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*' 'XXX/adobe/courier/bold/o/normal//12/120/75/75/X/70/iso8859/1' # TODO known breakage
ok 8 - git rebase --apply main with no changes is noop with same HEAD
ok 1489 - ipathmatch: no match 'XXX/adobe/courier/bold/o/normal//12/120/75/75/X/70/iso8859/1' 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*'
not ok 1490 - ipathmatch (via ls-files): no match skip 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*' 'XXX/adobe/courier/bold/o/normal//12/120/75/75/X/70/iso8859/1' # TODO known breakage
ok 1491 - cleanup after previous file test
ok 6 - `reset` only looks for labels under refs/rewritten/
ok 1492 - setup match file test for abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txt
ok 7 - git rebase --no-fork-point --keep-base
ok 1 - setup
ok 1493 - wildmatch: match 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txt' '**/*a*b*g*n*t'
ok 1494 - wildmatch (via ls-files): match '**/*a*b*g*n*t' 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txt'
ok 73 - rebase -i --root re-order and drop commits
ok 1495 - iwildmatch: match 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txt' '**/*a*b*g*n*t'
ok 1496 - iwildmatch (via ls-files): match '**/*a*b*g*n*t' 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txt'
ok 9 - git rebase --apply --no-ff main with no changes is work with same HEAD
ok 48 - rebase -m without --onto --root with disjoint history
ok 1497 - pathmatch: match 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txt' '**/*a*b*g*n*t'
ok 40 - rebase --interactive: --continue
ok 1498 - pathmatch (via ls-files): match '**/*a*b*g*n*t' 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txt'
ok 1499 - ipathmatch: match 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txt' '**/*a*b*g*n*t'
ok 1500 - ipathmatch (via ls-files): match '**/*a*b*g*n*t' 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txt'
ok 8 - git rebase --fork-point refs/heads/main
ok 1501 - cleanup after previous file test
ok 10 - git rebase --merge main with no changes is noop with same HEAD
ok 1502 - setup match file test for abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txtz
ok 7 - failed `merge -C` writes patch (may be rescheduled, too)
ok 1503 - wildmatch: no match 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txtz' '**/*a*b*g*n*t'
ok 49 - rebase -i without --onto --root with disjoint history
ok 1504 - wildmatch (via ls-files): no match '**/*a*b*g*n*t' 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txtz'
ok 74 - rebase -i --root retain root commit author and message
ok 2 - git_rebase: added submodule leaves existing empty directory alone
ok 1505 - iwildmatch: no match 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txtz' '**/*a*b*g*n*t'
ok 207 - "add" DWIM infer --orphan w/ --quiet, 'git -C wt', --branch, 0 local branches, >=1 remotes, >=1 fetched remote branches, --guess-remote
ok 1506 - iwildmatch (via ls-files): no match '**/*a*b*g*n*t' 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txtz'
not ok 70 - git_test_func: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 1507 - pathmatch: no match 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txtz' '**/*a*b*g*n*t'
ok 11 - git rebase --merge --no-ff main with no changes is work with same HEAD
ok 9 - git rebase --fork-point main
ok 1508 - pathmatch (via ls-files): no match '**/*a*b*g*n*t' 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txtz'
ok 2 - rebase --rebase-merges update encoding eucJP to UTF-8
ok 1509 - ipathmatch: no match 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txtz' '**/*a*b*g*n*t'
ok 41 - rebase --interactive: --skip
ok 1510 - ipathmatch (via ls-files): no match '**/*a*b*g*n*t' 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txtz'
ok 8 - failed `merge <branch>` does not crash
ok 1511 - cleanup after previous file test
ok 75 - rebase -i --root temporary sentinel commit
ok 1512 - setup match file test for foo
ok 50 - rebase --apply --onto --root drops patch in onto
ok 1513 - wildmatch: no match 'foo' '*/*/*'
ok 1514 - wildmatch (via ls-files): no match '*/*/*' 'foo'
ok 12 - git rebase --merge main (rebase.abbreviateCommands = true) with no changes is noop with same HEAD
ok 1515 - iwildmatch: no match 'foo' '*/*/*'
ok 208 - "add" error, warn on bad HEAD, hint use orphan w/ DWIM (no --branch), --quiet, 'git -C wt', no --branch, >=1 local branches, invalid (or orphan) HEAD
ok 1516 - iwildmatch (via ls-files): no match '*/*/*' 'foo'
ok 10 - git rebase --fork-point --onto D refs/heads/main
ok 1517 - pathmatch: no match 'foo' '*/*/*'
ok 1518 - pathmatch (via ls-files): no match '*/*/*' 'foo'
ok 1519 - ipathmatch: no match 'foo' '*/*/*'
ok 1520 - ipathmatch (via ls-files): no match '*/*/*' 'foo'
ok 42 - rebase --interactive: --abort
ok 76 - rebase -i --root fixup root commit
ok 1521 - cleanup after previous file test
ok 51 - rebase -m --onto --root drops patch in onto
ok 1522 - setup match file test for foo/bar
ok 13 - git rebase --merge --no-ff main (rebase.abbreviateCommands = true) with no changes is work with same HEAD
ok 1523 - wildmatch: no match 'foo/bar' '*/*/*'
ok 11 - git rebase --fork-point --onto D main
ok 3 - rebase --rebase-merges update encoding eucJP to ISO-2022-JP
ok 209 - "add" error, warn on bad HEAD, hint use orphan w/ --quiet, 'git -C wt', --branch, >=1 local branches, invalid (or orphan) HEAD
ok 1524 - wildmatch (via ls-files): no match '*/*/*' 'foo/bar'
ok 1525 - iwildmatch: no match 'foo/bar' '*/*/*'
ok 1526 - iwildmatch (via ls-files): no match '*/*/*' 'foo/bar'
ok 1527 - pathmatch: no match 'foo/bar' '*/*/*'
ok 52 - rebase -i --onto --root drops patch in onto
ok 1528 - pathmatch (via ls-files): no match '*/*/*' 'foo/bar'
ok 1529 - ipathmatch: no match 'foo/bar' '*/*/*'
ok 1530 - ipathmatch (via ls-files): no match '*/*/*' 'foo/bar'
ok 14 - git rebase --apply --onto B B with no changes is noop with same HEAD
ok 9 - merge -c commits before rewording and reloads todo-list
ok 1531 - cleanup after previous file test
ok 77 - rebase -i --root reword original root commit
ok 12 - git rebase --fork-point --keep-base refs/heads/main
ok 1532 - setup match file test for foo/bba/arr
ok 1533 - wildmatch: match 'foo/bba/arr' '*/*/*'
ok 19 - notes tree still has fanout after merge (m)
ok 210 - "add" error, warn on bad HEAD, hint use orphan w/ --quiet, 'git -C wt', --detach, >=1 local branches, invalid (or orphan) HEAD
ok 43 - rebase --interactive: --quit
ok 1534 - wildmatch (via ls-files): match '*/*/*' 'foo/bba/arr'
ok 1535 - iwildmatch: match 'foo/bba/arr' '*/*/*'
ok 1536 - iwildmatch (via ls-files): match '*/*/*' 'foo/bba/arr'
ok 211 - "add" error inferred "--orphan" gives illegal opts combo w/ empty repo, DWIM (no --branch), --quiet, no --branch, --no-checkout
ok 1537 - pathmatch: match 'foo/bba/arr' '*/*/*'
ok 4 - rebase --continue update from ISO-8859-1 to UTF-8
ok 53 - rebase --apply --onto --root with merge-base does not go to root
ok 1538 - pathmatch (via ls-files): match '*/*/*' 'foo/bba/arr'
ok 1539 - ipathmatch: match 'foo/bba/arr' '*/*/*'
ok 212 - "add" error inferred "--orphan" gives illegal opts combo w/ empty repo, DWIM (no --branch), --quiet, no --branch, --track
ok 13 - git rebase --fork-point --keep-base main
ok 1540 - ipathmatch (via ls-files): match '*/*/*' 'foo/bba/arr'
ok 10 - merge -c rewords when a strategy is given
ok 15 - git rebase --apply --no-ff --onto B B with no changes is work with diff HEAD
ok 20 - fails to merge using "manual" strategy (z => w)
ok 78 - rebase -i --root reword new root commit
ok 1541 - cleanup after previous file test
ok 213 - "add" error inferred "--orphan" gives illegal opts combo w/ empty repo, --quiet, --branch, --no-checkout
ok 54 - rebase -m --onto --root with merge-base does not go to root
ok 1542 - setup match file test for foo/bb/aa/rr
ok 1543 - wildmatch: no match 'foo/bb/aa/rr' '*/*/*'
ok 1544 - wildmatch (via ls-files): no match '*/*/*' 'foo/bb/aa/rr'
ok 214 - "add" error inferred "--orphan" gives illegal opts combo w/ empty repo, --quiet, --branch, --track
ok 1545 - iwildmatch: no match 'foo/bb/aa/rr' '*/*/*'
ok 71 - git_test_func: modified submodule does not update submodule work tree
ok 1546 - iwildmatch (via ls-files): no match '*/*/*' 'foo/bb/aa/rr'
ok 16 - git rebase --merge --onto B B with no changes is noop with same HEAD
ok 1547 - pathmatch: match 'foo/bb/aa/rr' '*/*/*'
ok 1548 - pathmatch (via ls-files): match '*/*/*' 'foo/bb/aa/rr'
ok 1549 - ipathmatch: match 'foo/bb/aa/rr' '*/*/*'
ok 5 - rebase --continue update from eucJP to UTF-8
ok 14 - git rebase refs/heads/main
ok 1550 - ipathmatch (via ls-files): match '*/*/*' 'foo/bb/aa/rr'
ok 44 - rebase --interactive: non-conflicting rebase, conflicting stash
ok 55 - rebase -i --onto --root with merge-base does not go to root
ok 215 - "add" invokes post-checkout hook (branch)
ok 1551 - cleanup after previous file test
ok 45 - rebase --interactive: check output with conflicting stash
ok 3 - git_rebase: replace tracked file with submodule creates empty directory
ok 1552 - setup match file test for foo/bb/aa/rr
ok 17 - git rebase --merge --no-ff --onto B B with no changes is work with diff HEAD
ok 79 - rebase -i --root when root has untracked file conflict
ok 1553 - wildmatch: match 'foo/bb/aa/rr' '**/**/**'
ok 1554 - wildmatch (via ls-files): match '**/**/**' 'foo/bb/aa/rr'
ok 1555 - iwildmatch: match 'foo/bb/aa/rr' '**/**/**'
ok 216 - "add" invokes post-checkout hook (detached)
ok 15 - git rebase main
ok 1556 - iwildmatch (via ls-files): match '**/**/**' 'foo/bb/aa/rr'
ok 1557 - pathmatch: match 'foo/bb/aa/rr' '**/**/**'
ok 1558 - pathmatch (via ls-files): match '**/**/**' 'foo/bb/aa/rr'
ok 1559 - ipathmatch: match 'foo/bb/aa/rr' '**/**/**'
ok 56 - rebase --apply without --onto --root with disjoint history drops patch in onto
ok 46 - abort rebase -i with --autostash
ok 18 - git rebase --merge --onto B B (rebase.abbreviateCommands = true) with no changes is noop with same HEAD
ok 1560 - ipathmatch (via ls-files): match '**/**/**' 'foo/bb/aa/rr'
ok 217 - "add --no-checkout" suppresses post-checkout hook
ok 1561 - cleanup after previous file test
ok 6 - rebase --continue update from eucJP to ISO-2022-JP
# passed all 6 test(s)
1..6
ok 1562 - setup match file test for abcXdefXghi
ok 1563 - wildmatch: match 'abcXdefXghi' '*X*i'
ok 11 - with a branch tip that was cherry-picked already
*** t3435-rebase-gpg-sign.sh ***
ok 16 - git rebase --onto D refs/heads/main
ok 1564 - wildmatch (via ls-files): match '*X*i' 'abcXdefXghi'
ok 80 - rebase -i --root reword root when root has untracked file conflict
ok 47 - restore autostash on editor failure
ok 1565 - iwildmatch: match 'abcXdefXghi' '*X*i'
ok 1566 - iwildmatch (via ls-files): match '*X*i' 'abcXdefXghi'
ok 57 - rebase -m without --onto --root with disjoint history drops patch in onto
ok 1567 - pathmatch: match 'abcXdefXghi' '*X*i'
ok 218 - "add" in other worktree invokes post-checkout hook
ok 1568 - pathmatch (via ls-files): match '*X*i' 'abcXdefXghi'
ok 1569 - ipathmatch: match 'abcXdefXghi' '*X*i'
ok 12 - --no-rebase-merges countermands --rebase-merges
ok 1570 - ipathmatch (via ls-files): match '*X*i' 'abcXdefXghi'
ok 19 - git rebase --merge --no-ff --onto B B (rebase.abbreviateCommands = true) with no changes is work with diff HEAD
ok 1571 - cleanup after previous file test
ok 1572 - setup match file test for ab/cXd/efXg/hi
ok 1573 - wildmatch: no match 'ab/cXd/efXg/hi' '*X*i'
ok 58 - rebase -i without --onto --root with disjoint history drops patch in onto
ok 81 - rebase --edit-todo does not work on non-interactive rebase
ok 1574 - wildmatch (via ls-files): no match '*X*i' 'ab/cXd/efXg/hi'
ok 1575 - iwildmatch: no match 'ab/cXd/efXg/hi' '*X*i'
ok 17 - git rebase --onto D main
ok 48 - autostash is saved on editor failure with conflict
ok 219 - "add" in bare repo invokes post-checkout hook
ok 1576 - iwildmatch (via ls-files): no match '*X*i' 'ab/cXd/efXg/hi'
ok 20 - git rebase --apply --onto B... B with no changes is noop with same HEAD
ok 1577 - pathmatch: match 'ab/cXd/efXg/hi' '*X*i'
ok 1578 - pathmatch (via ls-files): match '*X*i' 'ab/cXd/efXg/hi'
ok 1579 - ipathmatch: match 'ab/cXd/efXg/hi' '*X*i'
ok 59 - rebase  --root on linear history is a no-op
ok 1580 - ipathmatch (via ls-files): match '*X*i' 'ab/cXd/efXg/hi'
ok 18 - git rebase --keep-base refs/heads/main
ok 1581 - cleanup after previous file test
1..0 # SKIP skip all test rebase --[no-]gpg-sign, gpg not available
ok 220 - "add" an existing but missing worktree
ok 1582 - setup match file test for ab/cXd/efXg/hi
*** t3436-rebase-more-options.sh ***
ok 1583 - wildmatch: match 'ab/cXd/efXg/hi' '*/*X*/*/*i'
ok 13 - do not rebase cousins unless asked for
ok 1584 - wildmatch (via ls-files): match '*/*X*/*/*i' 'ab/cXd/efXg/hi'
ok 1585 - iwildmatch: match 'ab/cXd/efXg/hi' '*/*X*/*/*i'
ok 60 - rebase -m --root on linear history is a no-op
ok 19 - git rebase --keep-base main
ok 21 - git rebase --apply --no-ff --onto B... B with no changes is work with diff HEAD
ok 1586 - iwildmatch (via ls-files): match '*/*X*/*/*i' 'ab/cXd/efXg/hi'
ok 1587 - pathmatch: match 'ab/cXd/efXg/hi' '*/*X*/*/*i'
ok 46 - stash
ok 72 - git_test_func: modified submodule does not update submodule work tree to invalid commit
ok 82 - rebase --edit-todo can be used to modify todo
ok 1588 - pathmatch (via ls-files): match '*/*X*/*/*i' 'ab/cXd/efXg/hi'
ok 1589 - ipathmatch: match 'ab/cXd/efXg/hi' '*/*X*/*/*i'
ok 1590 - ipathmatch (via ls-files): match '*/*X*/*/*i' 'ab/cXd/efXg/hi'
ok 20 - git rebase --fork-point with ambiguous refname
ok 61 - rebase -i --root on linear history is a no-op
ok 21 - --fork-point and --root both given
ok 1591 - cleanup after previous file test
ok 14 - rebase.rebaseMerges=rebase-cousins is equivalent to --rebase-merges=rebase-cousins
ok 22 - git rebase --merge --onto B... B with no changes is noop with same HEAD
ok 221 - "add" an existing locked but missing worktree
ok 83 - rebase -i produces readable reflog
ok 49 - autostash with dirty submodules
ok 1592 - setup match file test for ab/cXd/efXg/hi
ok 1593 - wildmatch: match 'ab/cXd/efXg/hi' '**/*X*/**/*i'
ok 1594 - wildmatch (via ls-files): match '**/*X*/**/*i' 'ab/cXd/efXg/hi'
ok 1595 - iwildmatch: match 'ab/cXd/efXg/hi' '**/*X*/**/*i'
ok 4 - git_rebase: replace directory with submodule
ok 1596 - iwildmatch (via ls-files): match '**/*X*/**/*i' 'ab/cXd/efXg/hi'
ok 222 - "add" not tripped up by magic worktree matching"
ok 1597 - pathmatch: match 'ab/cXd/efXg/hi' '**/*X*/**/*i'
ok 15 - --no-rebase-merges overrides rebase.rebaseMerges=no-rebase-cousins
ok 62 - rebase  -f --root on linear history causes re-write
ok 1598 - pathmatch (via ls-files): match '**/*X*/**/*i' 'ab/cXd/efXg/hi'
ok 1599 - ipathmatch: match 'ab/cXd/efXg/hi' '**/*X*/**/*i'
ok 50 - branch is left alone when possible
ok 1600 - ipathmatch (via ls-files): match '**/*X*/**/*i' 'ab/cXd/efXg/hi'
ok 84 - rebase -i respects core.commentchar
ok 23 - git rebase --merge --no-ff --onto B... B with no changes is work with diff HEAD
ok 1601 - cleanup after previous file test
ok 223 - sanitize generated worktree name
ok 1602 - setup match file test for foo
ok 22 - rebase.forkPoint set to false
ok 1603 - wildmatch: no match 'foo' 'fo'
ok 1604 - wildmatch (via ls-files): no match 'fo' 'foo'
ok 1605 - iwildmatch: no match 'foo' 'fo'
ok 85 - rebase -i respects core.commentchar=auto
ok 63 - rebase -m -f --root on linear history causes re-write
ok 16 - --rebase-merges overrides rebase.rebaseMerges=rebase-cousins
ok 1606 - iwildmatch (via ls-files): no match 'fo' 'foo'
ok 1607 - pathmatch: no match 'foo' 'fo'
ok 24 - git rebase --merge --onto B... B (rebase.abbreviateCommands = true) with no changes is noop with same HEAD
ok 1608 - pathmatch (via ls-files): no match 'fo' 'foo'
ok 1609 - ipathmatch: no match 'foo' 'fo'
ok 1610 - ipathmatch (via ls-files): no match 'fo' 'foo'
ok 51 - never change active branch
ok 224 - "add" should not fail because of another bad worktree
ok 1611 - cleanup after previous file test
ok 64 - rebase -i -f --root on linear history causes re-write
# still have 1 known breakage(s)
# passed all remaining 63 test(s)
1..64
ok 1612 - setup match file test for foo/bar
ok 1613 - wildmatch: match 'foo/bar' 'foo/bar'
*** t3437-rebase-fixup-options.sh ***
ok 23 - rebase.forkPoint set to false and then to true
ok 1614 - wildmatch (via ls-files): match 'foo/bar' 'foo/bar'
ok 17 - refs/rewritten/* is worktree-local
ok 21 - notes tree still has fanout after merge (m)
ok 1615 - iwildmatch: match 'foo/bar' 'foo/bar'
ok 25 - git rebase --merge --no-ff --onto B... B (rebase.abbreviateCommands = true) with no changes is work with diff HEAD
ok 1 - setup
ok 1616 - iwildmatch (via ls-files): match 'foo/bar' 'foo/bar'
ok 1617 - pathmatch: match 'foo/bar' 'foo/bar'
ok 22 - verify conflict entries (with no fanout)
ok 1618 - pathmatch (via ls-files): match 'foo/bar' 'foo/bar'
ok 1619 - ipathmatch: match 'foo/bar' 'foo/bar'
ok 52 - autostash commit is marked as reachable
# passed all 52 test(s)
1..52
ok 1620 - ipathmatch (via ls-files): match 'foo/bar' 'foo/bar'
ok 1621 - cleanup after previous file test
*** t3438-rebase-broken-files.sh ***
ok 73 - git_test_func: modified submodule does not update submodule work tree from invalid commit
ok 26 - git rebase --apply --onto main... main with no changes is noop with same HEAD
ok 18 - --abort cleans up refs/rewritten
ok 86 - rebase -i, with <onto> and <upstream> specified as :/quuxery
ok 1622 - setup match file test for foo/bar
ok 1623 - wildmatch: match 'foo/bar' 'foo/*'
ok 24 - rebase.forkPoint set to false and command line says --fork-point
ok 1624 - wildmatch (via ls-files): match 'foo/*' 'foo/bar'
ok 1625 - iwildmatch: match 'foo/bar' 'foo/*'
ok 2 - --ignore-whitespace works with apply backend
ok 23 - resolve and finalize merge (z => w)
ok 1626 - iwildmatch (via ls-files): match 'foo/*' 'foo/bar'
ok 1627 - pathmatch: match 'foo/bar' 'foo/*'
ok 1628 - pathmatch (via ls-files): match 'foo/*' 'foo/bar'
ok 27 - git rebase --apply --no-ff --onto main... main with no changes is work with same HEAD
ok 1629 - ipathmatch: match 'foo/bar' 'foo/*'
ok 1630 - ipathmatch (via ls-files): match 'foo/*' 'foo/bar'
ok 19 - --quit cleans up refs/rewritten
ok 1631 - cleanup after previous file test
ok 87 - rebase -i with --strategy and -X
ok 3 - --ignore-whitespace works with merge backend
ok 25 - rebase.forkPoint set to true and command line says --no-fork-point
ok 1632 - setup match file test for foo/bba/arr
ok 1633 - wildmatch: no match 'foo/bba/arr' 'foo/*'
ok 28 - git rebase --merge --onto main... main with no changes is noop with same HEAD
ok 225 - "add" with uninitialized submodule, with submodule.recurse unset
ok 47 - checkout-index inside sparse definition
ok 5 - git_rebase: removed submodule leaves submodule directory and its contents in place
ok 1634 - wildmatch (via ls-files): no match 'foo/*' 'foo/bba/arr'
ok 1635 - iwildmatch: no match 'foo/bba/arr' 'foo/*'
ok 226 - "add" with uninitialized submodule, with submodule.recurse set
ok 1636 - iwildmatch (via ls-files): no match 'foo/*' 'foo/bba/arr'
ok 26 - rebase.forkPoint set to true and --root given
ok 1637 - pathmatch: match 'foo/bba/arr' 'foo/*'
ok 74 - git_test_func: added submodule does remove untracked unignored file with same name when forced
# passed all 26 test(s)
1..26
# still have 10 known breakage(s)
# passed all remaining 64 test(s)
1..74
ok 1638 - pathmatch (via ls-files): match 'foo/*' 'foo/bba/arr'
*** t3500-cherry.sh ***
ok 1639 - ipathmatch: match 'foo/bba/arr' 'foo/*'
ok 4 - --ignore-whitespace is remembered when continuing
ok 1640 - ipathmatch (via ls-files): match 'foo/*' 'foo/bba/arr'
ok 29 - git rebase --merge --no-ff --onto main... main with no changes is work with same HEAD
ok 1641 - cleanup after previous file test
*** t3501-revert-cherry-pick.sh ***
ok 1642 - setup match file test for foo/bba/arr
ok 1643 - wildmatch: match 'foo/bba/arr' 'foo/**'
ok 88 - interrupted rebase -i with --strategy and -X
ok 5 - --committer-date-is-author-date works with apply backend
ok 1644 - wildmatch (via ls-files): match 'foo/**' 'foo/bba/arr'
ok 1645 - iwildmatch: match 'foo/bba/arr' 'foo/**'
ok 1646 - iwildmatch (via ls-files): match 'foo/**' 'foo/bba/arr'
ok 1647 - pathmatch: match 'foo/bba/arr' 'foo/**'
ok 30 - git rebase --merge --onto main... main (rebase.abbreviateCommands = true) with no changes is noop with same HEAD
ok 20 - post-rewrite hook and fixups work for merges
ok 1 - set up conflicting branches
ok 1648 - pathmatch (via ls-files): match 'foo/**' 'foo/bba/arr'
ok 1649 - ipathmatch: match 'foo/bba/arr' 'foo/**'
ok 227 - "add" with initialized submodule, with submodule.recurse unset
ok 6 - --committer-date-is-author-date works with merge backend
ok 1650 - ipathmatch (via ls-files): match 'foo/**' 'foo/bba/arr'
ok 1651 - cleanup after previous file test
ok 228 - "add" with initialized submodule, with submodule.recurse set
ok 21 - refuse to merge ancestors of HEAD
ok 1652 - setup match file test for foo/bba/arr
ok 1653 - wildmatch: no match 'foo/bba/arr' 'foo*'
ok 2 - detect missing GIT_AUTHOR_NAME
ok 1654 - wildmatch (via ls-files): no match 'foo*' 'foo/bba/arr'
ok 1655 - iwildmatch: no match 'foo/bba/arr' 'foo*'
ok 89 - rebase -i error on commits with \ in message
ok 31 - git rebase --merge --no-ff --onto main... main (rebase.abbreviateCommands = true) with no changes is work with same HEAD
ok 1656 - iwildmatch (via ls-files): no match 'foo*' 'foo/bba/arr'
ok 1657 - pathmatch: match 'foo/bba/arr' 'foo*'
ok 1658 - pathmatch (via ls-files): match 'foo*' 'foo/bba/arr'
ok 1659 - ipathmatch: match 'foo/bba/arr' 'foo*'
ok 229 - can create worktrees with relative paths
ok 7 - --committer-date-is-author-date works when rewording
ok 1660 - ipathmatch (via ls-files): match 'foo*' 'foo/bba/arr'
ok 3 - detect missing GIT_AUTHOR_EMAIL
ok 1661 - cleanup after previous file test
ok 1662 - setup match file test for foo/bba/arr
ok 32 - git rebase --apply --keep-base main with no changes is noop with same HEAD
ok 1663 - wildmatch: no match 'foo/bba/arr' 'foo**'
ok 1664 - wildmatch (via ls-files): match 'foo**' 'foo/bba/arr'
ok 1665 - iwildmatch: no match 'foo/bba/arr' 'foo**'
ok 1666 - iwildmatch (via ls-files): match 'foo**' 'foo/bba/arr'
ok 90 - short commit ID setup
ok 1 - setup
ok 1667 - pathmatch: match 'foo/bba/arr' 'foo**'
ok 4 - detect missing GIT_AUTHOR_DATE
ok 1 - prepare repository with topic branch, and check cherry finds the 2 patches from there
ok 230 - can create worktrees with absolute paths
ok 1668 - pathmatch (via ls-files): match 'foo**' 'foo/bba/arr'
ok 1669 - ipathmatch: match 'foo/bba/arr' 'foo**'
ok 2 - check that cherry with limit returns only the top patch
ok 1670 - ipathmatch (via ls-files): match 'foo**' 'foo/bba/arr'
ok 33 - git rebase --apply --no-ff --keep-base main with no changes is work with same HEAD
ok 22 - update the split index when a racily clean cache entry is stored only in the shared index #0
ok 3 - cherry-pick one of the 2 patches, and check cherry recognized one and only one as new
ok 1671 - cleanup after previous file test
ok 1 - setup
ok 1672 - setup match file test for foo/bba/arr
ok 8 - --committer-date-is-author-date works with rebase -r
ok 1673 - wildmatch: no match 'foo/bba/arr' 'foo/*arr'
ok 5 - detect duplicate GIT_AUTHOR_NAME
ok 2 - cherry-pick --nonsense
ok 1674 - wildmatch (via ls-files): no match 'foo/*arr' 'foo/bba/arr'
ok 2 - simple fixup -C works
ok 1675 - iwildmatch: no match 'foo/bba/arr' 'foo/*arr'
ok 231 - move repo without breaking relative internal links
ok 34 - git rebase --merge --keep-base main with no changes is noop with same HEAD
ok 1676 - iwildmatch (via ls-files): no match 'foo/*arr' 'foo/bba/arr'
ok 1677 - pathmatch: match 'foo/bba/arr' 'foo/*arr'
ok 3 - revert --nonsense
ok 6 - git_rebase: removed submodule leaves submodule containing a .git directory alone
ok 48 - checkout-index outside sparse definition
ok 1678 - pathmatch (via ls-files): match 'foo/*arr' 'foo/bba/arr'
ok 1679 - ipathmatch: match 'foo/bba/arr' 'foo/*arr'
ok 22 - root commits
ok 1680 - ipathmatch (via ls-files): match 'foo/*arr' 'foo/bba/arr'
ok 4 - cherry-pick after renaming branch
ok 6 - detect duplicate GIT_AUTHOR_EMAIL
ok 1681 - cleanup after previous file test
ok 35 - git rebase --merge --no-ff --keep-base main with no changes is work with same HEAD
ok 232 - relative worktree sets extension config
ok 1682 - setup match file test for foo/bba/arr
# passed all 232 test(s)
1..232
ok 1683 - wildmatch: no match 'foo/bba/arr' 'foo/**arr'
ok 1684 - wildmatch (via ls-files): no match 'foo/**arr' 'foo/bba/arr'
ok 1685 - iwildmatch: no match 'foo/bba/arr' 'foo/**arr'
ok 23 - a "merge" into a root commit is a fast-forward
ok 1686 - iwildmatch (via ls-files): no match 'foo/**arr' 'foo/bba/arr'
ok 91 - short commit ID collide
ok 1687 - pathmatch: match 'foo/bba/arr' 'foo/**arr'
ok 3 - simple fixup -c works
ok 7 - detect duplicate GIT_AUTHOR_DATE
ok 5 - revert after renaming branch
ok 4 - cherry ignores whitespace
# passed all 4 test(s)
1..4
ok 1688 - pathmatch (via ls-files): match 'foo/**arr' 'foo/bba/arr'
*** t3502-cherry-pick-merge.sh ***
ok 1689 - ipathmatch: match 'foo/bba/arr' 'foo/**arr'
ok 36 - git rebase --merge --keep-base main (rebase.abbreviateCommands = true) with no changes is noop with same HEAD
ok 92 - respect core.abbrev
ok 1690 - ipathmatch (via ls-files): match 'foo/**arr' 'foo/bba/arr'
*** t3503-cherry-pick-root.sh ***
ok 1691 - cleanup after previous file test
ok 6 - cherry-pick on stat-dirty working tree
ok 1692 - setup match file test for foo/bba/arr
ok 93 - todo count
ok 1693 - wildmatch: no match 'foo/bba/arr' 'foo/*z'
ok 7 - revert forbidden on dirty working tree
ok 8 - unknown key in author-script
ok 9 - --committer-date-is-author-date works when forking merge
ok 1694 - wildmatch (via ls-files): no match 'foo/*z' 'foo/bba/arr'
ok 1695 - iwildmatch: no match 'foo/bba/arr' 'foo/*z'
ok 1696 - iwildmatch (via ls-files): no match 'foo/*z' 'foo/bba/arr'
ok 1697 - pathmatch: no match 'foo/bba/arr' 'foo/*z'
ok 37 - git rebase --merge --no-ff --keep-base main (rebase.abbreviateCommands = true) with no changes is work with same HEAD
ok 4 - fixup -C removes amend! from message
ok 8 - cherry-pick on unborn branch
ok 1698 - pathmatch (via ls-files): no match 'foo/*z' 'foo/bba/arr'
ok 1699 - ipathmatch: no match 'foo/bba/arr' 'foo/*z'
ok 1700 - ipathmatch (via ls-files): no match 'foo/*z' 'foo/bba/arr'
ok 9 - unwritable rebased-patches does not leak
ok 1701 - cleanup after previous file test
# passed all 9 test(s)
1..9
ok 24 - notes tree still has fanout after merge (m)
# passed all 24 test(s)
1..24
*** t3504-cherry-pick-rerere.sh ***
ok 38 - git rebase --apply --keep-base with no changes is noop with same HEAD
ok 10 - --committer-date-is-author-date works when committing conflict resolution
ok 1702 - setup match file test for foo/bba/arr
ok 9 - cherry-pick on unborn branch with --allow-empty
ok 1703 - wildmatch: no match 'foo/bba/arr' 'foo/**z'
ok 1704 - wildmatch (via ls-files): no match 'foo/**z' 'foo/bba/arr'
ok 1705 - iwildmatch: no match 'foo/bba/arr' 'foo/**z'
ok 1706 - iwildmatch (via ls-files): no match 'foo/**z' 'foo/bba/arr'
ok 1707 - pathmatch: no match 'foo/bba/arr' 'foo/**z'
ok 1708 - pathmatch (via ls-files): no match 'foo/**z' 'foo/bba/arr'
ok 49 - checkout-index with folders
ok 39 - git rebase --apply --no-ff --keep-base with no changes is work with same HEAD
ok 1709 - ipathmatch: no match 'foo/bba/arr' 'foo/**z'
ok 11 - --reset-author-date works with apply backend
ok 10 - cherry-pick "-" to pick from previous branch
*** t3505-cherry-pick-empty.sh ***
ok 94 - rebase -i commits that overwrite untracked files (pick)
ok 1710 - ipathmatch (via ls-files): no match 'foo/**z' 'foo/bba/arr'
ok 1711 - cleanup after previous file test
ok 5 - fixup -C with conflicts gives correct message
ok 12 - --reset-author-date works with merge backend
ok 7 - git_rebase: replace submodule with a directory must fail
ok 1712 - setup match file test for foo/bar
ok 1713 - wildmatch: no match 'foo/bar' 'foo?bar'
ok 24 - A root commit can be a cousin, treat it that way
ok 40 - git rebase --merge --keep-base with no changes is noop with same HEAD
ok 1 - setup
ok 1714 - wildmatch (via ls-files): no match 'foo?bar' 'foo/bar'
ok 1715 - iwildmatch: no match 'foo/bar' 'foo?bar'
ok 1716 - iwildmatch (via ls-files): no match 'foo?bar' 'foo/bar'
ok 2 - cherry-pick a root commit
ok 1717 - pathmatch: match 'foo/bar' 'foo?bar'
ok 13 - --reset-author-date works after conflict resolution
ok 3 - revert a root commit
ok 1718 - pathmatch (via ls-files): match 'foo?bar' 'foo/bar'
ok 1719 - ipathmatch: match 'foo/bar' 'foo?bar'
ok 1 - setup
ok 1720 - ipathmatch (via ls-files): match 'foo?bar' 'foo/bar'
ok 11 - cherry-pick "-" is meaningless without checkout
ok 1721 - cleanup after previous file test
ok 2 - cherry-pick -m complains of bogus numbers
ok 41 - git rebase --merge --no-ff --keep-base with no changes is work with same HEAD
ok 1722 - setup match file test for foo/bar
ok 1723 - wildmatch: no match 'foo/bar' 'foo[/]bar'
ok 1724 - wildmatch (via ls-files): no match 'foo[/]bar' 'foo/bar'
ok 4 - cherry-pick a root commit with an external strategy
ok 3 - cherry-pick explicit first parent of a non-merge
ok 1725 - iwildmatch: no match 'foo/bar' 'foo[/]bar'
ok 6 - conflicting fixup -C after fixup with custom comment string
ok 5 - revert a root commit with an external strategy
ok 1726 - iwildmatch (via ls-files): no match 'foo[/]bar' 'foo/bar'
ok 1727 - pathmatch: match 'foo/bar' 'foo[/]bar'
ok 12 - cherry-pick "-" works with arguments
ok 1728 - pathmatch (via ls-files): match 'foo[/]bar' 'foo/bar'
ok 25 - labels that are object IDs are rewritten
ok 1729 - ipathmatch: match 'foo/bar' 'foo[/]bar'
ok 4 - cherry pick a merge without -m should fail
ok 1730 - ipathmatch (via ls-files): match 'foo[/]bar' 'foo/bar'
ok 42 - git rebase --merge --keep-base (rebase.abbreviateCommands = true) with no changes is noop with same HEAD
ok 95 - rebase -i commits that overwrite untracked files (squash)
ok 6 - cherry-pick two root commits
ok 1731 - cleanup after previous file test
# passed all 6 test(s)
1..6
*** t3506-cherry-pick-ff.sh ***
ok 14 - --reset-author-date works with rebase -r
ok 1732 - setup match file test for foo/bar
ok 5 - cherry pick a merge (1)
ok 1733 - wildmatch: no match 'foo/bar' 'foo[^a-z]bar'
ok 1734 - wildmatch (via ls-files): no match 'foo[^a-z]bar' 'foo/bar'
ok 1735 - iwildmatch: no match 'foo/bar' 'foo[^a-z]bar'
ok 1 - setup
ok 1 - setup
ok 7 - skipping fixup -C after fixup gives correct message
ok 6 - cherry pick a merge (2)
ok 1736 - iwildmatch (via ls-files): no match 'foo[^a-z]bar' 'foo/bar'
ok 1737 - pathmatch: match 'foo/bar' 'foo[^a-z]bar'
ok 43 - git rebase --merge --no-ff --keep-base (rebase.abbreviateCommands = true) with no changes is work with same HEAD
ok 2 - conflicting merge
ok 2 - cherry-pick an empty commit
ok 3 - index lockfile was removed
ok 1738 - pathmatch (via ls-files): match 'foo[^a-z]bar' 'foo/bar'
ok 7 - cherry pick a merge relative to nonexistent parent should fail
ok 1739 - ipathmatch: match 'foo/bar' 'foo[^a-z]bar'
ok 4 - cherry-pick a commit with an empty message
ok 5 - index lockfile was removed
ok 1740 - ipathmatch (via ls-files): match 'foo[^a-z]bar' 'foo/bar'
ok 3 - fixup
ok 13 - cherry-pick works with dirty renamed file
ok 15 - --reset-author-date with --committer-date-is-author-date works
ok 1741 - cleanup after previous file test
ok 6 - cherry-pick a commit with an empty message with --allow-empty-message
ok 44 - git rebase --apply --no-fork-point with no changes is noop with same HEAD
ok 1742 - setup match file test for ab/cXd/efXg/hi
ok 8 - revert explicit first parent of a non-merge
ok 1743 - wildmatch: no match 'ab/cXd/efXg/hi' '*Xg*i'
ok 1744 - wildmatch (via ls-files): no match '*Xg*i' 'ab/cXd/efXg/hi'
ok 96 - rebase -i commits that overwrite untracked files (no ff)
ok 1745 - iwildmatch: no match 'ab/cXd/efXg/hi' '*Xg*i'
ok 1746 - iwildmatch (via ls-files): no match '*Xg*i' 'ab/cXd/efXg/hi'
ok 7 - cherry pick an empty non-ff commit without --allow-empty
ok 1747 - pathmatch: match 'ab/cXd/efXg/hi' '*Xg*i'
ok 9 - revert a merge without -m should fail
ok 14 - advice from failed revert
ok 50 - checkout-index --all
ok 1748 - pathmatch (via ls-files): match '*Xg*i' 'ab/cXd/efXg/hi'
ok 1749 - ipathmatch: match 'ab/cXd/efXg/hi' '*Xg*i'
ok 8 - cherry pick an empty non-ff commit with --allow-empty
ok 1750 - ipathmatch (via ls-files): match '*Xg*i' 'ab/cXd/efXg/hi'
ok 45 - git rebase --apply --no-ff --no-fork-point with no changes is work with same HEAD
ok 16 - reset-author-date with --committer-date-is-author-date works when rewording
ok 4 - cherry-pick conflict with --rerere-autoupdate
ok 10 - revert a merge (1)
ok 1751 - cleanup after previous file test
ok 9 - cherry pick with --keep-redundant-commits
ok 8 - sequence of fixup, fixup -C & squash --signoff works
ok 1752 - setup match file test for a
ok 1753 - wildmatch: no match 'a' '[A-Z]'
ok 1754 - wildmatch (via ls-files): no match '[A-Z]' 'a'
ok 11 - revert a merge (2)
ok 1755 - iwildmatch: match 'a' '[A-Z]'
ok 46 - git rebase --merge --no-fork-point with no changes is noop with same HEAD
ok 1756 - iwildmatch (via ls-files): match '[A-Z]' 'a'
ok 1757 - pathmatch: no match 'a' '[A-Z]'
ok 1 - setup
ok 12 - revert a merge relative to nonexistent parent should fail
ok 8 - git_rebase: replace submodule containing a .git directory with a directory must fail
ok 1758 - pathmatch (via ls-files): no match '[A-Z]' 'a'
# passed all 12 test(s)
1..12
ok 10 - cherry-pick a commit that becomes no-op (prep)
ok 17 - --reset-author-date --committer-date-is-author-date works when forking merge
ok 1759 - ipathmatch: match 'a' '[A-Z]'
*** t3507-cherry-pick-conflict.sh ***
ok 15 - titles of fresh reverts
ok 1760 - ipathmatch (via ls-files): match '[A-Z]' 'a'
ok 5 - cherry-pick conflict respects rerere.autoUpdate
ok 2 - cherry-pick using --ff fast forwards
ok 1761 - cleanup after previous file test
ok 1762 - setup match file test for A
ok 11 - cherry-pick a no-op with neither --keep-redundant nor --empty
ok 47 - git rebase --merge --no-ff --no-fork-point with no changes is work with same HEAD
ok 1763 - wildmatch: match 'A' '[A-Z]'
ok 9 - first fixup -C commented out in sequence fixup fixup -C fixup -C
ok 16 - title of legacy double revert
ok 1764 - wildmatch (via ls-files): match '[A-Z]' 'A'
ok 97 - rebase --continue removes CHERRY_PICK_HEAD
ok 1765 - iwildmatch: match 'A' '[A-Z]'
ok 3 - cherry-pick not using --ff does not fast forwards
ok 1766 - iwildmatch (via ls-files): match '[A-Z]' 'A'
ok 1767 - pathmatch: match 'A' '[A-Z]'
ok 12 - cherry-pick a no-op with --keep-redundant
ok 1768 - pathmatch (via ls-files): match '[A-Z]' 'A'
ok 1769 - ipathmatch: match 'A' '[A-Z]'
ok 18 - --ignore-date is an alias for --reset-author-date
ok 48 - git rebase --merge --no-fork-point (rebase.abbreviateCommands = true) with no changes is noop with same HEAD
ok 1770 - ipathmatch (via ls-files): match '[A-Z]' 'A'
ok 19 - $EDITOR and friends are unchanged
ok 17 - identification of reverted commit (default)
# passed all 19 test(s)
1..19
ok 1771 - cleanup after previous file test
ok 6 - cherry-pick conflict with --no-rerere-autoupdate
*** t3508-cherry-pick-many-commits.sh ***
ok 1772 - setup match file test for A
ok 1773 - wildmatch: no match 'A' '[a-z]'
ok 13 - --keep-redundant-commits is incompatible with operations
ok 1774 - wildmatch (via ls-files): no match '[a-z]' 'A'
ok 18 - identification of reverted commit (--reference)
ok 1775 - iwildmatch: match 'A' '[a-z]'
ok 98 - drop
ok 1776 - iwildmatch (via ls-files): match '[a-z]' 'A'
ok 1777 - pathmatch: no match 'A' '[a-z]'
ok 10 - multiple fixup -c opens editor once
ok 7 - cherry-pick --continue rejects --rerere-autoupdate
ok 49 - git rebase --merge --no-ff --no-fork-point (rebase.abbreviateCommands = true) with no changes is work with same HEAD
ok 4 - merge setup
ok 1778 - pathmatch (via ls-files): no match '[a-z]' 'A'
ok 1779 - ipathmatch: match 'A' '[a-z]'
ok 14 - --empty is incompatible with operations
ok 1780 - ipathmatch (via ls-files): match '[a-z]' 'A'
ok 5 - cherry-pick explicit first parent of a non-merge with --ff
ok 19 - git revert --reference with core.commentChar
ok 1781 - cleanup after previous file test
ok 6 - cherry pick a merge with --ff but without -m should fail
ok 1782 - setup match file test for a
ok 50 - git rebase --apply --keep-base --no-fork-point with no changes is noop with same HEAD
ok 1783 - wildmatch: match 'a' '[a-z]'
ok 15 - cherry-pick a no-op with --empty=stop
ok 20 - identification of reverted commit (revert.reference)
ok 26 - octopus merges
ok 1784 - wildmatch (via ls-files): match '[a-z]' 'a'
ok 1785 - iwildmatch: match 'a' '[a-z]'
ok 21 - cherry-pick is unaware of --reference (for now)
ok 1786 - iwildmatch (via ls-files): match '[a-z]' 'a'
# passed all 21 test(s)
1..21
ok 7 - cherry pick with --ff a merge (1)
ok 11 - sequence squash, fixup & fixup -c gives combined message
ok 1787 - pathmatch: match 'a' '[a-z]'
ok 16 - cherry-pick a no-op with --empty=drop
ok 8 - cherry-pick --rerere-autoupdate more than once
ok 99 - rebase -i respects rebase.missingCommitsCheck = ignore
ok 1788 - pathmatch (via ls-files): match '[a-z]' 'a'
ok 1789 - ipathmatch: match 'a' '[a-z]'
*** t3509-cherry-pick-merge-df.sh ***
ok 8 - cherry pick with --ff a merge (2)
ok 51 - git rebase --apply --no-ff --keep-base --no-fork-point with no changes is work with same HEAD
ok 1790 - ipathmatch (via ls-files): match '[a-z]' 'a'
ok 9 - cherry-pick conflict without rerere
ok 17 - cherry-pick a no-op with --empty=keep
# passed all 9 test(s)
1..9
# passed all 17 test(s)
ok 1791 - cleanup after previous file test
1..17
ok 9 - cherry pick a merge relative to nonexistent parent with --ff should fail
not ok 9 - git_rebase: replace submodule with a file must fail # TODO known breakage
*** t3510-cherry-pick-sequence.sh ***
ok 1792 - setup match file test for a
*** t3511-cherry-pick-x.sh ***
ok 1793 - wildmatch: no match 'a' '[[:upper:]]'
ok 1794 - wildmatch (via ls-files): no match '[[:upper:]]' 'a'
ok 1795 - iwildmatch: match 'a' '[[:upper:]]'
ok 1 - setup
ok 12 - fixup -C works upon --autosquash with amend!
ok 1796 - iwildmatch (via ls-files): match '[[:upper:]]' 'a'
ok 1797 - pathmatch: no match 'a' '[[:upper:]]'
ok 10 - cherry pick a root commit with --ff
ok 52 - git rebase --merge --keep-base --no-fork-point with no changes is noop with same HEAD
ok 1798 - pathmatch (via ls-files): no match '[[:upper:]]' 'a'
ok 1799 - ipathmatch: match 'a' '[[:upper:]]'
ok 2 - failed cherry-pick does not advance HEAD
ok 1800 - ipathmatch (via ls-files): match '[[:upper:]]' 'a'
ok 100 - rebase -i respects rebase.missingCommitsCheck = warn
ok 11 - cherry-pick --ff on unborn branch
# passed all 11 test(s)
1..11
ok 1801 - cleanup after previous file test
*** t3512-cherry-pick-submodule.sh ***
ok 1 - setup
ok 1802 - setup match file test for A
ok 1803 - wildmatch: match 'A' '[[:upper:]]'
ok 3 - advice from failed cherry-pick
ok 53 - git rebase --merge --no-ff --keep-base --no-fork-point with no changes is work with same HEAD
ok 1804 - wildmatch (via ls-files): match '[[:upper:]]' 'A'
ok 1805 - iwildmatch: match 'A' '[[:upper:]]'
ok 13 - fixup -[Cc]<commit> works
ok 1806 - iwildmatch (via ls-files): match '[[:upper:]]' 'A'
# passed all 13 test(s)
1..13
ok 1807 - pathmatch: match 'A' '[[:upper:]]'
ok 4 - advice from failed cherry-pick --no-commit
ok 1808 - pathmatch (via ls-files): match '[[:upper:]]' 'A'
*** t3513-revert-submodule.sh ***
ok 1809 - ipathmatch: match 'A' '[[:upper:]]'
ok 2 - cherry-pick first..fourth works
ok 1 - Initialize repository
ok 1810 - ipathmatch (via ls-files): match '[[:upper:]]' 'A'
ok 27 - with --autosquash and --exec
ok 54 - git rebase --merge --keep-base --no-fork-point (rebase.abbreviateCommands = true) with no changes is noop with same HEAD
ok 1811 - cleanup after previous file test
ok 5 - failed cherry-pick sets CHERRY_PICK_HEAD
ok 1812 - setup match file test for A
ok 1813 - wildmatch: no match 'A' '[[:lower:]]'
ok 1814 - wildmatch (via ls-files): no match '[[:lower:]]' 'A'
ok 1815 - iwildmatch: match 'A' '[[:lower:]]'
ok 6 - successful cherry-pick does not set CHERRY_PICK_HEAD
ok 101 - rebase -i respects rebase.missingCommitsCheck = error
ok 1816 - iwildmatch (via ls-files): match '[[:lower:]]' 'A'
ok 1817 - pathmatch: no match 'A' '[[:lower:]]'
ok 55 - git rebase --merge --no-ff --keep-base --no-fork-point (rebase.abbreviateCommands = true) with no changes is work with same HEAD
ok 1818 - pathmatch (via ls-files): no match '[[:lower:]]' 'A'
ok 1819 - ipathmatch: match 'A' '[[:lower:]]'
ok 7 - cherry-pick --no-commit does not set CHERRY_PICK_HEAD
ok 1820 - ipathmatch (via ls-files): match '[[:lower:]]' 'A'
ok 2 - Setup rename across paths each below D/F conflicts
ok 1821 - cleanup after previous file test
ok 8 - cherry-pick w/dirty tree does not set CHERRY_PICK_HEAD
ok 1822 - setup match file test for a
ok 3 - Cherry-pick succeeds with rename across D/F conflicts
ok 1823 - wildmatch: match 'a' '[[:lower:]]'
ok 56 - git rebase --apply --fork-point main with no changes is noop with same HEAD
ok 1824 - wildmatch (via ls-files): match '[[:lower:]]' 'a'
ok 1825 - iwildmatch: match 'a' '[[:lower:]]'
ok 3 - cherry-pick three one two works
ok 1826 - iwildmatch (via ls-files): match '[[:lower:]]' 'a'
ok 1827 - pathmatch: match 'a' '[[:lower:]]'
ok 4 - cherry-pick three one two: fails
ok 1828 - pathmatch (via ls-files): match '[[:lower:]]' 'a'
ok 1829 - ipathmatch: match 'a' '[[:lower:]]'
not ok 10 - git_rebase: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 1830 - ipathmatch (via ls-files): match '[[:lower:]]' 'a'
ok 57 - git rebase --apply --no-ff --fork-point main with no changes is work with same HEAD
ok 9 - cherry-pick --strategy=resolve w/dirty tree does not set CHERRY_PICK_HEAD
ok 4 - Setup rename with file on one side matching directory name on other
ok 1831 - cleanup after previous file test
ok 28 - --continue after resolving conflicts after a merge
ok 5 - output to keep user entertained during multi-pick
ok 102 - rebase --edit-todo respects rebase.missingCommitsCheck = ignore
ok 1832 - setup match file test for A
ok 1 - setup
ok 1833 - wildmatch: no match 'A' '[B-Za]'
ok 1834 - wildmatch (via ls-files): no match '[B-Za]' 'A'
ok 10 - GIT_CHERRY_PICK_HELP suppresses CHERRY_PICK_HEAD
ok 1835 - iwildmatch: match 'A' '[B-Za]'
ok 58 - git rebase --merge --fork-point main with no changes is noop with same HEAD
ok 1836 - iwildmatch (via ls-files): match '[B-Za]' 'A'
ok 1837 - pathmatch: no match 'A' '[B-Za]'
ok 2 - cherry-pick persists data on failure
ok 1838 - pathmatch (via ls-files): no match '[B-Za]' 'A'
ok 1839 - ipathmatch: match 'A' '[B-Za]'
ok 11 - git reset clears CHERRY_PICK_HEAD
ok 1840 - ipathmatch (via ls-files): match '[B-Za]' 'A'
ok 1841 - cleanup after previous file test
ok 51 - clean
ok 1842 - setup match file test for a
ok 59 - git rebase --merge --no-ff --fork-point main with no changes is work with same HEAD
ok 1843 - wildmatch: match 'a' '[B-Za]'
ok 5 - Cherry-pick succeeds with was_a_dir/file -> was_a_dir (resolve)
ok 1844 - wildmatch (via ls-files): match '[B-Za]' 'a'
ok 1845 - iwildmatch: match 'a' '[B-Za]'
ok 12 - failed commit does not clear CHERRY_PICK_HEAD
ok 1 - setup
ok 6 - Cherry-pick succeeds with was_a_dir/file -> was_a_dir (recursive)
ok 1846 - iwildmatch (via ls-files): match '[B-Za]' 'a'
ok 1847 - pathmatch: match 'a' '[B-Za]'
ok 3 - cherry-pick mid-cherry-pick-sequence
ok 1848 - pathmatch (via ls-files): match '[B-Za]' 'a'
ok 1849 - ipathmatch: match 'a' '[B-Za]'
ok 29 - --rebase-merges with strategies
ok 1850 - ipathmatch (via ls-files): match '[B-Za]' 'a'
ok 60 - git rebase --merge --fork-point main (rebase.abbreviateCommands = true) with no changes is noop with same HEAD
ok 2 - cherry-pick -x inserts blank line after one line subject
ok 1851 - cleanup after previous file test
ok 13 - cancelled commit does not clear CHERRY_PICK_HEAD
ok 1852 - setup match file test for A
ok 1853 - wildmatch: no match 'A' '[B-a]'
ok 103 - rebase --edit-todo respects rebase.missingCommitsCheck = warn
ok 1854 - wildmatch (via ls-files): no match '[B-a]' 'A'
ok 1855 - iwildmatch: match 'A' '[B-a]'
ok 4 - cherry-pick persists opts correctly
ok 6 - cherry-pick --strategy resolve first..fourth works
ok 1856 - iwildmatch (via ls-files): match '[B-a]' 'A'
ok 1857 - pathmatch: no match 'A' '[B-a]'
ok 3 - cherry-pick -s inserts blank line after one line subject
ok 7 - Setup rename with file on one side matching different dirname on other
ok 1858 - pathmatch (via ls-files): no match '[B-a]' 'A'
ok 30 - --rebase-merges with commit that can generate bad characters for filename
ok 61 - git rebase --merge --no-ff --fork-point main (rebase.abbreviateCommands = true) with no changes is work with same HEAD
ok 1859 - ipathmatch: match 'A' '[B-a]'
ok 14 - successful commit clears CHERRY_PICK_HEAD
ok 1860 - ipathmatch (via ls-files): match '[B-a]' 'A'
ok 1861 - cleanup after previous file test
ok 1862 - setup match file test for a
ok 1863 - wildmatch: match 'a' '[B-a]'
ok 4 - cherry-pick -s inserts blank line after non-conforming footer
ok 15 - partial commit of cherry-pick fails
ok 1864 - wildmatch (via ls-files): match '[B-a]' 'a'
ok 1865 - iwildmatch: match 'a' '[B-a]'
ok 5 - cherry-pick persists --empty=stop correctly
ok 62 - git rebase --apply --fork-point --onto B B with no changes is noop with same HEAD
ok 1866 - iwildmatch (via ls-files): match '[B-a]' 'a'
ok 1867 - pathmatch: match 'a' '[B-a]'
ok 1868 - pathmatch (via ls-files): match '[B-a]' 'a'
ok 16 - commit --amend of cherry-pick fails
ok 5 - cherry-pick -s recognizes trailer config
ok 1869 - ipathmatch: match 'a' '[B-a]'
ok 31 - --rebase-merges with message matched with onto label
ok 1870 - ipathmatch (via ls-files): match '[B-a]' 'a'
ok 1871 - cleanup after previous file test
ok 6 - cherry-pick persists --empty=drop correctly
ok 8 - Cherry-pick with rename to different D/F conflict succeeds (resolve)
ok 1872 - setup match file test for z
ok 1873 - wildmatch: no match 'z' '[Z-y]'
ok 6 - cherry-pick -x inserts blank line when conforming footer not found
ok 17 - successful final commit clears cherry-pick state
ok 1874 - wildmatch (via ls-files): no match '[Z-y]' 'z'
ok 1875 - iwildmatch: match 'z' '[Z-y]'
ok 63 - git rebase --apply --no-ff --fork-point --onto B B with no changes is work with diff HEAD
ok 9 - Cherry-pick with rename to different D/F conflict succeeds (recursive)
ok 1876 - iwildmatch (via ls-files): match '[Z-y]' 'z'
# passed all 9 test(s)
1..9
ok 1877 - pathmatch: no match 'z' '[Z-y]'
*** t3514-cherry-pick-revert-gpg.sh ***
ok 1878 - pathmatch (via ls-files): no match '[Z-y]' 'z'
ok 1879 - ipathmatch: match 'z' '[Z-y]'
ok 7 - cherry-pick -s inserts blank line when conforming footer not found
ok 32 - progress shows the correct total
ok 7 - output during multi-pick indicates merge strategy
ok 1880 - ipathmatch (via ls-files): match '[Z-y]' 'z'
ok 7 - cherry-pick persists --empty=keep correctly
ok 18 - reset after final pick clears cherry-pick state
ok 11 - git_rebase: modified submodule does not update submodule work tree
ok 1881 - cleanup after previous file test
ok 64 - git rebase --merge --fork-point --onto B B with no changes is noop with same HEAD
ok 1882 - setup match file test for Z
ok 1883 - wildmatch: match 'Z' '[Z-y]'
ok 8 - cherry-pick -x -s inserts blank line when conforming footer not found
ok 104 - rebase --edit-todo respects rebase.missingCommitsCheck = error
ok 1884 - wildmatch (via ls-files): match '[Z-y]' 'Z'
ok 1885 - iwildmatch: match 'Z' '[Z-y]'
ok 19 - failed cherry-pick produces dirty index
ok 8 - cherry-pick --ff first..fourth works
ok 1886 - iwildmatch (via ls-files): match '[Z-y]' 'Z'
ok 1887 - pathmatch: match 'Z' '[Z-y]'
ok 8 - revert persists opts correctly
ok 1888 - pathmatch (via ls-files): match '[Z-y]' 'Z'
ok 1889 - ipathmatch: match 'Z' '[Z-y]'
ok 9 - cherry-pick -s adds sob when last sob doesnt match committer
ok 65 - git rebase --merge --no-ff --fork-point --onto B B with no changes is work with diff HEAD
ok 1890 - ipathmatch (via ls-files): match '[Z-y]' 'Z'
ok 9 - cherry-pick -n first..fourth works
ok 20 - failed cherry-pick registers participants in index
ok 9 - cherry-pick cleans up sequencer state upon success
ok 52 - show (cached blobs/trees)
ok 10 - cherry-pick -x -s adds sob when last sob doesnt match committer
1..0 # SKIP skip all test {cherry-pick,revert} --[no-]gpg-sign, gpg not available
*** t3600-rm.sh ***
ok 10 - cherry-pick --skip requires cherry-pick in progress
ok 66 - git rebase --merge --fork-point --onto B B (rebase.abbreviateCommands = true) with no changes is noop with same HEAD
ok 10 - revert first..fourth works
ok 21 - cherry-pick conflict, ensure commit.cleanup = scissors places scissors line properly
ok 105 - rebase.missingCommitsCheck = error after resolving conflicts
ok 11 - revert --skip requires revert in progress
ok 11 - cherry-pick -s refrains from adding duplicate trailing sob
ok 22 - cherry-pick conflict, ensure cleanup=scissors places scissors line properly
ok 23 - failed cherry-pick describes conflict in work tree
ok 11 - revert ^first fourth works
ok 67 - git rebase --merge --no-ff --fork-point --onto B B (rebase.abbreviateCommands = true) with no changes is work with diff HEAD
ok 33 - truncate label names
ok 12 - cherry-pick -x -s adds sob even when trailing sob exists for committer
ok 12 - cherry-pick --skip to skip commit
ok 23 - update the split index when a racily clean cache entry is stored only in the shared index #1
ok 24 - diff3 -m style
ok 106 - rebase.missingCommitsCheck = error when editing for a second time
ok 12 - revert fourth fourth~1 fourth~2 works
ok 13 - cherry-pick -x handles commits with no NL at end of message
ok 68 - git rebase --apply --fork-point --onto B... B with no changes is noop with same HEAD
ok 1 - Initialize test directory
ok 13 - revert --skip to skip commit
ok 34 - reword fast-forwarded empty merge commit
# passed all 34 test(s)
1..34
ok 13 - cherry-pick -3 fourth works
ok 2 - add files with funny names
ok 14 - cherry-pick -x handles commits with no footer and no NL at end of message
ok 3 - Pre-check that foo exists and is in index before git rm foo
ok 4 - Test that git rm foo succeeds
*** t3601-rm-pathspec-file.sh ***
ok 25 - revert also handles conflicts sanely
ok 5 - Test that git rm --cached foo succeeds if the index matches the file
ok 69 - git rebase --apply --no-ff --fork-point --onto B... B with no changes is work with diff HEAD
ok 14 - cherry-pick --stdin works
# passed all 14 test(s)
1..14
ok 15 - cherry-pick -s handles commits with no NL at end of message
ok 6 - Test that git rm --cached foo succeeds if the index matches the file
ok 26 - failed revert sets REVERT_HEAD
ok 14 - skip "empty" commit
*** t3602-rm-sparse-checkout.sh ***
ok 7 - Test that git rm --cached foo fails if the index matches neither the file nor HEAD
ok 70 - git rebase --merge --fork-point --onto B... B with no changes is noop with same HEAD
ok 27 - successful revert does not set REVERT_HEAD
ok 16 - cherry-pick -s handles commits with no footer and no NL at end of message
ok 12 - git_rebase: modified submodule does not update submodule work tree to invalid commit
ok 8 - Test that git rm --cached -f foo works in case where --cached only did not
ok 9 - Post-check that foo exists but is not in index after git rm foo
ok 10 - Pre-check that bar exists and is in index before "git rm bar"
ok 11 - Test that "git rm bar" succeeds
ok 28 - revert --no-commit sets REVERT_HEAD
ok 17 - cherry-pick -x treats "(cherry picked from..." line as part of footer
ok 12 - Post-check that bar does not exist and is not in index after "git rm -f bar"
ok 13 - Test that "git rm -- -q" succeeds (remove a file that looks like an option)
ok 107 - respects rebase.abbreviateCommands with fixup, squash and exec
ok 14 - Test that "git rm -f" succeeds with embedded space, tab, or newline characters.
ok 15 - skip a commit and check if rest of sequence is correct
ok 29 - revert w/dirty tree does not set REVERT_HEAD
ok 53 - rev-parse (cached blobs/trees)
ok 71 - git rebase --merge --no-ff --fork-point --onto B... B with no changes is work with diff HEAD
ok 18 - cherry-pick -s treats "(cherry picked from..." line as part of footer
ok 15 - Test that "git rm -f" fails if its rm fails
ok 16 - When the rm in "git rm -f" fails, it should not remove the file from the index
ok 17 - Remove nonexistent file with --ignore-unmatch
ok 1 - setup
ok 16 - check advice when we move HEAD by committing
ok 2 - simplest
ok 4 - rebase changes with the merge backend with a delay
ok 30 - GIT_CHERRY_PICK_HELP does not suppress REVERT_HEAD
ok 19 - cherry-pick -x -s treats "(cherry picked from..." line as part of footer
# passed all 4 test(s)
1..4
ok 18 - "rm" command printed
ok 72 - git rebase --merge --fork-point --onto B... B (rebase.abbreviateCommands = true) with no changes is noop with same HEAD
*** t3650-replay-basics.sh ***
ok 1 - setup
ok 3 - --pathspec-file-nul
ok 2 - rm does not remove sparse entries
ok 31 - git reset clears REVERT_HEAD
ok 20 - cherry-pick preserves commit message
ok 4 - only touches what was listed
ok 19 - "rm" command suppressed with --quiet
ok 3 - rm -f does not remove sparse entries
ok 17 - selectively advise --skip while launching another sequence
ok 20 - Re-add foo and baz
ok 108 - static check of bad command
ok 21 - Modify foo -- rm should refuse
ok 4 - rm --dry-run does not remove sparse entries
ok 5 - error conditions
ok 32 - failed commit does not clear REVERT_HEAD
# passed all 5 test(s)
1..5
ok 73 - git rebase --merge --no-ff --fork-point --onto B... B (rebase.abbreviateCommands = true) with no changes is work with diff HEAD
ok 22 - Modified foo -- rm -f should work
*** t3700-add.sh ***
ok 21 - cherry-pick -x cleans commit message
ok 23 - Re-add foo and baz for HEAD tests
ok 24 - foo is different in index from HEAD -- rm should refuse
ok 5 - recursive rm does not remove sparse entries
ok 25 - but with -f it should work.
ok 33 - successful final commit clears revert state
ok 18 - allow skipping commit but not abort for a new history
ok 26 - refuse to remove cached empty file with modifications
ok 74 - git rebase --apply --fork-point --onto main... main with no changes is noop with same HEAD
ok 6 - recursive rm --sparse removes sparse entries
ok 27 - remove intent-to-add file without --force
ok 22 - cherry-pick -x respects commit.cleanup
# passed all 22 test(s)
1..22
ok 109 - the first command cannot be a fixup
ok 7 - rm obeys advice.updateSparsePath
*** t3701-add-interactive.sh ***
ok 28 - Recursive test setup
ok 34 - reset after final pick clears revert state
ok 29 - Recursive without -r fails
ok 30 - Recursive with -r but dirty
ok 31 - Recursive with -r -f
ok 32 - Remove nonexistent file returns nonzero exit status
ok 19 - allow skipping stopped cherry-pick because of untracked file modifications
ok 75 - git rebase --apply --no-ff --fork-point --onto main... main with no changes is work with same HEAD
ok 8 - do not advice about sparse entries when they do not match the pathspec
ok 35 - revert conflict, diff3 -m style
ok 110 - tabs and spaces are accepted in the todolist
ok 20 - --quit does not complain when no cherry-pick is in progress
ok 9 - do not warn about sparse entries when pathspec matches dense entries
ok 33 - Call "rm" from outside the work tree
ok 1 - Test of git add
ok 21 - --abort requires cherry-pick in progress
ok 2 - Test with no pathspecs
ok 36 - revert conflict, ensure commit.cleanup = scissors places scissors line properly
ok 34 - refresh index before checking if it is up-to-date
ok 76 - git rebase --merge --fork-point --onto main... main with no changes is noop with same HEAD
ok 3 - Post-check that foo is in the index
ok 10 - do not warn about sparse entries with --ignore-unmatch
ok 4 - Test that "git add -- -q" works
ok 22 - --quit cleans up sequencer state
ok 13 - git_rebase: modified submodule does not update submodule work tree from invalid commit
ok 11 - refuse to rm a non-skip-worktree path outside sparse cone
ok 37 - revert conflict, ensure cleanup=scissors places scissors line properly
ok 77 - git rebase --merge --no-ff --fork-point --onto main... main with no changes is work with same HEAD
ok 5 - git add: core.fsyncmethod=batch
ok 38 - failed cherry-pick does not forget -s
ok 1 - unknown command
ok 2 - setup (initial)
ok 23 - --quit keeps HEAD and conflicted index intact
ok 3 - status works (initial)
ok 111 - static check of bad SHA-1
ok 4 - setup expected
ok 5 - diff works (initial)
ok 39 - commit after failed cherry-pick does not add duplicated -s
ok 78 - git rebase --merge --fork-point --onto main... main (rebase.abbreviateCommands = true) with no changes is noop with same HEAD
ok 6 - git update-index: core.fsyncmethod=batch
ok 112 - editor saves as CR/LF
ok 6 - revert works (initial)
ok 7 - git add: Test that executable bit is not used if core.filemode=0
ok 12 - can remove files from non-sparse dir
ok 8 - git add: filemode=0 should not get confused by symlink
ok 7 - add untracked (multiple)
ok 24 - --abort to cancel multiple cherry-pick
ok 40 - commit after failed cherry-pick adds -s at the right place
ok 9 - git update-index --add: Test that executable bit is not used...
ok 113 - rebase -i --gpg-sign=<key-id>
ok 8 - setup (commit)
ok 79 - git rebase --merge --no-ff --fork-point --onto main... main (rebase.abbreviateCommands = true) with no changes is work with same HEAD
ok 9 - status works (commit)
ok 10 - git add: filemode=0 should not get confused by symlink
ok 1 - git_test_func: added submodule creates empty directory
ok 11 - git update-index --add: Test that executable bit is not used...
ok 13 - refuse to remove non-skip-worktree file from sparse dir
ok 12 - .gitignore test setup
# passed all 13 test(s)
1..13
ok 10 - update can stage deletions
ok 11 - setup expected
ok 25 - --abort to cancel single cherry-pick
ok 14 - git_rebase: added submodule doesn't remove untracked unignored file with same name
*** t3702-add-edit.sh ***
ok 13 - .gitignore is honored
ok 41 - commit --amend -s places the sign-off at the right place
ok 80 - git rebase --apply --keep-base --keep-base main with no changes is noop with same HEAD
ok 114 - rebase -i --gpg-sign=<key-id> overrides commit.gpgSign
ok 14 - error out when attempting to add ignored ones without -f
ok 12 - diff works (commit)
ok 15 - error out when attempting to add ignored ones without -f
ok 26 - --abort does not unsafely change HEAD
ok 13 - revert works (commit)
ok 16 - error out when attempting to add ignored ones but add others
ok 17 - add ignored ones with -f
ok 42 - cherry-pick preserves sparse-checkout
ok 18 - add ignored ones with -f
ok 81 - git rebase --apply --no-ff --keep-base --keep-base main with no changes is work with same HEAD
ok 14 - reject multi-key input
ok 15 - setup expected
ok 19 - add ignored ones with -f
ok 20 - .gitignore with subdirectory
ok 16 - dummy edit works
ok 21 - check correct prefix detection
ok 17 - setup patch
ok 27 - cherry-pick --abort to cancel multiple revert
ok 82 - git rebase --merge --keep-base --keep-base main with no changes is noop with same HEAD
ok 18 - setup fake editor
ok 1 - git_revert: added submodule creates empty directory
ok 43 - cherry-pick --continue remembers --keep-redundant-commits
ok 115 - valid author header after --root swap
ok 19 - bad edit rejected
ok 20 - setup patch
ok 28 - revert --abort works, too
ok 1 - setup
ok 83 - git rebase --merge --no-ff --keep-base --keep-base main with no changes is work with same HEAD
ok 1 - setup
ok 22 - git add with filemode=0, symlinks=0, and unmerged entries
ok 21 - garbage edit rejected
ok 44 - cherry-pick --continue remembers --allow-empty and --allow-empty-message
ok 22 - setup patch
# passed all 44 test(s)
1..44
ok 23 - setup expected
*** t3703-add-magic-pathspec.sh ***
ok 2 - setup bare
ok 2 - add -e
ok 116 - valid author header when author contains single quote
ok 29 - --abort to cancel single revert
ok 23 - git add with filemode=0, symlinks=0 prefers stage 2 over stage 1
ok 84 - git rebase --merge --keep-base --keep-base main (rebase.abbreviateCommands = true) with no changes is noop with same HEAD
ok 3 - using replay to rebase two branches, one on top of other
ok 3 - add -e notices editor failure
ok 24 - real edit works
# passed all 3 test(s)
1..3
ok 25 - setup file
ok 4 - using replay on bare repo to rebase two branches, one on top of other
*** t3704-add-pathspec-file.sh ***
ok 26 - setup patch
ok 27 - setup expected
ok 5 - using replay to rebase with a conflict
ok 6 - using replay on bare repo to rebase with a conflict
ok 24 - git add --refresh
ok 30 - --abort keeps unrelated change, easy case
ok 28 - edit can strip spaces from empty context lines
ok 7 - using replay to perform basic cherry-pick
ok 8 - using replay on bare repo to perform basic cherry-pick
ok 9 - replay on bare repo fails with both --advance and --onto
ok 85 - git rebase --merge --no-ff --keep-base --keep-base main (rebase.abbreviateCommands = true) with no changes is work with same HEAD
ok 2 - git_test_func: added submodule leaves existing empty directory alone
ok 10 - replay fails when both --advance and --onto are omitted
ok 25 - git add --refresh with pathspec
ok 26 - git add --refresh correctly reports no match error
ok 86 - add work same to side
ok 54 - submodule handling
ok 35 - choking "git rm" should not let it die with cruft (induce SIGPIPE)
ok 1 - setup
ok 29 - skip files similarly as commit -a
ok 2 - add :/
ok 11 - using replay to also rebase a contained branch
ok 3 - add :/anothersub
ok 27 - git add should fail atomically upon an unreadable file
ok 31 - --abort refuses to clobber unrelated change, harder case
ok 4 - add :/non-existent
ok 87 - git rebase --apply  with our changes is noop with same HEAD
ok 12 - using replay on bare repo to also rebase a contained branch
ok 15 - git_rebase_interactive: added submodule creates empty directory
ok 117 - post-commit hook is called
ok 5 - a file with the same (long) magic name exists
ok 30 - patch does not affect mode
ok 28 - git add --ignore-errors
ok 6 - a file with the same (short) magic name exists
ok 1 - setup
# passed all 6 test(s)
1..6
*** t3705-add-sparse-checkout.sh ***
ok 31 - stage mode but not hunk
ok 2 - --pathspec-from-file from stdin
ok 13 - using replay to rebase multiple divergent branches
ok 29 - git add (add.ignore-errors)
ok 3 - --pathspec-from-file from file
ok 32 - cherry-pick still writes sequencer state when one commit is left
ok 88 - git rebase --apply --no-ff  with our changes is work with same HEAD
ok 118 - correct error message for partial commit after empty pick
ok 30 - git add (add.ignore-errors = false)
ok 4 - NUL delimiters
ok 2 - git_revert: added submodule leaves existing empty directory alone
ok 32 - stage mode and hunk
ok 5 - LF delimiters
ok 33 - different prompts for mode change/deleted
ok 31 - --no-ignore-errors overrides config
ok 89 - git rebase --merge  with our changes is noop with same HEAD
ok 33 - --abort after last commit in sequence
ok 6 - no trailing delimiter
ok 119 - correct error message for commit --amend after empty pick
ok 32 - git add 'fo\[ou\]bar' ignores foobar
ok 7 - CRLF delimiters
ok 34 - correct message when there is nothing to do
ok 14 - using replay on bare repo to rebase multiple divergent branches, including contained ones
# passed all 14 test(s)
1..14
ok 120 - todo has correct onto hash
ok 33 - git add to resolve conflicts on otherwise ignored path
ok 34 - cherry-pick does not implicitly stomp an existing operation
ok 35 - setup again
ok 36 - setup patch
ok 34 - "add non-existent" should fail
ok 1 - setup
ok 8 - quotes
ok 90 - git rebase --merge --no-ff  with our changes is work with same HEAD
*** t3800-mktag.sh ***
ok 37 - setup expected
ok 35 - --continue complains when no cherry-pick is in progress
ok 9 - quotes not compatible with --pathspec-file-nul
ok 35 - git add -A on empty repo does not error out
ok 10 - only touches what was listed
ok 36 - "git add ." in empty repo
ok 2 - git add does not remove sparse entries
ok 3 - git_test_func: replace tracked file with submodule creates empty directory
ok 38 - add first line works
ok 39 - setup expected
ok 36 - --continue complains when there are unresolved conflicts
ok 91 - git rebase --merge  (rebase.abbreviateCommands = true) with our changes is noop with same HEAD
ok 11 - error conditions
ok 55 - sparse-index is expanded and converted back
# passed all 11 test(s)
1..11
*** t3900-i18n-commit.sh ***
ok 37 - "git add" a embedded repository
ok 3 - git add -A does not remove sparse entries
ok 38 - error on a repository with no commits
ok 121 - ORIG_HEAD is updated correctly
ok 40 - deleting a non-empty file
ok 41 - setup expected
ok 39 - git add --dry-run of existing changed file
ok 40 - git add --dry-run of non-existing file
ok 41 - git add --dry-run of an existing file output
ok 37 - --continue of single cherry-pick
ok 42 - git add --dry-run --ignore-missing of non-existing file
ok 92 - git rebase --merge --no-ff  (rebase.abbreviateCommands = true) with our changes is work with same HEAD
ok 43 - git add --dry-run --ignore-missing of non-existing file output
ok 44 - git add --dry-run --interactive should fail
ok 45 - git add empty string should fail
ok 4 - git add . does not remove sparse entries
ok 46 - git add --chmod=[+-]x stages correctly
ok 42 - deleting an empty file
ok 93 - git rebase --apply main with our changes is noop with same HEAD
ok 47 - git add --chmod=+x with symlinks
ok 16 - git_rebase_interactive: added submodule leaves existing empty directory alone
ok 1 - setup
ok 38 - --continue of single revert
ok 5 - git add does not update sparse entries
ok 2 - basic usage
ok 3 - fail with [--[no-]strict]: Tag object length check
ok 48 - git add --chmod=[+-]x changes index with already added file
ok 3 - git_revert: replace tracked file with submodule creates empty directory
ok 4 - setup: Tag object length check
ok 49 - git add --chmod=[+-]x does not change the working tree
ok 43 - adding an empty file
ok 1 - setup
ok 122 - --update-refs adds label and update-ref commands
ok 2 - no encoding header for base case
ok 5 - hash-object & fsck unreachable: Tag object length check
ok 94 - git rebase --apply --no-ff main with our changes is work with same HEAD
ok 6 - git add -f does not update sparse entries
ok 3 - UTF-16 refused because of NULs
ok 44 - split hunk setup
ok 50 - git add --chmod fails with non regular files (but updates the other paths)
ok 6 - update-ref & fsck reachable: Tag object length check
ok 4 - UTF-8 invalid characters refused
ok 39 - --continue after resolving conflicts
ok 45 - goto hunk 1 with "g 1"
ok 5 - UTF-8 overlong sequences rejected
ok 51 - git add --chmod honors --dry-run
ok 7 - for-each-ref: Tag object length check
ok 7 - git add -u does not update sparse entries
ok 95 - git rebase --merge main with our changes is noop with same HEAD
ok 8 - fast-export & fast-import: Tag object length check
ok 6 - UTF-8 non-characters refused
ok 46 - goto hunk 1 with "g1"
ok 52 - git add --chmod --dry-run reports error for non regular files
ok 9 - fail with [--[no-]strict]: "object" line label check
ok 7 - UTF-8 non-characters refused
ok 53 - git add --chmod --dry-run reports error for unmatched pathspec
ok 4 - git_test_func: replace directory with submodule
ok 10 - setup: "object" line label check
ok 47 - navigate to hunk via regex /pattern
ok 8 - ISO8859-1 setup
ok 54 - no file status change if no pathspec is given
ok 56 - index.sparse disabled inline uses full index
ok 11 - hash-object & fsck unreachable: "object" line label check
ok 40 - --continue after resolving conflicts and committing
ok 8 - git add --ignore-removal does not update sparse entries
ok 96 - git rebase --merge --no-ff main with our changes is work with same HEAD
ok 55 - no file status change if no pathspec is given in subdir
ok 48 - navigate to hunk via regex / pattern
ok 9 - eucJP setup
ok 12 - update-ref & fsck reachable: "object" line label check
ok 49 - print again the hunk
ok 10 - ISO-2022-JP setup
ok 13 - for-each-ref: "object" line label check
ok 11 - check encoding header for ISO8859-1
ok 56 - all statuses changed in folder if . is given
ok 12 - check encoding header for eucJP
ok 14 - fast-export & fast-import: "object" line label check
ok 9 - git add --dry-run does not update sparse entries
ok 57 # skip path is case-insensitive (missing CASE_INSENSITIVE_FS)
ok 123 - --update-refs adds commands with --rebase-merges
ok 13 - check encoding header for ISO-2022-JP
# passed all 57 test(s)
1..57
ok 50 # skip print again the hunk (PAGER) (missing TTY)
ok 51 # skip P handles SIGPIPE when writing to pager (missing TTY)
ok 41 - --continue asks for help after resolving patch to nil
ok 97 - git rebase --merge main (rebase.abbreviateCommands = true) with our changes is noop with same HEAD
ok 15 - fail with [--[no-]strict]: "object" line check
ok 14 - config to remove customization
*** t3901-i18n-patch.sh ***
ok 15 - ISO8859-1 should be shown in UTF-8 now
ok 16 - setup: "object" line check
ok 16 - eucJP should be shown in UTF-8 now
ok 52 - split hunk "add -p (edit)"
ok 36 - choking "git rm" should not let it die with cruft (induce and check SIGPIPE)
ok 17 - ISO-2022-JP should be shown in UTF-8 now
ok 17 - hash-object & fsck unreachable: "object" line check
ok 18 - config to add customization
ok 19 - ISO8859-1 should be shown in itself now
ok 53 - split hunk "add -p (no, yes, edit)"
ok 18 - update-ref & fsck reachable: "object" line check
ok 10 - git add --refresh does not update sparse entries
ok 37 - Resolving by removal is not a warning-worthy event
ok 20 - eucJP should be shown in itself now
ok 98 - git rebase --merge --no-ff main (rebase.abbreviateCommands = true) with our changes is work with same HEAD
ok 42 - follow advice and skip nil patch
ok 38 - rm removes subdirectories recursively
ok 21 - ISO-2022-JP should be shown in itself now
ok 22 - config to tweak customization
ok 4 - stable fanout 0 is followed by stable fanout 1
ok 19 - for-each-ref: "object" line check
ok 23 - ISO8859-1 should be shown in UTF-8 now
ok 24 - eucJP should be shown in UTF-8 now
ok 20 - fast-export & fast-import: "object" line check
ok 25 - ISO-2022-JP should be shown in UTF-8 now
ok 21 - fail with [--[no-]strict]: "type" line label check
ok 26 - eucJP should be shown in eucJP now
ok 11 - git add --chmod does not update sparse entries
ok 54 - split hunk with incomplete line at end
ok 27 - ISO-2022-JP should be shown in eucJP now
ok 99 - git rebase --apply --onto B B with our changes is noop with same HEAD
ok 22 - setup: "type" line label check
ok 17 - git_rebase_interactive: replace tracked file with submodule creates empty directory
ok 28 - eucJP should be shown in ISO-2022-JP now
ok 23 - hash-object & fsck unreachable: "type" line label check
ok 29 - ISO-2022-JP should be shown in ISO-2022-JP now
ok 30 - No conversion with ISO8859-1
ok 55 - edit, adding lines to the first hunk
ok 4 - git_revert: replace directory with submodule
ok 31 - No conversion with eucJP
ok 5 - git_test_func: removed submodule leaves submodule directory and its contents in place
ok 24 - update-ref & fsck reachable: "type" line label check
ok 32 - No conversion with ISO-2022-JP
ok 43 - --continue respects opts
ok 12 - git add --renormalize does not update sparse entries
ok 124 - --update-refs updates refs correctly
ok 39 - rm removes empty submodules from work tree
ok 25 - for-each-ref: "type" line label check
ok 24 - update the split index when a racily clean cache entry is stored only in the shared index #2
ok 26 - fast-export & fast-import: "type" line label check
ok 100 - git rebase --apply --no-ff --onto B B with our changes is work with diff HEAD
ok 27 - fail with [--[no-]strict]: "type" line eol check
ok 13 - git add --dry-run --ignore-missing warn on sparse path
ok 28 - setup: "type" line eol check
ok 44 - --continue of single-pick respects -x
ok 29 - hash-object & fsck unreachable: "type" line eol check
ok 1 - setup
ok 14 - do not advice about sparse entries when they do not match the pathspec
ok 101 - git rebase --merge --onto B B with our changes is noop with same HEAD
ok 2 - format-patch output (ISO-8859-1)
ok 30 - update-ref & fsck reachable: "type" line eol check
ok 33 - commit --fixup with eucJP encoding
ok 3 - format-patch output (UTF-8)
ok 31 - for-each-ref: "type" line eol check
ok 45 - --continue respects -x in first commit in multi-pick
ok 15 - do not warn when pathspec matches dense entries
ok 32 - fast-export & fast-import: "type" line eol check
ok 56 - patch mode ignores unmerged entries
ok 40 - rm removes removed submodule from index and .gitmodules
ok 33 - fail with [--[no-]strict]: "tag" line label check #1
ok 102 - git rebase --merge --no-ff --onto B B with our changes is work with diff HEAD
ok 34 - setup: "tag" line label check #1
ok 57 - index is refreshed after applying patch
ok 35 - hash-object & fsck unreachable: "tag" line label check #1
ok 4 - rebase (U/U)
ok 36 - update-ref & fsck reachable: "tag" line label check #1
ok 58 - diffs can be colorized
ok 34 - commit --squash with ISO-2022-JP encoding
not ok 46 - --signoff is automatically propagated to resolved conflict # TODO known breakage
ok 103 - git rebase --merge --onto B B (rebase.abbreviateCommands = true) with our changes is noop with same HEAD
ok 37 - for-each-ref: "tag" line label check #1
ok 38 - fast-export & fast-import: "tag" line label check #1
ok 5 - rebase (U/L)
ok 16 - git add fails outside of sparse-checkout definition
ok 39 - fail with [--[no-]strict]: "tag" line label check #2
ok 6 - git_test_func: removed submodule leaves submodule containing a .git directory alone
ok 5 - git_revert: removed submodule leaves submodule directory and its contents in place
ok 40 - setup: "tag" line label check #2
ok 59 - colors can be overridden
ok 104 - git rebase --merge --no-ff --onto B B (rebase.abbreviateCommands = true) with our changes is work with diff HEAD
ok 41 - hash-object & fsck unreachable: "tag" line label check #2
not ok 47 - --signoff dropped for implicit commit of resolution, multi-pick case # TODO known breakage
ok 35 - commit --fixup into UTF-8 from ISO-8859-1
ok 17 - add obeys advice.updateSparsePath
ok 60 - brackets appear without color
ok 6 - rebase (L/L)
ok 42 - update-ref & fsck reachable: "tag" line label check #2
ok 41 - rm removes work tree of unmodified submodules
ok 18 - git_rebase_interactive: replace directory with submodule
ok 18 - add allows sparse entries with --sparse
ok 125 - respect user edits to update-ref steps
ok 105 - git rebase --apply --onto B... B with our changes is noop with same HEAD
ok 19 - can add files from non-sparse dir
ok 61 - colors can be skipped with color.ui=false
ok 43 - for-each-ref: "tag" line label check #2
ok 44 - fast-export & fast-import: "tag" line label check #2
ok 20 - refuse to add non-skip-worktree file from sparse dir
# passed all 20 test(s)
1..20
ok 45 - fail with [--[no-]strict]: "type" line type-name length check
*** t3902-quoted.sh ***
ok 62 - colorized diffs respect diff.wsErrorHighlight
not ok 48 - sign-off needs to be reaffirmed after conflict resolution, single-pick case # TODO known breakage
ok 46 - setup: "type" line type-name length check
ok 7 - rebase (L/U)
ok 47 - hash-object & fsck unreachable: "type" line type-name length check
ok 36 - commit --squash into ISO-8859-1 from UTF-8
ok 63 - diffFilter filters diff
ok 106 - git rebase --apply --no-ff --onto B... B with our changes is work with diff HEAD
ok 48 - update-ref & fsck reachable: "type" line type-name length check
ok 49 - malformed instruction sheet 1
ok 49 - for-each-ref: "type" line type-name length check
ok 64 - detect bogus diffFilter output
ok 50 - fast-export & fast-import: "type" line type-name length check
ok 8 - cherry-pick(U/U)
ok 51 - fail with [--[no-]strict]: verify object (hash/type) check -- correct type, nonexisting object
ok 126 - --update-refs: all update-ref lines removed
ok 107 - git rebase --merge --onto B... B with our changes is noop with same HEAD
ok 65 - handle iffy colored hunk headers
ok 52 - setup: verify object (hash/type) check -- correct type, nonexisting object
ok 7 - git_test_func: replace submodule with a directory must fail
ok 50 - malformed instruction sheet 2
ok 42 - rm removes a submodule with a trailing /
ok 53 - hash-object & fsck unreachable: verify object (hash/type) check -- correct type, nonexisting object
ok 43 - rm fails when given a file with a trailing /
ok 37 - commit --squash into eucJP from ISO-2022-JP
ok 44 - rm succeeds when given a directory with a trailing /
ok 51 - empty commit set (no commits to walk)
ok 54 - update-ref & fsck reachable: verify object (hash/type) check -- correct type, nonexisting object
ok 52 - empty commit set (culled during walk)
ok 108 - git rebase --merge --no-ff --onto B... B with our changes is work with diff HEAD
ok 9 - cherry-pick(L/L)
ok 55 - for-each-ref: verify object (hash/type) check -- correct type, nonexisting object
ok 1 - setup
ok 2 - setup expected files
ok 3 - check fully quoted output from ls-files
ok 56 - fast-export & fast-import: verify object (hash/type) check -- correct type, nonexisting object
ok 4 - check fully quoted output from diff-files
ok 57 - fail with [--[no-]strict]: verify object (hash/type) check -- made-up type, valid object
ok 5 - check fully quoted output from diff-index
ok 6 - check fully quoted output from diff-tree
ok 6 - git_revert: removed submodule leaves submodule containing a .git directory alone
ok 58 - setup: verify object (hash/type) check -- made-up type, valid object
ok 7 - check fully quoted output from ls-tree
ok 109 - git rebase --merge --onto B... B (rebase.abbreviateCommands = true) with our changes is noop with same HEAD
ok 8 - setting core.quotepath
ok 53 - malformed instruction sheet 3
ok 59 - hash-object & fsck unreachable: verify object (hash/type) check -- made-up type, valid object
ok 9 - check fully quoted output from ls-files
ok 10 - check fully quoted output from diff-files
ok 38 - commit --fixup into ISO-2022-JP from UTF-8
# passed all 38 test(s)
1..38
ok 11 - check fully quoted output from diff-index
ok 12 - check fully quoted output from diff-tree
ok 10 - cherry-pick(U/L)
*** t3903-stash.sh ***
ok 13 - check fully quoted output from ls-tree
ok 60 - update-ref & fsck reachable: verify object (hash/type) check -- made-up type, valid object
# passed all 13 test(s)
1..13
ok 66 - handle very large filtered diff
ok 19 - git_rebase_interactive: removed submodule leaves submodule directory and its contents in place
ok 127 - --update-refs: all update-ref lines removed, then some re-added
*** t3904-stash-patch.sh ***
ok 61 - for-each-ref: verify object (hash/type) check -- made-up type, valid object
ok 67 - diff.algorithm is passed to `git diff-files`
ok 62 - fast-export & fast-import: verify object (hash/type) check -- made-up type, valid object
ok 54 - instruction sheet, fat-fingers version
ok 63 - fail with [--[no-]strict]: verify object (hash/type) check -- made-up type, nonexisting object
ok 110 - git rebase --merge --no-ff --onto B... B (rebase.abbreviateCommands = true) with our changes is work with diff HEAD
ok 68 - patch-mode via -i prompts for files
ok 64 - setup: verify object (hash/type) check -- made-up type, nonexisting object
ok 11 - cherry-pick(L/U)
ok 65 - hash-object & fsck unreachable: verify object (hash/type) check -- made-up type, nonexisting object
ok 45 - rm of a populated submodule with different HEAD fails unless forced
ok 66 - update-ref & fsck reachable: verify object (hash/type) check -- made-up type, nonexisting object
ok 111 - git rebase --apply --onto main... main with our changes is noop with same HEAD
ok 8 - git_test_func: replace submodule containing a .git directory with a directory must fail
ok 69 - add -p handles globs
ok 12 - rebase --merge (U/U)
ok 55 - commit descriptions in insn sheet are optional
# still have 3 known breakage(s)
# passed all remaining 52 test(s)
1..55
ok 67 - for-each-ref: verify object (hash/type) check -- made-up type, nonexisting object
ok 68 - fast-export & fast-import: verify object (hash/type) check -- made-up type, nonexisting object
*** t3905-stash-include-untracked.sh ***
ok 1 - usage on cmd and subcommand invalid option
ok 69 - fail with [--[no-]strict]: verify object (hash/type) check -- mismatched type, valid object
ok 2 - usage on main command -h emits a summary of subcommands
ok 70 - add -p handles relative paths
ok 3 - usage for subcommands should emit subcommand usage
ok 70 - setup: verify object (hash/type) check -- mismatched type, valid object
ok 13 - rebase --merge (U/L)
ok 112 - git rebase --apply --no-ff --onto main... main with our changes is work with same HEAD
ok 71 - hash-object & fsck unreachable: verify object (hash/type) check -- mismatched type, valid object
ok 7 - git_revert: replace submodule with a directory must fail
ok 71 - add -p does not expand argument lists
ok 128 - --update-refs: --edit-todo with no update-ref lines
ok 1 - setup
ok 72 - update-ref & fsck reachable: verify object (hash/type) check -- mismatched type, valid object
ok 4 - stash some dirty working directory
ok 57 - sparse-index is not expanded
ok 46 - rm --cached leaves work tree of populated submodules and .gitmodules alone
ok 73 - for-each-ref: verify object (hash/type) check -- mismatched type, valid object
ok 113 - git rebase --merge --onto main... main with our changes is noop with same HEAD
ok 5 - parents of stash
ok 14 - rebase --merge (L/L)
ok 72 - hunk-editing handles custom comment char
ok 6 - applying bogus stash does nothing
ok 74 - fast-export & fast-import: verify object (hash/type) check -- mismatched type, valid object
ok 75 - setup replacement of commit -> commit and tree -> blob
ok 7 - apply does not need clean working directory
ok 2 - saying "n" does nothing
ok 8 - apply does not clobber working directory changes
ok 73 - add -p works even with color.ui=always
ok 15 - rebase --merge (L/U)
ok 114 - git rebase --merge --no-ff --onto main... main with our changes is work with same HEAD
ok 76 - tag to a commit replaced by another commit
not ok 9 - git_test_func: replace submodule with a file must fail # TODO known breakage
ok 129 - --update-refs: check failed ref update
ok 9 - apply stashed changes
ok 77 - fail with [--[no-]strict]: verify object (hash/type) check -- mismatched type, valid object
ok 20 - git_rebase_interactive: removed submodule leaves submodule containing a .git directory alone
ok 16 - am (U/U)
ok 78 - setup: verify object (hash/type) check -- mismatched type, valid object
ok 1 - stash save --include-untracked some dirty working directory
ok 79 - hash-object & fsck unreachable: verify object (hash/type) check -- mismatched type, valid object
ok 115 - git rebase --merge --onto main... main (rebase.abbreviateCommands = true) with our changes is noop with same HEAD
ok 2 - stash save --include-untracked cleaned the untracked files
ok 130 - bad labels and refs rejected when parsing todo list
ok 80 - update-ref & fsck reachable: verify object (hash/type) check -- mismatched type, valid object
ok 3 - git stash -p
ok 47 - rm --dry-run does not touch the submodule or .gitmodules
ok 10 - apply stashed changes (including index)
ok 3 - stash save --include-untracked stashed the untracked files
ok 17 - am (L/L)
ok 4 - stash save --patch --include-untracked fails
ok 5 - stash save --patch --all fails
ok 81 - for-each-ref: verify object (hash/type) check -- mismatched type, valid object
ok 6 - clean up untracked/untracked file to prepare for next tests
ok 11 - unstashing in a subdirectory
ok 12 - stash drop complains of extra options
ok 82 - fast-export & fast-import: verify object (hash/type) check -- mismatched type, valid object
ok 83 - fail with [--[no-]strict]: verify tag-name check
ok 116 - git rebase --merge --no-ff --onto main... main (rebase.abbreviateCommands = true) with our changes is work with same HEAD
ok 18 - am (U/L)
ok 7 - stash pop after save --include-untracked leaves files untracked again
ok 84 - setup: verify tag-name check
ok 8 - clean up untracked/ directory to prepare for next tests
ok 131 - non-merge commands reject merge commits
ok 85 - hash-object & fsck unreachable: verify tag-name check
ok 132 - $EDITOR and friends are unchanged
ok 74 - setup different kinds of dirty submodules
# passed all 132 test(s)
1..132
ok 8 - git_revert: replace submodule containing a .git directory with a directory must fail
ok 9 - stash save -u dirty index
ok 75 - status ignores dirty submodules (except HEAD)
ok 19 - am --no-utf8 (U/L)
ok 117 - git rebase --apply --keep-base main with our changes is noop with same HEAD
ok 86 - update-ref & fsck reachable: verify tag-name check
ok 13 - drop top stash
*** t3906-stash-submodule.sh ***
ok 87 - for-each-ref: verify tag-name check
ok 76 - handle submodules
ok 88 - fast-export & fast-import: verify tag-name check
ok 89 - fail with [--[no-]strict]: "tagger" line label check #1
ok 4 - git stash -p --no-keep-index
ok 10 - stash save --include-untracked dirty index got stashed
ok 58 - sparse-index is not expanded: merge conflict in cone
ok 20 - am (L/U)
not ok 10 - git_test_func: replace submodule containing a .git directory with a file must fail # TODO known breakage
# passed all 20 test(s)
1..20
ok 48 - rm does not complain when no .gitmodules file is found
ok 90 - setup: "tagger" line label check #1
ok 118 - git rebase --apply --no-ff --keep-base main with our changes is work with same HEAD
ok 77 - set up pathological context
*** t3907-stash-show-config.sh ***
ok 91 - hash-object & fsck unreachable: "tagger" line label check #1
ok 11 - stash save --include-untracked -q is quiet
ok 78 - add -p works with pathological context lines
ok 92 - update-ref & fsck reachable: "tagger" line label check #1
ok 12 - stash save --include-untracked removed files
ok 119 - git rebase --merge --keep-base main with our changes is noop with same HEAD
ok 14 - drop middle stash
ok 93 - for-each-ref: "tagger" line label check #1
ok 13 - stash save --include-untracked removed files got stashed
ok 79 - add -p patch editing works with pathological context lines
ok 94 - fast-export & fast-import: "tagger" line label check #1
ok 95 - fail with [--[no-]strict]: "tagger" line label check #2
ok 80 - checkout -p works with pathological context lines
ok 21 - git_rebase_interactive: replace submodule with a directory must fail
ok 96 - setup: "tagger" line label check #2
ok 14 - stash save --include-untracked respects .gitignore
ok 97 - hash-object & fsck unreachable: "tagger" line label check #2
ok 120 - git rebase --merge --no-ff --keep-base main with our changes is work with same HEAD
not ok 9 - git_revert: replace submodule with a file must fail # TODO known breakage
ok 15 - stash save -u can stash with only untracked files different
ok 5 - git stash --no-keep-index -p
ok 81 - add -N followed by add -p patch editing
ok 16 - stash save --all does not respect .gitignore
ok 98 - update-ref & fsck reachable: "tagger" line label check #2
ok 1 - setup
ok 17 - stash save --all is stash poppable
ok 99 - for-each-ref: "tagger" line label check #2
ok 121 - git rebase --merge --keep-base main (rebase.abbreviateCommands = true) with our changes is noop with same HEAD
ok 15 - drop middle stash by index
ok 100 - fast-export & fast-import: "tagger" line label check #2
ok 6 - stash -p --no-keep-index -- <pathspec> does not unstage other files
ok 7 - none of this moved HEAD
ok 82 - checkout -p patch editing of added file
ok 2 - showStat unset showPatch unset
ok 49 - rm will error out on a modified .gitmodules file unless staged
ok 16 - drop stash reflog updates refs/stash
ok 18 - stash push --include-untracked with pathspec
ok 83 - show help from add--helper
ok 101 - allow missing tag author name
ok 122 - git rebase --merge --no-ff --keep-base main (rebase.abbreviateCommands = true) with our changes is work with same HEAD
ok 102 - fail with [--[no-]strict]: disallow malformed tagger
ok 8 - stash -p with split hunk
ok 3 - showStat unset showPatch false
# passed all 8 test(s)
1..8
*** t3908-stash-in-worktree.sh ***
ok 103 - setup: disallow malformed tagger
ok 104 - hash-object & fsck unreachable: disallow malformed tagger
ok 19 - stash push with $IFS character
ok 123 - git rebase --apply --keep-base with our changes is noop with same HEAD
ok 4 - showStat unset showPatch true
ok 11 - git_test_func: modified submodule does not update submodule work tree
ok 105 - update-ref & fsck reachable: disallow malformed tagger
ok 106 - for-each-ref: disallow malformed tagger
ok 17 - drop stash reflog updates refs/stash with rewrite
ok 84 - reset -p with unmerged files
ok 5 - showStat false showPatch unset
ok 107 - fast-export & fast-import: disallow malformed tagger
not ok 10 - git_revert: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 124 - git rebase --apply --no-ff --keep-base with our changes is work with same HEAD
ok 18 - stash pop
ok 20 - stash previously ignored file
ok 50 - rm will not error out on .gitmodules file with zero stat data
ok 6 - showStat false showPatch false
ok 85 - hunk splitting works with diff.suppressBlankEmpty
# passed all 85 test(s)
1..85
ok 108 - allow empty tag email
ok 21 - stash -u -- <untracked> doesnt print error
ok 125 - git rebase --merge --keep-base with our changes is noop with same HEAD
*** t3909-stash-pathspec-file.sh ***
ok 7 - showStat false showPatch true
ok 22 - stash -u -- <untracked> leaves rest of working tree in place
ok 1 - setup
ok 109 - allow spaces in tag email like fsck
ok 22 - git_rebase_interactive: replace submodule containing a .git directory with a directory must fail
ok 110 - fail with [--[no-]strict]: disallow missing tag timestamp
ok 126 - git rebase --merge --no-ff --keep-base with our changes is work with same HEAD
ok 23 - stash -u -- <tracked> <untracked> clears changes in both
ok 8 - showStat true showPatch unset
ok 111 - setup: disallow missing tag timestamp
ok 1891 - matching does not exhibit exponential behavior
ok 2 - apply in subdirectory
# still have 40 known breakage(s)
# passed all remaining 1851 test(s)
1..1891
# passed all 2 test(s)
1..2
*** t3910-mac-os-precompose.sh ***
ok 112 - hash-object & fsck unreachable: disallow missing tag timestamp
*** t3920-crlf-messages.sh ***
ok 24 - stash --all -- <ignored> stashes ignored file
ok 9 - showStat true showPatch false
ok 59 - sparse-index is not expanded: stash
ok 113 - update-ref & fsck reachable: disallow missing tag timestamp
ok 19 - stash branch
ok 127 - git rebase --merge --keep-base (rebase.abbreviateCommands = true) with our changes is noop with same HEAD
ok 25 - stash --all -- <tracked> <ignored> clears changes in both
ok 114 - for-each-ref: disallow missing tag timestamp
ok 26 - stash -u -- <ignored> leaves ignored file alone
ok 27 - stash -u -- <non-existent> shows no changes when there are none
ok 115 - fast-export & fast-import: disallow missing tag timestamp
ok 1 - setup
ok 20 - apply -q is quiet
ok 51 - rm issues a warning when section is not found in .gitmodules
ok 116 - fail with [--[no-]strict]: detect invalid tag timestamp1
ok 10 - showStat true showPatch true
# passed all 10 test(s)
1..10
ok 5 - deleting most notes with git-notes
*** t4000-diff-format.sh ***
ok 117 - setup: detect invalid tag timestamp1
ok 28 - stash -u with globs
ok 118 - hash-object & fsck unreachable: detect invalid tag timestamp1
ok 2 - simplest
ok 128 - git rebase --merge --no-ff --keep-base (rebase.abbreviateCommands = true) with our changes is work with same HEAD
ok 6 - most notes deleted correctly with git-notes
ok 21 - apply --index -q is quiet
ok 119 - update-ref & fsck reachable: detect invalid tag timestamp1
ok 22 - save -q is quiet
ok 120 - for-each-ref: detect invalid tag timestamp1
ok 3 - --pathspec-file-nul
ok 23 - pop -q works and is quiet
1..0 # SKIP filesystem does not corrupt utf-8
ok 12 - git_test_func: modified submodule does not update submodule work tree to invalid commit
*** t4001-diff-rename.sh ***
ok 25 - update the split index when a racily clean cache entry is stored only in the shared index #3
ok 121 - fast-export & fast-import: detect invalid tag timestamp1
ok 129 - git rebase --apply --no-fork-point with our changes is noop with same HEAD
ok 122 - fail with [--[no-]strict]: detect invalid tag timestamp2
ok 11 - git_revert: modified submodule does not update submodule work tree
ok 123 - setup: detect invalid tag timestamp2
ok 4 - only touches what was listed
ok 124 - hash-object & fsck unreachable: detect invalid tag timestamp2
ok 24 - pop -q --index works and is quiet
ok 29 - stash show --include-untracked shows untracked files
ok 5 - error conditions
# passed all 5 test(s)
1..5
ok 125 - update-ref & fsck reachable: detect invalid tag timestamp2
ok 1 - update-index --add two files with and without +x.
ok 130 - git rebase --apply --no-ff --no-fork-point with our changes is work with same HEAD
*** t4002-diff-basic.sh ***
ok 25 - drop -q is quiet
ok 2 - git diff-files -p after editing work tree.
ok 126 - for-each-ref: detect invalid tag timestamp2
not ok 23 - git_rebase_interactive: replace submodule with a file must fail # TODO known breakage
ok 3 - validate git diff-files -p output.
ok 127 - fast-export & fast-import: detect invalid tag timestamp2
ok 4 - git diff-files -s after editing work tree
ok 5 - git diff-files --no-patch as synonym for -s
ok 26 - stash push -q --staged refreshes the index
ok 128 - fail with [--[no-]strict]: detect invalid tag timezone1
ok 1 - Setup refs with commit and tag messages using CRLF
ok 6 - git diff-files --no-patch --patch shows the patch
ok 131 - git rebase --merge --no-fork-point with our changes is noop with same HEAD
ok 30 - stash show --only-untracked only shows untracked files
ok 129 - setup: detect invalid tag timezone1
ok 130 - hash-object & fsck unreachable: detect invalid tag timezone1
ok 7 - git diff-files --no-patch --patch-with-raw shows the patch and raw data
ok 2 - branch: --verbose works with messages using CRLF
ok 8 - git diff-files --patch --no-patch does not show the patch
ok 52 - rm of a populated submodule with modifications fails unless forced
ok 1 - setup
ok 2 - update-index --add a file.
ok 9 - --no-patch in 'git diff-files --no-patch --stat' is a no-op
ok 3 - branch: --format='%(contents:subject)' works with messages using CRLF
ok 3 - write that tree.
ok 131 - update-ref & fsck reachable: detect invalid tag timezone1
ok 60 - describe tested on all
ok 4 - renamed and edited the file.
ok 10 - --no-patch clears all previous ones
ok 5 - git diff-index -p -M after rename and editing.
ok 4 - branch: --format='%(contents:body)' works with messages using CRLF
ok 27 - stash apply -q --index refreshes the index
ok 11 - --no-patch in 'git diff --no-patch --stat' is a no-op
ok 6 - validate the output.
ok 31 - stash show --no-include-untracked cancels --{include,only}-untracked
ok 132 - for-each-ref: detect invalid tag timezone1
ok 12 - --no-patch in 'git diff-files --no-patch --raw' is a no-op
ok 132 - git rebase --merge --no-ff --no-fork-point with our changes is work with same HEAD
ok 5 - branch: --format='%(contents)' works with messages using CRLF
ok 7 - test diff.renames=true
ok 133 - fast-export & fast-import: detect invalid tag timezone1
ok 13 - --no-patch clears all previous ones
ok 6 - tag: --format='%(contents:subject)' works with messages using CRLF
ok 14 - --no-patch in 'git diff --no-patch --raw' is a no-op
ok 134 - fail with [--[no-]strict]: detect invalid tag timezone2
ok 8 - test diff.renames=false
ok 1 - adding test file NN and Z/NN
ok 28 - stash -k
ok 7 - tag: --format='%(contents:body)' works with messages using CRLF
ok 15 - --no-patch in 'git diff-files --no-patch --numstat' is a no-op
ok 2 - adding test file ND and Z/ND
ok 135 - setup: detect invalid tag timezone2
ok 9 - test diff.renames unset
ok 32 - stash show --include-untracked errors on duplicate files
ok 3 - adding test file NM and Z/NM
ok 16 - --no-patch clears all previous ones
ok 136 - hash-object & fsck unreachable: detect invalid tag timezone2
ok 8 - tag: --format='%(contents)' works with messages using CRLF
ok 133 - git rebase --merge --no-fork-point (rebase.abbreviateCommands = true) with our changes is noop with same HEAD
ok 4 - adding test file DN and Z/DN
ok 17 - --no-patch in 'git diff --no-patch --numstat' is a no-op
ok 29 - stash --no-keep-index
ok 9 - for-each-ref: --format='%(contents:subject)' works with messages using CRLF
ok 5 - adding test file DD and Z/DD
ok 18 - --no-patch in 'git diff-files --no-patch --shortstat' is a no-op
ok 10 - favour same basenames over different ones
ok 137 - update-ref & fsck reachable: detect invalid tag timezone2
ok 6 - adding test file DM and Z/DM
ok 11 - test diff.renames=true for git status
ok 13 - git_test_func: modified submodule does not update submodule work tree from invalid commit
ok 10 - for-each-ref: --format='%(contents:body)' works with messages using CRLF
ok 19 - --no-patch clears all previous ones
ok 7 - adding test file MN and Z/MN
ok 138 - for-each-ref: detect invalid tag timezone2
ok 12 - test diff.renames=false for git status
ok 20 - --no-patch in 'git diff --no-patch --shortstat' is a no-op
ok 8 - adding test file MD and Z/MD
ok 33 - stash show --{include,only}-untracked on stashes without untracked entries
ok 11 - for-each-ref: --format='%(contents)' works with messages using CRLF
ok 13 - favour same basenames even with minor differences
ok 21 - --no-patch in 'git diff-files --no-patch --summary' is a no-op
ok 9 - adding test file MM and Z/MM
ok 139 - fast-export & fast-import: detect invalid tag timezone2
ok 10 - adding test file SS
ok 30 - stash --staged
ok 22 - --no-patch clears all previous ones
ok 11 - adding test file TT
ok 12 - prepare initial tree
ok 23 - --no-patch in 'git diff --no-patch --summary' is a no-op
ok 34 - stash -u ignores sub-repository
ok 134 - git rebase --merge --no-ff --no-fork-point (rebase.abbreviateCommands = true) with our changes is work with same HEAD
ok 13 - change in branch A (removal)
# passed all 34 test(s)
1..34
ok 24 - --no-patch in 'git diff-files --no-patch --dirstat' is a no-op
ok 14 - change in branch A (modification)
ok 14 - two files with same basename and same content
ok 15 - change in branch A (modification)
*** t4003-diff-rename-1.sh ***
ok 16 - change in branch A (modification)
ok 25 - --no-patch clears all previous ones
ok 17 - change in branch A (modification)
ok 31 - stash --staged with binary file
ok 140 - allow invalid tag timezone
ok 18 - change in branch A (modification)
ok 26 - --no-patch in 'git diff --no-patch --dirstat' is a no-op
ok 32 - dont assume push with non-option args
ok 19 - change in branch A (modification)
ok 141 - fail with [--[no-]strict]: detect invalid header entry
ok 20 - change in branch A (addition)
ok 27 - --no-patch in 'git diff-files --no-patch --cumulative' is a no-op
ok 21 - change in branch A (addition)
ok 33 - stash --invalid-option
ok 22 - change in branch A (addition)
ok 142 - setup: detect invalid header entry
ok 135 - git rebase --apply --keep-base --no-fork-point with our changes is noop with same HEAD
ok 28 - --no-patch clears all previous ones
ok 12 - log: --oneline works with messages using CRLF
ok 23 - change in branch A (addition)
ok 14 - git_test_func: added submodule doesn't remove untracked unignored file with same name
ok 53 - rm of a populated submodule with untracked files fails unless forced
not ok 24 - git_rebase_interactive: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 29 - --no-patch in 'git diff --no-patch --cumulative' is a no-op
ok 143 - hash-object & fsck unreachable: detect invalid header entry
ok 24 - change in branch A (addition)
ok 12 - git_revert: modified submodule does not update submodule work tree to invalid commit
ok 13 - log: --format='%s' works with messages using CRLF
ok 30 - --no-patch in 'git diff-files --no-patch --dirstat-by-file' is a no-op
ok 25 - change in branch A (edit)
ok 31 - --no-patch clears all previous ones
ok 15 - setup for many rename source candidates
ok 14 - log: --format='%b' works with messages using CRLF
ok 26 - change in branch A (change file to directory)
ok 61 - sparse-index is not expanded: describe
ok 34 - stash an added file
ok 27 - recording branch A tree
ok 144 - update-ref & fsck reachable: detect invalid header entry
ok 32 - --no-patch in 'git diff --no-patch --dirstat-by-file' is a no-op
ok 15 - log: --format='%B' works with messages using CRLF
ok 28 - reading original tree and checking out
ok 33 - --no-patch in 'git diff-files --no-patch --patch-with-raw' is a no-op
ok 29 - change in branch B (removal)
ok 30 - change in branch B (modification)
ok 16 - show: --format='%s' works with messages using CRLF
ok 35 - stash --intent-to-add file
ok 145 - for-each-ref: detect invalid header entry
ok 34 - --no-patch clears all previous ones
ok 136 - git rebase --apply --no-ff --keep-base --no-fork-point with our changes is work with same HEAD
ok 31 - change in branch B (modification)
ok 32 - change in branch B (modification)
ok 35 - --no-patch in 'git diff --no-patch --patch-with-raw' is a no-op
ok 146 - fast-export & fast-import: detect invalid header entry
ok 33 - change in branch B (modification)
ok 17 - show: --format='%b' works with messages using CRLF
ok 34 - change in branch B (modification)
ok 36 - --no-patch in 'git diff-files --no-patch --patch-with-stat' is a no-op
ok 35 - change in branch B (modification)
ok 36 - change in branch B (addition)
ok 18 - show: --format='%B' works with messages using CRLF
ok 37 - --no-patch clears all previous ones
# passed all 18 test(s)
1..18
ok 37 - change in branch B (addition)
ok 1 - prepare reference tree
ok 38 - change in branch B (addition)
ok 16 - rename pretty print with nothing in common
*** t4004-diff-rename-symlink.sh ***
ok 38 - --no-patch in 'git diff --no-patch --patch-with-stat' is a no-op
ok 39 - change in branch B (addition)
ok 2 - prepare work tree
ok 36 - stash rm then recreate
ok 137 - git rebase --merge --keep-base --no-fork-point with our changes is noop with same HEAD
ok 39 - --no-patch in 'git diff-files --no-patch --compact-summary' is a no-op
ok 40 - change in branch B (addition and modification)
ok 3 - validate output from rename/copy detection (#1)
ok 40 - --no-patch clears all previous ones
ok 4 - prepare work tree again
ok 41 - change in branch B (modification)
ok 147 - invalid header entry config & fsck
ok 42 - change in branch B (addition of a file to conflict with directory)
ok 43 - recording branch B tree
ok 17 - rename pretty print with common prefix
ok 41 - --no-patch in 'git diff --no-patch --compact-summary' is a no-op
# passed all 41 test(s)
1..41
ok 5 - validate output from rename/copy detection (#2)
*** t4005-diff-rename-2.sh ***
ok 6 - prepare work tree once again
ok 37 - stash rm and ignore
ok 7 - validate output from rename/copy detection (#3)
# passed all 7 test(s)
1..7
ok 18 - rename pretty print with common suffix
*** t4006-diff-mode.sh ***
ok 138 - git rebase --merge --no-ff --keep-base --no-fork-point with our changes is work with same HEAD
ok 148 - allow extra newlines at start of body
ok 44 - keep contents of 3 trees for easy access
ok 19 - rename pretty print with common prefix and suffix
ok 38 - stash rm and ignore (stage .gitignore)
ok 149 - allow a blank line before an empty body (1)
ok 54 - setup submodule conflict
ok 139 - git rebase --merge --keep-base --no-fork-point (rebase.abbreviateCommands = true) with our changes is noop with same HEAD
ok 20 - rename pretty print common prefix and suffix overlap
ok 1 - prepare reference tree
ok 15 - unrelated submodule/file conflict is ignored
# still have 2 known breakage(s)
# passed all remaining 13 test(s)
1..15
ok 2 - prepare work tree
ok 39 - stash file to symlink
ok 3 - setup diff output
ok 150 - allow no blank line before an empty body (2)
*** t4007-rename-3.sh ***
ok 4 - validate diff output
# passed all 4 test(s)
1..4
*** t4008-diff-break-rewrite.sh ***
ok 21 - diff-tree -l0 defaults to a big rename limit, not zero
ok 1 - setup
ok 140 - git rebase --merge --no-ff --keep-base --no-fork-point (rebase.abbreviateCommands = true) with our changes is work with same HEAD
ok 1 - setup reference tree
ok 13 - git_revert: modified submodule does not update submodule work tree from invalid commit
ok 2 - chmod
ok 40 - stash file to symlink (stage rm)
ok 2 - validate output from rename/copy detection (#1)
ok 151 - create valid tag object
# passed all 151 test(s)
1..151
ok 3 - prepare binary file
*** t4009-diff-rename-4.sh ***
ok 3 - validate output from rename/copy detection (#2)
ok 141 - git rebase --apply --fork-point main with our changes is noop with same HEAD
ok 4 - --stat output after text chmod
ok 22 - basename similarity vs best similarity
ok 5 - --shortstat output after text chmod
ok 41 - stash file to symlink (full stage)
ok 4 - validate output from rename/copy detection (#3)
# passed all 4 test(s)
1..4
ok 25 - git_rebase_interactive: modified submodule does not update submodule work tree
*** t4010-diff-pathspec.sh ***
ok 6 - --stat output after binary chmod
ok 7 - --shortstat output after binary chmod
# passed all 7 test(s)
1..7
*** t4011-diff-symlink.sh ***
ok 55 - rm removes work tree of unmodified conflicted submodule
ok 142 - git rebase --apply --no-ff --fork-point main with our changes is work with same HEAD
ok 42 - stash symlink to file
ok 23 - last line matters too
ok 43 - this must have re-created the symlink
# passed all 23 test(s)
1..23
ok 14 - git_revert: added submodule doesn't remove untracked unignored file with same name
# still have 2 known breakage(s)
# passed all remaining 12 test(s)
1..14
ok 1 - prepare reference tree
ok 44 - unstash must re-create the file
ok 2 - prepare work tree
*** t4012-diff-binary.sh ***
ok 1 - git_stash: added submodule creates empty directory
ok 1 - setup
ok 3 - copy detection
ok 2 - change file1 with copy-edit of file0 and remove file0
*** t4013-diff-various.sh ***
ok 4 - copy detection, cached
ok 143 - git rebase --merge --fork-point main with our changes is noop with same HEAD
ok 3 - run diff with -B (#1)
ok 45 - stash symlink to file (stage rm)
ok 46 - this must have re-created the symlink
ok 5 - copy, limited to a subtree
ok 6 - tweak work tree
ok 4 - run diff with -B and -M (#2)
ok 1 - prepare reference tree
ok 47 - unstash must re-create the file
ok 7 - rename detection
ok 5 - swap file0 and file1
ok 2 - prepare work tree
ok 8 - rename, limited to a subtree
# passed all 8 test(s)
1..8
*** t4014-format-patch.sh ***
ok 6 - run diff with -B (#3)
ok 48 - stash symlink to file (full stage)
ok 3 - validate output from rename/copy detection (#1)
ok 49 - this must have re-created the symlink
ok 1 - setup
ok 4 - prepare work tree again
ok 7 - run diff with -B and -M (#4)
ok 144 - git rebase --merge --no-ff --fork-point main with our changes is work with same HEAD
ok 45 - diff-tree of known trees.
ok 50 - unstash must re-create the file
ok 2 - limit to path should show nothing
ok 46 - diff-tree of known trees.
ok 5 - validate output from rename/copy detection (#2)
ok 47 - diff-tree of known trees.
ok 8 - make file0 into something completely different
ok 3 - limit to path1 should show path1/file1
ok 48 - diff-tree of known trees.
ok 6 - prepare work tree once again
ok 49 - diff-tree of known trees.
ok 9 - run diff with -B (#5)
ok 1 - prepare repository
ok 50 - diff-tree of known trees.
not ok 2 - git_stash: added submodule leaves existing empty directory alone # TODO known breakage
ok 1 - diff new symlink and file
ok 7 - validate output from rename/copy detection (#3)
ok 4 - limit to path1/ should show path1/file1
# passed all 7 test(s)
1..7
ok 51 - diff-tree --stdin of known trees.
ok 2 - apply --stat output for binary file change
ok 10 - run diff with -B -M (#6)
ok 2 - diff unchanged symlink and file
*** t4015-diff-whitespace.sh ***
ok 5 - "*file1" should show path1/file1
ok 52 - diff-tree --stdin of known trees.
ok 145 - git rebase --merge --fork-point main (rebase.abbreviateCommands = true) with our changes is noop with same HEAD
ok 3 - diff --shortstat output for binary file change
ok 11 - run diff with -M (#7)
ok 4 - diff --shortstat output for binary file change only
not ok 51 - stash directory to file # TODO known breakage
ok 53 - diff-cache O with A in cache
ok 6 - limit to file0 should show file0
ok 3 - diff removed symlink and file
ok 5 - apply --numstat notices binary file change
ok 56 - rm of a conflicted populated submodule with different HEAD fails unless forced
ok 54 - diff-cache O with B in cache
ok 7 - limit to file0/ should emit nothing.
ok 6 - apply --numstat understands diff --binary format
ok 12 - file1 edited to look like file0 and file0 rename-edited to file2
ok 55 - diff-cache A with B in cache
ok 8 - diff-tree pathspec
ok 4 - diff identical, but newly created symlink and file
ok 9 - diff-tree with wildcard shows dir also matches
ok 13 - run diff with -B (#8)
not ok 52 - stash file to directory # TODO known breakage
ok 7 - apply detecting corrupt patch correctly
ok 10 - diff-tree -r with wildcard
ok 14 - run diff with -B -C (#9)
ok 11 - diff-tree with wildcard shows dir also matches
# passed all 14 test(s)
1..14
ok 8 - apply detecting corrupt patch correctly
*** t4016-diff-quote.sh ***
ok 56 - diff-files with O in cache and A checked out
ok 12 - diff-tree -r with wildcard from beginning
ok 5 - diff different symlink and file
ok 146 - git rebase --merge --no-ff --fork-point main (rebase.abbreviateCommands = true) with our changes is work with same HEAD
ok 9 - initial commit
ok 13 - diff-tree -r with wildcard
ok 6 - diff symlinks with non-existing targets
ok 7 - setup symlinks with attributes
ok 10 - diff-index with --binary
ok 57 - diff-files with O in cache and B checked out
ok 11 - apply binary patch
ok 8 - symlinks do not respect userdiff config by path
ok 53 - giving too many ref arguments does not modify files
# passed all 8 test(s)
1..8
ok 147 - git rebase --apply --fork-point --onto B B with our changes is noop with same HEAD
not ok 3 - git_stash: replace tracked file with submodule creates empty directory # TODO known breakage
*** t4017-diff-retval.sh ***
ok 1 - status with --patch (different)
ok 12 - diff --no-index with binary creation
ok 54 - drop: too many arguments errors out (does nothing)
ok 58 - diff-files with A in cache and B checked out
ok 55 - show: too many arguments errors out (does nothing)
ok 2 - status with --patch (mode differs)
ok 14 - setup submodules
ok 59 - diff-tree O A == diff-tree -R A O
ok 3 - status with --patch (removing an empty file)
ok 60 - diff-tree -r O A == diff-tree -r -R A O
ok 56 - stash create - no changes
ok 26 - git_rebase_interactive: modified submodule does not update submodule work tree to invalid commit
ok 15 - diff-tree ignores trailing slash on submodule path
ok 4 - status with --patch (different but equivalent)
ok 61 - diff-tree B A == diff-tree -R A B
ok 5 - status with --quiet (different)
ok 62 - diff-tree -r B A == diff-tree -r -R A B
ok 16 - diff multiple wildcard pathspecs
ok 148 - git rebase --apply --no-ff --fork-point --onto B B with our changes is work with diff HEAD
ok 6 - status with --quiet (mode differs)
ok 63 - diff can read from stdin
# passed all 63 test(s)
1..63
ok 7 - status with --quiet (removing an empty file)
ok 17 - diff-cache ignores trailing slash on submodule path
ok 8 - status with --quiet (different but equivalent)
*** t4018-diff-funcname.sh ***
# passed all 17 test(s)
1..17
ok 9 - status with -s (different)
*** t4019-diff-wserror.sh ***
ok 1 - setup
ok 2 - setup expected files
ok 1 - setup
ok 3 - git diff --summary -M HEAD
ok 13 - diff --stat with binary files and big change count
# passed all 13 test(s)
1..13
ok 149 - git rebase --merge --fork-point --onto B B with our changes is noop with same HEAD
ok 2 - format-patch --ignore-if-in-upstream
ok 10 - status with -s (mode differs)
ok 4 - git diff --numstat -M HEAD
ok 62 - sparse index is not expanded: diff and diff-index
ok 57 - stash branch - no stashes on stack, stash-like argument
*** t4020-diff-external.sh ***
ok 3 - format-patch --ignore-if-in-upstream
ok 5 - git diff --stat -M HEAD
ok 11 - status with -s (removing an empty file)
# passed all 5 test(s)
1..5
ok 12 - status with -s (different but equivalent)
ok 57 - rm of a conflicted populated submodule with modifications fails unless forced
*** t4021-format-patch-numbered.sh ***
ok 13 - status with --stat (different)
ok 4 - format-patch --ignore-if-in-upstream handles tags
not ok 4 - git_stash: replace directory with submodule # TODO known breakage
ok 14 - status with --stat (mode differs)
ok 1 - setup
ok 150 - git rebase --merge --no-ff --fork-point --onto B B with our changes is work with diff HEAD
ok 1 - setup
ok 2 - git diff --quiet -w  HEAD^^ HEAD^
ok 15 - status with --stat (removing an empty file)
ok 3 - git diff --quiet HEAD^^ HEAD^
ok 16 - status with --stat (different but equivalent)
ok 4 - git diff --quiet -w  HEAD^ HEAD
ok 5 - git diff-tree HEAD^ HEAD
ok 6 - git diff-tree HEAD^ HEAD -- a
ok 17 - status with --shortstat (different)
ok 7 - git diff-tree HEAD^ HEAD -- b
ok 2 - git diff-tree initial # magic is (not used)
ok 8 - echo HEAD | git diff-tree --stdin
ok 5 - format-patch doesn't consider merge commits
ok 9 - git diff-tree HEAD HEAD
ok 10 - git diff-files
ok 18 - status with --shortstat (mode differs)
ok 11 - git diff-index --cached HEAD
ok 3 - git diff-tree -r initial # magic is (not used)
ok 12 - git diff-index --cached HEAD^
ok 58 - stash branch - stashes on stack, stash-like argument
ok 19 - status with --shortstat (removing an empty file)
ok 151 - git rebase --merge --fork-point --onto B B (rebase.abbreviateCommands = true) with our changes is noop with same HEAD
ok 1 - setup
ok 13 - git diff-index --cached HEAD^
ok 59 - stash branch complains with no arguments
ok 20 - status with --shortstat (different but equivalent)
ok 1 - setup
ok 6 - format-patch result applies
ok 21 - status with --dirstat=lines (different)
ok 4 - git diff-tree -r --abbrev initial # magic is (not used)
ok 2 - setup: test-tool userdiff
ok 14 - git diff-tree -Stext HEAD^ HEAD -- b
ok 2 - default
ok 15 - git diff-tree -Snot-found HEAD^ HEAD -- b
ok 22 - status with --dirstat=lines (mode differs)
ok 16 - git diff-files
ok 3 - builtin ada pattern compiles
ok 23 - status with --dirstat=lines (removing an empty file)
ok 17 - git diff-index --cached HEAD
ok 1 - setup
ok 5 - git diff-tree -r --abbrev=4 initial # magic is (not used)
ok 7 - format-patch --ignore-if-in-upstream result applies
ok 18 - --check --exit-code returns 0 for no difference
ok 4 - builtin ada wordRegex pattern compiles
ok 8 - commit did not screw up the log message
ok 3 - default (attribute)
ok 19 - --check --exit-code returns 1 for a clean difference
ok 24 - status with --dirstat=lines (different but equivalent)
ok 9 - format-patch did not screw up the log message
ok 20 - --check --exit-code returns 3 for a dirty difference
ok 2 - GIT_EXTERNAL_DIFF environment
ok 25 - status with --raw (different)
ok 1 - setup
ok 10 - replay did not screw up the log message
ok 3 - GIT_EXTERNAL_DIFF environment should apply only to diff
ok 21 - --check with --no-pager returns 2 for dirty difference
ok 60 - stash show format defaults to --stat
ok 2 - single patch defaults to no numbers
ok 11 - format-patch empty commit
ok 6 - git diff-tree --root initial # magic is (not used)
ok 4 - default, tabwidth=10 (attribute)
ok 4 - GIT_EXTERNAL_DIFF environment and --no-ext-diff
ok 22 - check should test not just the last line
ok 152 - git rebase --merge --no-ff --fork-point --onto B B (rebase.abbreviateCommands = true) with our changes is work with diff HEAD
ok 26 - status with --raw (mode differs)
ok 3 - multiple patch defaults to numbered
ok 4 - Use --numbered
ok 12 - extra headers
ok 27 - status with --raw (removing an empty file)
ok 7 - git diff-tree --root --abbrev initial # magic is (not used)
ok 5 - no check (attribute)
ok 28 - status with --raw (different but equivalent)
ok 5 - format.numbered = true
ok 6 - format.numbered && single patch
ok 13 - extra headers without newlines
ok 29 - status with --name-only (different)
ok 5 - typechange diff
ok 6 - no check, tabwidth=10 (attribute), must be irrelevant
ok 63 - sparse index is not expanded: show and rev-parse
ok 7 - format.numbered && --no-numbered
ok 8 - git diff-tree --root --abbrev initial # magic is noellipses
ok 153 - git rebase --apply --fork-point --onto B... B with our changes is noop with same HEAD
ok 8 - format.numbered && --keep-subject
ok 30 - status with --name-only (mode differs)
ok 14 - extra headers with multiple To:s
ok 7 - without -trail
ok 23 - check detects leftover conflict markers
ok 9 - format.numbered = auto
ok 5 - builtin ada pattern compiles on bare repo with --attr-source
ok 31 - status with --name-only (removing an empty file)
ok 61 - stash show - stashes on stack, stash-like argument
ok 6 - diff.external
ok 10 - format.numbered = auto && single patch
ok 15 - additional command line cc (ascii)
ok 32 - status with --name-only (different but equivalent)
ok 9 - git diff-tree --root -r initial # magic is (not used)
ok 6 - builtin bash pattern compiles
ok 27 - git_rebase_interactive: modified submodule does not update submodule work tree from invalid commit
ok 33 - status with --name-status (different)
ok 7 - builtin bash wordRegex pattern compiles
ok 11 - format.numbered = auto && --no-numbered
ok 7 - diff.external should apply only to diff
not ok 16 - additional command line cc (rfc822) # TODO known breakage
ok 8 - without -trail (attribute)
ok 12 - --start-number && --numbered
not ok 5 - git_stash: removed submodule leaves submodule directory and its contents in place # TODO known breakage
ok 17 - command line headers
ok 34 - status with --name-status (mode differs)
ok 8 - diff.external and --no-ext-diff
ok 10 - git diff-tree --root -r --abbrev initial # magic is (not used)
ok 13 - single patch with cover-letter defaults to numbers
ok 58 - rm of a conflicted populated submodule with untracked files fails unless forced
ok 35 - status with --name-status (removing an empty file)
ok 9 - without -space
ok 14 - Use --no-numbered and --cover-letter single patch
ok 24 - check honors conflict marker length
# passed all 14 test(s)
1..14
ok 36 - status with --name-status (different but equivalent)
ok 25 - option errors are not confused by --exit-code
*** t4022-diff-rewrite.sh ***
ok 18 - configuration headers and command line headers
ok 11 - git diff-tree --root -r --abbrev initial # magic is noellipses
ok 9 - diff attribute
ok 10 - without -space (attribute)
ok 26 - git diff --exit-code returns 1 for changed binary file
ok 10 - diff attribute should apply only to diff
ok 154 - git rebase --apply --no-ff --fork-point --onto B... B with our changes is work with diff HEAD
ok 11 - diff attribute and --no-ext-diff
ok 19 - command line To: header (ascii)
ok 12 - git diff-tree --root -r --abbrev=4 initial # magic is (not used)
ok 62 - stash show -p - stashes on stack, stash-like argument
ok 27 - git diff --exit-code returns 1 for copied file
not ok 20 - command line To: header (rfc822) # TODO known breakage
ok 11 - with indent-non-tab only
ok 37 - Ray Lehtiniemi's example
ok 12 - diff attribute
not ok 21 - command line To: header (rfc2047) # TODO known breakage
ok 13 - git diff-tree --root -r --abbrev=4 initial # magic is noellipses
ok 28 - git diff --exit-code returns 1 for renamed file
ok 13 - diff attribute should apply only to diff
ok 14 - diff attribute and --no-ext-diff
ok 12 - with indent-non-tab only (attribute)
ok 22 - configuration To: header (ascii)
ok 29 - git diff --quiet returns 1 for changed binary file
ok 8 - builtin bash pattern compiles on bare repo with --attr-source
ok 63 - stash show - no stashes on stack, stash-like argument
ok 14 - git diff-tree -p initial # magic is (not used)
ok 9 - builtin bibtex pattern compiles
ok 155 - git rebase --merge --fork-point --onto B... B with our changes is noop with same HEAD
not ok 23 - configuration To: header (rfc822) # TODO known breakage
ok 30 - git diff --quiet returns 1 for copied file
ok 10 - builtin bibtex wordRegex pattern compiles
ok 13 - with indent-non-tab only, tabwidth=10
ok 15 - GIT_EXTERNAL_DIFF trumps diff.external
not ok 24 - configuration To: header (rfc2047) # TODO known breakage
ok 31 - git diff --quiet returns 1 for renamed file
ok 14 - with indent-non-tab only, tabwidth=10 (attribute)
ok 15 - git diff-tree --root -p initial # magic is (not used)
ok 25 - format.from=false
ok 26 - format.from=true
ok 16 - attributes trump GIT_EXTERNAL_DIFF and diff.external
ok 16 - git diff-tree --root -p --abbrev=10 initial # magic is (not used)
ok 28 - git_rebase_interactive: added submodule doesn't remove untracked unignored file with same name
ok 17 - no diff with -diff
ok 15 - with cr-at-eol
ok 18 - setup output files
ok 64 - stash show -p - no stashes on stack, stash-like argument
ok 27 - format.from with address
ok 38 - another test, without options
ok 59 - rm of a conflicted populated submodule with a .git directory fails even when forced
ok 156 - git rebase --merge --no-ff --fork-point --onto B... B with our changes is work with diff HEAD
ok 39 - ignore-blank-lines: only new lines
ok 16 - with cr-at-eol (attribute)
ok 1 - setup
ok 26 - update the split index when a racily clean cache entry is stored only in the shared index #4
ok 28 - --no-from overrides format.from
ok 17 - git diff-tree --root -p --full-index initial # magic is (not used)
ok 2 - detect rewrite
ok 40 - ignore-blank-lines: only new lines with space
ok 17 - trailing empty lines (1)
ok 32 - setup dirty subrepo
ok 18 - trailing empty lines (2)
ok 29 - --from overrides format.from
ok 19 - external diff 'echo output; exit 0;' with trustExitCode=off via attribute
ok 65 - stash show --patience shows diff
ok 3 - show deletion diff without -D
ok 60 - rm of a conflicted unpopulated submodule succeeds
ok 33 - git diff --exit-code --submodule=diff returns 1 for dirty subrepo
ok 4 - suppress deletion diff with -D
ok 19 - checkdiff shows correct line number for trailing blank lines
ok 18 - git diff-tree --root -p --full-index --abbrev=10 initial # magic is (not used)
ok 41 - ignore-blank-lines: after change
ok 30 - --no-to overrides config.to
ok 11 - builtin bibtex pattern compiles on bare repo with --attr-source
ok 5 - show deletion diff with -B
ok 34 - git diff --exit-code --submodule=log returns 1 for dirty subrepo
ok 6 - suppress deletion diff with -B -D
ok 12 - builtin cpp pattern compiles
ok 20 - external diff 'echo output; exit 0;' with trustExitCode=off via diff.external
ok 35 - git diff --exit-code --submodule=short returns 1 for dirty subrepo
ok 19 - git diff-tree --patch-with-stat initial # magic is (not used)
ok 13 - builtin cpp wordRegex pattern compiles
ok 20 - do not color trailing cr in context
ok 21 - external diff 'echo output; exit 0;' with trustExitCode=off via GIT_EXTERNAL_DIFF
ok 31 - --no-to and --to replaces config.to
ok 36 - git diff --quiet --submodule=diff returns 1 for dirty subrepo
ok 7 - prepare a file that ends with an incomplete line
ok 42 - ignore-blank-lines: before change
ok 8 - rewrite the middle 90% of sequence file and terminate with newline
ok 157 - git rebase --merge --fork-point --onto B... B (rebase.abbreviateCommands = true) with our changes is noop with same HEAD
ok 37 - git diff --quiet --submodule=log returns 1 for dirty subrepo
ok 21 - color new trailing blank lines
ok 9 - confirm that sequence file is considered a rewrite
ok 38 - git diff --quiet --submodule=short returns 1 for dirty subrepo
# passed all 21 test(s)
1..21
ok 64 - sparse index is not expanded: update-index
not ok 6 - git_stash: removed submodule leaves submodule containing a .git directory alone # TODO known breakage
ok 32 - --no-cc overrides config.cc
ok 10 - no newline at eof is on its own line without -B
*** t4023-diff-rename-typechange.sh ***
ok 20 - git diff-tree --root --patch-with-stat initial # magic is (not used)
# passed all 38 test(s)
1..38
ok 43 - ignore-blank-lines: between changes
ok 11 - no newline at eof is on its own line with -B
*** t4024-diff-optimize-common.sh ***
ok 22 - external diff 'echo output; exit 1;' with trustExitCode=off via attribute
# passed all 11 test(s)
1..11
ok 33 - --no-add-header overrides config.headers
*** t4025-hunk-header.sh ***
ok 21 - git diff-tree --patch-with-raw initial # magic is (not used)
ok 66 - drop: fail early if specified stash is not a stash ref
ok 44 - ignore-blank-lines: between changes (with interhunkctx)
ok 34 - multiple files
ok 23 - external diff 'echo output; exit 1;' with trustExitCode=off via diff.external
ok 45 - ignore-blank-lines: scattered spaces
ok 24 - external diff 'echo output; exit 1;' with trustExitCode=off via GIT_EXTERNAL_DIFF
ok 22 - git diff-tree --root --patch-with-raw initial # magic is (not used)
ok 158 - git rebase --merge --no-ff --fork-point --onto B... B (rebase.abbreviateCommands = true) with our changes is work with diff HEAD
ok 46 - ignore-blank-lines: spaces coalesce
ok 25 - external diff 'echo output; exit 0;' with trustExitCode=on via attribute
ok 23 - git diff-tree --pretty initial # magic is (not used)
ok 14 - builtin cpp pattern compiles on bare repo with --attr-source
ok 47 - ignore-blank-lines: mix changes and blank lines
ok 15 - builtin csharp pattern compiles
ok 48 - check mixed spaces and tabs in indent
ok 16 - builtin csharp wordRegex pattern compiles
ok 24 - git diff-tree --pretty --root initial # magic is (not used)
ok 49 - check mixed tabs and spaces in indent
ok 35 - filename length limit
ok 26 - external diff 'echo output; exit 0;' with trustExitCode=on via diff.external
ok 61 - rm of a populated submodule with a .git directory migrates git dir
ok 159 - git rebase --apply --fork-point --onto main... main with our changes is noop with same HEAD
ok 27 - external diff 'echo output; exit 0;' with trustExitCode=on via GIT_EXTERNAL_DIFF
ok 67 - pop: fail early if specified stash is not a stash ref
ok 50 - check with no whitespace errors
ok 25 - git diff-tree --pretty -p initial # magic is (not used)
ok 51 - check with trailing whitespace
ok 29 - rebase interactive ignores modified submodules
# still have 4 known breakage(s)
# passed all remaining 25 test(s)
1..29
ok 52 - check with space before tab in indent
ok 53 - --check and --exit-code are not exclusive
ok 28 - external diff 'echo output; exit 1;' with trustExitCode=on via attribute
ok 54 - --check and --quiet are not exclusive
ok 26 - git diff-tree --pretty --stat initial # magic is (not used)
ok 1 - setup
*** t4026-color.sh ***
ok 2 - hunk header truncation with an overly long line
# passed all 2 test(s)
1..2
ok 36 - filename length limit from config
ok 55 - -w and --exit-code interact sensibly
*** t4027-diff-submodule.sh ***
ok 27 - git diff-tree --pretty --summary initial # magic is (not used)
ok 29 - external diff 'echo output; exit 1;' with trustExitCode=on via diff.external
ok 56 - -I and --exit-code interact sensibly
ok 30 - external diff 'echo output; exit 1;' with trustExitCode=on via GIT_EXTERNAL_DIFF
ok 160 - git rebase --apply --no-ff --fork-point --onto main... main with our changes is work with same HEAD
ok 28 - git diff-tree --pretty --stat --summary initial # magic is (not used)
ok 57 - check staged with no whitespace errors
ok 68 - ref with non-existent reflog
ok 58 - check staged with trailing whitespace
ok 17 - builtin csharp pattern compiles on bare repo with --attr-source
ok 59 - check staged with space before tab in indent
ok 18 - builtin css pattern compiles
ok 31 - external diff 'echo output; exit 2;' with trustExitCode=on via attribute
ok 29 - git diff-tree --pretty --root -p initial # magic is (not used)
ok 60 - check with no whitespace errors (diff-index)
ok 19 - builtin css wordRegex pattern compiles
ok 7 - git_stash: replace submodule with a directory must fail
ok 61 - check with trailing whitespace (diff-index)
ok 37 - filename limit applies only to basename
ok 161 - git rebase --merge --fork-point --onto main... main with our changes is noop with same HEAD
ok 30 - git diff-tree --pretty --root --stat initial # magic is (not used)
ok 1 - setup
ok 32 - external diff 'echo output; exit 2;' with trustExitCode=on via diff.external
ok 62 - check with space before tab in indent (diff-index)
ok 38 - reroll count
ok 33 - external diff 'echo output; exit 2;' with trustExitCode=on via GIT_EXTERNAL_DIFF
ok 63 - check staged with no whitespace errors (diff-index)
ok 69 - invalid ref of the form stash@{n}, n >= N
ok 65 - sparse index is not expanded: blame
ok 64 - check staged with trailing whitespace (diff-index)
ok 31 - git diff-tree --pretty --root --summary initial # magic is (not used)
ok 39 - reroll count (-v)
ok 65 - check staged with space before tab in indent (diff-index)
ok 34 - external diff 'echo output; exit 0;' with trustExitCode=off via attribute with --exit-code
ok 40 - reroll count (-v) with a fractional number
ok 32 - git diff-tree --pretty --root --summary -r initial # magic is (not used)
ok 66 - check with no whitespace errors (diff-tree)
ok 1 - reset
ok 162 - git rebase --merge --no-ff --fork-point --onto main... main with our changes is work with same HEAD
ok 2 - empty color is empty
ok 3 - attribute before color name
ok 41 - reroll (-v) count with a non number
ok 4 - aixterm bright fg color
ok 35 - external diff 'echo output; exit 0;' with trustExitCode=off via diff.external with --exit-code
ok 5 - aixterm bright bg color
ok 70 - invalid ref of the form "n", n >= N
ok 6 - color name before attribute
ok 33 - git diff-tree --pretty --root --stat --summary initial # magic is (not used)
ok 7 - attr fg bg
ok 67 - check with trailing whitespace (diff-tree)
ok 42 - reroll (-v) count with a non-pathname character
ok 8 - fg attr bg
ok 36 - external diff 'echo output; exit 0;' with trustExitCode=off via GIT_EXTERNAL_DIFF with --exit-code
ok 9 - fg bg attr
ok 10 - fg bg attr...
ok 11 - reset fg bg attr...
ok 68 - check with space before tab in indent (diff-tree)
ok 12 - attr negation
ok 43 - no threading
ok 13 - "no-" variant of negation
ok 34 - git diff-tree --pretty --patch-with-stat initial # magic is (not used)
ok 20 - builtin css pattern compiles on bare repo with --attr-source
ok 14 - long color specification
ok 15 - absurdly long color specification
ok 37 - external diff 'echo output; exit 1;' with trustExitCode=off via attribute with --exit-code
ok 16 - 0-7 are aliases for basic ANSI color names
ok 21 - builtin dts pattern compiles
ok 17 - 8-15 are aliases for aixterm color names
ok 1 - setup
ok 163 - git rebase --merge --fork-point --onto main... main (rebase.abbreviateCommands = true) with our changes is noop with same HEAD
ok 44 - thread
ok 18 - 256 colors
ok 19 - RGB colors
ok 22 - builtin dts wordRegex pattern compiles
ok 20 - "default" foreground
ok 35 - git diff-tree --pretty --root --patch-with-stat initial # magic is (not used)
ok 21 - "normal default" to clear background
ok 62 - setup subsubmodule
ok 22 - "default" can be combined with attributes
ok 1 - setup
ok 69 - check with ignored trailing whitespace attr (diff-tree)
ok 23 - "normal" yields no color at all
ok 24 - -1 is a synonym for "normal"
ok 45 - --thread overrides format.thread=deep
ok 70 - check trailing whitespace (trailing-space: off)
ok 25 - color too small
ok 2 - git diff --raw HEAD
ok 38 - external diff 'echo output; exit 1;' with trustExitCode=off via diff.external with --exit-code
ok 26 - color too big
ok 2 - cross renames to be detected for regular files
ok 27 - extra character after color number
ok 36 - git diff-tree --pretty --patch-with-raw initial # magic is (not used)
ok 71 - check trailing whitespace (trailing-space: on)
ok 3 - git diff-index --raw HEAD
ok 39 - external diff 'echo output; exit 1;' with trustExitCode=off via GIT_EXTERNAL_DIFF with --exit-code
ok 28 - extra character after color name
ok 46 - thread in-reply-to
ok 29 - extra character after attribute
ok 72 - check space before tab in indent (space-before-tab: off)
ok 4 - git diff-files --raw
ok 3 - cross renames to be detected for typechange
ok 73 - check space before tab in indent (space-before-tab: on)
ok 5 - git diff HEAD
ok 4 - moves and renames
ok 47 - thread cover-letter
ok 37 - git diff-tree --pretty --root --patch-with-raw initial # magic is (not used)
# passed all 4 test(s)
1..4
ok 164 - git rebase --merge --no-ff --fork-point --onto main... main (rebase.abbreviateCommands = true) with our changes is work with same HEAD
ok 74 - check spaces as indentation (indent-with-non-tab: off)
*** t4028-format-patch-mime-headers.sh ***
ok 75 - check spaces as indentation (indent-with-non-tab: on)
ok 40 - external diff 'echo output; exit 0;' with trustExitCode=on via attribute with --exit-code
ok 48 - thread cover-letter in-reply-to
ok 30 - non-hex character in RGB color
ok 38 - git diff-tree --pretty=oneline initial # magic is (not used)
ok 6 - git diff HEAD with dirty submodule (work tree)
ok 76 - ditto, but tabwidth=9
ok 49 - thread explicit shallow
ok 77 - check tabs and spaces as indentation (indent-with-non-tab: on)
ok 31 - wrong number of letters in RGB color
ok 78 - ditto, but tabwidth=10
ok 39 - git diff-tree --pretty=oneline --root initial # magic is (not used)
ok 50 - thread deep
ok 41 - external diff 'echo output; exit 0;' with trustExitCode=on via diff.external with --exit-code
ok 32 - unknown color slots are ignored (diff)
ok 165 - git rebase --apply --fork-point --keep-base main with our changes is noop with same HEAD
ok 79 - ditto, but tabwidth=20
ok 7 - git diff HEAD with dirty submodule (index)
ok 33 - unknown color slots are ignored (branch)
ok 42 - external diff 'echo output; exit 0;' with trustExitCode=on via GIT_EXTERNAL_DIFF with --exit-code
ok 80 - check tabs as indentation (tab-in-indent: off)
ok 51 - thread deep in-reply-to
ok 23 - builtin dts pattern compiles on bare repo with --attr-source
ok 34 - unknown color slots are ignored (status)
ok 40 - git diff-tree --pretty=oneline -p initial # magic is (not used)
# passed all 34 test(s)
1..34
ok 8 - git_stash: replace submodule containing a .git directory with a directory must fail
ok 81 - check tabs as indentation (tab-in-indent: on)
ok 24 - builtin elixir pattern compiles
ok 71 - valid ref of the form "n", n < N
*** t4029-diff-trailing-space.sh ***
ok 52 - thread deep cover-letter
ok 63 - rm recursively removes work tree of unmodified submodules
ok 82 - check tabs and spaces as indentation (tab-in-indent: on)
ok 43 - external diff 'echo output; exit 1;' with trustExitCode=on via attribute with --exit-code
ok 25 - builtin elixir wordRegex pattern compiles
ok 8 - git diff HEAD with dirty submodule (untracked)
ok 41 - git diff-tree --pretty=oneline --root -p initial # magic is (not used)
ok 83 - ditto, but tabwidth=1 (must be irrelevant)
ok 53 - thread deep cover-letter in-reply-to
ok 84 - check tab-in-indent and indent-with-non-tab conflict
ok 9 - git diff HEAD with dirty submodule (untracked) (none ignored)
ok 44 - external diff 'echo output; exit 1;' with trustExitCode=on via diff.external with --exit-code
ok 85 - check tab-in-indent excluded from wildcard whitespace attribute
ok 42 - git diff-tree --pretty=oneline --patch-with-stat initial # magic is (not used)
ok 45 - external diff 'echo output; exit 1;' with trustExitCode=on via GIT_EXTERNAL_DIFF with --exit-code
ok 86 - line numbers in --check output are correct
ok 166 - git rebase --apply --no-ff --fork-point --keep-base main with our changes is work with same HEAD
ok 54 - thread via config
ok 87 - checkdiff detects new trailing blank lines (1)
ok 72 - branch: do not drop the stash if the branch exists
ok 43 - git diff-tree --pretty=oneline --root --patch-with-stat initial # magic is (not used)
ok 88 - checkdiff detects new trailing blank lines (2)
ok 55 - thread deep via config
ok 2 - diff -U0
ok 46 - external diff 'echo output; exit 2;' with trustExitCode=on via attribute with --exit-code
ok 66 - sparse index is not expanded: fetch/pull
# passed all 2 test(s)
1..2
ok 89 - checkdiff allows new blank lines
ok 10 - git diff HEAD with dirty submodule (work tree, refs match)
*** t4030-diff-textconv.sh ***
ok 44 - git diff-tree --pretty=oneline --patch-with-raw initial # magic is (not used)
ok 1 - create commit with utf-8 body
ok 56 - thread config + override
ok 167 - git rebase --merge --fork-point --keep-base main with our changes is noop with same HEAD
ok 2 - patch has mime headers
ok 90 - whitespace-only changes not reported (diff)
ok 47 - external diff 'echo output; exit 2;' with trustExitCode=on via diff.external with --exit-code
ok 91 - whitespace-only changes not reported (diffstat)
ok 45 - git diff-tree --pretty=oneline --root --patch-with-raw initial # magic is (not used)
ok 48 - external diff 'echo output; exit 2;' with trustExitCode=on via GIT_EXTERNAL_DIFF with --exit-code
ok 3 - patch has mime and extra headers
ok 26 - builtin elixir pattern compiles on bare repo with --attr-source
# passed all 3 test(s)
1..3
ok 57 - thread config + --no-thread
ok 92 - whitespace changes with modification reported (diffstat)
*** t4031-diff-rewrite-binary.sh ***
ok 27 - builtin fortran pattern compiles
ok 46 - git diff-tree --pretty side # magic is (not used)
ok 28 - builtin fortran wordRegex pattern compiles
ok 73 - branch: should not drop the stash if the apply fails
ok 49 - external diff 'echo output; exit 0;' with trustExitCode=off via attribute with --quiet
ok 168 - git rebase --merge --no-ff --fork-point --keep-base main with our changes is work with same HEAD
ok 47 - git diff-tree --pretty -p side # magic is (not used)
ok 58 - excessive subject
ok 50 - external diff 'echo output; exit 0;' with trustExitCode=off via diff.external with --quiet
ok 11 - git diff HEAD with dirty submodule (work tree, refs match) [.gitmodules]
ok 93 - whitespace-only changes reported across renames (diffstat)
ok 51 - external diff 'echo output; exit 0;' with trustExitCode=off via GIT_EXTERNAL_DIFF with --quiet
ok 59 - failure to write cover-letter aborts gracefully
ok 48 - git diff-tree --pretty --patch-with-stat side # magic is (not used)
not ok 9 - git_stash: replace submodule with a file must fail # TODO known breakage
ok 12 - git diff HEAD with dirty submodule (index, refs match)
ok 74 - apply: show same status as git status (relative to ./)
ok 49 - git diff-tree initial mode # magic is (not used)
ok 169 - git rebase --merge --fork-point --keep-base main (rebase.abbreviateCommands = true) with our changes is noop with same HEAD
ok 52 - external diff 'echo output; exit 1;' with trustExitCode=off via attribute with --quiet
ok 1 - diff honors config option, diff.suppressBlankEmpty
# passed all 1 test(s)
1..1
ok 60 - cover-letter inherits diff options
*** t4032-diff-inter-hunk-context.sh ***
ok 50 - git diff-tree --stat initial mode # magic is (not used)
ok 94 - whitespace-only changes reported across renames
ok 61 - shortlog of cover-letter wraps overly-long onelines
ok 53 - external diff 'echo output; exit 1;' with trustExitCode=off via diff.external with --quiet
ok 13 - git diff HEAD with dirty submodule (untracked, refs match)
ok 62 - format-patch respects -U
ok 54 - external diff 'echo output; exit 1;' with trustExitCode=off via GIT_EXTERNAL_DIFF with --quiet
ok 1 - setup binary file with history
ok 29 - builtin fortran pattern compiles on bare repo with --attr-source
ok 51 - git diff-tree --summary initial mode # magic is (not used)
ok 2 - file is considered binary by porcelain
ok 30 - builtin fountain pattern compiles
ok 75 - stash where working directory contains "HEAD" file
ok 63 - format-patch -p suppresses stat
ok 76 - store called with invalid commit
ok 3 - file is considered binary by plumbing
ok 95 - rename empty
ok 77 - store called with non-stash commit
ok 31 - builtin fountain wordRegex pattern compiles
ok 170 - git rebase --merge --no-ff --fork-point --keep-base main (rebase.abbreviateCommands = true) with our changes is work with same HEAD
ok 64 - format-patch from a subdirectory (1)
ok 55 - external diff 'echo output; exit 0;' with trustExitCode=on via attribute with --quiet
ok 52 - git diff-tree master # magic is (not used)
ok 4 - setup textconv filters
ok 1 - create binary file with changes
ok 2 - vanilla diff is binary
ok 65 - format-patch from a subdirectory (2)
ok 3 - rewrite diff is binary
ok 66 - format-patch from a subdirectory (3)
ok 53 - git diff-tree -m master # magic is (not used)
ok 5 - diff produces text
ok 4 - rewrite diff can show binary patch
ok 56 - external diff 'echo output; exit 0;' with trustExitCode=on via diff.external with --quiet
ok 171 - add work same to upstream
ok 67 - format-patch --in-reply-to
ok 64 - rm of a populated nested submodule with different nested HEAD fails unless forced
ok 14 - git diff HEAD with dirty submodule (untracked, refs match) [.gitmodules]
ok 5 - rewrite diff --numstat shows binary changes
ok 68 - format-patch --signoff
ok 57 - external diff 'echo output; exit 0;' with trustExitCode=on via GIT_EXTERNAL_DIFF with --quiet
ok 6 - diff --stat counts binary rewrite as 0 lines
ok 6 - show commit produces text
ok 54 - git diff-tree -p master # magic is (not used)
ok 7 - diff-tree produces binary
ok 78 - store updates stash ref and reflog
ok 7 - setup textconv
ok 15 - git diff between submodule commits
ok 96 - combined diff with autocrlf conversion
ok 69 - format-patch --notes --signoff
ok 58 - external diff 'echo output; exit 1;' with trustExitCode=on via attribute with --quiet
ok 8 - log produces text
ok 55 - git diff-tree -p -m master # magic is (not used)
ok 9 - format-patch produces binary
ok 8 - rewrite diff respects textconv
ok 172 - git rebase --apply --onto B B with our and their changes is noop with same HEAD
# passed all 8 test(s)
1..8
ok 59 - external diff 'echo output; exit 1;' with trustExitCode=on via diff.external with --quiet
*** t4033-diff-patience.sh ***
ok 97 - setup diff colors
ok 56 - git diff-tree -c master # magic is (not used)
ok 60 - external diff 'echo output; exit 1;' with trustExitCode=on via GIT_EXTERNAL_DIFF with --quiet
ok 1 - diff -U0, 1 common line: count hunks (2)
ok 32 - builtin fountain pattern compiles on bare repo with --attr-source
ok 16 - git diff between submodule commits [.gitmodules]
ok 2 - diff -U0, 1 common line: check output
ok 33 - builtin golang pattern compiles
ok 79 - handle stash specification with spaces
ok 10 - status -v produces text
ok 17 - git diff (empty submodule dir)
ok 3 - diff -U0 --inter-hunk-context=0, 1 common line: count hunks (2)
ok 11 - show blob produces binary
ok 34 - builtin golang wordRegex pattern compiles
ok 4 - diff -U0 --inter-hunk-context=0, 1 common line: check output
not ok 10 - git_stash: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 18 - conflicted submodule setup
ok 61 - external diff 'echo output; exit 2;' with trustExitCode=on via attribute with --quiet
ok 57 - git diff-tree -c --abbrev master # magic is (not used)
ok 5 - diff -U0 --inter-hunk-context=1, 1 common line: count hunks (1)
ok 19 - combined (empty submodule)
ok 12 - show --textconv blob produces text
ok 6 - diff -U0 --inter-hunk-context=1, 1 common line: check output
ok 13 - show --no-textconv blob produces binary
ok 98 - diff that introduces a line with only tabs
ok 80 - setup stash with index and worktree changes
ok 7 - diff -U0 --inter-hunk-context=2, 1 common line: count hunks (1)
ok 62 - external diff 'echo output; exit 2;' with trustExitCode=on via diff.external with --quiet
ok 58 - git diff-tree -c --abbrev master # magic is noellipses
ok 8 - diff -U0 --inter-hunk-context=2, 1 common line: check output
ok 173 - git rebase --apply --no-ff --onto B B with our and their changes is work with diff HEAD
ok 70 - format-patch notes output control
ok 20 - combined (with submodule)
ok 63 - external diff 'echo output; exit 2;' with trustExitCode=on via GIT_EXTERNAL_DIFF with --quiet
# passed all 20 test(s)
1..20
ok 81 - stash list -p shows simple diff
ok 14 - grep-diff (-G) operates on textconv data (add)
ok 9 - diff -U1, 1 common line: count hunks (1)
*** t4034-diff-words.sh ***
ok 59 - git diff-tree --cc master # magic is (not used)
ok 82 - stash list --cc shows combined diff
ok 64 - force diff with "diff"
ok 15 - grep-diff (-G) operates on textconv data (modification)
ok 10 - diff -U0, 2 common lines: count hunks (2)
ok 99 - diff that introduces and removes ws breakages
ok 11 - diff -U0 --inter-hunk-context=0, 2 common lines: count hunks (2)
ok 60 - git diff-tree -c --stat master # magic is (not used)
ok 65 - GIT_EXTERNAL_DIFF with more than one changed files
ok 174 - git rebase --merge --onto B B with our and their changes is noop with same HEAD
ok 12 - diff -U0 --inter-hunk-context=1, 2 common lines: count hunks (2)
ok 16 - pickaxe (-S) operates on textconv data (add)
ok 1 - --ignore-space-at-eol with a single appended character
ok 83 - stash is not confused by partial renames
ok 13 - diff -U0 --inter-hunk-context=2, 2 common lines: count hunks (1)
ok 66 - GIT_EXTERNAL_DIFF path counter/total
ok 14 - diff -U1, 2 common lines: count hunks (1)
ok 61 - git diff-tree --cc --stat master # magic is (not used)
ok 100 - ws-error-highlight test setup
ok 17 - pickaxe (-S) operates on textconv data (modification)
ok 35 - builtin golang pattern compiles on bare repo with --attr-source
ok 67 - GIT_EXTERNAL_DIFF generates pretty paths
ok 36 - builtin html pattern compiles
ok 84 - push -m shows right message
ok 18 - diffstat does not run textconv
ok 62 - git diff-tree -c --stat --summary master # magic is (not used)
ok 37 - builtin html wordRegex pattern compiles
ok 101 - test --ws-error-highlight option
ok 15 - diff -U1, 3 common lines: count hunks (2)
ok 68 - external diff with autocrlf = true
ok 175 - git rebase --merge --no-ff --onto B B with our and their changes is work with diff HEAD
ok 16 - diff -U1 --inter-hunk-context=0, 3 common lines: count hunks (2)
ok 63 - git diff-tree --cc --stat --summary master # magic is (not used)
ok 67 - sparse index is not expanded: read-tree
ok 85 - push -m also works without space
ok 102 - test diff.wsErrorHighlight config
ok 71 - format-patch with multiple notes refs
ok 17 - diff -U1 --inter-hunk-context=1, 3 common lines: count hunks (1)
ok 69 - diff --cached
ok 18 - diff -U1 --inter-hunk-context=2, 3 common lines: count hunks (1)
ok 19 - textconv does not act on symlinks
# passed all 19 test(s)
1..19
ok 70 - clean up crlf leftovers
*** t4035-diff-quiet.sh ***
ok 64 - git diff-tree -c --stat --summary side # magic is (not used)
ok 2 - setup attributes files for tests with patience
ok 1 - setup
ok 103 - option overrides diff.wsErrorHighlight
not ok 11 - git_stash: modified submodule does not update submodule work tree # TODO known breakage
ok 2 - set up pre and post with runs of whitespace
ok 3 - patience diff from attributes
ok 86 - store -m foo shows right message
ok 4 - diff from attributes with bare repo with source
ok 65 - rm of a populated nested submodule with nested modifications fails unless forced
ok 65 - git diff-tree --cc --stat --summary side # magic is (not used)
ok 5 - diff from attributes with bare repo with invalid source
ok 176 - git rebase --merge --onto B B (rebase.abbreviateCommands = true) with our and their changes is noop with same HEAD
ok 6 - patience diff from attributes has valid diffstat
ok 7 - patience diff
ok 19 - diff -U3, 9 common lines: count hunks (2)
ok 8 - patience diff command line precedence before attributes
ok 66 - git diff-tree --cc --shortstat master # magic is (not used)
ok 87 - store -mfoo shows right message
ok 20 - diff -U3 --inter-hunk-context=2, 9 common lines: count hunks (2)
ok 38 - builtin html pattern compiles on bare repo with --attr-source
ok 9 - patience diff attributes precedence before config
ok 104 - detect moved code, complete file
ok 21 - diff -U3 --inter-hunk-context=3, 9 common lines: count hunks (1)
ok 39 - builtin java pattern compiles
ok 72 - format-patch with multiple notes refs in config
ok 10 - patience diff output is valid
ok 40 - builtin java wordRegex pattern compiles
ok 67 - git diff-tree --cc --summary REVERSE # magic is (not used)
ok 22 - (diff.interHunkContext=0) diff -U0, 1 common line: count hunks (2)
ok 23 - (diff.interHunkContext=0) diff -U0, 1 common line: check output
ok 177 - git rebase --merge --no-ff --onto B B (rebase.abbreviateCommands = true) with our and their changes is work with diff HEAD
ok 3 - word diff with runs of whitespace
ok 105 - --color-moved with --no-ext-diff
ok 73 - options no longer allowed for format-patch
ok 11 - completely different files
# passed all 11 test(s)
ok 24 - (diff.interHunkContext=1) diff -U0, 1 common line: count hunks (1)
1..11
ok 88 - store --message=foo shows right message
ok 71 - submodule diff
# passed all 71 test(s)
1..71
*** t4036-format-patch-signer-mime.sh ***
ok 25 - (diff.interHunkContext=1) diff -U0, 1 common line: check output
ok 74 - format-patch --numstat should produce a patch
ok 68 - git diff-tree --cc --patch-with-stat master # magic is (not used)
ok 4 - --word-diff=porcelain
*** t4037-diff-r-t-dirs.sh ***
ok 26 - (diff.interHunkContext=2) diff -U0, 1 common line: count hunks (1)
ok 27 - (diff.interHunkContext=2) diff -U0, 1 common line: check output
ok 69 - git diff-tree --cc --patch-with-stat --summary master # magic is (not used)
ok 178 - git rebase --apply --onto B... B with our and their changes is noop with same HEAD
ok 89 - store --message foo shows right message
ok 28 - (diff.interHunkContext=3) diff -U3, 9 common lines: count hunks (1)
ok 29 - (diff.interHunkContext=0) diff -U0, 2 common lines: count hunks (2)
ok 5 - --word-diff=plain
ok 70 - git diff-tree --cc --patch-with-stat --summary side # magic is (not used)
ok 30 - (diff.interHunkContext=1) diff -U0, 2 common lines: count hunks (2)
ok 90 - push -mfoo uses right message
ok 106 - detect malicious moved code, inside file
ok 31 - (diff.interHunkContext=2) diff -U0, 2 common lines: count hunks (1)
ok 75 - format-patch -- <path>
ok 71 - git log master # magic is (not used)
ok 1 - setup
ok 6 - --word-diff=plain --color
ok 2 - git diff-tree HEAD^ HEAD
ok 76 - format-patch --ignore-if-in-upstream HEAD
ok 32 - (diff.interHunkContext=0) diff -U1, 3 common lines: count hunks (2)
ok 3 - git diff-tree HEAD^ HEAD -- a
ok 77 - get git version
ok 91 - push --message foo is synonym for -mfoo
ok 41 - builtin java pattern compiles on bare repo with --attr-source
ok 4 - git diff-tree HEAD^ HEAD -- b
ok 179 - git rebase --apply --no-ff --onto B... B with our and their changes is work with diff HEAD
ok 78 - format-patch default signature
ok 33 - (diff.interHunkContext=1) diff -U1, 3 common lines: count hunks (1)
ok 7 - word diff without context
ok 42 - builtin kotlin pattern compiles
not ok 12 - git_stash: modified submodule does not update submodule work tree to invalid commit # TODO known breakage
ok 72 - git log -p master # magic is (not used)
ok 5 - echo HEAD | git diff-tree --stdin
ok 79 - format-patch --signature
ok 43 - builtin kotlin wordRegex pattern compiles
ok 6 - git diff-tree HEAD HEAD
ok 34 - (diff.interHunkContext=2) diff -U1, 3 common lines: count hunks (1)
ok 7 - git diff-files
ok 80 - format-patch with format.signature config
ok 92 - push --message=foo is synonym for -mfoo
ok 107 - plain moved code, inside file
ok 8 - git diff-index --cached HEAD
ok 35 - (diff.interHunkContext=2) diff -U3, 9 common lines: count hunks (2)
ok 73 - git log --root master # magic is (not used)
ok 9 - git diff-index --cached HEAD^
ok 8 - word diff with a regular expression
ok 81 - format-patch --signature overrides format.signature
ok 1 - setup
ok 36 - (diff.interHunkContext=3) diff -U3, 9 common lines: count hunks (1)
ok 10 - git diff-index --cached HEAD^
ok 93 - push -m shows right message
ok 180 - git rebase --merge --onto B... B with our and their changes is noop with same HEAD
ok 2 - format normally
ok 82 - format-patch --no-signature ignores format.signature
ok 37 - diff.interHunkContext invalid
ok 3 - format with signoff without funny signer name
ok 9 - word diff with zero length matches
# passed all 37 test(s)
1..37
ok 4 - format with non ASCII signer name
ok 74 - git log --root -p master # magic is (not used)
*** t4038-diff-combined.sh ***
ok 10 - set up a diff driver
ok 83 - format-patch --signature --cover-letter
ok 1 - setup
ok 11 - git diff-tree -Stext HEAD^ HEAD -- b
ok 94 - create stores correct message
ok 5 - attach and signoff do not duplicate mime headers
# passed all 5 test(s)
1..5
ok 2 - verify
# passed all 2 test(s)
1..2
ok 84 - format.signature="" suppresses signatures
ok 12 - git diff-tree -Snot-found HEAD^ HEAD -- b
*** t4039-diff-assume-unchanged.sh ***
ok 13 - git diff-files
*** t4040-whitespace-status.sh ***
ok 11 - option overrides .gitattributes
ok 14 - git diff-index --cached HEAD
ok 85 - format-patch --no-signature suppresses signatures
ok 75 - git log --patch-with-stat master # magic is (not used)
ok 15 - git diff, one file outside repo
ok 66 - rm of a populated nested submodule with nested untracked files fails unless forced
ok 95 - create when branch name has /
ok 86 - format-patch --signature="" suppresses signatures
ok 16 - git diff, both files outside repo
ok 87 - prepare mail-signature input
ok 12 - use regex supplied by driver
ok 17 - git diff --ignore-space-at-eol, one file outside repo
not ok 13 - git_stash: modified submodule does not update submodule work tree from invalid commit # TODO known breakage
ok 181 - git rebase --merge --no-ff --onto B... B with our and their changes is work with diff HEAD
ok 13 - set up diff.wordRegex option
ok 96 - create with multiple arguments for the message
ok 88 - --signature-file=file works
ok 44 - builtin kotlin pattern compiles on bare repo with --attr-source
ok 18 - git diff --ignore-space-at-eol, both files outside repo
ok 108 - detect blocks of moved code
ok 76 - git log --root --patch-with-stat master # magic is (not used)
ok 45 - builtin markdown pattern compiles
ok 19 - git diff --ignore-all-space, one file outside repo
ok 68 - ls-files
ok 46 - builtin markdown wordRegex pattern compiles
ok 20 - git diff --ignore-all-space, both files outside repo
ok 14 - command-line overrides config
ok 89 - format.signaturefile works
ok 77 - git log --root --patch-with-stat --summary master # magic is (not used)
ok 97 - create in a detached state
ok 21 - git diff --quiet ignores stat-change only entries
ok 90 - --no-signature suppresses format.signaturefile 
ok 22 - git diff --quiet on a path that need conversion
ok 182 - git rebase --merge --onto B... B (rebase.abbreviateCommands = true) with our and their changes is noop with same HEAD
# passed all 22 test(s)
1..22
ok 15 - command-line overrides config: --word-diff-regex
*** t4041-diff-submodule-option.sh ***
ok 91 - --signature-file overrides format.signaturefile
ok 78 - git log --root -c --patch-with-stat --summary master # magic is (not used)
ok 16 - .gitattributes override config
ok 17 - setup: remove diff driver regex
ok 98 - stash -- <pathspec> stashes and restores the file
ok 109 - detect permutations inside moved code -- dimmed-zebra
ok 92 - --signature overrides format.signaturefile
ok 14 - git_stash: added submodule doesn't remove untracked unignored file with same name
ok 110 - zebra alternate color is only used when necessary
ok 18 - use configured regex
ok 93 # skip format-patch --stdout paginates (missing TTY)
ok 94 # skip format-patch --stdout pagination can be disabled (missing TTY)
ok 183 - git rebase --merge --no-ff --onto B... B (rebase.abbreviateCommands = true) with our and their changes is work with diff HEAD
ok 79 - git log --root --cc --patch-with-stat --summary master # magic is (not used)
ok 1 - setup
ok 1 - setup
ok 2 - diff-index does not examine assume-unchanged entries
ok 111 - short lines of opposite sign do not get marked as moved
ok 99 - stash -- <pathspec> stashes in subdirectory
ok 47 - builtin markdown pattern compiles on bare repo with --attr-source
ok 3 - diff-files does not examine assume-unchanged entries
ok 2 - diff-tree --exit-code
ok 48 - builtin matlab pattern compiles
ok 95 - format-patch handles multi-line subjects
ok 3 - diff-tree -b --exit-code
ok 19 - test parsing words for newline
ok 49 - builtin matlab wordRegex pattern compiles
ok 80 - git log --no-diff-merges -p --first-parent master # magic is (not used)
ok 4 - diff-index --cached --exit-code
ok 4 - find-copies-harder is not confused by mode bits
# passed all 4 test(s)
1..4
ok 5 - diff-index -b -p --cached --exit-code
*** t4042-diff-textconv-caching.sh ***
ok 184 - git rebase --apply --onto main... main with our and their changes is noop with same HEAD
ok 6 - diff-index --exit-code
ok 100 - stash with multiple pathspec arguments
ok 96 - format-patch handles multi-line encoded subjects
ok 81 - git log --diff-merges=off -p --first-parent master # magic is (not used)
ok 27 - update the split index after unpack trees() copied a racily clean cache entry from the shared index #0
ok 7 - diff-index -b -p --exit-code
ok 20 - test when words are only removed at the end
ok 8 - diff-files --exit-code
Initialized empty Git repository in /tmp/src/git-2.49.0/t/trash directory.t4041-diff-submodule-option/sm1/.git/
ok 97 - format-patch wraps extremely long subject (ascii)
ok 9 - diff-files -b -p --exit-code
ok 82 - git log --first-parent --diff-merges=off -p master # magic is (not used)
ok 10 - diff-files --diff-filter --quiet
ok 101 - stash with file including $IFS character
ok 21 - --word-diff=none
ok 112 - cmd option assumes configured colored-moved
ok 67 - rm absorbs submodule's nested .git directory
ok 22 - unset default driver
ok 1 - setup
ok 11 - diff-tree --diff-filter --quiet
# passed all 11 test(s)
1..11
ok 83 - git log -p --first-parent master # magic is (not used)
ok 98 - format-patch wraps extremely long subject (rfc2047)
*** t4043-diff-rename-binary.sh ***
ok 185 - git rebase --apply --no-ff --onto main... main with our and their changes is work with diff HEAD
ok 113 - no effect on diff from --color-moved with --word-diff
ok 2 - check combined output (1)
ok 99 - format-patch quotes dot in from-headers
ok 23 - diff driver 'ada'
ok 84 - git log -p --diff-merges=first-parent master # magic is (not used)
ok 114 - no effect on show from --color-moved with --word-diff
ok 50 - builtin matlab pattern compiles on bare repo with --attr-source
ok 3 - check combined output (1) with git diff <rev>^!
ok 1 - added submodule
ok 51 - builtin objc pattern compiles
ok 102 - stash with pathspec matching multiple paths
ok 15 - stash push with submodule.recurse=true preserves dirty submodule worktree
ok 85 - git log --diff-merges=first-parent master # magic is (not used)
ok 52 - builtin objc wordRegex pattern compiles
ok 24 - diff driver 'ada' in Islandic
ok 100 - format-patch quotes double-quote in from-headers
ok 186 - git rebase --merge --onto main... main with our and their changes is noop with same HEAD
ok 4 - check combined output (2)
ok 115 - set up whitespace tests
ok 2 - added submodule, set diff.submodule
ok 101 - format-patch uses rfc2047-encoded from-headers when necessary
ok 86 - git log -m -p --first-parent master # magic is (not used)
ok 103 - stash push -p with pathspec shows no changes only once
ok 25 - diff driver 'bibtex'
ok 5 - check combined output (2) with git diff <rev>^!
ok 116 - move detection ignoring whitespace 
ok 3 - --submodule=short overrides diff.submodule
ok 102 - rfc2047-encoded from-headers leave no rfc822 specials
ok 6 - diagnose truncated file
ok 104 - push <pathspec>: show no changes when there are none
ok 68 - checking out a commit after submodule removal needs manual updates
ok 105 - push: <pathspec> not in the repository errors out
ok 187 - git rebase --merge --no-ff --onto main... main with our and their changes is work with diff HEAD
ok 26 - diff driver 'bibtex' in Islandic
ok 4 - diff.submodule does not affect plumbing
ok 87 - git log -m -p master # magic is (not used)
ok 1 - setup
ok 117 - move detection ignoring whitespace changes
ok 69 - sparse index is not expanded: sparse-checkout
ok 69 - rm of d/f when d has become a non-directory
ok 106 - push: -q is quiet with changes
ok 103 - format-patch wraps moderately long from-header (ascii)
ok 107 - push: -q is quiet with no changes
ok 27 - diff driver 'cpp'
ok 88 - git log --cc -m -p master # magic is (not used)
ok 2 - first textconv works
ok 108 - push: -q is quiet even if there is no initial commit
ok 1 - prepare repository
ok 70 - rm of d/f when d has become a dangling symlink
ok 104 - format-patch wraps extremely long from-header (ascii)
ok 5 - modified submodule(forward)
ok 3 - cached textconv produces same output
ok 2 - move the files into a "sub" directory
ok 4 - cached textconv does not run helper
ok 118 - move detection ignoring whitespace at eol
ok 71 - rm of file when it has become a directory
ok 28 - diff driver 'cpp' in Islandic
ok 6 - modified submodule(forward)
ok 3 - git show -C -C report renames
ok 119 - clean up whitespace-test colors
ok 188 - git rebase --merge --onto main... main (rebase.abbreviateCommands = true) with our and their changes is noop with same HEAD
ok 53 - builtin objc pattern compiles on bare repo with --attr-source
# passed all 3 test(s)
1..3
ok 109 - untracked files are left in place when -u is not given
*** t4044-diff-index-unique-abbrev.sh ***
ok 89 - git log -c -m -p master # magic is (not used)
ok 54 - builtin pascal pattern compiles
ok 105 - format-patch wraps extremely long from-header (rfc822)
ok 7 - modified submodule(forward) --submodule
ok 55 - builtin pascal wordRegex pattern compiles
ok 72 - rm across a symlinked leading path (no index)
ok 5 - changing textconv invalidates cache
ok 29 - diff driver 'csharp'
ok 8 - modified submodule(forward) --submodule=short
ok 90 - git log -m --raw master # magic is (not used)
ok 120 - --color-moved block at end of diff output respects MIN_ALNUM_COUNT
ok 106 - format-patch wraps extremely long from-header (rfc2047)
ok 110 - stash without verb with pathspec
ok 6 - switching diff driver produces correct results
not ok 73 - rm across a symlinked leading path (w/ index) # TODO known breakage
ok 16 - stash push and pop with submodule.recurse=true preserves dirty submodule worktree
ok 74 - setup for testing rm messages
# still have 10 known breakage(s)
# passed all remaining 6 test(s)
1..16
ok 7 - log notes cache and still use cache for -p
ok 9 - modified submodule(backward)
ok 91 - git log -m --stat master # magic is (not used)
ok 107 - format-patch wraps extremely long from-header (non-ASCII without Q-encoding)
ok 75 - rm files with different staged content
ok 30 - diff driver 'csharp' in Islandic
ok 189 - git rebase --merge --no-ff --onto main... main (rebase.abbreviateCommands = true) with our and their changes is work with diff HEAD
ok 121 - --color-moved respects MIN_ALNUM_COUNT
ok 76 - rm files with different staged content without hints
ok 8 - caching is silently ignored outside repo
# passed all 8 test(s)
1..8
ok 92 - git log -SF master # magic is (not used)
*** t4045-diff-relative.sh ***
*** t4046-diff-unmerged.sh ***
ok 108 - subject lines are unencoded with --no-encode-email-headers
ok 77 - rm file with local modification
ok 31 - diff driver 'css'
ok 78 - rm file with local modification without hints
ok 93 - git log -S F master # magic is (not used)
ok 10 - modified submodule(backward and forward)
ok 122 - --color-moved treats adjacent blocks as separate for MIN_ALNUM_COUNT
ok 111 - stash -k -- <pathspec> leaves unstaged files intact
ok 190 - git rebase --apply --keep-base main with our and their changes is noop with same HEAD
ok 56 - builtin pascal pattern compiles on bare repo with --attr-source
ok 109 - subject lines are unencoded with format.encodeEmailHeaders=false
ok 79 - rm file with changes in the index
ok 32 - diff driver 'css' in Islandic
ok 94 - git log -SF -p master # magic is (not used)
ok 57 - builtin perl pattern compiles
ok 80 - rm file with changes in the index without hints
ok 58 - builtin perl wordRegex pattern compiles
ok 123 - --color-moved rewinds for MIN_ALNUM_COUNT
ok 11 - typechanged submodule(submodule->blob), --cached
ok 110 - --encode-email-headers overrides format.encodeEmailHeaders
ok 95 - git log -SF master --max-count=0 # magic is (not used)
ok 81 - rm files with two different errors
ok 12 - typechanged submodule(submodule->blob)
ok 82 - rm empty string should fail
# still have 1 known breakage(s)
# passed all remaining 81 test(s)
1..82
ok 33 - diff driver 'dts'
ok 112 - stash -- <subdir> leaves untracked files in subdir intact
ok 13 - typechanged submodule(submodule->blob)
ok 111 - subject lines do not have 822 atom-quoting
ok 96 - git log -SF master --max-count=1 # magic is (not used)
Initialized empty Git repository in /tmp/src/git-2.49.0/t/trash directory.t4041-diff-submodule-option/sm1/.git/
ok 112 - subject prefixes have space prepended
ok 191 - git rebase --apply --no-ff --keep-base main with our and their changes is work with diff HEAD
ok 1 - setup
*** t4047-diff-dirstat.sh ***
ok 113 - empty subject prefix does not have extra space
ok 2 - diff does not produce ambiguous index line
ok 34 - diff driver 'dts' in Islandic
# passed all 2 test(s)
1..2
ok 97 - git log -SF master --max-count=2 # magic is (not used)
*** t4048-diff-combined-binary.sh ***
ok 113 - stash -- <subdir> works with binary files
ok 114 - --rfc and --no-rfc
ok 35 - diff driver 'fortran'
ok 98 - git log -GF master # magic is (not used)
ok 14 - nonexistent commit
ok 1 - setup
ok 192 - git rebase --merge --keep-base main with our and their changes is noop with same HEAD
ok 115 - --rfc=WIP and --rfc=
ok 2 - diff-files -0
ok 36 - diff driver 'fortran' in Islandic
ok 3 - diff-files -1
ok 116 - --rfc=-(WIP) appends
ok 15 - typechanged submodule(blob->submodule)
ok 1 - setup
ok 114 - stash with user.name and user.email set works
ok 59 - builtin perl pattern compiles on bare repo with --attr-source
ok 99 - git log -GF -p master # magic is (not used)
ok 4 - diff-files -2
ok 2 - -p --relative=subdir/
ok 117 - --rfc does not overwrite prefix
ok 60 - builtin php pattern compiles
ok 5 - diff-files -3
ok 6 - diff --stat
ok 61 - builtin php wordRegex pattern compiles
ok 3 - -p --relative=subdir
ok 118 - --rfc is argument order independent
ok 16 - submodule is up to date
ok 37 - diff driver 'html'
ok 7 - diff --quiet
ok 119 - --subject-prefix="<non-empty>" and -k cannot be used together
ok 8 - diff --quiet --ignore-all-space
ok 70 - reset mixed and checkout orphan
# passed all 8 test(s)
1..8
ok 17 - submodule contains untracked content
ok 120 - --subject-prefix="" and -k cannot be used together
ok 100 - git log -GF -p --pickaxe-all master # magic is (not used)
ok 4 - -p --relative
*** t4049-diff-stat-count.sh ***
ok 121 - --rfc and -k cannot be used together
ok 122 - --from=ident notices bogus ident
ok 18 - submodule contains untracked content (untracked ignored)
ok 193 - git rebase --merge --no-ff --keep-base main with our and their changes is work with diff HEAD
ok 5 - -p --relative=sub
ok 19 - submodule contains untracked content (dirty ignored)
ok 38 - diff driver 'html' in Islandic
ok 20 - submodule contains untracked content (all ignored)
ok 123 - --from=ident replaces author
ok 6 - --numstat --relative=subdir/
ok 101 - git log -IA -IB -I1 -I2 -p master # magic is (not used)
ok 7 - --numstat --relative=subdir
ok 7 - setup for --cc --raw
ok 124 - --from uses committer ident
ok 21 - submodule contains untracked and modified content
ok 8 - --numstat --relative
ok 8 - check --cc --raw with four trees
ok 125 - --from omits redundant in-body header
ok 39 - diff driver 'java'
ok 9 - --numstat --relative=sub
ok 115 - stash works when user.name and user.email are not set
ok 22 - submodule contains untracked and modified content (untracked ignored)
ok 126 - with --force-in-body-from, redundant in-body from is kept
ok 23 - submodule contains untracked and modified content (dirty ignored)
ok 10 - --stat --relative=subdir/
ok 102 - git log --decorate --all # magic is (not used)
ok 24 - submodule contains untracked and modified content (all ignored)
ok 9 - check --cc --raw with forty trees
ok 11 - --stat --relative=subdir
ok 127 - format.forceInBodyFrom, equivalent to --force-in-body-from
ok 194 - git rebase --merge --keep-base main (rebase.abbreviateCommands = true) with our and their changes is noop with same HEAD
ok 12 - --stat --relative
ok 25 - submodule contains modified content
ok 128 - format.forceInBodyFrom, equivalent to --force-in-body-from
ok 40 - diff driver 'java' in Islandic
ok 103 - git log --decorate=full --all # magic is (not used)
ok 13 - --stat --relative=sub
ok 124 - move detection with submodules
ok 14 - --raw --relative=subdir/
ok 116 - stash --keep-index with file deleted in index does not resurrect it on disk
ok 15 - --raw --relative=subdir
ok 26 - submodule is modified
ok 104 - git log --decorate --clear-decorations --all # magic is (not used)
ok 62 - builtin php pattern compiles on bare repo with --attr-source
ok 16 - --raw --relative
ok 63 - builtin python pattern compiles
ok 17 - --raw --relative=sub
ok 41 - diff driver 'kotlin'
ok 129 - in-body headers trigger content encoding
ok 27 - modified submodule contains untracked content
ok 64 - builtin python wordRegex pattern compiles
ok 125 - only move detection ignores white spaces
ok 105 - git log --decorate=full --clear-decorations --all # magic is (not used)
ok 28 - modified submodule contains untracked content (untracked ignored)
ok 130 - signoff: commit with no body
ok 195 - git rebase --merge --no-ff --keep-base main (rebase.abbreviateCommands = true) with our and their changes is work with diff HEAD
ok 10 - setup combined ignore spaces
ok 1 - setup
ok 18 - config diff.relative false -p 
ok 1 - setup binary merge conflict
ok 29 - modified submodule contains untracked content (dirty ignored)
ok 30 - modified submodule contains untracked content (all ignored)
ok 2 - diff -m indicates binary-ness
ok 131 - signoff: commit with only subject
ok 11 - check combined output (no ignore space)
ok 117 - stash --keep-index --include-untracked with empty tree
ok 106 - git rev-list --parents HEAD # magic is (not used)
ok 42 - diff driver 'kotlin' in Islandic
ok 3 - diff -c indicates binary-ness
ok 2 - mode-only change show as a 0-line change
ok 19 - config diff.relative true -p --no-relative
ok 31 - modified submodule contains untracked and modified content
ok 126 - compare whitespace delta across moved blocks
ok 4 - diff --cc indicates binary-ness
ok 12 - check combined output (ignore space at eol)
ok 1 - setup
ok 132 - signoff: commit with only subject that does not end with NL
ok 107 - git rev-list --children HEAD # magic is (not used)
ok 3 - binary changes do not count in lines
ok 32 - modified submodule contains untracked and modified content (untracked ignored)
ok 13 - check combined output (ignore space change)
ok 20 - config diff.relative false -p --no-relative
ok 43 - diff driver 'matlab'
ok 133 - signoff: no existing signoffs
ok 196 - git rebase --apply --keep-base with our and their changes is noop with same HEAD
ok 127 - bogus settings in move detection erroring out
ok 33 - modified submodule contains untracked and modified content (dirty ignored)
ok 14 - check combined output (ignore all spaces)
ok 34 - modified submodule contains untracked and modified content (all ignored)
ok 128 - compare whitespace delta incompatible with other space options
ok 2 - sanity check setup (--numstat)
ok 108 - git whatchanged master # magic is (not used)
ok 118 - stash apply should succeed with unmodified file
ok 4 - exclude unmerged entries from total file count
ok 35 - modified submodule contains modified content
ok 21 - config diff.relative false -p 
ok 134 - signoff: no existing signoffs and no trailing NL
# passed all 4 test(s)
1..4
*** t4050-diff-histogram.sh ***
ok 44 - diff driver 'matlab' in Islandic
ok 36 - deleted submodule
ok 135 - signoff: some random signoff
ok 3 - various ways to misspell --dirstat
ok 22 - config diff.relative true -p --no-relative
ok 109 - git whatchanged master # magic is noellipses
ok 65 - builtin python pattern compiles on bare repo with --attr-source
ok 66 - builtin ruby pattern compiles
ok 129 - compare mixed whitespace delta across moved blocks
ok 67 - builtin ruby wordRegex pattern compiles
ok 136 - signoff: misc conforming footer elements
ok 23 - config diff.relative false -p --no-relative
ok 45 - diff driver 'objc'
ok 130 - combine --ignore-blank-lines with --function-context
ok 71 - add everything with deep new file
ok 197 - git rebase --apply --no-ff --keep-base with our and their changes is work with diff HEAD
ok 110 - git whatchanged -p master # magic is (not used)
ok 4 - vanilla --dirstat
ok 119 - stash handles skip-worktree entries nicely
ok 137 - signoff: some random signoff-alike
ok 131 - combine --ignore-blank-lines with --function-context 2
ok 37 - create second submodule
# passed all 131 test(s)
1..131
ok 24 - config diff.relative false -p --relative=subdir/
ok 15 - combine diff coalesce simple
ok 138 - signoff: not really a signoff
ok 38 - multiple submodules
ok 111 - git whatchanged --root master # magic is (not used)
ok 5 - vanilla -X
ok 5 - setup non-binary with binary attribute
*** t4051-diff-function-context.sh ***
ok 25 - config diff.relative false -p --relative=subdir
ok 46 - diff driver 'objc' in Islandic
ok 6 - diff -m respects binary attribute
ok 139 - signoff: not really a signoff (2)
ok 39 - path filter
ok 7 - diff -c respects binary attribute
ok 112 - git whatchanged --root master # magic is noellipses
ok 8 - diff --cc respects binary attribute
ok 26 - config diff.relative true -p --relative=subdir/
ok 198 - git rebase --merge --keep-base with our and their changes is noop with same HEAD
ok 9 - setup textconv attribute
ok 6 - explicit defaults: --dirstat=changes,noncumulative,3
ok 140 - signoff: valid S-o-b paragraph in the middle
ok 47 - diff driver 'pascal'
ok 40 - given commit
ok 113 - git whatchanged --root -p master # magic is (not used)
ok 10 - diff -m respects textconv attribute
ok 141 - signoff: the same signoff at the end
ok 27 - config diff.relative true -p --relative=subdir
ok 41 - given commit --submodule
ok 7 - explicit defaults: -Xchanges,noncumulative,3
ok 120 - stash with core.fsyncmethod=batch
ok 48 - diff driver 'pascal' in Islandic
ok 11 - diff -c respects textconv attribute
ok 142 - signoff: the same signoff at the end, no trailing NL
ok 42 - given commit --submodule=short
ok 68 - builtin ruby pattern compiles on bare repo with --attr-source
ok 43 - setup .git file for sm2
ok 199 - git rebase --merge --no-ff --keep-base with our and their changes is work with diff HEAD
ok 114 - git whatchanged --patch-with-stat master # magic is (not used)
ok 28 - config diff.relative false -p --relative
ok 69 - builtin rust pattern compiles
ok 12 - diff --cc respects textconv attribute
ok 44 - diff --submodule with .git file
ok 143 - signoff: the same signoff NOT at the end
ok 70 - builtin rust wordRegex pattern compiles
ok 13 - diff-tree plumbing does not respect textconv
ok 49 - diff driver 'perl'
ok 29 - config diff.relative true -p --relative
ok 115 - git whatchanged --root --patch-with-stat master # magic is (not used)
ok 144 - signoff: tolerate garbage in conforming footer
ok 30 - config diff.relative true -p 
ok 50 - diff driver 'perl' in Islandic
ok 16 - combine diff coalesce tricky
ok 14 - diff --cc respects textconv on worktree file
ok 200 - git rebase --merge --keep-base (rebase.abbreviateCommands = true) with our and their changes is noop with same HEAD
ok 8 - later options override earlier options:
ok 116 - git whatchanged --root --patch-with-stat --summary master # magic is (not used)
ok 121 - git stash succeeds despite directory/file change
# passed all 14 test(s)
1..14
ok 31 - config diff.relative false -p --no-relative --relative
*** t4052-stat-output.sh ***
ok 1 - setup attributes files for tests with histogram
ok 51 - diff driver 'php'
ok 145 - signoff: respect trailer config
ok 2 - histogram diff from attributes
ok 32 - config diff.relative true -p --no-relative --relative
ok 117 - git whatchanged --root -c --patch-with-stat --summary master # magic is (not used)
ok 9 - non-defaults in config overridden by explicit defaults on command line
ok 3 - diff from attributes with bare repo with source
ok 4 - diff from attributes with bare repo with invalid source
ok 146 - signoff: footer begins with non-signoff without @ sign
ok 5 - histogram diff from attributes has valid diffstat
ok 33 - config diff.relative false -p --no-relative --relative=subdir
ok 6 - histogram diff
ok 118 - git whatchanged --root --cc --patch-with-stat --summary master # magic is (not used)
ok 52 - diff driver 'php' in Islandic
ok 7 - histogram diff command line precedence before attributes
ok 34 - config diff.relative true -p --no-relative --relative=subdir
ok 147 - format patch ignores color.ui
ok 201 - git rebase --merge --no-ff --keep-base (rebase.abbreviateCommands = true) with our and their changes is work with diff HEAD
ok 10 - --dirstat=0
ok 8 - histogram diff attributes precedence before config
ok 119 - git whatchanged -SF master # magic is (not used)
ok 71 - builtin rust pattern compiles on bare repo with --attr-source
ok 9 - histogram diff output is valid
ok 72 - builtin scheme pattern compiles
ok 45 - diff --submodule with objects referenced by alternates
ok 35 - external diff with --relative
# passed all 45 test(s)
1..45
ok 73 - builtin scheme wordRegex pattern compiles
ok 53 - diff driver 'python'
not ok 17 - combine diff coalesce three parents # TODO known breakage
ok 120 - git whatchanged -SF master # magic is noellipses
ok 11 - -X0
*** t4053-diff-no-index.sh ***
ok 10 - completely different files
# passed all 10 test(s)
1..10
not ok 202 - git rebase --apply --fork-point --onto B B with our and their changes is work with same HEAD # TODO known breakage
ok 122 - git stash can pop file -> directory saved changes
*** t4054-diff-bogus-tree.sh ***
ok 148 - format patch respects diff.relative
ok 121 - git whatchanged -SF -p master # magic is (not used)
ok 54 - diff driver 'python' in Islandic
ok 12 - diff.dirstat=0
ok 149 - cover letter with invalid --cover-from-description and config
ok 1 - preparation
ok 122 - git log --patch-with-stat master -- dir/ # magic is (not used)
ok 2 - format-patch: small change with long name gives more space to the name
ok 55 - diff driver 'ruby'
ok 3 - diff: small change with long name gives more space to the name
ok 150 - cover letter with format.coverFromDescription = default
ok 13 - --dirstat=0 --cumulative
ok 123 - git whatchanged --patch-with-stat master -- dir/ # magic is (not used)
ok 4 - show: small change with long name gives more space to the name
ok 72 - checkout behaves oddly with df-conflict-1
ok 5 - log: small change with long name gives more space to the name
ok 56 - diff driver 'ruby' in Islandic
ok 18 - combine diff missing delete bug
ok 203 - git rebase --apply --no-ff --fork-point --onto B B with our and their changes is work with diff HEAD
ok 151 - cover letter with --cover-from-description default
ok 6 - format-patch ignores diff.statNameWidth with long name
ok 124 - git log --patch-with-stat --summary master -- dir/ # magic is (not used)
ok 14 - --dirstat=0,cumulative
ok 7 - format-patch --stat=width ignores diff.statNameWidth with long name
ok 1 - setup
ok 8 - diff respects diff.statNameWidth with long name
ok 36 - setup diff --relative unmerged
ok 123 - git stash can pop directory -> file saved changes
ok 57 - diff driver 'scheme'
ok 2 - changed function
ok 74 - builtin scheme pattern compiles on bare repo with --attr-source
ok 9 - diff --stat=width respects diff.statNameWidth with long name
not ok 204 - git rebase --merge --fork-point --onto B B with our and their changes is work with same HEAD # TODO known breakage
ok 15 - -X0,cumulative
ok 125 - git whatchanged --patch-with-stat --summary master -- dir/ # magic is (not used)
ok 1 - setup
ok 10 - show respects diff.statNameWidth with long name
ok 75 - builtin tex pattern compiles
ok 152 - cover letter with format.coverFromDescription = none
ok 1 - create bogus tree
ok 2 - git diff --no-index --exit-code
ok 3 -  diff applies
ok 11 - show --stat=width respects diff.statNameWidth with long name
ok 4 -  context includes comment
ok 5 -  context includes begin
ok 76 - builtin tex wordRegex pattern compiles
ok 58 - diff driver 'scheme' in Islandic
ok 3 - git diff --no-index directories
ok 126 - git show initial # magic is (not used)
ok 6 -  context includes end
ok 7 -  context does not include other functions
ok 12 - log respects diff.statNameWidth with long name
ok 2 - create tree with matching file
ok 8 -  context does not include preceding empty lines
ok 9 -  context does not include trailing empty lines
ok 37 - diff --relative without change in subdir
ok 4 - git diff --no-index relative path outside repo
ok 3 - raw diff shows null sha1 (addition)
ok 16 - diff.dirstat=0,cumulative
ok 10 - changed includes
ok 5 - git diff --no-index with broken index
ok 13 - log --stat=width respects diff.statNameWidth with long name
ok 153 - cover letter with --cover-from-description none
ok 4 - raw diff shows null sha1 (removal)
ok 6 - git diff outside repo with broken index
ok 5 - raw diff shows null sha1 (modification)
ok 127 - git show --root initial # magic is (not used)
ok 7 - git diff --no-index executed outside repo gives correct error message
ok 59 - diff driver 'tex'
ok 19 - combine diff gets tree sorting right
ok 14 - format-patch --stat=width: a long name is given more room when the bar is short
ok 6 - raw diff shows null sha1 (other direction)
ok 7 - raw diff shows null sha1 (reverse)
ok 15 - format-patch --stat-width=width with long name
ok 11 -  diff applies
ok 17 - diff.dirstat=0 & --dirstat=cumulative
ok 205 - git rebase --merge --no-ff --fork-point --onto B B with our and their changes is work with diff HEAD
ok 8 - raw diff shows null sha1 (index)
ok 12 -  context includes begin
ok 13 -  context includes end
ok 9 - patch fails due to bogus sha1 (addition)
ok 38 - diff --relative --name-only with change in subdir
ok 14 -  context does not include other functions
ok 16 - format-patch --stat=width,name-width with long name
ok 124 - restore untracked files even when we hit conflicts
ok 10 - patch fails due to bogus sha1 (removal)
ok 15 -  context does not include trailing empty lines
ok 60 - diff driver 'tex' in Islandic
ok 128 - git show side # magic is (not used)
ok 16 - appended function
ok 11 - patch fails due to bogus sha1 (modification)
ok 8 - diff D F and diff F D
ok 17 - format-patch --stat-name-width=width with long name
ok 12 - patch fails due to bogus sha1 (other direction)
ok 154 - cover letter with format.coverFromDescription = message
ok 13 - patch fails due to bogus sha1 (reverse)
ok 18 - diff --stat=width: a long name is given more room when the bar is short
ok 14 - patch fails due to bogus sha1 (index)
ok 9 - turning a file into a directory
ok 18 - --dirstat-by-file
ok 19 - diff --stat-width=width with long name
# passed all 14 test(s)
1..14
ok 17 -  diff applies
ok 129 - git show master # magic is (not used)
ok 18 -  context includes begin
*** t4055-diff-context.sh ***
ok 19 -  context includes end
ok 10 - diff from repo subdir shows real paths (explicit)
ok 20 -  context does not include other functions
ok 20 - diff --stat=width,name-width with long name
ok 21 - appended function part
ok 11 - diff from repo subdir shows real paths (implicit)
ok 155 - cover letter with --cover-from-description message
ok 21 - diff --stat-name-width=width with long name
ok 125 - stash create reports a locked index
ok 19 - --dirstat=files
not ok 39 - diff --relative with change in subdir # TODO known breakage
not ok 206 - git rebase --merge --fork-point --onto B B (rebase.abbreviateCommands = true) with our and their changes is work with same HEAD # TODO known breakage
# still have 1 known breakage(s)
# passed all remaining 38 test(s)
1..39
ok 130 - git show -c master # magic is (not used)
ok 22 - show --stat=width: a long name is given more room when the bar is short
ok 12 - diff --no-index from repo subdir respects config (explicit)
ok 61 - word-diff with diff.sbe
ok 22 -  diff applies
*** t4056-diff-order.sh ***
ok 23 -  context includes begin
ok 23 - show --stat-width=width with long name
ok 24 -  context includes end
ok 25 -  context does not include other functions
ok 13 - diff --no-index from repo subdir respects config (implicit)
ok 26 -  context does not include preceding empty lines
ok 77 - builtin tex pattern compiles on bare repo with --attr-source
ok 24 - show --stat=width,name-width with long name
ok 27 - change with long common tail and no context
ok 20 - diff.dirstat=files
ok 14 - diff --no-index from repo subdir with absolute paths
ok 25 - show --stat-name-width=width with long name
ok 78 - builtin custom1 pattern compiles
ok 156 - cover letter with format.coverFromDescription = subject
ok 131 - git show -m master # magic is (not used)
ok 20 - setup for --combined-all-paths
ok 126 - stash push reports a locked index
ok 15 - diff --no-index allows external diff
ok 79 - builtin custom1 wordRegex pattern compiles
ok 26 - log --stat=width: a long name is given more room when the bar is short
ok 62 - word-diff with no newline at EOF
ok 16 - diff --no-index normalizes mode: no changes
ok 21 - --combined-all-paths and --raw
ok 27 - log --stat-width=width with long name
ok 28 -  diff applies
ok 29 -  context includes begin
ok 17 - diff --no-index normalizes mode: chmod +x
ok 30 -  context includes end
ok 132 - git show --first-parent master # magic is (not used)
ok 28 - log --stat=width,name-width with long name
ok 21 - --dirstat-by-file=10
ok 22 - --combined-all-paths and --cc
ok 31 -  context does not include other functions
ok 32 -  context does not include preceding empty lines
ok 18 - diff --no-index normalizes: mode not like git mode
ok 29 - log --stat-name-width=width with long name
ok 33 - changed function plus appended function
ok 63 - setup history with two files
ok 157 - cover letter with --cover-from-description subject
ok 133 - git show --stat side # magic is (not used)
ok 207 - git rebase --merge --no-ff --fork-point --onto B B (rebase.abbreviateCommands = true) with our and their changes is work with diff HEAD
ok 22 - --dirstat=files,10
ok 34 -  diff applies
ok 19 - diff --no-index normalizes: mode not like git mode (symlink)
ok 64 - wordRegex for the first file does not apply to the second
ok 127 - stash apply reports a locked index
ok 35 -  context includes begin
ok 158 - cover letter with --cover-from-description subject (UTF-8 subject line)
# passed all 64 test(s)
1..64
ok 36 -  context includes end
ok 30 - preparation for big-change tests
ok 37 -  context does not include other functions
# still have 2 known breakage(s)
# passed all remaining 125 test(s)
1..127
*** t4057-diff-combined-paths.sh ***
ok 134 - git show --stat --summary side # magic is (not used)
ok 20 - external diff with mode-only change
ok 38 - changed two consecutive functions
ok 31 - format-patch --cover-letter ignores COLUMNS with big change
ok 23 - diff.dirstat=10,files
ok 21 - diff --no-index treats '-' as stdin
ok 135 - git show --patch-with-stat side # magic is (not used)
not ok 208 - git rebase --apply --fork-point --onto B... B with our and their changes is work with same HEAD # TODO known breakage
*** t4058-diff-duplicates.sh ***
ok 32 - format-patch ignores COLUMNS with big change
ok 39 -  diff applies
ok 22 - diff --no-index -R treats '-' as stdin
ok 23 - diff --no-index refuses to diff stdin and a directory
ok 159 - cover letter with format.coverFromDescription = auto (short subject line)
ok 40 -  context includes begin
ok 33 - format-patch --graph ignores COLUMNS with big change
ok 41 -  context includes end
ok 136 - git show --patch-with-raw side # magic is (not used)
ok 24 - --dirstat-by-file --cumulative
ok 34 - diff respects COLUMNS with big change
ok 1 - setup
ok 42 -  overlapping hunks are merged
# passed all 42 test(s)
1..42
*** t4059-diff-submodule-not-initialized.sh ***
ok 24 - diff --no-index refuses to diff a named pipe and a directory
ok 2 - the default number of context lines is 3
ok 35 - show respects COLUMNS with big change
ok 36 - log respects COLUMNS with big change
ok 23 - setup for --combined-all-paths with funny names
ok 160 - cover letter with --cover-from-description auto (short subject line)
ok 1 - setup
ok 3 - diff.context honored by "log"
ok 25 - diff --no-index reads from pipes
ok 25 - --dirstat=files,cumulative
ok 137 - git show --patch-with-raw side # magic is noellipses
# passed all 25 test(s)
1..25
ok 37 - log --graph respects COLUMNS with big change
ok 80 - builtin custom1 pattern compiles on bare repo with --attr-source
ok 2 - no order (=tree object order)
ok 24 - --combined-all-paths and --raw and funny names
ok 81 - builtin custom2 pattern compiles
*** t4060-diff-submodule-option-diff-format.sh ***
ok 3 - missing orderfile
ok 4 - The -U option overrides diff.context
ok 25 - --combined-all-paths and --raw -and -z and funny names
ok 82 - builtin custom2 wordRegex pattern compiles
ok 38 - format-patch ignores not enough COLUMNS with big change
ok 5 - diff.context honored by "diff"
ok 26 - --combined-all-paths and --cc and funny names
ok 6 - plumbing not affected
# still have 1 known breakage(s)
# passed all remaining 25 test(s)
1..26
ok 138 - git show --patch-with-stat --summary side # magic is (not used)
ok 26 - diff.dirstat=cumulative,files
ok 39 - format-patch --graph ignores not enough COLUMNS with big change
ok 209 - git rebase --apply --no-ff --fork-point --onto B... B with our and their changes is work with diff HEAD
ok 73 - checkout behaves oddly with df-conflict-2
ok 7 - non-integer config parsing
ok 161 - cover letter with format.coverFromDescription = auto (long subject line)
ok 4 - unreadable orderfile
ok 40 - diff respects not enough COLUMNS with big change
ok 8 - negative integer config parsing
ok 5 - orderfile using option from subdir with --output
ok 41 - show respects not enough COLUMNS with big change
*** t4061-diff-indent.sh ***
ok 139 - git format-patch --stdout initial..side # magic is (not used)
ok 6 - orderfile using option (1)
ok 9 - -U0 is valid, so is diff.context=0
ok 42 - log respects not enough COLUMNS with big change
# passed all 9 test(s)
1..9
*** t4062-diff-pickaxe.sh ***
ok 162 - cover letter with --cover-from-description auto (long subject line)
ok 27 - --dirstat=files,cumulative,10
ok 43 - log --graph respects not enough COLUMNS with big change
ok 7 - orderfile is fifo (1)
not ok 210 - git rebase --merge --fork-point --onto B... B with our and their changes is work with same HEAD # TODO known breakage
ok 140 - git format-patch --stdout initial..master^ # magic is (not used)
ok 44 - format-patch ignores diff.statGraphWidth
ok 8 - orderfile using config (1)
ok 9 - cancelling configured orderfile (1)
ok 28 - diff.dirstat=10,cumulative,files
ok 45 - format-patch --graph ignores diff.statGraphWidth
ok 10 - orderfile using option (2)
ok 46 - diff respects diff.statGraphWidth
ok 28 - update the split index after unpack trees() copied a racily clean cache entry from the shared index #1
ok 163 - cover letter with command-line --cover-from-description overrides config
ok 141 - git format-patch --stdout initial..master # magic is (not used)
ok 47 - show respects diff.statGraphWidth
ok 11 - orderfile is fifo (2)
ok 12 - orderfile using config (2)
ok 29 - --dirstat=files,cumulative,16.7
ok 48 - log respects diff.statGraphWidth
ok 13 - cancelling configured orderfile (2)
ok 164 - cover letter using branch description (1)
ok 49 - log --graph respects diff.statGraphWidth
ok 142 - git format-patch --stdout --no-numbered initial..master # magic is (not used)
ok 50 - format-patch --stat=width with big change
ok 30 - diff.dirstat=16.7,cumulative,files
ok 165 - cover letter using branch description (2)
ok 83 - builtin custom2 pattern compiles on bare repo with --attr-source
ok 211 - git rebase --merge --no-ff --fork-point --onto B... B with our and their changes is work with diff HEAD
ok 51 - format-patch --stat-width=width with big change
ok 84 - builtin custom3 pattern compiles
ok 85 - builtin custom3 wordRegex pattern compiles
ok 1 - trivial merge - combine-diff empty
ok 1 - setup - submodules
ok 52 - format-patch --stat-graph-width=width with big change
ok 166 - cover letter using branch description (3)
ok 143 - git format-patch --stdout --numbered initial..master # magic is (not used)
ok 31 - diff.dirstat=16.70,cumulative,files
ok 1 - create trees with duplicate entries
ok 53 - format-patch --stat-width=width --graph with big change
ok 14 - setup for testing combine-diff order
ok 54 - format-patch --stat-graph-width=width --graph with big change
ok 167 - cover letter using branch description (4)
ok 2 - create tree without duplicate entries
ok 15 - combine-diff: no order (=tree object order)
ok 144 - git format-patch --attach --stdout initial..side # magic is (not used)
ok 16 - combine-diff: orderfile using option (1)
ok 3 - diff-tree between duplicate trees
ok 55 - diff --stat=width with big change
ok 32 - --dirstat=files,cumulative,27.2
not ok 212 - git rebase --merge --fork-point --onto B... B (rebase.abbreviateCommands = true) with our and their changes is work with same HEAD # TODO known breakage
ok 4 - diff-tree with renames
ok 1 - setup repository
ok 56 - diff --stat-width=width with big change
ok 17 - combine-diff: orderfile using option (2)
ok 168 - cover letter using branch description (5)
ok 5 - diff-tree FROM duplicate tree
ok 57 - diff --stat-graph-width=width with big change
ok 6 - diff-tree FROM duplicate tree, with renames
ok 1 - prepare
ok 145 - git format-patch --attach --stdout --suffix=.diff initial..side # magic is (not used)
ok 33 - --dirstat=files,cumulative,27.09
ok 58 - show --stat=width with big change
ok 1 - setup
ok 2 - added submodule
ok 2 - diff: ugly spaces
ok 169 - cover letter using branch description (6)
ok 59 - show --stat-width=width with big change
ok 18 - rotate and skip setup
ok 60 - show --stat-graph-width=width with big change
ok 3 - diff: --no-indent-heuristic overrides config
ok 19 - diff --rotate-to
ok 2 - only one truly conflicting path
ok 20 - diff --skip-to
ok 61 - log --stat=width with big change
ok 7 - create a few commits
ok 4 - diff: nice spaces with --indent-heuristic
ok 146 - git format-patch --attach --stdout initial..master^ # magic is (not used)
ok 8 - git read-tree does not segfault
ok 62 - log --stat-width=width with big change
ok 170 - cover letter with --description-file
ok 21 - diff --rotate/skip-to error condition
ok 34 - --dirstat=lines
ok 2 - -G matches
ok 171 - cover letter with nothing
ok 5 - diff: nice spaces with diff.indentHeuristic=true
ok 63 - log --stat-graph-width=width with big change
ok 2 - setup - git submodule add
ok 22 - log --rotate-to
ok 3 - added submodule, set diff.submodule
ok 3 - -S --pickaxe-regex
# passed all 3 test(s)
1..3
ok 9 - reset --hard does not segfault
ok 3 - submodule directory removed
ok 64 - log --stat-width=width --graph with big change
ok 6 - diff: --indent-heuristic with --patience
ok 23 - log --skip-to
*** t4063-diff-blobs.sh ***
ok 213 - git rebase --merge --no-ff --fork-point --onto B... B (rebase.abbreviateCommands = true) with our and their changes is work with diff HEAD
ok 86 - builtin custom3 pattern compiles on bare repo with --attr-source
# passed all 23 test(s)
1..23
ok 147 - git format-patch --attach --stdout initial..master # magic is (not used)
ok 65 - log --stat-graph-width=width --graph with big change
*** t4064-diff-oidfind.sh ***
ok 7 - diff: --indent-heuristic with --histogram
ok 172 - cover letter auto
ok 35 - diff.dirstat=lines
ok 10 - git diff HEAD does not segfault
ok 4 - --submodule=short overrides diff.submodule
ok 87 - last regexp must not be negated
ok 8 - diff: ugly functions
ok 66 - preparation for long-name tests
ok 148 - git format-patch --inline --stdout initial..side # magic is (not used)
not ok 11 - can switch to another branch when status is empty # TODO known breakage
ok 9 - diff: nice functions with --indent-heuristic
ok 5 - diff.submodule does not affect plumbing
ok 67 - format-patch --stat=width with big change is more balanced
ok 12 - forcibly switch to another branch, verify status empty
ok 10 - blame: nice spaces with --indent-heuristic
ok 13 - fast-forward from non-duplicate entries to duplicate
ok 214 - git rebase --apply --fork-point --onto main... main with our and their changes is noop with same HEAD
ok 68 - format-patch --stat=width --graph with big change is balanced
ok 36 - --dirstat=lines,0
ok 11 - blame: nice spaces with diff.indentHeuristic=true
ok 3 - merge introduces new file
ok 173 - cover letter auto user override
not ok 14 - clean status, switch branches, status still clean # TODO known breakage
ok 69 - diff --stat=width with big change is more balanced
ok 149 - git format-patch --inline --stdout initial..master^ # magic is (not used)
ok 12 - blame: ugly spaces with --no-indent-heuristic
ok 70 - show --stat=width with big change is more balanced
ok 174 - format-patch --zero-commit
ok 15 - switch to base branch and force status to be clean
ok 13 - blame: ugly spaces with diff.indentHeuristic=false
ok 71 - log --stat=width with big change is more balanced
ok 37 - diff.dirstat=0,lines
not ok 16 - fast-forward from duplicate entries to non-duplicate # TODO known breakage
# still have 3 known breakage(s)
# passed all remaining 13 test(s)
1..16
ok 38 - --dirstat=future_param,lines,0 should fail loudly
ok 72 - log --stat=width --graph with big change is balanced
ok 175 - From line has expected format
*** t4065-diff-anchored.sh ***
ok 150 - git format-patch --inline --stdout --numbered-files initial..master # magic is (not used)
ok 39 - --dirstat=dummy1,cumulative,2dummy should report both unrecognized parameters
ok 14 - blame: --no-indent-heuristic overrides config
ok 6 - modified submodule(forward)
ok 4 - setup - submodule multiple commits
ok 73 - format-patch ignores COLUMNS with long name
ok 15 - blame: --indent-heuristic overrides config
ok 5 - submodule removed multiple commits
ok 7 - modified submodule(forward)
ok 74 - format-patch --graph ignores COLUMNS with long name
ok 74 - mv directory from out-of-cone to in-cone
ok 16 - diff-tree: nice spaces with --indent-heuristic
ok 215 - git rebase --apply --no-ff --fork-point --onto main... main with our and their changes is work with diff HEAD
ok 151 - git format-patch --inline --stdout initial..master # magic is (not used)
ok 75 - diff respects COLUMNS with long name
ok 176 - format-patch -o with no leading directories
ok 17 - diff-tree: nice spaces with diff.indentHeuristic=true
ok 4 - merge removed a file
ok 8 - modified submodule(forward) --submodule
ok 76 - show respects COLUMNS with long name
# passed all 4 test(s)
1..4
ok 6 - submodule not initialized in new clone
ok 40 - diff.dirstat=future_param,0,lines should warn, but still work
ok 77 - log respects COLUMNS with long name
ok 18 - diff-tree: ugly spaces with --no-indent-heuristic
*** t4066-diff-emit-delay.sh ***
ok 78 - log --graph respects COLUMNS with long name
ok 1 - create some blobs
ok 152 - git format-patch --inline --stdout --subject-prefix=TESTCASE initial..master # magic is (not used)
ok 9 - modified submodule(forward) --submodule=short
ok 19 - diff-tree: ugly spaces with diff.indentHeuristic=false
ok 177 - format-patch -o with leading existing directories
ok 2 - diff by sha1
ok 3 - index of sha1 diff
ok 4 - sha1 diff uses arguments as paths
ok 5 - sha1 diff has no mode change
ok 79 - format-patch ignores prefix greater than COLUMNS with big change
ok 20 - diff-tree: --indent-heuristic overrides config
ok 41 - --shortstat --dirstat should output only one dirstat
ok 6 - diff by tree:path (run)
# passed all 41 test(s)
1..41
ok 216 - git rebase --merge --fork-point --onto main... main with our and their changes is noop with same HEAD
ok 7 - index of tree:path diff
ok 8 - tree:path diff uses filenames as paths
ok 153 - git config format.subjectprefix DIFFERENT_PREFIX # magic is (not used)
ok 21 - diff-tree: --no-indent-heuristic overrides config
ok 9 - tree:path diff shows mode change
*** t4067-diff-partial-clone.sh ***
ok 10 - diff by ranged tree:path
ok 11 - index of ranged tree:path diff
ok 80 - format-patch --graph ignores prefix greater than COLUMNS with big change
ok 12 - ranged tree:path diff uses filenames as paths
ok 1 - setup 
ok 178 - format-patch -o with leading non-existing directories
ok 13 - ranged tree:path diff shows mode change
ok 81 - diff respects prefix greater than COLUMNS with big change
ok 10 - modified submodule(backward)
ok 2 - find the greeting blob
ok 14 - diff blob against file
ok 154 - git format-patch --inline --stdout initial..master^^ # magic is (not used)
ok 15 - index of blob-file diff
ok 22 - diff-index: nice spaces with --indent-heuristic
ok 16 - blob-file diff uses filename as paths
ok 82 - show respects prefix greater than COLUMNS with big change
ok 83 - log respects prefix greater than COLUMNS with big change
ok 3 - setup a tree
ok 1 - --anchored
ok 17 - blob-file diff shows mode change
ok 7 - setup submodule moved
ok 4 - find a tree
ok 18 - blob-file diff prefers filename to sha1
ok 84 - log --graph respects prefix greater than COLUMNS with big change
ok 23 - diff-index: nice spaces with diff.indentHeuristic=true
# passed all 18 test(s)
1..18
ok 155 - git format-patch --stdout --cover-letter -n initial..master^ # magic is (not used)
ok 2 - --anchored multiple
*** t4068-diff-symmetric-merge-base.sh ***
ok 217 - git rebase --merge --no-ff --fork-point --onto main... main with our and their changes is work with diff HEAD
ok 3 - --anchored with nonexistent line has no effect
ok 179 - format-patch format.outputDirectory option
ok 4 - --anchored with non-unique line has no effect
ok 11 - modified submodule(backward and forward)
ok 156 - git diff --abbrev initial..side # magic is (not used)
ok 5 - diff still produced with impossible multiple --anchored
ok 24 - diff-index: ugly spaces with --no-indent-heuristic
ok 85 - merge --stat respects diff.statGraphWidth with big change
ok 180 - format-patch -o overrides format.outputDirectory
ok 157 - git diff -U initial..side # magic is (not used)
ok 6 - later algorithm arguments override earlier ones
ok 25 - diff-index: ugly spaces with diff.indentHeuristic=false
ok 8 - submodule moved then removed
# passed all 8 test(s)
1..8
ok 181 - format-patch forbids multiple outputs
ok 86 - merge --stat respects COLUMNS with big change
*** t4069-remerge-diff.sh ***
ok 158 - git diff -U1 initial..side # magic is (not used)
ok 12 - typechanged submodule(submodule->blob), --cached
ok 218 - git rebase --merge --fork-point --onto main... main (rebase.abbreviateCommands = true) with our and their changes is noop with same HEAD
ok 26 - diff-index: --indent-heuristic overrides config
ok 182 - configured outdir does not conflict with output options
ok 7 - --anchored works with other commands like "git show"
# passed all 7 test(s)
1..7
ok 5 - setup a submodule
*** t4100-apply-stat.sh ***
ok 183 - format-patch --output
ok 87 - merge --stat respects diff.statNameWidth with long name
ok 13 - typechanged submodule(submodule->blob)
ok 159 - git diff -r initial..side # magic is (not used)
ok 6 - find a submodule
ok 27 - diff-index: --no-indent-heuristic overrides config
ok 184 - format-patch --cover-letter --output
ok 14 - typechanged submodule(submodule->blob)
ok 88 - merge --stat respects COLUMNS with long name
ok 160 - git diff --stat initial..side # magic is (not used)
# passed all 88 test(s)
1..88
Initialized empty Git repository in /tmp/src/git-2.49.0/t/trash directory.t4060-diff-submodule-option-diff-format/sm1/.git/
ok 1 - set up history with a merge
ok 28 - diff-files: nice spaces with --indent-heuristic
*** t4101-apply-nonl.sh ***
ok 161 - git diff -r --stat initial..side # magic is (not used)
ok 219 - git rebase --merge --no-ff --fork-point --onto main... main (rebase.abbreviateCommands = true) with our and their changes is work with diff HEAD
ok 88 - setup hunk header tests
ok 1 - git show batches blobs
ok 162 - git diff initial..side # magic is (not used)
ok 2 - log --cc -p --stat --color-moved
ok 29 - diff-files: nice spaces with diff.indentHeuristic=true
# passed all 2 test(s)
1..2
ok 89 - hunk header: README
ok 7 - set up merge tests
ok 90 - hunk header: bash-arithmetic-function
*** t4102-apply-rename.sh ***
ok 15 - nonexistent commit
ok 91 - hunk header: bash-bashism-style-compact
ok 163 - git diff --patch-with-stat initial..side # magic is (not used)
ok 92 - hunk header: bash-bashism-style-function
ok 220 - git rebase --apply --fork-point --keep-base main with our and their changes is noop with same HEAD
ok 30 - diff-files: ugly spaces with --no-indent-heuristic
ok 93 - hunk header: bash-bashism-style-whitespace
ok 185 - format-patch --base
ok 94 - hunk header: bash-conditional-function
ok 16 - typechanged submodule(blob->submodule)
ok 164 - git diff --patch-with-raw initial..side # magic is (not used)
ok 95 - hunk header: bash-missing-parentheses
ok 1 - rename
ok 96 - hunk header: bash-mixed-style-compact
ok 2 - rename with recount
ok 97 - hunk header: bash-mixed-style-function
ok 186 - format-patch --base errors out when base commit is in revision list
ok 98 - hunk header: bash-nested-functions
ok 3 - copy
ok 8 - detect merge which introduces blob
ok 165 - git diff --patch-with-raw initial..side # magic is noellipses
ok 31 - diff-files: ugly spaces with diff.indentHeuristic=false
ok 99 - hunk header: bash-other-characters
ok 4 - copy with recount
ok 17 - submodule is up to date
ok 100 - hunk header: bash-posix-style-compact
ok 5 - rewrite
ok 101 - hunk header: bash-posix-style-function
ok 6 - rewrite with recount
ok 166 - git diff --patch-with-stat -r initial..side # magic is (not used)
ok 102 - hunk header: bash-posix-style-whitespace
ok 7 - mode
ok 103 - hunk header: bash-subshell-function
ok 8 - mode with recount
ok 18 - submodule contains untracked content
ok 221 - git rebase --apply --no-ff --fork-point --keep-base main with our and their changes is work with diff HEAD
ok 32 - diff-files: --indent-heuristic overrides config
ok 9 - non git (1)
ok 104 - hunk header: bash-trailing-comment
ok 19 - submodule contains untracked content (untracked ignored)
ok 2 - diff batches blobs
ok 10 - non git (1) with recount
ok 1 - apply diff between 0 and 1
ok 167 - git diff --patch-with-raw -r initial..side # magic is (not used)
ok 9 - detect merge which removes blob
ok 1 - setup
ok 20 - submodule contains untracked content (dirty ignored)
ok 105 - hunk header: cpp-c++-function
ok 11 - non git (2)
ok 7 - stable fanout 1 is followed by stable fanout 0
ok 2 - apply diff between 0 and 2
ok 21 - submodule contains untracked content (all ignored)
ok 106 - hunk header: cpp-class-constructor
# passed all 7 test(s)
1..7
ok 12 - non git (2) with recount
ok 2 - diff with one merge base
ok 3 - apply diff between 0 and 3
ok 107 - hunk header: cpp-class-constructor-mem-init
ok 13 - non git (3)
ok 108 - hunk header: cpp-class-definition
ok 33 - diff-files: --no-indent-heuristic overrides config
ok 4 - apply diff between 1 and 0
ok 3 - diff with two merge bases
ok 14 - non git (3) with recount
# passed all 33 test(s)
1..33
ok 109 - hunk header: cpp-class-definition-derived
ok 5 - apply diff between 1 and 2
ok 168 - git diff --patch-with-raw -r initial..side # magic is noellipses
ok 4 - diff with no merge bases
ok 15 - incomplete (1)
*** t4103-apply-binary.sh ***
ok 22 - submodule contains untracked and modified content
ok 1 - setup
ok 110 - hunk header: cpp-class-destructor
ok 6 - apply diff between 1 and 3
ok 222 - git rebase --merge --fork-point --keep-base main with our and their changes is noop with same HEAD
ok 5 - diff with too many symmetric differences
ok 16 - incomplete (1) with recount
ok 10 - do not detect merge that does not touch blob
ok 2 - apply
ok 111 - hunk header: cpp-function-returning-global-type
ok 17 - incomplete (2)
ok 7 - apply diff between 2 and 0
ok 6 - diff with symmetric difference and extraneous arg
# passed all 10 test(s)
1..10
ok 18 - incomplete (2) with recount
ok 8 - apply diff between 2 and 1
ok 169 - git diff --name-status dir2 dir # magic is (not used)
ok 112 - hunk header: cpp-function-returning-nested
ok 3 - validate
ok 7 - diff with two ranges
ok 19 - applying a hunk header which overflows fails
*** t4104-apply-boundary.sh ***
# passed all 19 test(s)
1..19
ok 8 - diff with ranges and extra arg
ok 9 - apply diff between 2 and 3
ok 113 - hunk header: cpp-function-returning-pointer
ok 4 - apply reverse
ok 23 - submodule contains untracked and modified content (untracked ignored)
ok 75 - rm pathspec inside sparse definition
ok 9 - diff --merge-base with no commits
*** t4105-apply-fuzz.sh ***
ok 114 - hunk header: cpp-function-returning-reference
ok 10 - apply diff between 3 and 0
ok 24 - submodule contains untracked and modified content (dirty ignored)
ok 5 - apply copy
ok 10 - diff --merge-base with three commits
# passed all 5 test(s)
1..5
ok 170 - git diff --no-index --name-status dir2 dir # magic is (not used)
ok 11 - apply diff between 3 and 1
ok 25 - submodule contains untracked and modified content (all ignored)
ok 115 - hunk header: cpp-gnu-style-function
ok 1 - setup basic merges
*** t4106-apply-stdin.sh ***
ok 12 - apply diff between 3 and 2
ok 116 - hunk header: cpp-namespace-definition
# passed all 12 test(s)
1..12
ok 11 - diff-index --merge-base with one commit
ok 2 - remerge-diff on a clean merge
*** t4107-apply-ignore-whitespace.sh ***
*** t4108-apply-threeway.sh ***
ok 117 - hunk header: cpp-operator-definition
ok 171 - git diff --no-index --name-status -- dir2 dir # magic is (not used)
ok 3 - remerge-diff on a clean merge with a filter
ok 26 - submodule contains modified content
ok 118 - hunk header: cpp-skip-access-specifiers
ok 12 - diff-index --merge-base with annotated tag
ok 223 - git rebase --merge --no-ff --fork-point --keep-base main with our and their changes is work with diff HEAD
ok 119 - hunk header: cpp-skip-comment-block
ok 172 - git diff --no-index dir dir3 # magic is (not used)
ok 4 - remerge-diff with both a resolved conflict and an unrelated change
ok 120 - hunk header: cpp-skip-labels
ok 121 - hunk header: cpp-struct-definition
ok 187 - format-patch --base errors out when base commit is not ancestor of revision list
ok 5 - pickaxe still includes additional headers for relevant changes
ok 122 - hunk header: cpp-struct-single-line
ok 13 - diff-index --merge-base with one commit and unstaged changes
ok 123 - hunk header: cpp-template-function-definition
ok 173 - git diff master master^ side # magic is (not used)
ok 3 - diff skips same-OID blobs
ok 27 - submodule is modified
ok 124 - hunk header: cpp-union-definition
ok 6 - can filter out additional headers with pickaxe
ok 125 - hunk header: cpp-void-c-function
ok 14 - diff-index --merge-base with one commit and staged and unstaged changes
ok 174 - git diff --line-prefix=abc master master^ side # magic is (not used)
ok 126 - hunk header: csharp-exclude-assignments
ok 7 - remerge-diff also works for git-diff-tree
ok 28 - modified submodule contains untracked content
ok 224 - git rebase --merge --fork-point --keep-base main (rebase.abbreviateCommands = true) with our and their changes is noop with same HEAD
ok 127 - hunk header: csharp-exclude-control-statements
ok 175 - git diff --dirstat master~1 master~2 # magic is (not used)
ok 128 - hunk header: csharp-exclude-exceptions
ok 15 - diff-index --merge-base --cached with one commit and staged and unstaged changes
ok 129 - hunk header: csharp-exclude-generic-method-calls
ok 29 - modified submodule contains untracked content (untracked ignored)
ok 16 - diff-index --merge-base with non-commit
ok 130 - hunk header: csharp-exclude-init-dispose
ok 1 - setup
ok 188 - format-patch --base=auto
ok 176 - git diff --dirstat initial rearrange # magic is (not used)
ok 17 - diff-index --merge-base with no merge bases and one commit
ok 131 - hunk header: csharp-exclude-iterations
ok 2 - unmodified patch
ok 1 - setup
ok 132 - hunk header: csharp-exclude-method-calls
ok 30 - modified submodule contains untracked content (dirty ignored)
ok 18 - diff-index --merge-base with multiple merge bases and one commit
ok 2 - git apply --numstat - < patch
ok 31 - modified submodule contains untracked content (all ignored)
ok 133 - hunk header: csharp-exclude-other
ok 3 - minus offset
ok 177 - git diff --dirstat-by-file initial rearrange # magic is (not used)
ok 3 - git apply --numstat - < patch patch
# passed all 3 test(s)
1..3
ok 134 - hunk header: csharp-method
ok 1 - file creation
*** t4109-apply-multifrag.sh ***
ok 225 - git rebase --merge --no-ff --fork-point --keep-base main (rebase.abbreviateCommands = true) with our and their changes is work with diff HEAD
ok 4 - plus offset
ok 135 - hunk header: csharp-method-array
# still have 6 known breakage(s)
# passed all remaining 219 test(s)
1..225
ok 19 - diff --merge-base with one commit
ok 2 - patch2 fails (retab)
ok 5 - big offset
ok 3 - patch2 applies with --ignore-whitespace
*** t4110-apply-scan.sh ***
ok 178 - git diff --dirstat --cc master~1 master # magic is (not used)
ok 136 - hunk header: csharp-method-explicit
ok 32 - modified submodule contains untracked and modified content
ok 4 - patch2 reverse applies with --ignore-space-change
ok 20 - diff --merge-base with annotated tag
ok 137 - hunk header: csharp-method-generics
ok 6 - fuzz with no offset
ok 5 - patch2 applies (apply.ignorewhitespace = change)
ok 1 - setup
ok 6 - patch3 fails (missing string at EOL)
ok 7 - fuzz with minus offset
ok 138 - hunk header: csharp-method-generics-alternate-spaces
ok 179 - git diff --raw initial # magic is (not used)
ok 7 - patch4 fails (missing EOL at EOF)
ok 33 - modified submodule contains untracked and modified content (untracked ignored)
ok 1 - setup
ok 8 - patch5 fails (leading whitespace differences matter)
ok 2 - apply add-a-patch with context
ok 139 - hunk header: csharp-method-modifiers
ok 8 - fuzz with plus offset
ok 9 - re-create file (with --ignore-whitespace)
ok 1 - setup
ok 21 - diff --merge-base with one commit and unstaged changes
ok 10 - patch5 fails (--no-ignore-whitespace)
ok 140 - hunk header: csharp-method-multiline
ok 3 - apply add-z-patch with context
ok 9 - fuzz with big offset
ok 180 - git diff --raw initial # magic is noellipses
ok 34 - modified submodule contains untracked and modified content (dirty ignored)
# passed all 9 test(s)
1..9
ok 11 - apply --ignore-space-change --inaccurate-eof
ok 35 - modified submodule contains untracked and modified content (all ignored)
ok 141 - hunk header: csharp-method-params
*** t4111-apply-subdir.sh ***
# passed all 11 test(s)
1..11
ok 2 - stat binary diff -- should not fail.
*** t4112-apply-renames.sh ***
ok 4 - apply insert-a-patch with context
ok 142 - hunk header: csharp-method-special-chars
ok 3 - stat binary -p0 diff -- should not fail.
ok 2 - apply without --3way
ok 22 - diff --merge-base with one commit and staged and unstaged changes
ok 5 - apply mod-a-patch with context
ok 181 - git diff --raw --abbrev=4 initial # magic is (not used)
ok 143 - hunk header: csharp-method-with-spacing
ok 4 - stat binary diff (copy) -- should not fail.
ok 6 - apply mod-z-patch with context
ok 144 - hunk header: csharp-property
ok 36 - modified submodule contains modified content
ok 8 - setup non-content conflicts
ok 5 - check binary diff -- should fail.
ok 145 - hunk header: csharp-property-braces-same-line
ok 7 - apply del-a-patch with context
ok 182 - git diff --raw --abbrev=4 initial # magic is noellipses
ok 23 - diff --merge-base --cached with one commit and staged and unstaged changes
ok 146 - hunk header: css-attribute-value-selector
ok 6 - check binary diff (copy) -- should fail.
ok 37 - deleted submodule
ok 9 - remerge-diff with non-content conflicts
ok 8 - apply del-z-patch with context
ok 24 - diff --merge-base with non-commit
ok 147 - hunk header: css-block-level-@-statements
ok 7 - check incomplete binary diff with replacement -- should fail.
ok 9 - apply add-a-patch without context
ok 148 - hunk header: css-brace-in-col-1
ok 183 - git diff --raw --no-abbrev initial # magic is (not used)
ok 25 - diff --merge-base with no merge bases and one commit
ok 10 - remerge-diff w/ diff-filter=U: all conflict headers, no diff content
ok 149 - hunk header: css-class-selector
ok 8 - check incomplete binary diff with replacement (copy) -- should fail.
ok 10 - apply add-z-patch without context
ok 150 - hunk header: css-colon-eol
ok 1 - git apply scan
ok 11 - submodule formatting ignores additional headers
ok 1 - git apply (1)
ok 26 - diff --merge-base with multiple merge bases and one commit
ok 151 - hunk header: css-colon-selector
# passed all 1 test(s)
1..1
ok 9 - check binary diff with replacement.
ok 184 - git diff --no-index --raw dir2 dir # magic is (not used)
*** t4113-apply-ending.sh ***
ok 11 - apply insert-a-patch without context
ok 2 - git apply (2)
ok 152 - hunk header: css-common
ok 10 - check binary diff with replacement (copy).
ok 3 - git apply (3)
ok 27 - diff-tree --merge-base with two commits
ok 3 - apply with --3way
ok 153 - hunk header: css-id-selector
ok 12 - apply mod-a-patch without context
# passed all 3 test(s)
1..3
ok 12 - remerge-diff w/ diff-filter=R: relevant file + conflict header
ok 189 - format-patch errors out when history involves criss-cross
ok 28 - diff-tree --merge-base commit and non-commit
ok 38 - create second submodule
*** t4114-apply-typechange.sh ***
ok 154 - hunk header: css-long-selector-list
ok 29 - diff-tree --merge-base with no merge bases and two commits
ok 185 - git diff --no-index --raw dir2 dir # magic is noellipses
ok 155 - hunk header: css-prop-sans-indent
ok 13 - apply mod-z-patch without context
ok 11 - apply binary diff -- should fail.
ok 190 - format-patch format.useAutoBase whenAble history involves criss-cross
ok 30 - diff-tree --merge-base with multiple merge bases and two commits
ok 13 - remerge-diff w/ pathspec: limits to relevant file including conflict header
ok 156 - hunk header: css-root-selector
ok 14 - apply del-a-patch without context
ok 157 - hunk header: css-short-selector-list
ok 39 - multiple submodules
ok 31 - diff --merge-base with two commits
ok 12 - apply binary diff -- should fail.
ok 186 - git diff --no-index --raw --abbrev=4 dir2 dir # magic is (not used)
ok 158 - hunk header: css-trailing-space
ok 32 - diff --merge-base commit and non-commit
ok 1 - setup
ok 2 - setup: subdir
ok 15 - apply del-z-patch without context
ok 4 - when fetching missing objects, diff skips GITLINKs
ok 159 - hunk header: custom1-pattern
ok 33 - diff --merge-base with no merge bases and two commits
ok 160 - hunk header: custom2-match-to-end-of-line
ok 13 - apply binary diff (copy) -- should fail.
ok 191 - format-patch format.useAutoBase option
ok 34 - diff --merge-base with multiple merge bases and two commits
ok 1 - check rename/copy patch
ok 40 - path filter
ok 161 - hunk header: custom3-alternation-in-pattern
ok 16 - apply non-git add-a-patch without context
ok 187 - git diff --no-index --raw --abbrev=4 dir2 dir # magic is noellipses
ok 35 - diff-tree --merge-base with one commit
ok 2 - apply rename/copy patch
# passed all 2 test(s)
1..2
ok 162 - hunk header: dts-labels
ok 36 - diff --merge-base with range
*** t4115-apply-symlink.sh ***
# passed all 36 test(s)
1..36
ok 163 - hunk header: dts-node-unitless
ok 17 - apply non-git add-z-patch without context
ok 14 - apply binary diff (copy) -- should fail.
ok 4 - apply with --3way with merge.conflictStyle = diff3
*** t4116-apply-reverse.sh ***
ok 164 - hunk header: dts-nodes
ok 3 - apply from subdir of toplevel
ok 188 - git diff --no-index --raw --no-abbrev dir2 dir # magic is (not used)
ok 165 - hunk header: dts-nodes-boolean-prop
ok 192 - format-patch format.useAutoBase option with whenAble
ok 18 - apply non-git insert-a-patch without context
ok 166 - hunk header: dts-nodes-comment1
ok 15 - apply binary diff with full-index
ok 167 - hunk header: dts-nodes-comment2
ok 41 - given commit
ok 189 - git diff-tree --pretty --root --stat --compact-summary initial # magic is (not used)
ok 168 - hunk header: dts-nodes-multiline-prop
ok 19 - apply non-git mod-a-patch without context
ok 193 - format-patch --base overrides format.useAutoBase
ok 16 - apply binary diff with full-index (copy)
ok 169 - hunk header: dts-reference
ok 1 - setup
ok 20 - apply non-git mod-z-patch without context
ok 2 - apply at the end
ok 170 - hunk header: dts-root
ok 4 - apply --cached from subdir of toplevel
ok 190 - git diff-tree --pretty -R --root --stat --compact-summary initial # magic is (not used)
ok 194 - format-patch --no-base overrides format.useAutoBase
ok 171 - hunk header: dts-root-comment
ok 17 - apply full-index binary diff in new repo
ok 3 - apply at the beginning
# passed all 3 test(s)
1..3
ok 21 - apply non-git del-a-patch without context
ok 172 - hunk header: elixir-do-not-pick-end
*** t4117-apply-reject.sh ***
ok 14 - setup non-content conflicts
ok 173 - hunk header: elixir-ex-unit-test
ok 42 - setup .git file for sm2
ok 195 - format-patch --no-base overrides format.useAutoBase whenAble
ok 18 - apply binary diff without replacement.
ok 191 - git diff-tree --pretty note # magic is (not used)
ok 174 - hunk header: elixir-function
ok 22 - apply non-git del-z-patch without context
ok 196 - format-patch --base with --attach
ok 15 - remerge-diff turns off history simplification
ok 175 - hunk header: elixir-macro
ok 5 - apply with --3way --ours
ok 19 - apply binary diff without replacement (copy).
ok 176 - hunk header: elixir-module
ok 5 - diff with rename detection batches blobs
ok 197 - format-patch --attach cover-letter only is non-multipart
ok 43 - diff --submodule=diff with .git file
ok 76 - rm pathspec outside sparse definition
ok 23 - two lines
ok 177 - hunk header: elixir-module-func
ok 16 - remerge-diff with --reverse
ok 192 - git diff-tree --pretty --notes note # magic is (not used)
# passed all 16 test(s)
1..16
ok 178 - hunk header: elixir-nested-module
*** t4118-apply-empty-context.sh ***
ok 20 - apply binary diff.
ok 24 - apply patch with 3 context lines matching at end
ok 44 - deleted submodule with .git file
ok 179 - hunk header: elixir-private-function
# passed all 24 test(s)
1..24
ok 198 - format-patch with format.attach
ok 193 - git diff-tree --format=%N note # magic is (not used)
*** t4119-apply-config.sh ***
ok 180 - hunk header: elixir-protocol
ok 45 - typechanged(submodule->blob) submodule with .git file
ok 181 - hunk header: elixir-protocol-implementation
ok 21 - apply binary diff (copy).
ok 182 - hunk header: fortran-block-data
ok 194 - git diff-tree --stat --compact-summary initial mode # magic is (not used)
ok 199 - format-patch with format.attach=disabled
ok 183 - hunk header: fortran-comment
ok 5 - apply --index from subdir of toplevel
ok 6 - apply with --3way --theirs
ok 6 - apply half-broken patch from subdir of toplevel
ok 184 - hunk header: fortran-comment-keyword
ok 22 - apply binary -p0 diff
ok 195 - git diff-tree -R --stat --compact-summary initial mode # magic is (not used)
ok 185 - hunk header: fortran-comment-legacy
ok 7 - apply from .git dir
ok 1 - setup
ok 186 - hunk header: fortran-comment-legacy-star
ok 200 - -c format.mboxrd format-patch
ok 8 - apply from subdir of .git dir
ok 1 - setup repository and commits
ok 187 - hunk header: fortran-external-function
ok 6 - diff does not fetch anything if inexact rename detection is not needed
ok 1 - setup
ok 196 - log -m matches pure log
ok 188 - hunk header: fortran-external-subroutine
ok 2 - apply symlink patch
ok 189 - hunk header: fortran-module
ok 2 - file renamed from foo to foo/baz
ok 23 - reject truncated binary diff
ok 3 - apply --index symlink patch
# passed all 23 test(s)
1..23
ok 2 - apply in forward
ok 190 - hunk header: fortran-module-procedure
*** t4120-apply-popt.sh ***
ok 9 - apply --cached from .git dir
ok 191 - hunk header: fortran-program
ok 201 - interdiff: setup
ok 3 - file renamed from foo/baz to foo
ok 3 - apply in reverse
ok 4 - symlink setup
ok 192 - hunk header: fountain-scene
ok 1 - setup
ok 197 - log --diff-merges=on matches --diff-merges=separate
ok 7 - apply with --3way --union
ok 202 - interdiff: cover-letter
ok 193 - hunk header: golang-complex-function
ok 4 - directory becomes file
ok 46 - setup nested submodule
ok 194 - hunk header: golang-func
ok 203 - interdiff: reroll-count
ok 5 - symlink escape when creating new files
ok 2 - apply --reject is incompatible with --3way
ok 1 - setup
ok 195 - hunk header: golang-interface
ok 3 - apply without --reject should fail
ok 2 - apply --numstat
ok 204 - interdiff: reroll-count with a non-integer
ok 196 - hunk header: golang-long-func
ok 5 - file becomes directory
ok 4 - apply without --reject should fail
ok 47 - move nested submodule HEAD
ok 4 - setup separate repository lacking postimage
ok 205 - interdiff: reroll-count with a integer
ok 1 - setup
ok 197 - hunk header: golang-struct
ok 5 - apply with --reject should fail but update the file
ok 3 - apply --apply
ok 6 - symlink escape when modifying file
ok 198 - hunk header: java-class-brace-on-separate-line
ok 198 - log --dd matches --diff-merges=1 -p
ok 10 - apply --cached from subdir of .git dir
# passed all 3 test(s)
1..3
ok 6 - apply with --reject should fail but update the file
# passed all 10 test(s)
1..10
ok 5 - apply in forward without postimage
*** t4121-apply-diffs.sh ***
ok 6 - file becomes symlink
ok 199 - hunk header: java-class-member-function
*** t4122-apply-symlink-inside.sh ***
ok 206 - interdiff: solo-patch
ok 48 - diff --submodule=diff with moved nested submodule HEAD
ok 7 - the same test with --verbose
ok 199 - deny wrong log.diffMerges config
ok 2 - apply --whitespace=strip
ok 6 - apply in reverse without postimage
ok 200 - hunk header: java-class-space-before-type-parameters
ok 8 - apply cleanly with --verbose
ok 7 - symlink escape when deleting file
ok 7 - symlink becomes file
# passed all 8 test(s)
1..8
ok 7 - diff --break-rewrites fetches only if necessary, and batches blobs if it does
ok 7 - reversing a whitespace introduction
# passed all 7 test(s)
1..7
*** t4123-apply-shrink.sh ***
*** t4124-apply-ws-rule.sh ***
# passed all 7 test(s)
1..7
ok 3 - apply --whitespace=strip from config
ok 201 - hunk header: java-class-type-parameters
ok 8 - apply with --3way with rerere enabled
*** t4125-apply-ws-fuzz.sh ***
ok 202 - hunk header: java-class-type-parameters-implements
ok 207 - range-diff: solo-patch
ok 8 - symlink becomes file, in reverse
ok 4 - apply --whitespace=strip in subdir
ok 49 - diff --submodule=diff recurses into nested submodules
ok 203 - hunk header: java-enum-constant
ok 200 - git config log.diffMerges first-parent
ok 208 - interdiff: multi-patch, implicit --cover-letter
ok 204 - hunk header: java-interface-type-parameters
ok 5 - apply --whitespace=strip from config in subdir
ok 205 - hunk header: java-interface-type-parameters-extends
ok 9 - binary file becomes symlink
ok 8 - --reject removes .rej symlink if it exists
ok 209 - interdiff: explicit --no-cover-letter defeats implied --cover-letter
# passed all 8 test(s)
1..8
ok 206 - hunk header: java-method-return-generic-bounded
*** t4126-apply-empty.sh ***
ok 210 - format-patch does not respect diff.noprefix
ok 77 - rm pathspec expands index when necessary
ok 10 - symlink becomes binary file
ok 6 - same in subdir but with traditional patch input
ok 207 - hunk header: java-method-return-generic-wildcard
ok 211 - format-patch respects format.noprefix
ok 1 - setup
ok 208 - hunk header: java-nested-field
ok 212 - format-patch --default-prefix overrides format.noprefix
ok 2 - apply git diff with -p2
ok 11 - symlink becomes directory
# still have 5 known breakage(s)
# passed all remaining 207 test(s)
1..212
ok 50 - diff --submodule=diff recurses into deleted nested submodules
ok 7 - same but with traditional patch input of depth 1
# passed all 50 test(s)
ok 201 - git config log.diffMerges first-parent vs -m
1..50
ok 209 - hunk header: java-non-sealed
ok 3 - apply with too large -p
ok 210 - hunk header: java-record
ok 4 - apply (-p2) traditional diff with funny filenames
ok 12 - directory becomes symlink
# passed all 12 test(s)
1..12
*** t4127-apply-same-fn.sh ***
ok 8 - same but with traditional patch input of depth 2
ok 202 - git diff-index -m
*** t4128-apply-root.sh ***
ok 5 - apply with too large -p and fancy filename
ok 211 - hunk header: java-record-space-before-components
ok 9 - apply -3 with add/add conflict setup
ok 203 - log -S requires an argument
*** t4129-apply-samemode.sh ***
ok 212 - hunk header: java-record-type-parameters
ok 6 - apply (-p2) diff, mode change only
ok 9 - same but with traditional patch input of depth 1
ok 213 - hunk header: java-sealed
ok 204 - diff --cached on unborn branch
ok 7 - file mode was changed
ok 214 - hunk header: java-sealed-permits
ok 8 - apply (-p2) diff, rename
ok 10 - same but with traditional patch input of depth 2
# passed all 8 test(s)
1..8
ok 10 - apply -3 with add/add conflict
ok 215 - hunk header: java-sealed-type-parameters
*** t4130-apply-criss-cross-rename.sh ***
ok 205 - diff --cached -- file on unborn branch
ok 1 - setup
ok 1 - setup
ok 2 - apply should fail gracefully
ok 1 - setup
ok 216 - hunk header: java-sealed-type-parameters-implements-permits
ok 2 - whitespace=nowarn, default rule
# passed all 2 test(s)
1..2
ok 11 - in subdir with traditional patch input
ok 206 - diff --line-prefix with spaces
ok 3 - whitespace=warn, default rule
# passed all 11 test(s)
1..11
*** t4131-apply-fake-ancestor.sh ***
ok 2 - check if contextually independent diffs for the same file apply
ok 217 - hunk header: java-sealed-type-parameters-permits
ok 1 - setup
ok 4 - whitespace=error-all, default rule
*** t4132-apply-removal.sh ***
# passed all 2 test(s)
1..2
ok 207 - diff-tree --stdin with log formatting
ok 11 - apply -3 with add/add conflict (dirty working tree)
ok 218 - hunk header: kotlin-class
*** t4133-apply-filenames.sh ***
ok 5 - whitespace=error-all, no rule
ok 208 - diff-tree --stdin with pathspec
ok 219 - hunk header: kotlin-enum-class
ok 1 - setup
ok 29 - update the split index after unpack trees() copied a racily clean cache entry from the shared index #2
ok 220 - hunk header: kotlin-fun
ok 6 - whitespace=error-all, no rule (attribute)
ok 209 - show A B ... -- <pathspec>
ok 2 - apply
ok 2 - nofix
ok 221 - hunk header: kotlin-inheritace-class
ok 222 - hunk header: kotlin-inline-class
ok 3 - withfix (forward)
ok 223 - hunk header: kotlin-interface
ok 210 - diff -I<regex>: setup
ok 224 - hunk header: kotlin-nested-fun
ok 3 - check result
ok 225 - hunk header: kotlin-public-class
ok 7 - spaces inserted by tab-in-indent
ok 1 - setup
ok 4 - withfix (backward)
ok 226 - hunk header: kotlin-sealed-class
ok 211 - diff -I<regex>
ok 12 - apply -3 with ambiguous repeating file
# passed all 4 test(s)
1..4
ok 227 - hunk header: markdown-heading-indented
*** t4134-apply-submodule.sh ***
ok 1 - setup
ok 8 - rule=-trailing,-space,-indent,-tab
ok 212 - diff -I<regex> --stat
ok 2 - apply empty
ok 228 - hunk header: markdown-heading-non-headings
ok 213 - diff -I<regex>: detect malformed regex
ok 229 - hunk header: matlab-class-definition
ok 1 - setup
ok 3 - apply empty patch fails
ok 214 - diff-files does not respect diff.noPrefix
ok 230 - hunk header: matlab-function
ok 9 - rule=-trailing,-space,-indent,-tab,tabwidth=16
ok 4 - do not read from beyond symbolic link
ok 2 - apply --directory -p (1)
ok 231 - hunk header: matlab-octave-section-1
ok 215 - diff-files respects --no-prefix
ok 1 - setup
ok 4 - apply with --allow-empty succeeds
ok 2 - apply same filename with independent changes
ok 216 - diff respects diff.noPrefix
ok 10 - rule=-trailing,-space,-indent,-tab (attributes)
ok 232 - hunk header: matlab-octave-section-2
ok 3 - apply --directory -p (2) 
ok 233 - hunk header: matlab-section
ok 5 - apply --index empty
ok 217 - diff --default-prefix overrides diff.noPrefix
ok 11 - rule=-trailing,-space,-indent,-tab,tabwidth=16 (attributes)
ok 2 - same mode (no index)
ok 1 - setup
ok 234 - hunk header: perl-skip-end-of-heredoc
ok 2 - criss-cross rename
ok 218 - diff respects diff.mnemonicPrefix
ok 13 - apply with --3way --cached clean apply
ok 6 - apply create
ok 235 - hunk header: perl-skip-forward-decl
ok 219 - diff --default-prefix overrides diff.mnemonicPrefix
ok 4 - apply --directory (new file)
ok 78 - sparse index is not expanded: rm
ok 3 - diff -M -B
ok 1 - setup
ok 3 - same mode (with index)
ok 236 - hunk header: perl-skip-sub-in-pod
ok 12 - rule=-trailing,-space,-indent,tab
ok 3 - apply same filename with overlapping changes
ok 4 - apply
ok 220 - diff respects diff.srcPrefix
ok 7 - apply --index create
ok 4 - apply same filename with overlapping changes, in reverse
ok 2 - apply diff with inconsistent filenames in headers
ok 237 - hunk header: perl-sub-definition
ok 5 - apply --directory -p (new file)
ok 1 - setup
ok 5 - do not follow symbolic link (setup)
ok 221 - diff respects diff.dstPrefix
ok 3 - apply diff with new filename missing from headers
ok 238 - hunk header: perl-sub-definition-kr-brace
ok 5 - criss-cross rename
ok 4 - same mode (index only)
ok 2 - test addEast.patch
ok 4 - apply diff with old filename missing from headers
ok 13 - rule=-trailing,-space,-indent,tab,tabwidth=16
ok 222 - diff --src-prefix overrides diff.srcPrefix
ok 239 - hunk header: php-abstract-class
# passed all 4 test(s)
1..4
ok 6 - diff -M -B
ok 5 - mode update (no index)
ok 6 - apply --directory (delete file)
*** t4135-apply-weird-filenames.sh ***
ok 240 - hunk header: php-abstract-method
ok 223 - diff --dst-prefix overrides diff.dstPrefix
ok 3 - test addGMT.patch
ok 7 - apply
ok 241 - hunk header: php-class
# passed all 7 test(s)
1..7
ok 224 - diff.{src,dst}Prefix ignored with diff.noPrefix
ok 8 - apply with no-contents and a funny pathname
ok 242 - hunk header: php-enum
*** t4136-apply-check.sh ***
ok 6 - mode update (with index)
ok 14 - apply with --3way --cached and conflicts
# passed all 8 test(s)
1..8
ok 14 - rule=-trailing,-space,-indent,tab (attributes)
ok 4 - test addWest.patch
ok 5 - apply same new filename after rename
ok 1 - setup
ok 225 - diff.{src,dst}Prefix ignored with diff.mnemonicPrefix
ok 7 - apply --directory (quoted filename)
*** t4137-apply-submodule.sh ***
ok 1 - setup
# passed all 7 test(s)
ok 243 - hunk header: php-final-class
1..7
ok 226 - diff.{src,dst}Prefix ignored with --default-prefix
*** t4138-apply-ws-expansion.sh ***
ok 2 - removing a submodule also removes all leading subdirectories
ok 5 - test createEast.patch
ok 7 - mode update (index only)
ok 227 - diff --no-renames cannot be abbreviated
ok 244 - hunk header: php-final-method
# passed all 2 test(s)
1..2
ok 15 - rule=-trailing,-space,-indent,tab,tabwidth=16 (attributes)
# passed all 227 test(s)
1..227
*** t4139-apply-escape.sh ***
ok 245 - hunk header: php-function
ok 6 - do not follow symbolic link (same input)
*** t4140-apply-ita.sh ***
ok 8 - empty mode is rejected
ok 246 - hunk header: php-interface
ok 6 - test createGMT.patch
ok 2 - apply --build-fake-ancestor
ok 15 - apply binary file patch
ok 9 - bogus mode is rejected
ok 247 - hunk header: php-method
ok 16 - rule=-trailing,-space,indent,-tab
ok 248 - hunk header: php-trait
ok 6 - apply same old filename after rename -- should fail.
ok 7 - test createWest.patch
ok 249 - hunk header: python-async-def
ok 250 - hunk header: python-class
ok 8 - test emptyEast.patch
ok 7 - do not follow symbolic link (existing)
# passed all 7 test(s)
1..7
ok 251 - hunk header: python-def
ok 17 - rule=-trailing,-space,indent,-tab,tabwidth=16
ok 252 - hunk header: python-indented-async-def
ok 9 - test emptyGMT.patch
*** t4141-apply-too-large.sh ***
ok 3 - apply --build-fake-ancestor in a subdirectory
# passed all 3 test(s)
1..3
ok 16 - apply binary file patch with 3way
ok 10 - do not use core.sharedRepository for working tree files
ok 253 - hunk header: python-indented-class
ok 10 - test emptyWest.patch
*** t4150-am.sh ***
ok 254 - hunk header: python-indented-def
ok 18 - rule=-trailing,-space,indent,-tab (attributes)
ok 11 - test removeEast.patch
ok 255 - hunk header: rust-fn
ok 256 - hunk header: rust-impl
ok 1 - setup
ok 12 - test removeGMT.patch
ok 19 - rule=-trailing,-space,indent,-tab,tabwidth=16 (attributes)
ok 257 - hunk header: rust-macro-rules
ok 7 - apply A->B (rename), C->A (rename), A->A -- should pass.
ok 17 - apply full-index patch with 3way
# passed all 7 test(s)
1..7
ok 258 - hunk header: rust-struct
ok 13 - test removeWest.patch
ok 2 - plain, git-style file creation patch
*** t4151-am-abort.sh ***
ok 259 - hunk header: rust-trait
ok 1 - setup
ok 20 - rule=-trailing,space,-indent,-tab
ok 260 - hunk header: scheme-class
ok 2 - apply --check exits non-zero with unrecognized input
ok 1 - bump git repo one level down
ok 14 - test removeWest2.patch
# passed all 14 test(s)
1..14
ok 261 - hunk header: scheme-def
ok 3 - apply exits non-zero with no-op patch
ok 2 - cannot create file containing ..
ok 3 - plain, traditional patch
*** t4152-am-subjects.sh ***
ok 4 - `apply --recount` allows no-op patch
ok 262 - hunk header: scheme-def-variant
ok 3 - can create file containing .. with --unsafe-paths
ok 5 - invalid combination: create and copy
ok 6 - invalid combination: create and rename
ok 4 - cannot create file containing .. (index)
ok 263 - hunk header: scheme-define-slash-public
# passed all 6 test(s)
1..6
ok 21 - rule=-trailing,space,-indent,-tab,tabwidth=16
ok 1 - setup
*** t4153-am-resume-override-opts.sh ***
ok 4 - plain, traditional file creation patch
ok 11 - git apply respects core.fileMode
ok 5 - cannot create file containing .. with --unsafe-paths (index)
ok 264 - hunk header: scheme-define-syntax
ok 6 - cannot delete file containing ..
ok 18 - apply delete then new patch with 3way
ok 265 - hunk header: scheme-define-variant
# passed all 18 test(s)
1..18
ok 2 - apply creation patch to ita path (--cached)
ok 7 - can delete file containing .. with --unsafe-paths
ok 22 - rule=-trailing,space,-indent,-tab (attributes)
ok 79 - grep with and --cached
ok 266 - hunk header: scheme-library
ok 1 - setup
ok 8 - cannot delete file containing .. (index)
ok 5 - with spaces, git-style file creation patch
*** t4200-rerere.sh ***
ok 12 - patch mode for new file is canonicalized
ok 267 - hunk header: scheme-local-define
ok 3 - apply creation patch to ita path (--index)
ok 2 - apply with ws expansion (t=$t)
ok 268 - hunk header: scheme-module
ok 23 - rule=-trailing,space,-indent,-tab,tabwidth=16 (attributes)
ok 1 # skip git apply rejects patches that are too large (missing EXPENSIVE)
ok 3 - apply with ws expansion (t=$t)
ok 6 - with spaces, traditional patch
ok 9 - symlink escape via ..
# passed all 1 test(s)
1..1
ok 4 - apply with ws expansion (t=$t)
ok 269 - hunk header: scheme-top-level-define
*** t4201-shortlog.sh ***
ok 1 - setup: messages
ok 4 - apply deletion patch to ita path (--cached)
ok 5 - apply with ws expansion (t=$t)
ok 270 - hunk header: scheme-user-defined-define
# passed all 270 test(s)
1..270
# passed all 5 test(s)
1..5
ok 10 - symlink escape via .. (index)
ok 7 - with spaces, traditional file creation patch
ok 13 - patch mode for deleted file is canonicalized
ok 5 - apply deletion patch to ita path (--index)
*** t4202-log.sh ***
# passed all 5 test(s)
1..5
ok 24 - rule=-trailing,space,-indent,tab
*** t4203-mailmap.sh ***
ok 11 - symlink escape via absolute path
ok 12 - symlink escape via absolute path (index)
ok 8 - with tab, git-style file creation patch
ok 25 - rule=-trailing,space,-indent,tab,tabwidth=16
# passed all 12 test(s)
1..12
ok 14 - patch mode for mode change is canonicalized
*** t4204-patch-id.sh ***
# passed all 14 test(s)
1..14
*** t4205-log-pretty-formats.sh ***
*** t4206-log-follow-harder-copies.sh ***
ok 9 - with tab, traditional patch
ok 26 - rule=-trailing,space,-indent,tab (attributes)
ok 1 - setup baseline commit
ok 27 - rule=-trailing,space,-indent,tab,tabwidth=16 (attributes)
ok 10 - with tab, traditional file creation patch
ok 2 - create patches with short subject
ok 11 - with backslash, git-style file creation patch
ok 28 - rule=-trailing,space,indent,-tab
ok 12 - with backslash, traditional patch
ok 3 - create patches with long subject
ok 29 - rule=-trailing,space,indent,-tab,tabwidth=16
ok 13 - with backslash, traditional file creation patch
ok 1 - setup
ok 4 - create patches with multiline subject
ok 30 - rule=-trailing,space,indent,-tab (attributes)
ok 14 - with quote, git-style file creation patch
ok 2 - nothing recorded without rerere
ok 31 - rule=-trailing,space,indent,-tab,tabwidth=16 (attributes)
ok 1 - setup commits and contacts file
ok 5 - short subject preserved (format-patch | am)
not ok 15 - with quote, traditional patch # TODO known breakage
ok 2 - check-mailmap no arguments
ok 1 - add a file path0 and commit.
ok 1 - setup
ok 3 - check-mailmap arguments
ok 3 - activate rerere, old style (conflicting merge)
ok 1 - setup
ok 2 - Change path0.
ok 4 - check-mailmap --stdin
ok 2 - --retry fails without in-progress operation
ok 32 - rule=trailing,-space,-indent,-tab
ok 1 - setup
ok 16 - with quote, traditional file creation patch
ok 1 - set up basic repos
ok 5 - check-mailmap --stdin arguments: no mapping
ok 2 - default output format
ok 6 - short subject preserved (format-patch -k | am)
ok 2 - am stops at a patch that does not apply
ok 3 - copy path0 to path1.
ok 4 - find the copy path0 -> path1 harder
ok 3 - pretty format
ok 4 - rerere.enabled works, too
ok 33 - rule=trailing,-space,-indent,-tab,tabwidth=16
ok 2 - alias builtin format
ok 3 - am --skip continue after failed am
ok 6 - check-mailmap --stdin arguments: mapping
ok 17 - whitespace-damaged traditional patch
ok 1 - setup
ok 5 - validate the output.
# passed all 5 test(s)
1..5
ok 2 - pretty
*** t4207-log-decoration-colors.sh ***
ok 7 - check-mailmap simple address: mapping
ok 4 - pretty format (with --date)
ok 7 - short subject preserved (format-patch -k | am -k)
ok 3 - pretty (tformat)
ok 3 - alias masking builtin format
ok 18 - traditional patch with colon in timezone
ok 4 - am --abort goes back after failed am
ok 4 - pretty (shortcut)
ok 3 - --3way overrides --no-3way
ok 5 - set up rr-cache
ok 34 - rule=trailing,-space,-indent,-tab (attributes)
ok 8 - check-mailmap --stdin simple address: mapping
ok 5 - --abbrev
ok 6 - rr-cache looks sane
ok 1 - setup
ok 5 - format
ok 9 - check-mailmap simple address: no mapping
ok 80 - grep is not expanded
ok 7 - rerere diff
ok 6 - format %w(11,1,2)
ok 6 - output from user-defined format is re-wrapped
ok 4 - alias user-defined format
ok 2 - patch-id output is well-formed
ok 10 - check-mailmap --stdin simple address: no mapping
ok 8 - long subject preserved (format-patch | am)
ok 8 - rerere status
ok 19 - traditional, whitespace-damaged, colon in timezone
ok 7 - format %w(,1,2)
ok 35 - rule=trailing,-space,-indent,-tab,tabwidth=16 (attributes)
ok 20 - apply handles a diff generated by Subversion
ok 7 - shortlog wrapping
# still have 1 known breakage(s)
# passed all remaining 19 test(s)
1..20
ok 11 - check-mailmap name and address: mapping
ok 2 - setup
*** t4208-log-magic-pathspec.sh ***
ok 12 - No mailmap
ok 5 - am -3 stops at a patch that does not apply
ok 13 - setup default .mailmap
ok 8 - shortlog from non-git directory
ok 3 - patch-id detects equality
ok 9 - long subject preserved (format-patch -k | am)
ok 5 - alias user-defined format is matched case-insensitively
ok 14 - test default .mailmap
ok 9 - shortlog can read --format=raw output
ok 36 - rule=trailing,-space,-indent,tab
ok 4 - --no-quiet overrides --quiet
ok 10 - shortlog from non-git directory refuses extra arguments
ok 8 - oneline
ok 6 - am -3 --skip continue after failed am -3
ok 6 - alias user-defined tformat with %s (ISO8859-1 encoding)
ok 11 - shortlog --author from non-git directory does not segfault
ok 9 - first postimage wins
ok 4 - patch-id detects inequality
ok 9 - diff-filter=A
ok 10 - long subject preserved (format-patch -k | am -k)
ok 12 - shortlog should add newline when input line matches wraplen
ok 10 - rerere updates postimage timestamp
ok 7 - alias user-defined tformat with %s (utf-8 encoding)
ok 37 - rule=trailing,-space,-indent,tab,tabwidth=16
ok 10 - diff-filter=M
ok 11 - rerere clear
ok 7 - am --abort goes back after failed am -3
ok 3 - am applies patch correctly
ok 11 - diff-filter=D
ok 8 - alias user-defined tformat
ok 12 - diff-filter=R
ok 11 - multiline subject unwrapped (format-patch | am)
ok 15 - mailmap.file set
ok 38 - rule=trailing,-space,-indent,tab (attributes)
ok 12 - leftover directory
ok 9 - alias non-existent format
ok 5 - --signoff overrides --no-signoff
ok 16 - mailmap.file override
ok 39 - rule=trailing,-space,-indent,tab,tabwidth=16 (attributes)
ok 13 - shortlog encoding
ok 13 - missing preimage
ok 4 - am fails if index is dirty
ok 5 - patch-id detects equality binary
ok 12 - multiline subject unwrapped (format-patch -k | am)
ok 17 - mailmap.file non-existent
ok 13 - multiple --diff-filter bits
ok 8 - am -3 --skip removes otherfile-4
ok 14 - shortlog with revision pseudo options
ok 14 - diff-filter=C
ok 14 - set up for garbage collection tests
ok 15 - gc preserves young or recently used records
ok 10 - alias of an alias
ok 40 - rule=trailing,-space,indent,-tab
ok 15 - shortlog with --output=<file>
ok 15 - git log --follow
ok 6 - --reject overrides --no-reject
# passed all 6 test(s)
1..6
ok 16 - old records rest in peace
ok 18 - name entry after email entry
ok 13 - multiline subject preserved (format-patch -k | am -k)
*** t4209-log-pickaxe.sh ***
# passed all 13 test(s)
1..13
ok 6 - patch-id detects inequality binary
*** t4210-log-i18n.sh ***
ok 16 - git config log.follow works like --follow
ok 41 - rule=trailing,-space,indent,-tab,tabwidth=16
ok 11 - alias masking an alias
ok 17 - git config log.follow does not die with multiple paths
ok 5 - am applies patch e-mail not in a mbox
ok 9 - am -3 --abort removes otherfile-4
ok 17 - rerere gc with custom expiry (5, 0)
ok 18 - git config log.follow does not die with no paths
ok 19 - name entry after email entry, case-insensitive
ok 16 - shortlog --committer (internal)
ok 19 - git log --follow rejects unsupported pathspec magic
ok 42 - rule=trailing,-space,indent,-tab (attributes)
ok 1 - setup
ok 20 - No mailmap files, but configured
ok 17 - shortlog --committer (external)
ok 12 - alias loop
ok 2 - "git log :/" should not be ambiguous
ok 18 - --group=committer is the same as --committer
ok 7 - patch-id supports git-format-patch output
ok 3 - "git log :/a" should be ambiguous (applied both rev and worktree)
ok 13 - NUL separation
ok 20 - log.follow disabled with unsupported pathspec magic
ok 4 - "git log :/a -- " should not be ambiguous
ok 43 - rule=trailing,-space,indent,-tab,tabwidth=16 (attributes)
ok 14 - NUL termination
ok 6 - am applies patch e-mail not in a mbox with CRLF
ok 18 - rerere gc with custom expiry (5.days.ago, now)
ok 10 - am --abort will keep the local commits intact
ok 21 - git config log.follow is overridden by --no-follow
ok 21 - setup mailmap blob tests
ok 15 - NUL separation with --stat
ok 8 - whitespace is irrelevant in footer
ok 22 - mailmap.blob set
ok 44 - rule=trailing,space,-indent,-tab
ok 19 - shortlog --group=trailer:signed-off-by
ok 20 - shortlog --group=format
ok 23 - mailmap.blob overrides .mailmap
ok 22 - git log --no-walk <commits> sorts by commit time
not ok 16 - NUL termination with --stat # TODO known breakage
ok 21 - shortlog --group=<format> DWIM
ok 23 - git log --no-walk=sorted <commits> sorts by commit time
ok 11 - am --abort will keep dirty index intact
ok 24 - mailmap.file overrides mailmap.blob
ok 45 - rule=trailing,space,-indent,-tab,tabwidth=16
ok 5 - "git log :/detached -- " should find a commit only in HEAD
ok 22 - shortlog bogus --group
ok 1 - setup
ok 6 - "git log :/detached -- " should not find an orphaned commit
ok 9 - file order is irrelevant with --stable
ok 23 - trailer idents are split
ok 17 - NUL termination with --reflog --pretty=short
ok 7 - am applies patch e-mail with preceding whitespace
ok 24 - git log --line-prefix="=== " --no-walk <commits> sorts by commit time
ok 25 - mailmap.file can be missing
ok 24 - trailer idents are mailmapped
ok 2 - commit decorations colored correctly
ok 46 - rule=trailing,space,-indent,-tab (attributes)
ok 12 - am -3 stops on conflict on unborn branch
ok 26 - mailmap.blob can be missing
ok 18 - NUL termination with --reflog --pretty=medium
ok 25 - git log --no-walk=unsorted <commits> leaves list of commits as given
ok 19 - setup: file2 added differently in two branches
ok 7 - "git log :/detached -- " should find HEAD only of own worktree
ok 10 - file order is relevant with --unstable
ok 47 - rule=trailing,space,-indent,-tab,tabwidth=16 (attributes)
ok 26 - git show <commits> leaves list of commits as given
ok 27 - mailmap.blob might be the wrong type
ok 8 - "git log -- :/a" should not be ambiguous
ok 25 - shortlog de-duplicates trailers in a single commit
ok 9 - "git log :/any/path/" should not segfault
ok 13 - am -3 --skip clears index on unborn branch
ok 8 - am applies stgit patch
ok 19 - NUL termination with --reflog --pretty=full
ok 10 - "git log :/in" should not be ambiguous
ok 27 - setup case sensitivity tests
ok 1 - setup
ok 1 - create commits in different encodings
ok 11 - "git log :" should be ambiguous
ok 28 - log --grep
ok 12 - git log -- :
ok 48 - rule=trailing,space,-indent,tab
ok 2 - log --grep searches in log output encoding (utf8)
ok 20 - NUL termination with --reflog --pretty=fuller
ok 11 - whitespace is relevant with --verbatim
ok 26 - shortlog de-duplicates trailers in a single commit (folded/unfolded values)
ok 29 - log --invert-grep without --grep is a NOOP
ok 13 - git log HEAD -- :/
ok 3 - log --grep searches in log output encoding (latin1)
ok 14 - "git log :^sub" is not ambiguous
ok 4 - log --grep does not find non-reencoded values (utf8)
ok 28 - mailmap.blob defaults to off in non-bare repo
ok 15 - "git log :^does-not-exist" does not match anything
ok 30 - log --all-match without --grep is a NOOP
ok 49 - rule=trailing,space,-indent,tab,tabwidth=16
ok 21 - NUL termination with --reflog --pretty=email
ok 5 - log --grep does not find non-reencoded values (latin1)
ok 14 - am -3 --abort removes otherfile-4 on unborn branch
ok 16 - "git log :!" behaves the same as :^
ok 9 - am --patch-format=stgit applies stgit patch
ok 27 - shortlog can match multiple groups
ok 2 - usage
ok 6 - config grep.patternType=fixed
ok 7 # skip log --grep does not find non-reencoded values (latin1 + locale) (missing GETTEXT_LOCALE of GETTEXT_LOCALE,)
ok 12 - whitespace is irrelevant without --verbatim
ok 8 # skip log --grep searches in log output encoding (latin1 + locale) (missing GETTEXT_LOCALE of !MINGW,GETTEXT_LOCALE,)
ok 17 - "git log :(exclude)sub" is not ambiguous
ok 9 # skip log --grep does not die on invalid UTF-8 value (latin1 + locale + invalid needle) (missing GETTEXT_LOCALE of GETTEXT_LOCALE,)
ok 3 - usage: --pickaxe-regex
ok 18 - "git log :(exclude)sub --" must resolve as an object
ok 10 - config grep.patternType=basic
ok 11 # skip log --grep does not find non-reencoded values (latin1 + locale) (missing GETTEXT_LOCALE of GETTEXT_LOCALE,)
ok 22 - NUL termination with --reflog --pretty=raw
ok 12 # skip log --grep searches in log output encoding (latin1 + locale) (missing GETTEXT_LOCALE of !MINGW,GETTEXT_LOCALE,)
ok 13 # skip log --grep does not die on invalid UTF-8 value (latin1 + locale + invalid needle) (missing GETTEXT_LOCALE of GETTEXT_LOCALE,)
ok 20 - resolution was recorded properly
ok 19 - "git log :(unknown-magic) complains of bogus magic
ok 28 - shortlog can match multiple format groups
ok 29 - mailmap.blob defaults to HEAD:.mailmap in bare repo
ok 50 - rule=trailing,space,-indent,tab (attributes)
ok 14 - config grep.patternType=extended
ok 31 - log --invert-grep --grep
ok 15 # skip log --grep does not find non-reencoded values (latin1 + locale) (missing GETTEXT_LOCALE of GETTEXT_LOCALE,)
ok 3 - test coloring with replace-objects
ok 16 # skip log --grep searches in log output encoding (latin1 + locale) (missing GETTEXT_LOCALE of !MINGW,GETTEXT_LOCALE,)
ok 4 - usage: --no-pickaxe-regex
ok 17 # skip log --grep does not die on invalid UTF-8 value (latin1 + locale + invalid needle) (missing GETTEXT_LOCALE of GETTEXT_LOCALE,)
ok 30 - mailmap.blob can handle blobs without trailing newline
ok 29 - set up option selection tests
ok 18 - config grep.patternType=perl
ok 19 # skip log --grep does not find non-reencoded values (latin1 + locale) (missing GETTEXT_LOCALE of GETTEXT_LOCALE,PCRE)
ok 20 # skip log --grep searches in log output encoding (latin1 + locale) (missing GETTEXT_LOCALE of !MINGW,GETTEXT_LOCALE,PCRE)
ok 30 - --no-group resets group list to author
ok 21 # skip log --grep does not die on invalid UTF-8 value (latin1 + locale + invalid needle) (missing GETTEXT_LOCALE of GETTEXT_LOCALE,PCRE)
ok 23 - NUL termination with --reflog --pretty=oneline
ok 13 - default is unstable
ok 51 - rule=trailing,space,-indent,tab,tabwidth=16 (attributes)
# passed all 21 test(s)
1..21
ok 31 - single-character name
ok 5 - usage: -G and -S with empty argument
*** t4211-line-log.sh ***
ok 31 - --no-group resets trailer list
ok 10 - am applies stgit series
ok 21 - rerere.autoupdate
ok 32 - preserve canonical email case
ok 32 - log --invert-grep --grep -i
ok 6 - log --grep (match)
ok 32 - stdin with multiple groups reports error
# passed all 32 test(s)
1..32
ok 15 - am -3 --abort on unborn branch removes applied commits
ok 7 - log --grep (nomatch)
ok 33 - log --grep option parsing
*** t4212-log-corrupt.sh ***
ok 34 - log -i --grep
ok 52 - rule=trailing,space,indent,-tab
ok 8 - log --grep --regexp-ignore-case (match)
ok 14 - patchid.stable = true is stable
ok 4 - test coloring with grafted commit
ok 9 - log --grep -i (match)
ok 22 - merge --rerere-autoupdate
# passed all 4 test(s)
1..4
ok 10 - log --grep --regexp-ignore-case (nomatch)
ok 11 - log --grep -i (nomatch)
*** t4213-log-tabexpand.sh ***
ok 35 - log --grep -i
ok 11 - am applies hg patch
ok 24 - setup more commits
ok 12 - log --author (match)
ok 20 - command line pathspec parsing for "git log"
ok 53 - rule=trailing,space,indent,-tab,tabwidth=16
ok 13 - log --author (nomatch)
ok 36 - log -F -E --grep=<ere> uses ere
ok 25 - left alignment formatting
ok 16 - am --abort on unborn branch will keep local commits intact
ok 14 - log --author --regexp-ignore-case (match)
ok 15 - patchid.stable = false is unstable
ok 15 - log --author -i (match)
ok 26 - left alignment formatting. i18n.logOutputEncoding
ok 16 - log --author --regexp-ignore-case (nomatch)
ok 54 - rule=trailing,space,indent,-tab (attributes)
ok 23 - merge --no-rerere-autoupdate
ok 17 - log --author -i (nomatch)
ok 27 - left alignment formatting at the nth column
not ok 81 - grep within submodules is not expanded # TODO known breakage
ok 12 - am --patch-format=hg applies hg patch
ok 18 - log -G (nomatch)
ok 28 - left alignment formatting at the nth column
ok 19 - log -G (match)
ok 55 - rule=trailing,space,indent,-tab,tabwidth=16 (attributes)
ok 20 - log -G --regexp-ignore-case (nomatch)
ok 29 - left alignment formatting at the nth column. i18n.logOutputEncoding
ok 21 - log -G -i (nomatch)
ok 56 - trailing whitespace & no newline at the end of file
ok 22 - log -G --regexp-ignore-case (match)
ok 33 - gitmailmap(5) example output: setup
ok 30 - left alignment formatting with no padding
ok 17 - am --skip leaves index stat info alone
ok 23 - log -G -i (match)
ok 24 - set up an unresolved merge
ok 24 - log -G --textconv (missing textconv tool)
ok 31 - left alignment formatting with no padding. i18n.logOutputEncoding
ok 37 - log -F -E --perl-regexp --grep=<pcre> uses PCRE
ok 16 - patchid.verbatim = true is correct and stable
ok 57 - blank at EOF with --whitespace=fix (1)
ok 38 - log with grep.patternType configuration
ok 25 - log -G --no-textconv (missing textconv tool)
ok 32 - left alignment formatting with trunc
ok 34 - gitmailmap(5) example output: example #1
ok 39 - log with grep.patternType configuration and command line
ok 13 - am with applypatch-msg hook
ok 26 - log -S (nomatch)
ok 33 - left alignment formatting with trunc. i18n.logOutputEncoding
ok 25 - explicit rerere
ok 1 - setup (import history)
ok 27 - log -S (match)
ok 35 - gitmailmap(5) example output: example #2
ok 58 - blank at EOF with --whitespace=fix (2)
ok 34 - left alignment formatting with ltrunc
ok 28 - log -S --regexp-ignore-case (match)
ok 29 - log -S -i (match)
ok 35 - left alignment formatting with ltrunc. i18n.logOutputEncoding
ok 2 - basic command line parsing
ok 26 - explicit rerere with autoupdate
ok 30 - log -S --regexp-ignore-case (nomatch)
ok 59 - blank at EOF with --whitespace=fix (3)
ok 17 - patchid.verbatim = false is unstable
ok 36 - left alignment formatting with mtrunc
ok 31 - log -S -i (nomatch)
ok 18 - am --abort leaves index stat info alone
ok 3 - -L 4,12:a.c simple
ok 32 - log -S --pickaxe-regex (nomatch)
ok 14 - am with failing applypatch-msg hook
ok 37 - left alignment formatting with mtrunc. i18n.logOutputEncoding
ok 1 - setup
ok 1 - setup
ok 33 - log -S --pickaxe-regex (match)
ok 4 - -L 4,+9:a.c simple
ok 38 - right alignment formatting
ok 34 - log -S --pickaxe-regex --regexp-ignore-case (match)
ok 2 - fsck notices broken commit
ok 60 - blank at end of hunk, not at EOF with --whitespace=fix
ok 35 - log -S --pickaxe-regex -i (match)
ok 5 - -L '/long f/,/^}/:a.c' simple
ok 3 - git log with broken author email
ok 36 - log -S --pickaxe-regex --regexp-ignore-case (nomatch)
ok 39 - right alignment formatting. i18n.logOutputEncoding
ok 4 - git log --format with broken author email
ok 37 - log -S --pickaxe-regex -i (nomatch)
ok 36 - gitmailmap(5) example output: example #3
ok 5 - --until handles broken email
ok 6 - -L :f:a.c simple
ok 61 - blank at EOF with --whitespace=warn
ok 38 - log -S --textconv (missing textconv tool)
ok 40 - right alignment formatting at the nth column
ok 39 - log -S --no-textconv (missing textconv tool)
ok 21 - tree_entry_interesting does not match past submodule boundaries
# passed all 21 test(s)
1..21
ok 15 - am with failing applypatch-msg hook (no verify)
ok 7 - -L '/main/,/^}/:a.c' simple
ok 18 - --unstable overrides patchid.stable = true
ok 19 - git am --abort return failed exit status when it fails
ok 41 - right alignment formatting at the nth column
*** t4214-log-graph-octopus.sh ***
ok 6 - unparsable dates produce sentinel value
ok 62 - blank at EOF with --whitespace=error
ok 8 - -L :main:a.c simple
ok 42 - right alignment formatting at the nth column. i18n.logOutputEncoding
ok 9 - -L 1,+4:a.c simple
ok 63 - blank but not empty at EOF
ok 27 - explicit rerere --rerere-autoupdate overrides
ok 10 - -L 20:a.c simple
ok 43 - right alignment formatting at the nth column with --graph. i18n.logOutputEncoding
ok 7 - unparsable dates produce sentinel value (%ad)
ok 19 - --stable overrides patchid.stable = false
ok 11 - -L '/long f/',/^}/:a.c -L /main/,/^}/:a.c simple
ok 44 - right alignment formatting with no padding
ok 40 - log with various grep.patternType configurations & command-lines
ok 8 - date parser recognizes integer overflow
ok 20 - git am --abort cleans relevant files
ok 12 - -L 24,+1:a.c simple
ok 28 - rerere --no-no-rerere-autoupdate
# passed all 20 test(s)
1..20
ok 45 - right alignment formatting with no padding and with --graph
ok 29 - rerere -h
ok 64 - applying beyond EOF requires one non-blank context line
*** t4215-log-skewed-merges.sh ***
ok 16 - am with pre-applypatch hook
ok 13 - -M -L '/long f/,/^}/:b.c' move-support
ok 2 - expand/no-expand
ok 9 - date parser recognizes time_t overflow
ok 46 - right alignment formatting with no padding. i18n.logOutputEncoding
ok 20 - --verbatim overrides patchid.stable = false
ok 65 - tons of blanks at EOF should not apply
ok 14 - -M -L ':f:b.c' parallel-change
ok 47 - center alignment formatting
ok 10 - absurdly far-in-future date
ok 15 - -L 4,12:a.c -L :main:a.c simple
ok 48 - center alignment formatting. i18n.logOutputEncoding
ok 16 - -L 4,18:a.c -L ^:main:a.c simple
ok 41 - show: understands grep.patternType, like 'log'
ok 49 - center alignment formatting at the nth column
ok 37 - Shortlog output (complex mapping)
ok 21 - patch-id supports git-format-patch MIME output
ok 17 - -L :main:a.c -L 4,18:a.c simple
ok 66 - missing blank line at end with --whitespace=fix
ok 17 - am with failing pre-applypatch hook
ok 40 - setup log -[GS] plain & regex
ok 50 - center alignment formatting at the nth column
ok 18 - -L 4:a.c -L 8,12:a.c simple
ok 11 - create commits with whitespace committer dates
ok 38 - Log output (complex mapping)
ok 51 - center alignment formatting at the nth column. i18n.logOutputEncoding
ok 19 - -L 8,12:a.c -L 4:a.c simple
ok 41 - log -G trims diff new/old [-+]
ok 39 - Log output (local-part email address)
ok 12 - --until treats whitespace date as sentinel
ok 20 - invalid args: -L
ok 52 - center alignment formatting with no padding
ok 21 - invalid args: -L b.c
ok 67 - two missing blank lines at end with --whitespace=fix
ok 22 - invalid args: -L 1:
ok 53 - center alignment formatting with no padding. i18n.logOutputEncoding
ok 13 - pretty-printer handles whitespace date
# passed all 13 test(s)
1..13
ok 42 - whatchanged: understands grep.patternType, like 'log'
ok 22 - patch-id respects config from subdir
ok 23 - invalid args: -L 1:nonexistent
ok 40 - Log output with --use-mailmap
ok 18 - am with failing pre-applypatch hook (no verify)
*** t4216-log-bloom.sh ***
ok 24 - invalid args: -L 1:simple
ok 54 - left/right alignment formatting with stealing
ok 68 - missing blank line at end, insert before end, --whitespace=fix
ok 25 - invalid args: -L '/foo:b.c'
ok 42 - log -S<pat> is not a regex, but -S<pat> --pickaxe-regex is
ok 3 - expand/no-expand for --pretty
ok 26 - invalid args: -L 1000:b.c
ok 41 - Log output with log.mailmap
ok 55 - left/right alignment formatting with stealing. i18n.logOutputEncoding
ok 27 - invalid args: -L :b.c
ok 23 - patch-id handles no-nl-at-eof markers
ok 42 - log.mailmap=false disables mailmap
ok 28 - invalid args: -L :foo:b.c
ok 56 - strbuf_utf8_replace() not producing NUL
ok 43 - --no-use-mailmap disables mailmap
ok 69 - shrink file with tons of missing blanks at end of file
ok 29 - -L X (X == nlines)
ok 57 - --date=iso-strict %ad%cd is the same as %aI%cI
ok 30 - -L X (X == nlines + 1)
ok 24 - patch-id handles diffs with one line of before/after
ok 43 - reflog: understands grep.patternType, like 'log'
ok 31 - -L X (X == nlines + 2)
ok 58 - --date=short %ad%cd is the same as %as%cs
ok 44 - Grep author with --use-mailmap
ok 70 - missing blanks at EOF must only match blank lines
ok 19 - am with post-applypatch hook
ok 59 - --date=human %ad%cd is the same as %ah%ch
ok 32 - -L ,Y (Y == nlines)
ok 60 - set up log decoration tests
not ok 25 - patch-id computes same ID with different object hashes # TODO known breakage
ok 45 - Grep author with log.mailmap
ok 43 - setup log -[GS] binary & --text
ok 71 - missing blank line should match context line with spaces
ok 26 - patch-id without repository
ok 33 - -L ,Y (Y == nlines + 1)
ok 44 - log -G ignores binary files
# still have 1 known breakage(s)
# passed all remaining 25 test(s)
1..26
ok 45 - log -G looks into binary files with -a
*** t4217-log-limit.sh ***
ok 46 - log.mailmap is true by default these days
ok 34 - -L ,Y (Y == nlines + 2)
ok 61 - log decoration properly follows tag chain
ok 44 - format-patch: understands grep.patternType, like 'log'
ok 47 - Only grep replaced author with --use-mailmap
ok 72 - same, but with the --ignore-space-option
ok 45 - log --author
ok 4 - expand/no-expand for --pretty=short
ok 35 - -L with --first-parent and a merge
ok 46 - log -G looks into binary files with textconv filter
ok 62 - clean log decoration
ok 20 - am with failing post-applypatch hook
ok 1 - apply_index: added submodule creates empty directory
ok 47 - log -S looks into binary files
ok 48 - Blame --porcelain output (complex mapping)
ok 46 - log --committer
ok 73 - same, but with CR-LF line endings && cr-at-eol set
ok 36 - -L with --output
ok 47 - log -i --grep with color
ok 48 - log -S --pickaxe-regex looks into binary files
ok 49 - Blame output (complex mapping)
# passed all 48 test(s)
1..48
ok 30 - update the split index after unpack trees() copied a racily clean cache entry from the shared index #3
*** t4252-am-options.sh ***
ok 48 - -c color.grep.selected log --grep
ok 21 - am --scissors cuts the message at the scissors line
ok 74 - CR-LF line endings && add line && text=auto
ok 49 - -c color.grep.matchSelected log --grep
ok 75 - CR-LF line endings && change line && text=auto
ok 63 - pretty format %decorate
ok 50 - commit --author honors mailmap
ok 82 - grep sparse directory within submodules
ok 50 - simple log --graph
ok 76 - LF in repo, CRLF in worktree && change line && text=auto
ok 51 - simple log --graph --line-prefix="123 "
ok 64 - set up trailer tests
ok 77 - whitespace=fix to expand
ok 65 - pretty format %(trailers) shows trailers
ok 66 - pretty format %(trailers:) enables no options
ok 22 - am --no-scissors overrides mailinfo.scissors
ok 23 - setup: new author and committer
ok 5 - expand/no-expand for --pretty=medium
ok 78 - whitespace check skipped for excluded paths
ok 37 - range_set_union
ok 67 - %(trailers:only) shows only "key: value" trailers
# passed all 78 test(s)
1..78
ok 30 - multiple identical conflicts
*** t4253-am-keep-cr-dos.sh ***
ok 68 - %(trailers:only=yes) shows only "key: value" trailers
ok 69 - %(trailers:only=no) shows all trailers
ok 70 - %(trailers:only=no,only=true) shows only "key: value" trailers
ok 38 - -s shows only line-log commits
ok 71 - %(trailers:unfold) unfolds trailers
ok 52 - set up merge history
ok 39 - -p shows the default patch output
ok 51 - comment syntax: setup
ok 40 - --raw is forbidden
ok 1 - setup test
ok 72 - :only and :unfold work together
ok 53 - log --graph with merge
ok 2 - git log --since-as-filter=...
ok 73 - pretty format %(trailers:key=foo) shows that trailer
ok 3 - git log --children --since-as-filter=...
ok 54 - log --graph --line-prefix="| | | " with merge
ok 1 - log --graph with merge fusing with its left and right neighbors
ok 74 - pretty format %(trailers:key=foo) is case insensitive
ok 24 - am changes committer and keeps author
# passed all 3 test(s)
1..3
ok 1 - setup
ok 31 - rerere with unexpected conflict markers does not crash
*** t4254-am-corrupt.sh ***
ok 75 - pretty format %(trailers:key=foo:) trailing colon also works
ok 1 - set up merge history
ok 55 - log --graph with merge with log.graphColors
ok 76 - pretty format %(trailers:key=foo) multiple keys
ok 56 - log --raw --graph -m with merge
ok 77 - %(trailers:key=nonexistent) becomes empty
ok 6 - expand/no-expand for --pretty=full
ok 2 - log --graph with tricky octopus merge, no color
ok 57 - diff-tree --graph
ok 78 - %(trailers:key=foo) handles multiple lines even if folded
ok 58 - log --graph with full output
ok 79 - %(trailers:key=foo,unfold) properly unfolds
ok 2 - interrupted am --whitespace=fix
ok 25 - am --signoff adds Signed-off-by: line
ok 3 - log --graph with tricky octopus merge with colors
ok 26 - am stays in branch
ok 80 - pretty format %(trailers:key=foo,only=no) also includes nontrailer lines
ok 81 - %(trailers:key) without value is error
ok 4 - log --graph with normal octopus merge, no color
ok 82 - %(trailers:keyonly) shows only keys
ok 83 - %(trailers:key=foo,keyonly) shows only key
ok 84 - %(trailers:key=foo,valueonly) shows only value
ok 5 - log --graph with normal octopus merge with colors
ok 3 - interrupted am -C1
ok 85 - %(trailers:valueonly) shows only values
ok 27 - am --signoff does not add Signed-off-by: line if already there
ok 2 - apply_index: added submodule leaves existing empty directory alone
ok 86 - %(trailers:key=foo,keyonly,valueonly) shows nothing
ok 1 - setup repository with dos files
ok 6 - log --graph with normal octopus merge and child, no color
ok 87 - pretty format %(trailers:separator) changes separator
ok 88 - pretty format %(trailers:separator=X,unfold) changes separator
ok 89 - pretty format %(trailers:key_value_separator) changes key-value separator
ok 7 - log --graph with normal octopus and child merge with colors
ok 28 - am --signoff adds Signed-off-by: if another author is preset
ok 90 - pretty format %(trailers:key_value_separator,unfold) changes key-value separator
ok 4 - interrupted am -p2
ok 91 - pretty format %(trailers:separator,key_value_separator) changes both separators
ok 8 - log --graph with tricky octopus merge and its child, no color
ok 7 - expand/no-expand for --pretty=fuller
ok 2 - am with dos files without --keep-cr
ok 1 - setup test - repo, commits, commit graph, log outputs
ok 29 - am --signoff duplicates Signed-off-by: if it is not the last one
ok 1 - setup
ok 9 - log --graph with tricky octopus merge and its child with colors
ok 5 - interrupted am -C1 -p2
ok 2 - commit-graph write wrote out the bloom chunks
ok 10 - log --graph with crossover in octopus merge, no color
ok 52 - whitespace syntax: setup
ok 3 - am with dos files with --keep-cr
ok 2 - try to apply corrupted patch
ok 92 - pretty format %(trailers) combining separator/key/keyonly/valueonly
ok 30 - am without --keep removes Re: and [PATCH] stuff
ok 11 - log --graph with crossover in octopus merge with colors
ok 3 - NUL in commit message's body
ok 6 - interrupted am --directory="frotz nitfol"
ok 93 - trailer parsing not fooled by --- line
ok 41 - setup for checking fancy rename following
ok 12 - log --graph with crossover in octopus merge and its child, no color
ok 3 - git log option:  for path: A
ok 4 - am with dos files config am.keepcr
ok 7 - apply to a funny path
ok 42 - fancy rename following #1
ok 4 - NUL in commit message's header
ok 32 - rerere with inner conflict markers
# passed all 4 test(s)
1..4
*** t4255-am-submodule.sh ***
ok 8 - expand/no-expand for --pretty=raw
ok 31 - am --keep really keeps the subject
ok 13 - log --graph with crossover in octopus merge and its child with colors
ok 43 - fancy rename following #2
ok 8 - am --reject
ok 14 - log --graph with unrelated commit and octopus tip, no color
ok 5 - am with dos files config am.keepcr overridden by --no-keep-cr
# passed all 8 test(s)
1..8
ok 53 - empty syntax: setup
*** t4256-am-format-flowed.sh ***
ok 54 - set up mailmap location tests
ok 94 - set up %S tests
ok 55 - bare repo with --work-tree finds mailmap at top-level
ok 15 - log --graph with unrelated commit and octopus tip with colors
ok 4 - git log option: --all for path: A
ok 32 - am --keep-non-patch really keeps the non-patch part
ok 95 - log --format=%S paints branch names
ok 56 - bare repo does not look in current directory
ok 16 - log --graph with unrelated commit and octopus child, no color
ok 33 - setup simple stage 1 handling
ok 96 - log --format=%S paints tag names
ok 57 - non-git shortlog respects mailmap in current dir
ok 97 - log --format=%S paints symmetric ranges
ok 58 - shortlog on stdin respects mailmap from repo
ok 17 - log --graph with unrelated commit and octopus child with colors
ok 98 - %S in git log --format works with other placeholders (part 1)
# passed all 17 test(s)
1..17
ok 33 - setup am -3
ok 34 - test simple stage 1 handling
ok 6 - am with dos files with --keep-cr continue
*** t4257-am-interactive.sh ***
ok 99 - %S in git log --format works with other placeholders (part 2)
ok 9 - expand/no-expand for --pretty=email
ok 59 - find top-level mailmap from subdir
# passed all 9 test(s)
1..9
ok 44 - setup for checking line-log and parent oids
ok 5 - git log option: --full-history for path: A
*** t4258-am-quoted-cr.sh ***
ok 83 - write-tree
ok 45 - parent oids without parent rewriting
ok 3 - apply_index: replace tracked file with submodule creates empty directory
ok 60 - set up symlink tests
ok 46 - parent oids with parent rewriting
ok 34 - am -3 falls back to 3-way merge
ok 7 - am with unix files config am.keepcr overridden by --no-keep-cr
ok 61 - symlinks respected in mailmap.file
ok 47 - line-log with --before
# passed all 7 test(s)
1..7
ok 48 - setup tests for zero-width regular expressions
*** t4300-merge-tree.sh ***
ok 49 - zero-width regex $ matches any function name
ok 100 - setup more commits for %S with --bisect
ok 59 - set up more tangled history
ok 62 - symlinks respected in non-repo shortlog
ok 50 - zero-width regex ^ matches any function name
ok 6 - git log option: --full-history --simplify-merges for path: A
ok 2 - log --graph with left-skewed merge
ok 1 - setup
ok 60 - log --graph with merge
ok 51 - zero-width regex .* matches any function name
ok 63 - symlinks not respected in-tree
ok 52 - show line-log with graph
ok 35 - am -3 -p0 can read --no-prefix patch
# passed all 52 test(s)
1..52
ok 64 - prepare for cat-file --mailmap
ok 35 - rerere does not crash with missing preimage
ok 101 - %S with --bisect labels commits with refs/bisect/bad ref
ok 2 - am with format=flowed
ok 65 - --no-use-mailmap disables mailmap in cat-file
# passed all 2 test(s)
1..2
*** t4301-merge-tree-write-tree.sh ***
ok 102 - log --pretty=reference
*** t5000-tar-tree.sh ***
ok 66 - --use-mailmap enables mailmap in cat-file
ok 7 - git log option: --simplify-merges for path: A
ok 103 - log --pretty=reference with log.date is overridden by short date
ok 67 - --no-mailmap disables mailmap in cat-file for annotated tag objects
ok 104 - log --pretty=reference with explicit date overrides short date
ok 36 - am with config am.threeWay falls back to 3-way merge
ok 105 - log --pretty=reference is never unabbreviated
ok 68 - --mailmap enables mailmap in cat-file for annotated tag objects
ok 106 - log --pretty=reference is never decorated
ok 8 - git log option: --simplify-by-decoration for path: A
ok 69 - git cat-file -s returns correct size with --use-mailmap
ok 37 - am with config am.threeWay overridden by --no-3way
ok 107 - log --pretty=reference does not output reflog info
ok 1 - setup
ok 108 - log --pretty=reference is colored appropriately
ok 1 - setup
ok 2 - am warn if quoted-cr is found
ok 1 - set up patches to apply
ok 70 - git cat-file -s returns correct size with --use-mailmap for tag objects
ok 38 - am can rename a file
ok 36 - rerere does not crash with unmatched conflict marker
# passed all 36 test(s)
1..36
ok 1 - setup
ok 3 - am --quoted-cr=strip
ok 2 - file add A, !B
ok 2 - applying all patches generates conflict
ok 9 - git log option: --follow for path: A
ok 71 - git cat-file --batch-check returns correct size with --use-mailmap
ok 2 - --list notices extra parameters
*** t5001-archive-attr.sh ***
ok 84 - sparse-index is not expanded: write-tree
ok 109 - %(describe) vs git describe
ok 3 - end-of-options is correctly eaten
ok 72 - git cat-file --batch-command returns correct size with --use-mailmap
ok 3 - interactive am can apply a single patch
ok 39 - am -3 can rename a file
# passed all 72 test(s)
1..72
ok 3 - file add !A, B
ok 4 - am with config mailinfo.quotedCr=strip
# passed all 4 test(s)
1..4
ok 3 - log --graph with nested left-skewed merge
ok 110 - %(describe:match=...) vs git describe --match ...
*** t5002-archive-attr-pattern.sh ***
ok 4 - populate workdir
ok 5 - add ignored file
*** t5003-archive-zip.sh ***
ok 10 - git log option: --first-parent for path: A
ok 111 - %(describe:exclude=...) vs git describe --exclude ...
ok 4 - interactive am can resolve conflict
ok 4 - apply_index: replace directory with submodule
# passed all 4 test(s)
1..4
ok 61 - log.decorate configuration
ok 4 - file add A, B (same)
*** t5004-archive-corner-cases.sh ***
ok 40 - am -3 can rename a file after falling back to 3-way merge
ok 62 - parse log.excludeDecoration with no value
ok 112 - %(describe:tags) vs git describe --tags
ok 6 - add files to repository
ok 7 - setup export-subst
ok 11 - git log option: --topo-order for path: A
ok 63 - decorate-refs with glob
ok 8 - create bare clone
ok 9 - remove ignored file
ok 64 - decorate-refs without globs
ok 10 - git archive
ok 41 - am -3 -q is quiet
ok 11 -  extract tar archive
ok 65 - multiple decorate-refs
ok 1 - setup
ok 5 - file add A, B (different)
ok 12 # skip  interpret pax headers (missing TAR_NEEDS_PAX_FALLBACK)
ok 13 -  validate filenames
ok 66 - decorate-refs-exclude with glob
ok 14 -  validate file contents
ok 42 - am pauses on conflict
ok 15 -  validate mtime of a/a
ok 43 - am --show-current-patch
ok 2 - Clean merge
ok 12 - git log option: --date-order for path: A
ok 113 - %(describe:abbrev=...) vs git describe --abbrev=...
ok 16 - git archive --mtime
ok 44 - am --show-current-patch=raw
ok 114 - log --pretty with space stealing
ok 67 - decorate-refs-exclude without globs
ok 45 - am --show-current-patch=diff
ok 17 -  extract tar archive
ok 6 - file change A, !B
ok 18 # skip  interpret pax headers (missing TAR_NEEDS_PAX_FALLBACK)
ok 46 - am accepts repeated --show-current-patch
ok 115 - log --pretty with invalid padding format
ok 19 -  validate filenames
ok 1 - populate workdir
ok 47 - am detects incompatible --show-current-patch
ok 20 -  validate file contents
ok 21 -  validate mtime of a/a
ok 2 - add symlink
ok 116 - log --pretty with magical wrapping directives
ok 3 - prepare file list
ok 1 - setup
ok 4 - add ignored file
ok 68 - multiple decorate-refs-exclude
ok 22 - git archive --prefix=prefix/
ok 23 -  extract tar archive
ok 69 - decorate-refs and decorate-refs-exclude
ok 24 # skip  interpret pax headers (missing TAR_NEEDS_PAX_FALLBACK)
ok 2 - git archive
ok 3 -  archive/ignored does not exist
ok 48 - am --skip works
ok 4 -  archive/ignored-by-tree does not exist
ok 5 -  archive/ignored-by-tree.d does not exist
ok 6 -  archive/ignored-by-tree.d/file does not exist
ok 7 -  archive/ignored-by-worktree exists
ok 8 -  archive/excluded-by-pathspec.d exists
ok 9 -  archive/excluded-by-pathspec.d/file exists
ok 25 -  validate filenames
ok 49 - am --abort removes a stray directory
ok 1 - create commit with empty tree and fake empty tar
ok 26 -  validate file contents
ok 70 - deocrate-refs and log.excludeDecoration
ok 7 - file change !A, B
ok 10 - git archive with pathspec
ok 11 -  archive-pathspec/ignored does not exist
ok 12 -  archive-pathspec/ignored-by-tree does not exist
ok 13 -  archive-pathspec/ignored-by-tree.d does not exist
ok 13 - git log option: --author-date-order for path: A
ok 14 -  archive-pathspec/ignored-by-tree.d/file does not exist
ok 15 -  archive-pathspec/ignored-by-worktree exists
ok 16 -  archive-pathspec/excluded-by-pathspec.d does not exist
ok 17 -  archive-pathspec/excluded-by-pathspec.d/file does not exist
ok 117 - log --pretty with overflowing wrapping directive
ok 27 - git-archive --prefix=olde-
ok 28 -  extract tar archive
ok 118 - log --pretty with overflowing padding directive
ok 18 - git archive with wildcard pathspec
ok 19 -  archive-pathspec-wildcard/ignored does not exist
ok 2 - tar archive of commit with empty tree
ok 20 -  archive-pathspec-wildcard/ignored-by-tree does not exist
ok 29 # skip  interpret pax headers (missing TAR_NEEDS_PAX_FALLBACK)
ok 21 -  archive-pathspec-wildcard/ignored-by-tree.d does not exist
ok 71 - decorate-refs-exclude and simplify-by-decoration
ok 3 - Content merge and a few conflicts
ok 22 -  archive-pathspec-wildcard/ignored-by-tree.d/file does not exist
ok 23 -  archive-pathspec-wildcard/ignored-by-worktree exists
ok 24 -  archive-pathspec-wildcard/excluded-by-pathspec.d does not exist
ok 25 -  archive-pathspec-wildcard/excluded-by-pathspec.d/file does not exist
ok 1 - setup
ok 3 - tar archive of empty tree is empty
ok 30 -  validate filenames
ok 119 - log --pretty with padding and preceding control chars
ok 31 -  validate file contents
ok 72 - decorate-refs with implied decorate from format
ok 26 - git -C subdir archive
ok 27 -  archive-subdir/included exists
ok 28 -  archive-subdir/ignored-by-subtree does not exist
ok 29 -  archive-subdir/ignored-by-tree does not exist
ok 5 - add files to repository
ok 32 - git archive --add-file
ok 2 - git archive
ok 3 -  archive/ignored does not exist
ok 4 -  archive/not-ignored-dir/ignored does not exist
ok 30 - git archive with worktree attributes
ok 31 -  worktree/ignored does not exist
ok 5 -  archive/not-ignored-dir/ignored-only-if-dir exists
ok 32 -  worktree/ignored-by-tree exists
ok 6 -  archive/not-ignored-dir/ exists
ok 33 -  worktree/ignored-by-worktree does not exist
ok 50 - am refuses patches when paused
ok 7 -  archive/ignored-only-if-dir/ does not exist
ok 4 - tar archive of empty tree with prefix
ok 8 -  archive/ignored-ony-if-dir/ignored-by-ignored-dir does not exist
ok 73 - implied decorate does not override option
ok 9 -  archive/ignored-without-slash/ does not exist
ok 10 -  archive/ignored-without-slash/foo does not exist
ok 11 -  archive/wildcard-without-slash/ does not exist
ok 12 -  archive/wildcard-without-slash/foo does not exist
ok 33 -  extract tar archive
ok 13 -  archive/deep/and/slashless/ does not exist
ok 14 -  archive/deep/and/slashless/foo does not exist
ok 15 -  archive/deep/with/wildcard/ does not exist
ok 6 - setup export-subst and diff attributes
ok 16 -  archive/deep/with/wildcard/foo does not exist
ok 34 # skip  interpret pax headers (missing TAR_NEEDS_PAX_FALLBACK)
ok 17 -  archive/one-level-lower/ does not exist
ok 18 -  archive/one-level-lower/two-levels-lower/ignored-only-if-dir/ does not exist
ok 19 -  archive/one-level-lower/two-levels-lower/ignored-ony-if-dir/ignored-by-ignored-dir does not exist
# passed all 19 test(s)
1..19
ok 35 -  validate filenames
ok 34 - git archive --worktree-attributes option
ok 35 -  worktree2/ignored does not exist
ok 36 -  worktree2/ignored-by-tree exists
ok 37 -  worktree2/ignored-by-worktree does not exist
ok 74 - decorate-refs and simplify-by-decoration without output
ok 120 - log --pretty truncation with control chars
ok 36 -  validate file contents
ok 37 -  validate extra file untracked
ok 14 - git log option: --ancestry-path side..main for path: A
*** t5100-mailinfo.sh ***
ok 121 # skip log --pretty with huge commit message (missing EXPENSIVE of EXPENSIVE,SIZE_T_IS_64BIT)
ok 38 - git archive vs. bare
ok 85 - diff-files with pathspec inside sparse definition
ok 122 # skip set up huge commit (missing EXPENSIVE of EXPENSIVE,SIZE_T_IS_64BIT)
ok 123 # skip log --pretty with huge commit message (missing EXPENSIVE of EXPENSIVE,SIZE_T_IS_64BIT)
ok 7 - create bare clone
ok 124 # skip log --pretty with huge commit message does not cause allocation failure (missing EXPENSIVE of EXPENSIVE,SIZE_T_IS_64BIT)
ok 38 - git archive --add-file twice
ok 5 - apply_index: removed submodule leaves submodule directory and its contents in place
ok 8 - remove ignored file
ok 75 - decorate-refs-exclude HEAD
ok 39 -  extract tar archive
ok 39 - git archive with worktree attributes, bare
ok 40 -  bare-worktree/ignored does not exist
ok 4 - Auto resolve conflicts by "ours" strategy option
ok 41 -  bare-worktree/ignored-by-tree does not exist
ok 42 -  bare-worktree/ignored-by-worktree exists
ok 5 - zip archive of empty tree is empty
ok 40 # skip  interpret pax headers (missing TAR_NEEDS_PAX_FALLBACK)
ok 76 - decorate-refs focus from default
ok 41 -  validate filenames
ok 4 - log --graph with nested left-skewed merge following normal merge
ok 5 - Barf on misspelled option, with exit code other than 0 or 1
ok 51 - am --resolved works
ok 43 - export-subst
ok 42 -  validate file contents
ok 6 - Barf on too many arguments
ok 43 -  validate extra file one/untracked
ok 44 -  validate extra file two/untracked
ok 6 - zip archive of empty tree with prefix
ok 7 - test conflict notices and such
ok 7 - archive complains about pathspec on empty tree
ok 77 - --clear-decorations overrides defaults
ok 8 - create a commit with an empty subtree
ok 15 - git log option:  for path: A/B
ok 45 - git archive on large files
ok 9 - archive empty subtree with no pathspec
ok 46 - git archive in a bare repo
ok 52 - am --resolved fails if index has no changes
ok 10 - archive empty subtree by direct pathspec
ok 47 - git archive vs. the same in a bare repo
ok 78 - --clear-decorations clears previous exclusions
ok 44 - export-subst expands %(describe) once
ok 11 # skip zip archive with many entries (missing ZIPINFO)
# passed all 44 test(s)
1..44
ok 8 - 3-way merge with --attr-source
ok 48 - git archive with --output
ok 12 # skip zip archive bigger than 4GB (missing UNZIP_ZIP64_SUPPORT,EXPENSIVE of EXPENSIVE,UNZIP,UNZIP_ZIP64_SUPPORT)
*** t5150-request-pull.sh ***
not ok 125 - wide and decomposed characters column counting # TODO known breakage
# still have 2 known breakage(s)
# passed all remaining 123 test(s)
1..125
ok 13 # skip zip archive with files bigger than 4GB (missing ZIPINFO,UNZIP_ZIP64_SUPPORT,EXPENSIVE of EXPENSIVE,LONG_IS_64BIT,UNZIP,UNZIP_ZIP64_SUPPORT,ZIPINFO)
ok 49 - git archive --remote
ok 16 - git log option: --all for path: A/B
*** t5200-update-server-info.sh ***
ok 53 - am --resolved fails if index has unmerged entries
ok 79 - log.decorate config parsing
ok 50 - git archive --remote with configured remote
ok 9 - file change A, B (same)
ok 1 - split sample box
ok 51 - git get-tar-commit-id
ok 80 # skip log output on a TTY (missing TTY)
ok 9 - git archive --format=zip
ok 2 - mailinfo 0001
ok 52 - git archive with --output, override inferred format
ok 8 - directory rename + content conflict
ok 54 - am takes patches from a Pine mailbox
ok 3 - mailinfo 0002
ok 81 - reflog is expected format
ok 53 # skip git archive with --output and --remote creates .tgz (missing GZIP)
ok 4 - mailinfo 0003
ok 54 - git archive --list outside of a git repo
ok 82 - whatchanged is expected format
ok 5 - mailinfo 0004
ok 17 - git log option: --full-history for path: A/B
ok 55 - am fails on mail without patch
ok 10 -  extract ZIP archive
ok 11 -  validate filenames
ok 6 - mailinfo 0005
ok 12 -  validate file contents
ok 55 - git archive --remote outside of a git repo
ok 7 - mailinfo 0006
ok 56 - am fails on empty patch
ok 8 - mailinfo 0007
ok 13 # skip  extract ZIP archive with EOL conversion (missing UNZIP_CONVERT)
ok 10 - file change A, B (different)
ok 14 # skip  validate that text files are converted (missing UNZIP_CONVERT)
ok 15 # skip  validate that binary files are unchanged (missing UNZIP_CONVERT)
ok 16 # skip  validate that diff files are converted (missing UNZIP_CONVERT)
ok 9 - mailinfo 0008
ok 17 # skip  validate that -diff files are unchanged (missing UNZIP_CONVERT)
ok 18 # skip  validate that custom diff is unchanged  (missing UNZIP_CONVERT)
ok 10 - mailinfo 0009
ok 18 - git log option: --full-history --simplify-merges for path: A/B
ok 57 - am works from stdin in subdirectory
ok 11 - mailinfo 0010
ok 56 - clients cannot access unreachable commits
ok 6 - apply_index: removed submodule leaves submodule containing a .git directory alone
ok 9 - rename/delete handling
ok 12 - mailinfo 0011
ok 1 - setup
ok 5 - log --graph with nested right-skewed merge following left-skewed merge
ok 2 - create info/refs
ok 13 - mailinfo 0012
ok 3 - modify and store mtime
ok 58 - am works from file (relative path given) in subdirectory
ok 4 - info/refs is not needlessly overwritten
ok 14 - mailinfo 0013
ok 19 - git log option: --simplify-merges for path: A/B
ok 5 - info/refs can be forced to update
ok 83 - log.abbrevCommit configuration
ok 15 - mailinfo 0014
ok 11 - file change A, B (mixed)
ok 59 - am works from file (absolute path given) in subdirectory
ok 19 - git archive --format=zip in a bare repo
ok 86 - diff-files with pathspec outside sparse definition
ok 6 - info/refs updates when changes are made
ok 84 - --abbrev-commit with core.abbrev=false
ok 20 - git archive --format=zip vs. the same in a bare repo
ok 57 - upload-archive can allow unreachable commits
ok 16 - mailinfo 0015
ok 14 - tar archive with long paths
ok 85 - --abbrev-commit with --no-abbrev
# passed all 14 test(s)
1..14
ok 58 - setup tar filters
ok 20 - git log option: --simplify-by-decoration for path: A/B
*** t5300-pack-object.sh ***
ok 7 - midx does not create duplicate pack entries
ok 59 - archive --list mentions user filter
ok 17 - mailinfo 0016
ok 86 - --abbrev-commit with core.abbrev=9000
# passed all 7 test(s)
1..7
*** t5301-sliding-window.sh ***
ok 60 - am --committer-date-is-author-date
ok 18 - mailinfo 0017
ok 12 - file remove A, !B
ok 60 - archive --list shows only enabled remote filters
ok 87 - --abbrev-commit with --abbrev=9000
ok 10 - rename/add handling
ok 19 - mailinfo 0018
ok 20 - split box with rfc2047 samples
ok 61 - am without --committer-date-is-author-date
ok 21 - mailinfo rfc2047/0001
ok 21 - git log option: --follow for path: A/B
ok 22 - mailinfo rfc2047/0002
ok 13 - file remove !A, B
ok 21 - git archive --format=zip with --output
ok 1 - setup
ok 61 - invoke tar filter by format
ok 23 - mailinfo rfc2047/0003
ok 2 - setup: two scripts for reading pull requests
ok 88 - show added path under "--follow -M"
ok 62 - am --ignore-date
ok 24 - mailinfo rfc2047/0004
ok 25 - mailinfo rfc2047/0005
ok 26 - mailinfo rfc2047/0006
ok 14 - file remove A, B (same)
ok 22 - git log option: --first-parent for path: A/B
ok 62 - invoke tar filter by extension
ok 27 - mailinfo rfc2047/0007
ok 6 - log --graph with right-skewed merge following a left-skewed one
ok 7 - apply_index: replace submodule with a directory must fail
ok 63 - default output format remains tar
ok 11 - rename/add, where add is a mode conflict
ok 63 - am into an unborn branch
ok 28 - mailinfo rfc2047/0008
ok 29 - mailinfo rfc2047/0009
ok 64 - extension matching requires dot
ok 30 - mailinfo rfc2047/0010
ok 23 - git log option: --topo-order for path: A/B
ok 31 - mailinfo rfc2047/0011
ok 64 - am newline in subject
ok 87 - sparse index is not expanded: diff-files
ok 32 - respect NULs
ok 3 - pull request when forgot to push
ok 65 - only enabled filters are available remotely
ok 33 - Preserve NULs out of MIME encoded message
ok 89 - git log -c --follow
ok 66 - invalid filter is reported only once
ok 22 - git archive with --output, inferring format (local)
ok 65 - am -q is quiet
ok 34 - mailinfo on from header without name works
ok 90 - log --graph with diff and stats
ok 15 - file change A, remove B
ok 35 - mailinfo finds headers after embedded From line
ok 66 - am empty-file does not infloop
ok 1 - setup
ok 36 - mailinfo on message with quoted >From
ok 24 - git log option: --date-order for path: A/B
ok 67 - git archive --format=tgz
ok 2 - verify-pack -v, defaults
ok 91 - log --line-prefix="*** " --graph with diff and stats
ok 92 - log --graph with --name-status
ok 3 - verify-pack -v, packedGitWindowSize == 1 page
ok 12 - rename/rename + content conflict
ok 37 - mailinfo unescapes with --mboxrd
ok 93 - log --graph with --name-only
ok 67 - am --message-id really adds the message id
ok 68 - git archive --format=tar.gz
ok 38 - mailinfo handles rfc2822 quoted-string
ok 4 - verify-pack -v, packedGit{WindowSize,Limit} == 1 page
ok 39 - mailinfo handles rfc2822 comment
ok 94 - --no-graph countermands --graph
ok 25 - git log option: --author-date-order for path: A/B
ok 40 - mailinfo with mailinfo.scissors config
ok 95 - --graph countermands --no-graph
ok 31 - update the split index after unpack trees() copied a racily clean cache entry from the shared index #4
# passed all 31 test(s)
1..31
ok 41 - mailinfo no options
ok 16 - file remove A, change B
*** t5302-pack-index.sh ***
ok 42 - mailinfo -k
ok 96 - --no-graph does not unset --topo-order
ok 43 - mailinfo -b no [PATCH]
ok 5 - repack -a -d, packedGit{WindowSize,Limit} == 1 page
ok 44 - mailinfo -b leading [PATCH]
ok 23 - git archive with --output, inferring format (remote)
ok 69 - infer tgz from .tgz filename
ok 68 - am.messageid really adds the message id
ok 45 - mailinfo -b double [PATCH]
ok 46 - mailinfo -b trailing [PATCH]
ok 97 - --no-graph does not unset --parents
ok 6 - verify-pack -v, defaults
# passed all 6 test(s)
1..6
ok 47 - mailinfo -b separated double [PATCH]
ok 17 - tree add A, B (same)
ok 98 - --reverse and --graph conflict
ok 48 - mailinfo handles unusual header whitespace
*** t5303-pack-corruption-resilience.sh ***
ok 26 - git log option: --ancestry-path side..main for path: A/B
ok 49 - split base64 email with quoted-cr
ok 99 - --reverse --graph --no-graph works
ok 70 - infer tgz from .tar.gz filename
ok 71 # skip extract tgz file (missing GZIP)
ok 100 - --show-linear-break and --graph conflict
ok 69 - am --message-id -s signs off after the message id
ok 13 - rename/add/delete conflict
ok 101 - --show-linear-break --graph --no-graph works
ok 4 - pull request after push
ok 102 - --no-walk and --graph conflict
ok 8 - apply_index: replace submodule containing a .git directory with a directory must fail
ok 103 - --no-walk --graph --no-graph works
ok 72 - remote tar.gz is allowed by default
ok 104 - --walk-reflogs and --graph conflict
ok 18 - tree add A, B (different)
ok 27 - git log option:  for path: A/B/C
ok 73 - remote tar.gz can be disabled
ok 74 # skip git archive --format=tgz (external gzip) (missing GZIP)
ok 105 - --walk-reflogs --graph --no-graph works
ok 50 - mailinfo warn CR in base64 encoded email
ok 75 # skip git archive --format=tar.gz (external gzip) (missing GZIP)
ok 24 - git archive --format=zip with prefix
ok 76 # skip extract tgz file (external gzip) (missing GZIP)
ok 51 - from line with unterminated quoted string
ok 106 - dotdot is a parent directory
ok 52 - from line with unterminated comment
ok 77 - archive and :(glob)
# passed all 52 test(s)
1..52
ok 107 # skip setup signed branch (missing GPG)
ok 78 - catch non-matching pathspec
ok 108 # skip setup signed branch with subkey (missing GPG)
*** t5304-prune.sh ***
ok 79 - reject paths outside the current directory
ok 109 # skip setup signed branch x509 (missing GPGSM)
ok 25 -  extract ZIP archive
ok 110 # skip setup sshkey signed branch (missing GPGSSH)
ok 26 -  validate filenames
ok 80 - allow pathspecs that resolve to the current directory
ok 28 - git log option: --all for path: A/B/C
ok 111 # skip create signed commits with keys having defined lifetimes (missing GPGSSH_VERIFYTIME,GPGSSH of GPGSSH,GPGSSH_VERIFYTIME)
ok 27 -  validate file contents
ok 112 # skip log x509 fingerprint (missing GPGSM)
ok 113 # skip log OpenPGP fingerprint (missing GPGSM)
ok 28 # skip  extract ZIP archive with EOL conversion (missing UNZIP_CONVERT)
ok 81 - attr pathspec in bare repo
ok 114 # skip log ssh key fingerprint (missing GPGSSH)
ok 29 # skip  validate that text files are converted (missing UNZIP_CONVERT)
ok 115 # skip log --graph --show-signature (missing GPG)
ok 30 # skip  validate that binary files are unchanged (missing UNZIP_CONVERT)
ok 14 - rename/rename(2to1)/delete/delete conflict
ok 116 # skip log --graph --show-signature x509 (missing GPGSM)
ok 19 - tree unchanged A, removed B
ok 31 # skip  validate that diff files are converted (missing UNZIP_CONVERT)
ok 117 # skip log --graph --show-signature ssh (missing GPGSSH)
ok 32 # skip  validate that -diff files are unchanged (missing UNZIP_CONVERT)
ok 33 # skip  validate that custom diff is unchanged  (missing UNZIP_CONVERT)
ok 118 # skip log shows failure on expired signature key (missing GPGSSH_VERIFYTIME,GPGSSH of GPGSSH,GPGSSH_VERIFYTIME)
ok 119 # skip log shows failure on not yet valid signature key (missing GPGSSH_VERIFYTIME,GPGSSH of GPGSSH,GPGSSH_VERIFYTIME)
ok 120 # skip log show success with commit date and key validity matching (missing GPGSSH_VERIFYTIME,GPGSSH of GPGSSH,GPGSSH_VERIFYTIME)
ok 121 # skip log shows failure with commit date outside of key validity (missing GPGSSH_VERIFYTIME,GPGSSH of GPGSSH,GPGSSH_VERIFYTIME)
ok 122 # skip log --graph --show-signature for merged tag (missing GPG)
ok 123 # skip log --graph --show-signature for merged tag in shallow clone (missing GPG)
ok 124 # skip log --graph --show-signature for merged tag with missing key (missing GPG)
ok 125 # skip log --graph --show-signature for merged tag with bad signature (missing GPG)
ok 126 # skip log --show-signature for merged tag with GPG failure (missing GPG)
ok 127 # skip log --graph --show-signature for merged tag x509 (missing GPGSM)
ok 128 # skip log --graph --show-signature for merged tag x509 missing key (missing GPGSM)
ok 129 # skip log --graph --show-signature for merged tag x509 bad signature (missing GPGSM)
ok 130 # skip --no-show-signature overrides --show-signature (missing GPG)
ok 82 - set up repository with huge blob
ok 131 # skip log.showsignature=true behaves like --show-signature (missing GPG)
ok 132 # skip --no-show-signature overrides log.showsignature=true (missing GPG)
ok 133 # skip --show-signature overrides log.showsignature=false (missing GPG)
ok 34 - git archive -0 --format=zip on large files
ok 1 - am: added submodule creates empty directory
ok 134 - log --graph --no-walk is forbidden
ok 83 - generate tar with huge size
ok 35 -  extract ZIP archive
ok 29 - git log option: --full-history for path: A/B/C
ok 36 -  validate filenames
ok 20 - turn file to tree
ok 135 - log on empty repo fails
ok 84 - system tar can read our huge size
ok 136 - log does not default to HEAD when rev input is given
ok 137 - do not default to HEAD with ignored object on cmdline
ok 7 - log --graph with octopus merge with column joining its penultimate parent
ok 37 -  validate file contents
ok 138 - do not default to HEAD with ignored object on stdin
ok 38 # skip  extract ZIP archive with EOL conversion (missing UNZIP_CONVERT)
ok 39 # skip  validate that text files are converted (missing UNZIP_CONVERT)
ok 5 - request asks HEAD to be pulled
ok 40 # skip  validate that binary files are unchanged (missing UNZIP_CONVERT)
ok 41 # skip  validate that diff files are converted (missing UNZIP_CONVERT)
ok 42 # skip  validate that -diff files are unchanged (missing UNZIP_CONVERT)
ok 43 # skip  validate that custom diff is unchanged  (missing UNZIP_CONVERT)
ok 85 - set up repository with far-future (2^34 - 1) commit
ok 1 - setup
ok 1 - initial setup validation
ok 86 - generate tar with far-future mtime
ok 30 - git log option: --full-history --simplify-merges for path: A/B/C
ok 70 - am -3 works with rerere
ok 87 - system tar can read our future mtime
ok 2 - create corruption in header of first object
ok 88 - diff-tree
ok 88 - set up repository with far-far-future (2^36 + 1) commit
ok 89 - generate tar with far-far-future mtime
ok 2 - setup pack-object <stdin
not ok 9 - apply_index: replace submodule with a file must fail # TODO known breakage
ok 90 - system tar can read our future mtime
ok 3 - ... but having a loose copy allows for full recovery
# passed all 90 test(s)
1..90
ok 21 - turn tree to file
ok 139 - set up --source tests
ok 15 - mod6: chains of rename/rename(1to2) and add/add via colliding renames
ok 31 - git log option: --simplify-merges for path: A/B/C
ok 3 - pack-object <stdin parsing: basic [|--revs]
*** t5305-include-tag.sh ***
ok 4 - ... and loose copy of first delta allows for partial recovery
ok 1 - setup
ok 140 - log --source paints branch names
ok 2 - bare repo prune is quiet without $GIT_DIR/objects/pack
ok 3 - prune stale packs
ok 4 - pack-object <stdin parsing: [|--revs] bad line
ok 141 - log --source paints tag names
ok 32 - git log option: --simplify-by-decoration for path: A/B/C
ok 44 - git archive --format=zip on large files
ok 5 - create corruption in data of first object
ok 5 - pack-object <stdin parsing: [|--revs] empty line
ok 22 - merge-tree respects core.useReplaceRefs=false
ok 142 - log --source paints symmetric ranges
ok 71 - am -s unexpected trailer block
# passed all 22 test(s)
1..22
ok 143 - --exclude-promisor-objects does not BUG-crash
ok 45 -  extract ZIP archive
ok 4 - prune --expire
ok 6 - ... but having a loose copy allows for full recovery
ok 46 -  validate filenames
*** t5306-pack-nobase.sh ***
ok 6 - pack-object <stdin parsing: [|--revs] with --stdin
ok 47 -  validate file contents
ok 48 # skip  extract ZIP archive with EOL conversion (missing UNZIP_CONVERT)
ok 49 # skip  validate that text files are converted (missing UNZIP_CONVERT)
ok 50 # skip  validate that binary files are unchanged (missing UNZIP_CONVERT)
ok 33 - git log option: --follow for path: A/B/C
ok 16 - directory rename + rename/delete + modify/delete + directory/file conflict
ok 51 # skip  validate that diff files are converted (missing UNZIP_CONVERT)
ok 52 # skip  validate that -diff files are unchanged (missing UNZIP_CONVERT)
ok 53 # skip  validate that custom diff is unchanged  (missing UNZIP_CONVERT)
ok 7 - ... and loose copy of second object allows for partial recovery
ok 7 - pack-object <stdin parsing: --stdin-packs handles garbage
ok 17 - usage: --trivial-merge is incompatible with --messages
ok 18 - usage: --trivial-merge is incompatible with --name-only
ok 144 - log --decorate includes all levels of tag annotated tags
ok 19 - usage: --trivial-merge is incompatible with --allow-unrelated-histories
ok 20 - usage: --trivial-merge is incompatible with --stdin
ok 21 - usage: --trivial-merge is incompatible with --merge-base=
ok 72 - am --patch-format=mboxrd handles mboxrd
ok 22 - usage: --trivial-merge is incompatible with --strategy-option=
ok 23 - usage: --trivial-merge is incompatible with --no-messages
ok 24 - usage: --trivial-merge is incompatible with --
ok 145 - log --decorate does not include things outside filter
ok 2 - am: added submodule leaves existing empty directory alone
ok 25 - usage: --trivial-merge is incompatible with --no-merge-base
ok 8 - log --graph with multiple tips
ok 26 - usage: --trivial-merge is incompatible with --no-strategy-option
ok 146 - log --end-of-options
ok 27 - Just the conflicted files without the messages
ok 34 - git log option: --first-parent for path: A/B/C
ok 1 - setup
ok 2 - pack without --include-tag
ok 28 - Check conflicted oids and modes without messages
ok 8 - create corruption in header of first delta
ok 9 - log --graph with multiple tips and colors
ok 3 - unpack objects
not ok 10 - apply_index: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 73 - am works with multi-line in-body headers
ok 9 - ... but having a loose copy allows for full recovery
ok 54 - git archive --format=zip --add-file
ok 5 - gc: implicit prune --expire
ok 4 - check unpacked result (have commit, no tag)
ok 5 - pack with --include-tag
ok 6 - pull request format
ok 74 - am --quit keeps HEAD where it is
ok 35 - git log option: --topo-order for path: A/B/C
ok 29 - NUL terminated conflicted file "lines"
ok 6 - unpack objects
ok 6 - gc: refuse to start with invalid gc.pruneExpire
ok 55 -  extract ZIP archive
ok 30 - error out by default for unrelated histories
ok 56 -  validate filenames
ok 89 - sparse-index is not expanded: diff-tree
ok 7 - check unpacked result (have commit, have tag)
ok 57 -  validate file contents
ok 10 - ... and then a repack "clears" the corruption
ok 58 # skip  extract ZIP archive with EOL conversion (missing UNZIP_CONVERT)
ok 59 # skip  validate that text files are converted (missing UNZIP_CONVERT)
ok 60 # skip  validate that binary files are unchanged (missing UNZIP_CONVERT)
ok 31 - can override merge of unrelated histories
ok 61 # skip  validate that diff files are converted (missing UNZIP_CONVERT)
ok 1 - setup base
ok 62 # skip  validate that -diff files are unchanged (missing UNZIP_CONVERT)
ok 63 # skip  validate that custom diff is unchanged  (missing UNZIP_CONVERT)
ok 64 -  validate extra file untracked
ok 36 - git log option: --date-order for path: A/B/C
ok 7 - gc: start with ok gc.pruneExpire
ok 8 - create hidden inner tag
ok 8 - prune: prune nonsense parameters
ok 8 - pack without delta
ok 65 - git archive --format=zip --add-virtual-file
ok 9 - pack explicit outer tag
ok 147 - set up commits with different authors
ok 10 - unpack objects
ok 2 - setup patch_clone
ok 148 - log --invert-grep --grep --author
ok 11 - check unpacked result (have all objects)
# passed all 148 test(s)
1..148
ok 11 - create corruption in data of first delta
ok 12 - pack implied outer tag
ok 37 - git log option: --author-date-order for path: A/B/C
ok 9 - prune: prune unreachable heads
ok 12 - ... but having a loose copy allows for full recovery
ok 7 - request-pull ignores OPTIONS_KEEPDASHDASH poison
ok 32 - merge-ort fails gracefully in a read-only repository
ok 13 - unpack objects
*** t5307-pack-missing-commit.sh ***
ok 14 - check unpacked result (have all objects)
ok 10 - prune: do not prune detached HEAD with no reflog
ok 38 - git log option: --ancestry-path side..main for path: A/B/C
ok 66 - git archive --format=zip --add-file twice
ok 13 - ... and then a repack "clears" the corruption
ok 11 - prune: prune former HEAD after checking out branch
ok 67 -  extract ZIP archive
ok 3 - indirectly clone patch_clone
ok 15 - single-branch clone can transfer tag
ok 68 -  validate filenames
# passed all 15 test(s)
1..15
ok 69 -  validate file contents
*** t5308-pack-detect-duplicates.sh ***
ok 70 # skip  extract ZIP archive with EOL conversion (missing UNZIP_CONVERT)
ok 3 - am: replace tracked file with submodule creates empty directory
ok 71 # skip  validate that text files are converted (missing UNZIP_CONVERT)
ok 72 # skip  validate that binary files are unchanged (missing UNZIP_CONVERT)
ok 4 - clone of patch_clone is incomplete
ok 73 # skip  validate that diff files are converted (missing UNZIP_CONVERT)
ok 74 # skip  validate that -diff files are unchanged (missing UNZIP_CONVERT)
ok 39 - git log option:  for path: A/file1
# passed all 4 test(s)
1..4
ok 75 # skip  validate that custom diff is unchanged  (missing UNZIP_CONVERT)
ok 76 -  validate extra file one/untracked
ok 12 - prune: do not prune heads listed as an argument
*** t5309-pack-delta-cycles.sh ***
ok 77 -  validate extra file two/untracked
ok 33 - --stdin with both a successful and a conflicted merge
ok 34 - --merge-base is incompatible with --stdin
# passed all 77 test(s)
# SKIP no web server found at ''
1..77
ok 14 - corruption in delta base reference of first delta (OBJ_REF_DELTA)
*** t5310-pack-bitmaps.sh ***
ok 9 - negative window clamps to 0
ok 15 - ... but having a loose copy allows for full recovery
ok 10 - pack-objects with bogus arguments
ok 11 - apply_index: modified submodule does not update submodule work tree
ok 40 - git log option: --all for path: A/file1
ok 8 - request-pull quotes regex metacharacters properly
ok 13 - gc --no-prune
ok 16 - ... and then a repack "clears" the corruption
ok 41 - git log option: --full-history for path: A/file1
ok 35 - specify merge-base as parent of branch2
ok 1 - setup
ok 2 - pack with no duplicates
ok 14 - gc respects gc.pruneExpire
ok 1 - setup
ok 42 - git log option: --full-history --simplify-merges for path: A/file1
ok 75 - am and .gitattibutes
ok 1 - index-pack works with a single delta (A->B)
ok 17 - corruption #0 in delta base reference of first delta (OBJ_OFS_DELTA)
ok 2 - check corruption
ok 3 - rev-list notices corruption (1)
ok 4 - rev-list notices corruption (2)
ok 10 - log --graph with multiple tips
ok 1 - name-hash value stability
ok 5 - pack-objects notices corruption
# passed all 10 test(s)
1..10
ok 18 - ... but having a loose copy allows for full recovery
# passed all 5 test(s)
1..5
ok 2 - index-pack works with a single delta (B->A)
*** t5311-pack-bitmaps-shallow.sh ***
ok 2 - setup test repository
*** t5312-prune-corruption.sh ***
ok 3 - index-pack detects missing base objects
ok 36 - check the input format when --stdin is passed
ok 9 - pull request with mismatched object
ok 37 - --merge-base with tree OIDs
ok 43 - git log option: --simplify-merges for path: A/file1
ok 19 - ... and then a repack "clears" the corruption
ok 4 - index-pack detects REF_DELTA cycles
ok 4 - am: replace directory with submodule
ok 38 - error out on missing tree objects
ok 76 - apply binary blob in partial clone
ok 15 - gc --prune=<date>
ok 5 - failover to an object in another pack
ok 77 - an empty input file is error regardless of --empty option
ok 44 - git log option: --simplify-by-decoration for path: A/file1
ok 3 - index-pack will allow duplicate objects by default
ok 4 - create batch-check test vectors
ok 6 - failover to a duplicate object in the same pack
ok 5 - lookup in duplicated pack
# passed all 6 test(s)
1..6
ok 78 - invalid when passing the --empty option alone
*** t5313-pack-bounds-checks.sh ***
ok 39 - error out on missing blob objects
ok 90 - worktree
ok 6 - index-pack can reject packs with duplicates
ok 20 - corruption #1 in delta base reference of first delta (OBJ_OFS_DELTA)
ok 79 - a message without a patch is an error (default)
# passed all 6 test(s)
1..6
*** t5314-pack-cycle-detection.sh ***
ok 21 - ... but having a loose copy allows for full recovery
ok 80 - a message without a patch is an error where an explicit "--empty=stop" is given
ok 40 - error out on missing commits as well
# passed all 40 test(s)
1..40
ok 45 - git log option: --follow for path: A/file1
ok 11 - unpack without delta
ok 1 - disable reflogs
ok 12 - apply_index: modified submodule does not update submodule work tree to invalid commit
ok 10 - pull request with stale object
# passed all 10 test(s)
1..10
ok 16 - gc --prune=never
ok 81 - a message without a patch will be skipped when "--empty=drop" is given
*** t5315-pack-objects-compression.sh ***
ok 2 - create history reachable only from a bogus-named ref
ok 22 - ... and then a repack "clears" the corruption
ok 46 - git log option: --first-parent for path: A/file1
ok 82 - record as an empty commit when meeting e-mail message that lacks a patch
ok 3 - pruning does not drop bogus object
*** t5316-pack-delta-depth.sh ***
ok 1 - setup shallow repo
ok 2 - turn on bitmaps in the parent
ok 4 - put bogus object into pack
ok 1 - setup
ok 3 - shallow fetch from bitmapped repo
ok 5 - non-destructive repack bails on bogus ref
ok 47 - git log option: --topo-order for path: A/file1
ok 83 - skip an empty patch in the middle of an am session
ok 23 - ... and a redundant pack allows for full recovery too
ok 6 - GIT_REF_PARANOIA=0 overrides safety
ok 2 - set up base packfile and variables
ok 17 - gc respects gc.pruneExpire=never
ok 5 - am: removed submodule leaves submodule directory and its contents in place
ok 84 - record an empty patch as an empty commit in the middle of an am session
ok 48 - git log option: --date-order for path: A/file1
ok 7 - destructive repack keeps packed object
ok 3 - pack/index object count mismatch
ok 18 - prune --expire=never
ok 8 - destructive repack not confused by dangling symref
ok 24 - corruption of delta base reference pointing to wrong object
ok 4 - setup shallow repo
ok 5 - turn on bitmaps in the parent
ok 1 - setup
ok 25 - ... but having a loose copy allows for full recovery
ok 85 - create an non-empty commit when the index IS changed though "--allow-empty" is given
ok 49 - git log option: --author-date-order for path: A/file1
ok 4 - matched bogus object count
ok 9 - create history with missing tip commit
ok 6 - shallow fetch from bitmapped repo
ok 1 - setup
# passed all 6 test(s)
1..6
ok 2 - pack-objects with -c core.compression=0
*** t5317-pack-objects-filter-objects.sh ***
ok 5 - bogus object offset (v1)
ok 10 - pruning with a corrupted tip does not drop history
ok 86 - cannot create empty commits when there is a clean index due to merge conflicts
ok 11 - pack-refs does not silently delete broken loose ref
ok 91 - worktree is not expanded
ok 26 - ... and then a repack "clears" the corruption
# passed all 11 test(s)
1..11
ok 2 - repack
*** t5318-commit-graph.sh ***
ok 50 - git log option: --ancestry-path side..main for path: A/file1
ok 3 - pack-objects with -c core.compression=9
ok 6 - bogus object offset (v2, no msb)
# passed all 2 test(s)
1..2
*** t5319-multi-pack-index.sh ***
ok 13 - apply_index: modified submodule does not update submodule work tree from invalid commit
ok 19 - gc: prune old objects after local clone
ok 12 - unpack without delta (core.fsyncmethod=batch)
ok 7 - bogus offset into v2 extended table
ok 87 - cannot create empty commits when there is unmerged index due to merge conflicts
ok 4 - pack-objects with -c core.compression=0 -c pack.compression=0
ok 20 - garbage report in count-objects -v
# passed all 87 test(s)
1..87
ok 51 - git log option:  for path: A/B/file2
*** t5320-delta-islands.sh ***
ok 27 - corrupting header to have too small output buffer fails unpack
ok 5 - pack-objects with -c core.compression=9 -c pack.compression=0
ok 28 - apply good minimal delta
ok 8 - bogus offset inside v2 extended table
ok 29 - apply delta with too many literal bytes
ok 30 - apply delta with too many copied bytes
ok 31 - apply delta with too few literal bytes
ok 32 - apply delta with too few bytes in base
ok 33 - apply delta with truncated copy parameters
ok 21 - clean pack garbage with gc
ok 34 - apply delta with trailing garbage literal
ok 6 - pack-objects with -c core.compression=0 -c pack.compression=9
ok 35 - apply delta with trailing garbage copy
ok 36 - apply delta with trailing garbage opcode
# passed all 36 test(s)
1..36
ok 22 - prune .git/shallow
*** t5321-pack-large-objects.sh ***
ok 9 - bogus OFS_DELTA in packfile
ok 52 - git log option: --all for path: A/B/file2
# passed all 9 test(s)
1..9
*** t5322-pack-objects-sparse.sh ***
ok 7 - pack-objects with -c core.compression=9 -c pack.compression=9
ok 14 - apply_index: added submodule doesn't remove untracked unignored file with same name
ok 1 - usage
ok 2 - usage shown without sub-command
ok 1 - setup
ok 23 - prune .git/shallow when there are no loose objects
ok 2 - don't write midx with no packs
ok 6 - am: removed submodule leaves submodule containing a .git directory alone
ok 3 - usage shown with an error on unknown sub-command
ok 8 - pack-objects with -c pack.compression=0
ok 4 - setup full repo
ok 5 - tweak umask for modebit tests
ok 6 - verify graph with no graph file
ok 3 - warn if a midx contains no oid
ok 53 - git log option: --full-history for path: A/B/file2
ok 7 - write graph with no packs
ok 8 - exit with correct error on bad input to --stdin-packs
ok 9 - pack-objects with -c pack.compression=9
ok 1 - setup r1
# passed all 9 test(s)
1..9
ok 24 - prune: handle alternate object database
*** t5323-pack-redundant.sh ***
ok 54 - git log option: --full-history --simplify-merges for path: A/B/file2
ok 25 - prune: handle index in multiple worktrees
ok 1 - setup commits
ok 3 - setup repo with moderate-sized history
ok 4 - setup writing bitmaps during repack
ok 2 - verify blob count in normal packfile
ok 2 - vanilla repack deltas one against two
ok 9 - create commits and repack
ok 55 - git log option: --simplify-merges for path: A/B/file2
ok 1 - setup
ok 3 - island repack with no island definition is vanilla
ok 26 - prune: handle HEAD in multiple worktrees
ok 3 - verify blob:none packfile has no blobs
ok 2 - repack large deltas
# passed all 2 test(s)
1..2
*** t5324-split-commit-graph.sh ***
ok 4 - island repack with no matches is vanilla
ok 5 - full repack creates bitmaps
ok 4 - verify blob:none packfile without --stdout
ok 92 - check-attr with pathspec inside sparse definition
ok 6 - rev-list --test-bitmap verifies bitmaps
ok 5 - separate islands disallows delta
ok 7 - counting commits via bitmap (full bitmap, second)
ok 10 - check normal git operations: no graph
ok 27 - prune: handle HEAD reflog in multiple worktrees
ok 6 - same island allows delta
ok 56 - git log option: --simplify-by-decoration for path: A/B/file2
ok 5 - verify normal and blob:none packfiles have same commits/trees
ok 8 - counting partial commits via bitmap (full bitmap, second)
ok 4 - create objects
ok 9 - counting commits with limit (full bitmap, second)
ok 7 - coalesce same-named islands
ok 28 - prune: handle expire option correctly
ok 11 - exit with correct error on bad input to --stdin-commits
ok 1 - create series of packs
ok 10 - counting non-linear history (full bitmap, second)
ok 6 - get an error for missing tree object
ok 12 - write graph
ok 5 - write midx with one v1 pack
ok 7 - am: replace submodule with a directory must fail
ok 13 - write graph has correct permissions
ok 8 - island restrictions drop reused deltas
ok 1 - setup repo
ok 7 - setup for tests of tree:0
ok 11 - counting commits with limiting (full bitmap, second)
ok 29 - trivial prune with bitmaps enabled
ok 2 - packing produces a long delta
ok 57 - git log option: --follow for path: A/B/file2
ok 15 - apply_3way: added submodule creates empty directory
ok 2 - non-sparse pack-objects
ok 9 - island regexes are left-anchored
ok 6 - write midx with one v2 pack
ok 12 - counting objects via bitmap (full bitmap, second)
ok 8 - verify tree:0 packfile has no blobs or trees
ok 3 - sparse pack-objects
ok 10 - island regexes follow last-one-wins scheme
ok 3 - --depth limits depth
ok 13 - enumerate commits (full bitmap, second)
ok 9 - grab tree directly when using tree:0
ok 1 - setup repo
ok 14 - check normal git operations: graph exists
ok 2 - tweak umask for modebit tests
ok 4 - duplicate a folder from f3 and commit to topic1
ok 58 - git log option: --first-parent for path: A/B/file2
ok 4 - --depth=0 disables deltas
ok 30 - old reachable-from-recent retained with bitmaps
ok 14 - enumerate --objects (full bitmap, second)
ok 1 - setup main repo
ok 13 - pack with REF_DELTA
ok 10 - setup r2
ok 5 - non-sparse pack-objects
ok 15 - bitmap --objects handles non-commit objects (full bitmap, second)
ok 2 - main: pack-redundant works with no packfile
ok 5 - negative depth disables deltas
# passed all 5 test(s)
1..5
ok 16 - counting commits via bitmap (full bitmap, other)
ok 7 - check normal git operations: one v2 pack
*** t5325-reverse-index.sh ***
ok 3 - main: pack-redundant works with one packfile
ok 6 - sparse pack-objects
ok 59 - git log option: --topo-order for path: A/B/file2
ok 17 - counting partial commits via bitmap (full bitmap, other)
ok 11 - setup shared history
ok 8 - corrupt idx reports errors
ok 11 - verify blob count in normal packfile
ok 18 - counting commits with limit (full bitmap, other)
ok 4 - main: no redundant for pack 1, 2, 3
ok 31 - gc.recentObjectsHook
# passed all 31 test(s)
1..31
ok 12 - vanilla delta goes between branches
ok 12 - verify blob:limit=500 omits all blobs
*** t5326-multi-pack-bitmaps.sh ***
ok 7 - duplicate a folder from f1 into f3
ok 19 - counting non-linear history (full bitmap, other)
ok 3 - create commits and write commit-graph
ok 5 - main: one of pack-2/pack-3 is redundant
ok 60 - git log option: --date-order for path: A/B/file2
ok 8 - non-sparse pack-objects
ok 13 - deltas allowed against superset islands
ok 13 - verify blob:limit=1000
ok 20 - counting commits with limiting (full bitmap, other)
ok 21 - counting objects via bitmap (full bitmap, other)
ok 9 - sparse pack-objects
ok 6 - main: pack 2, 4, and 6 are redundant
ok 14 - island core places core objects first
ok 14 - verify blob:limit=1001
ok 22 - enumerate commits (full bitmap, other)
ok 10 - pack.useSparse enables algorithm
ok 15 - unmatched island core is not fatal
# passed all 15 test(s)
1..15
ok 4 - check normal git operations: graph exists
ok 7 - main: pack-8 (subset of pack-1) is also redundant
ok 61 - git log option: --author-date-order for path: A/B/file2
*** t5327-multi-pack-bitmaps-rev.sh ***
ok 23 - enumerate --objects (full bitmap, other)
ok 11 - pack.useSparse overridden
# passed all 11 test(s)
1..11
ok 8 - main: clean loose objects
ok 24 - bitmap --objects handles non-commit objects (full bitmap, other)
ok 15 - verify blob:limit=10001
*** t5328-commit-graph-64bit-time.sh ***
ok 9 - main: remove redundant packs and pass fsck
ok 8 - am: replace submodule containing a .git directory with a directory must fail
ok 62 - git log option: --ancestry-path side..main for path: A/B/file2
ok 16 - verify blob:limit=1k
ok 9 - add more objects
ok 1 - setup
ok 10 - setup shared.git
ok 11 - shared: all packs are redundant, but no output without --alt-odb
ok 1 - setup test_repository
ok 16 - apply_3way: added submodule leaves existing empty directory alone
ok 25 - clone from bitmapped repository
ok 12 - shared: show redundant packs in stderr for verbose mode
ok 2 - index-pack with pack.writeReverseIndex
ok 93 - check-attr with pathspec outside sparse definition
ok 17 - verify explicitly specifying oversized blob in input
ok 10 - write midx with two packs
ok 63 - git log option:  for path: A/B/C/file3
ok 14 - unpack with REF_DELTA
ok 13 - shared: remove redundant packs, no packs left
ok 3 - index-pack with --[no-]rev-index
ok 18 - verify blob:limit=1m
ok 1 - setup bitmap config
ok 4 - index-pack can verify reverse indexes
ok 19 - verify normal and blob:limit packfiles have same commits/trees
ok 5 - index-pack infers reverse index name with -o
ok 15 - Add more commits
ok 14 - shared: create new objects and packs
ok 16 - commit-graph write progress off for redirected stderr
ok 15 - shared: no redundant without --alt-odb
ok 64 - git log option: --all for path: A/B/C/file3
ok 17 - commit-graph write force progress on for stderr
ok 6 - pack-objects respects pack.writeReverseIndex
ok 18 - commit-graph write with the --no-progress option
ok 11 - check normal git operations: two packs
ok 16 - shared: one pack is redundant with --alt-odb
ok 19 - commit-graph write --stdin-commits progress off for redirected stderr
ok 20 - verify small limit and big limit results in small limit
ok 12 - write midx with --stdin-packs
ok 7 - reverse index is not generated when available on disk
ok 17 - shared: ignore unique objects and all two packs are redundant
ok 26 - partial clone from bitmapped repository
ok 20 - commit-graph write --stdin-commits force progress on for stderr
# passed all 17 test(s)
1..17
*** t5329-pack-objects-cruft.sh ***
ok 21 - commit-graph write --stdin-commits with the --no-progress option
ok 8 - reverse index is ignored when pack.readReverseIndex is false
ok 22 - commit-graph verify progress off for redirected stderr
ok 23 - commit-graph verify force progress on for stderr
ok 21 - verify big limit and small limit results in small limit
ok 24 - commit-graph verify with the --no-progress option
ok 27 - setup further non-bitmapped commits
ok 65 - git log option: --full-history for path: A/B/C/file3
ok 28 - counting commits via bitmap (partial bitmap, second)
ok 25 - write graph with merges
ok 29 - counting partial commits via bitmap (partial bitmap, second)
not ok 9 - am: replace submodule with a file must fail # TODO known breakage
ok 22 - setup r3
ok 30 - counting commits with limit (partial bitmap, second)
ok 13 - check normal git operations: mixed mode (one pack + extra)
ok 5 - add more commits, and write a new base graph
ok 31 - counting non-linear history (partial bitmap, second)
ok 9 - revindex in-memory vs on-disk
ok 23 - verify blob count in normal packfile
ok 14 - write with no objects and preferred pack
ok 66 - git log option: --full-history --simplify-merges for path: A/B/C/file3
ok 24 - verify sparse:path=pattern1 fails
ok 15 - write progress off for redirected stderr
ok 25 - verify sparse:path=pattern2 fails
ok 16 - write force progress on for stderr
ok 32 - counting commits with limiting (partial bitmap, second)
ok 1 - lower layers have overflow chunk
ok 26 - check normal git operations: merge 1 vs 2
ok 17 - write with the --no-progress option
ok 33 - counting objects via bitmap (partial bitmap, second)
ok 10 - fsck succeeds on good rev-index
ok 17 - apply_3way: replace tracked file with submodule creates empty directory
ok 34 - enumerate commits (partial bitmap, second)
ok 67 - git log option: --simplify-merges for path: A/B/C/file3
ok 26 - setup r4
ok 6 - fork and fail to base a chain on a commit-graph file
ok 2 - check normal git operations: overflow
ok 27 - check normal git operations: merge 1 vs 3
ok 15 - unpack with REF_DELTA (core.fsyncmethod=batch)
ok 35 - enumerate --objects (partial bitmap, second)
ok 36 - bitmap --objects handles non-commit objects (partial bitmap, second)
ok 11 - set up rev-index corruption tests
ok 27 - verify blob count in normal packfile
ok 37 - counting commits via bitmap (partial bitmap, other)
ok 68 - git log option: --simplify-by-decoration for path: A/B/C/file3
ok 12 - fsck catches invalid checksum
ok 38 - counting partial commits via bitmap (partial bitmap, other)
ok 39 - counting commits with limit (partial bitmap, other)
ok 13 - fsck catches invalid row position
ok 28 - verify sparse:oid=OID
ok 7 - add three more commits, write a tip graph
ok 28 - check normal git operations: merge 2 vs 3
ok 1 - unreachable loose objects are packed (expire never)
ok 40 - counting non-linear history (partial bitmap, other)
ok 14 - fsck catches invalid header: magic number
ok 41 - counting commits with limiting (partial bitmap, other)
ok 29 - verify sparse:oid=oid-ish
ok 15 - fsck catches invalid header: version
not ok 94 - diff --check with pathspec outside sparse definition # TODO known breakage
ok 69 - git log option: --follow for path: A/B/C/file3
ok 30 - setup r1 - delete loose blobs
ok 42 - counting objects via bitmap (partial bitmap, other)
ok 29 - Add one more commit
not ok 10 - am: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 31 - verify pack-objects fails w/ missing objects
ok 16 - fsck catches invalid header: hash function
ok 32 - verify pack-objects fails w/ --missing=error
# passed all 16 test(s)
1..16
ok 43 - enumerate commits (partial bitmap, other)
ok 33 - verify pack-objects w/ --missing=allow-any
*** t5330-no-lazy-fetch-with-commit-graph.sh ***
ok 8 - check normal git operations: split commit-graph: merge 3 vs 2
# passed all 33 test(s)
1..33
*** t5331-pack-objects-stdin.sh ***
ok 44 - enumerate --objects (partial bitmap, other)
ok 70 - git log option: --first-parent for path: A/B/C/file3
ok 45 - bitmap --objects handles non-commit objects (partial bitmap, other)
ok 9 - add one commit, write a tip graph
ok 2 - unreachable packed objects are packed (expire never)
ok 30 - check normal git operations: mixed mode, commit 8 vs merge 1
ok 71 - git log option: --topo-order for path: A/B/C/file3
ok 46 - fetch (partial bitmap)
ok 31 - check normal git operations: mixed mode, commit 8 vs merge 2
ok 18 - apply_3way: replace directory with submodule
ok 10 - check normal git operations: three-layer commit-graph: commit 11 vs 6
ok 32 - write graph with new commit
ok 72 - git log option: --date-order for path: A/B/C/file3
ok 3 - unreachable cruft objects are repacked (expire never)
ok 47 - enumerating progress counts pack-reused objects
ok 1 - setup: prepare a repository with a commit
ok 2 - setup repo with moderate-sized history
ok 11 - add one commit, write a merged graph
ok 33 - check normal git operations: full graph, commit 8 vs merge 1
ok 95 - sparse-index is not expanded: check-attr
ok 73 - git log option: --author-date-order for path: A/B/C/file3
ok 3 - create single-pack midx with bitmaps
ok 3 - set up and verify repo with generation data overflow chunk
ok 2 - setup: prepare a repository with commit-graph contains the commit
ok 4 - reverse index exists (midx)
ok 1 - setup for --stdin-packs tests
ok 5 - rev-list --test-bitmap verifies bitmaps
ok 3 - setup: change the alternates to what without the commit
ok 12 - check normal git operations: merged commit-graph: commit 12 vs 6
ok 48 - pack-objects respects --local (non-local loose)
ok 34 - check normal git operations: full graph, commit 8 vs merge 2
ok 6 - counting commits via bitmap (full bitmap, second)
ok 74 - git log option: --ancestry-path side..main for path: A/B/C/file3
ok 7 - counting partial commits via bitmap (full bitmap, second)
ok 2 - --stdin-packs with excluded packs
ok 35 - write graph with nothing new
ok 3 - --stdin-packs is incompatible with --filter
ok 4 - multiple cruft packs (expire never)
ok 4 - --stdin-packs is incompatible with --revs
ok 8 - counting commits with limit (full bitmap, second)
ok 4 - check normal git operations: overflow 2
ok 11 - am: modified submodule does not update submodule work tree
ok 4 - fetch any commit from promisor with the usage of the commit graph
ok 9 - counting non-linear history (full bitmap, second)
ok 2 - setup repo with moderate-sized history
# passed all 4 test(s)
1..4
ok 16 - pack with OFS_DELTA
ok 75 - git log option:  for path: file4
*** t5332-multi-pack-reuse.sh ***
ok 10 - counting commits with limiting (full bitmap, second)
ok 49 - pack-objects respects --honor-pack-keep (local non-bitmapped pack)
ok 36 - check normal git operations: cleared graph, commit 8 vs merge 1
ok 11 - counting objects via bitmap (full bitmap, second)
ok 19 - apply_3way: removed submodule leaves submodule directory and its contents in place
ok 5 - single commit with generation data exceeding UINT32_MAX
ok 5 - --stdin-packs with loose objects
ok 3 - create single-pack midx with bitmaps
ok 12 - enumerate commits (full bitmap, second)
ok 6 - reader notices out-of-bounds generation overflow
# passed all 6 test(s)
1..6
ok 76 - git log option: --all for path: file4
ok 4 - reverse index exists (rev)
ok 13 - create fork and chain across alternate
ok 5 - cruft packs tolerate missing trees (expire never)
ok 13 - enumerate --objects (full bitmap, second)
ok 5 - rev-list --test-bitmap verifies bitmaps
*** t5333-pseudo-merge-bitmaps.sh ***
ok 50 - pack-objects respects --local (non-local pack)
ok 14 - bitmap --objects handles non-commit objects (full bitmap, second)
ok 6 - counting commits via bitmap (full bitmap, second)
ok 15 - counting commits via bitmap (full bitmap, other)
ok 37 - check normal git operations: cleared graph, commit 8 vs merge 2
ok 6 - --stdin-packs with broken links
ok 77 - git log option: --full-history for path: file4
ok 7 - counting partial commits via bitmap (full bitmap, second)
ok 16 - counting partial commits via bitmap (full bitmap, other)
ok 38 - build graph from latest pack with closure
ok 8 - counting commits with limit (full bitmap, second)
ok 17 - counting commits with limit (full bitmap, other)
ok 51 - pack-objects respects --honor-pack-keep (local bitmapped pack)
ok 96 - advice.sparseIndexExpanded
ok 9 - counting non-linear history (full bitmap, second)
ok 18 - counting non-linear history (full bitmap, other)
ok 78 - git log option: --full-history --simplify-merges for path: file4
ok 14 - check normal git operations: alternate: commit 13 vs 6
ok 52 - pack-objects respects --local (non-local bitmapped pack)
ok 10 - counting commits with limiting (full bitmap, second)
ok 6 - cruft packs tolerate missing blobs (expire never)
ok 19 - counting commits with limiting (full bitmap, other)
ok 7 - pack-objects --stdin with duplicate packfile
ok 39 - check normal git operations: graph from pack, commit 8 vs merge 1
ok 11 - counting objects via bitmap (full bitmap, second)
ok 20 - counting objects via bitmap (full bitmap, other)
ok 79 - git log option: --simplify-merges for path: file4
ok 21 - enumerate commits (full bitmap, other)
ok 12 - enumerate commits (full bitmap, second)
ok 53 - pack-objects to file can use bitmap
ok 22 - enumerate --objects (full bitmap, other)
ok 13 - enumerate --objects (full bitmap, second)
ok 23 - bitmap --objects handles non-commit objects (full bitmap, other)
ok 1 - preferred pack is reused for single-pack reuse
ok 8 - pack-objects --stdin with same packfile excluded and included
ok 80 - git log option: --simplify-by-decoration for path: file4
ok 14 - bitmap --objects handles non-commit objects (full bitmap, second)
ok 40 - check normal git operations: graph from pack, commit 8 vs merge 2
ok 54 - full repack, reusing previous bitmaps
ok 2 - multi-pack reuse is disabled by default
ok 15 - counting commits via bitmap (full bitmap, other)
ok 16 - counting partial commits via bitmap (full bitmap, other)
ok 41 - build graph from commits with closure
ok 7 - unreachable loose objects are packed (expire 2.weeks.ago)
ok 3 - feature.experimental implies multi-pack reuse
ok 17 - counting commits with limit (full bitmap, other)
ok 20 - apply_3way: removed submodule leaves submodule containing a .git directory alone
ok 55 - fetch (full bitmap)
ok 81 - git log option: --follow for path: file4
ok 24 - clone from bitmapped repository
ok 18 - counting non-linear history (full bitmap, other)
ok 9 - pack-objects --stdin with packfiles from alternate object database
ok 12 - am: modified submodule does not update submodule work tree to invalid commit
ok 56 - create objects for missing-HAVE tests
ok 17 - unpack with OFS_DELTA
ok 4 - multi-pack reuse can be disabled with feature.experimental
ok 5 - enable multi-pack reuse
ok 19 - counting commits with limiting (full bitmap, other)
ok 57 - pack-objects respects --incremental
ok 18 - add more packs
ok 20 - counting objects via bitmap (full bitmap, other)
ok 82 - git log option: --first-parent for path: file4
ok 42 - check normal git operations: graph from commits, commit 8 vs merge 1
ok 58 - pack with missing blob
ok 59 - pack with missing tree
ok 21 - enumerate commits (full bitmap, other)
ok 60 - pack with missing parent
ok 8 - unreachable packed objects are packed (expire 2.weeks.ago)
ok 61 # skip we can read jgit bitmaps (missing JGIT of JGIT,SHA1)
ok 6 - reuse all objects from subset of bitmapped packs
ok 62 # skip jgit can read our bitmaps (missing JGIT of JGIT,SHA1)
ok 83 - git log option: --topo-order for path: file4
ok 22 - enumerate --objects (full bitmap, other)
ok 97 - cat-file -p
ok 25 - partial clone from bitmapped repository
ok 23 - bitmap --objects handles non-commit objects (full bitmap, other)
ok 7 - reuse all objects from all packs
ok 43 - check normal git operations: graph from commits, commit 8 vs merge 2
ok 84 - git log option: --date-order for path: file4
ok 10 - pack-objects --stdin with packfiles from main and alternate object database
ok 44 - build graph from commits with append
# passed all 10 test(s)
1..10
ok 26 - setup further non-bitmapped commits
*** t5334-incremental-multi-pack-index.sh ***
ok 1 - setup
ok 27 - counting commits via bitmap (partial bitmap, second)
ok 15 - test merge strategy constants
ok 19 - check normal git operations: mixed mode (two packs + extra)
ok 28 - counting partial commits via bitmap (partial bitmap, second)
ok 24 - clone from bitmapped repository
ok 29 - counting commits with limit (partial bitmap, second)
ok 85 - git log option: --author-date-order for path: file4
ok 20 - write midx with twelve packs
ok 21 - apply_3way: replace submodule with a directory must fail
ok 9 - unreachable cruft objects are repacked (expire 2.weeks.ago)
ok 16 - remove commit-graph-chain file after flattening
ok 30 - counting non-linear history (partial bitmap, second)
ok 45 - check normal git operations: append graph, commit 8 vs merge 1
ok 31 - counting commits with limiting (partial bitmap, second)
ok 86 - git log option: --ancestry-path side..main for path: file4
ok 32 - counting objects via bitmap (partial bitmap, second)
ok 8 - reuse objects from first pack with middle gap
ok 17 - verify hashes along chain, even in shallow
ok 33 - enumerate commits (partial bitmap, second)
ok 46 - check normal git operations: append graph, commit 8 vs merge 2
ok 9 - reuse objects from middle pack with middle gap
ok 87 - git log option:  for path: file5
ok 21 - check normal git operations: twelve packs
ok 13 - am: modified submodule does not update submodule work tree from invalid commit
ok 25 - partial clone from bitmapped repository
ok 34 - enumerate --objects (partial bitmap, second)
ok 47 - build graph using --reachable
ok 35 - bitmap --objects handles non-commit objects (partial bitmap, second)
ok 18 - verify notices chain slice which is bogus (base)
ok 36 - counting commits via bitmap (partial bitmap, other)
ok 37 - counting partial commits via bitmap (partial bitmap, other)
ok 26 - setup further non-bitmapped commits
ok 38 - counting commits with limit (partial bitmap, other)
ok 88 - git log option: --all for path: file5
ok 19 - verify notices chain slice which is bogus (tip)
ok 10 - multiple cruft packs (expire 2.weeks.ago)
ok 27 - counting commits via bitmap (partial bitmap, second)
ok 1 - convert non-incremental MIDX to incremental
ok 28 - counting partial commits via bitmap (partial bitmap, second)
ok 22 - multi-pack-index *.rev cleanup with --object-dir
ok 39 - counting non-linear history (partial bitmap, other)
ok 29 - counting commits with limit (partial bitmap, second)
ok 48 - check normal git operations: append graph, commit 8 vs merge 1
ok 89 - git log option: --full-history for path: file5
ok 18 - unpack with OFS_DELTA (core.fsyncmethod=batch)
ok 19 - compare delta flavors
ok 40 - counting commits with limiting (partial bitmap, other)
ok 30 - counting non-linear history (partial bitmap, second)
ok 20 - verify --shallow does not check base contents
ok 41 - counting objects via bitmap (partial bitmap, other)
ok 31 - counting commits with limiting (partial bitmap, second)
ok 10 - omit delta with uninteresting base (same pack)
ok 98 - cat-file --batch
ok 14 - am: added submodule doesn't remove untracked unignored file with same name
# still have 2 known breakage(s)
# passed all remaining 96 test(s)
1..98
ok 63 - splitting packs does not generate bogus bitmaps
ok 42 - enumerate commits (partial bitmap, other)
ok 2 - check normal git operations: incremental MIDX
ok 32 - counting objects via bitmap (partial bitmap, second)
ok 90 - git log option: --full-history --simplify-merges for path: file5
ok 49 - check normal git operations: append graph, commit 8 vs merge 2
ok 43 - enumerate --objects (partial bitmap, other)
ok 21 - warn on base graph chunk incorrect
ok 44 - bitmap --objects handles non-commit objects (partial bitmap, other)
ok 33 - enumerate commits (partial bitmap, second)
*** t5351-unpack-large-objects.sh ***
ok 11 - cruft packs tolerate missing trees (expire 2.weeks.ago)
ok 22 - apply_3way: replace submodule containing a .git directory with a directory must fail
ok 11 - omit delta from uninteresting base (cross pack)
ok 23 - warn on improper hash version
ok 64 - set up reusable pack
ok 50 - setup bare repo
ok 3 - convert incremental to non-incremental
ok 65 - pack reuse respects --honor-pack-keep
ok 34 - enumerate --objects (partial bitmap, second)
ok 2 - pack-objects with index version 1
ok 91 - git log option: --simplify-merges for path: file5
ok 35 - bitmap --objects handles non-commit objects (partial bitmap, second)
ok 66 - pack reuse respects --local
ok 22 - verify after commit-graph-chain corruption (base)
ok 36 - counting commits via bitmap (partial bitmap, other)
ok 67 - pack reuse respects --incremental
ok 24 - midx picks objects from preferred pack
ok 45 - fetch (partial bitmap)
ok 37 - counting partial commits via bitmap (partial bitmap, other)
ok 51 - check normal git operations: bare repo, commit 8 vs merge 1
ok 38 - counting commits with limit (partial bitmap, other)
ok 4 - check normal git operations: non-incremental MIDX conversion
# passed all 4 test(s)
1..4
ok 92 - git log option: --simplify-by-decoration for path: file5
ok 12 - non-omitted delta in MIDX preferred pack
*** t5400-send-pack.sh ***
ok 12 - cruft packs tolerate missing blobs (expire 2.weeks.ago)
ok 39 - counting non-linear history (partial bitmap, other)
ok 23 - verify after commit-graph-chain corruption (tip)
ok 20 - use packed objects
ok 40 - counting commits with limiting (partial bitmap, other)
ok 25 - preferred packs must be non-empty
ok 52 - check normal git operations: bare repo, commit 8 vs merge 2
ok 68 - truncated bitmap fails gracefully (ewah)
ok 41 - counting objects via bitmap (partial bitmap, other)
ok 46 - enumerating progress counts pack-reused objects
ok 24 - verify notices too-short chain file
ok 53 - write graph in bare repo
ok 93 - git log option: --follow for path: file5
ok 42 - enumerate commits (partial bitmap, other)
ok 13 - duplicate objects
ok 43 - enumerate --objects (partial bitmap, other)
ok 44 - bitmap --objects handles non-commit objects (partial bitmap, other)
ok 94 - git log option: --first-parent for path: file5
not ok 23 - apply_3way: replace submodule with a file must fail # TODO known breakage
ok 26 - preferred pack from existing MIDX without bitmaps
ok 54 - check normal git operations: bare repo with graph, commit 8 vs merge 1
ok 27 - verify multi-pack-index success
ok 69 - truncated bitmap fails gracefully (cache)
ok 28 - verify progress off for redirected stderr
ok 1 - setup
ok 29 - verify force progress on for stderr
ok 13 - cruft tags rescue tagged objects
ok 30 - verify with the --no-progress option
ok 15 - am_3way: added submodule creates empty directory
ok 31 - verify bad signature
ok 95 - git log option: --topo-order for path: file5
ok 25 - verify across alternates
ok 45 - fetch (partial bitmap)
ok 32 - verify bad version
ok 55 - check normal git operations: bare repo with graph, commit 8 vs merge 2
ok 33 - verify bad OID version
ok 3 - pack-objects with index version 2
ok 14 - duplicate objects with verbatim reuse
ok 56 - perform fast-forward merge in full repo
# passed all 14 test(s)
1..14
ok 96 - git log option: --date-order for path: file5
ok 4 - both packs should be identical
ok 34 - verify truncated chunk count
ok 5 - index v1 and index v2 should be different
*** t5401-update-hooks.sh ***
ok 26 - reader bounds-checks base-graph chunk
ok 21 - use packed deltified (REF_DELTA) objects
ok 35 - verify extended chunk count
ok 46 - enumerating progress counts pack-reused objects
ok 36 - verify missing required chunk
ok 97 - git log option: --author-date-order for path: file5
ok 37 - verify invalid chunk offset
ok 14 - cruft commits rescue parents, trees
ok 6 - index-pack with index version 1
ok 38 - verify packnames out of order
ok 98 - git log option: --ancestry-path side..main for path: file5
ok 39 - verify packnames out of order
ok 57 - check that gc computes commit-graph
ok 7 - index-pack with index version 2
ok 40 - verify oid fanout out of order
ok 2 - bitmap traversal without pseudo-merges
ok 8 - index-pack results should match pack-objects ones
ok 41 - verify oid lookup out of order
not ok 24 - apply_3way: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 99 - git log option:  for path: file5_renamed
ok 42 - verify incorrect pack-int-id
ok 27 - add octopus merge
ok 70 - set up thin delta-reuse parent
ok 43 - verify incorrect offset
ok 9 - index-pack --verify on index version 1
ok 58 - replace-objects invalidates commit-graph
ok 22 - use packed deltified (OFS_DELTA) objects
ok 100 - git log option: --all for path: file5_renamed
ok 15 - cruft trees rescue sub-trees, blobs
ok 16 - am_3way: added submodule leaves existing empty directory alone
ok 28 - check normal git operations: graph exists
ok 1 - setup
ok 10 - index-pack --verify on index version 2
ok 11 - pack-objects --index-version=2, is not accepted
ok 101 - git log option: --full-history for path: file5_renamed
ok 2 - push
ok 59 - commit grafts invalidate commit-graph
ok 3 - updated as expected
ok 4 - hooks ran
ok 5 - pre-receive hook input
ok 6 - update hook arguments
ok 7 - post-receive hook input
ok 8 - post-update hook arguments
ok 9 - all hook stdin is /dev/null
ok 10 - all *-receive hook args are empty
ok 11 - send-pack produced no output
ok 71 - fetch without bitmaps ignores delta against old base
ok 12 - send-pack stderr contains hook messages
ok 29 - split across alternate where alternate is not split
ok 102 - git log option: --full-history --simplify-merges for path: file5_renamed
ok 16 - expired objects are pruned
ok 44 - git-fsck incorrect offset
ok 30 - --split=no-merge always writes an incremental
ok 23 - survive missing objects/pack directory
ok 103 - git log option: --simplify-merges for path: file5_renamed
ok 1 - create large objects (1.5 MB) and PACK
ok 2 - set memory limitation to 1MB
ok 45 - git fsck shows MIDX output with --progress
ok 60 - replace-objects invalidates commit-graph
ok 31 - --split=replace replaces the chain
ok 3 - unpack-objects failed under memory limitation
ok 104 - git log option: --simplify-by-decoration for path: file5_renamed
ok 72 - fetch with bitmaps can reuse old base
ok 46 - git fsck suppresses MIDX output with --no-progress
ok 25 - apply_3way: modified submodule does not update submodule work tree
ok 17 - repack --cruft generates a cruft pack
ok 4 - unpack-objects works with memory limitation in dry-run mode
ok 47 - corrupt MIDX is not reused
ok 61 - warn on improper hash version
ok 105 - git log option: --follow for path: file5_renamed
ok 48 - verify incorrect checksum
ok 49 - repack progress off for redirected stderr
ok 50 - repack force progress on for stderr
ok 17 - am_3way: replace tracked file with submodule creates empty directory
ok 12 - index v2: force some 64-bit offsets with pack-objects
ok 106 - git log option: --first-parent for path: file5_renamed
ok 51 - repack with the --no-progress option
ok 24 - verify pack
ok 107 - git log option: --topo-order for path: file5_renamed
ok 52 - repack removes multi-pack-index when deleting packs
ok 3 - pseudo-merges accurately represent their objects
ok 18 - loose objects mtimes upsert others
ok 13 - index v2: verify a pack with some 64-bit offsets
ok 14 - 64-bit offsets: should be different from previous index v2 results
ok 108 - git log option: --date-order for path: file5_renamed
ok 73 - pack.preferBitmapTips
ok 15 - index v2: force some 64-bit offsets with index-pack
ok 16 - 64-bit offsets: index-pack result should match pack-objects one
ok 62 - lower layers have overflow chunk
ok 5 - unpack big object in stream
ok 109 - git log option: --author-date-order for path: file5_renamed
ok 4 - bitmap traversal with pseudo-merges
ok 63 - git commit-graph verify
ok 110 - git log option: --ancestry-path side..main for path: file5_renamed
ok 53 - repack preserves multi-pack-index when creating packs
ok 25 - verify pack -v
ok 64 - detect permission problem
ok 17 - index-pack --verify on 64-bit offset v2 (cheat)
ok 111 - git log option:  for path: file_to_be_deleted
ok 65 - detect too small
ok 13 - pre-receive hook that forgets to read its input
# passed all 13 test(s)
1..13
ok 26 - apply_3way: modified submodule does not update submodule work tree to invalid commit
ok 19 - expiring cruft objects with git gc
ok 54 - check normal git operations: after repack
ok 66 - detect bad signature
ok 18 - am_3way: replace directory with submodule
ok 112 - git log option: --all for path: file_to_be_deleted
ok 18 - index-pack --verify on 64-bit offset v2
ok 55 - multi-pack-index and pack-bitmap
ok 26 - verify-pack catches mismatched .idx and .pack files
ok 74 - pack.preferBitmapTips
ok 5 - stale bitmap traversal with pseudo-merges
ok 27 - verify-pack catches a corrupted pack signature
ok 56 - multi-pack-index and alternates
ok 67 - detect bad version
ok 113 - git log option: --full-history for path: file_to_be_deleted
*** t5402-post-merge-hook.sh ***
ok 28 - verify-pack catches a corrupted pack version
ok 6 - unpack big object in stream (core.fsyncmethod=batch)
ok 29 - verify-pack catches a corrupted type/size of the 1st packed object data
ok 68 - detect bad hash version
ok 19 - [index v1] 1) stream pack to repository
ok 114 - git log option: --full-history --simplify-merges for path: file_to_be_deleted
ok 75 - complains about multiple pack bitmaps
ok 69 - detect low chunk count
ok 20 - cruft packs are not included in geometric repack
ok 57 - check normal git operations: with alternate (local midx)
ok 76 - setup test repository
ok 30 - verify-pack catches a corrupted sum of the index file itself
ok 115 - git log option: --simplify-merges for path: file_to_be_deleted
ok 70 - detect missing OID fanout chunk
ok 20 - [index v1] 2) create a stealth corruption in a delta base reference
ok 21 - [index v1] 3) corrupted delta happily returned wrong data
ok 58 - multi-pack-index in an alternate
ok 47 - create new additional packs
ok 71 - detect missing OID lookup chunk
ok 116 - git log option: --simplify-by-decoration for path: file_to_be_deleted
ok 22 - [index v1] 4) confirm that the pack is actually corrupted
ok 72 - detect missing commit data chunk
ok 23 - [index v1] 5) pack-objects happily reuses corrupted data
ok 48 - create multi-pack midx with bitmaps
ok 49 - reverse index exists (midx)
ok 27 - apply_3way: modified submodule does not update submodule work tree from invalid commit
ok 19 - am_3way: removed submodule leaves submodule directory and its contents in place
ok 24 - [index v1] 6) newly created pack is BAD !
ok 50 - rev-list --test-bitmap verifies bitmaps
ok 1 - setup
ok 117 - git log option: --follow for path: file_to_be_deleted
ok 73 - detect incorrect fanout
ok 59 - check normal git operations: with alternate (remote midx)
ok 51 - counting commits via bitmap (full bitmap, second)
ok 2 - setup clone hooks
ok 3 - post-merge does not run for up-to-date 
ok 52 - counting partial commits via bitmap (full bitmap, second)
ok 4 - post-merge runs as expected 
ok 5 - post-merge from normal merge receives the right argument 
ok 53 - counting commits with limit (full bitmap, second)
ok 6 - post-merge from squash merge runs as expected 
ok 21 - repack --geometric collects once-cruft objects
ok 7 - post-merge from squash merge receives the right argument 
ok 25 - [index v2] 1) stream pack to repository
# passed all 7 test(s)
1..7
ok 118 - git log option: --first-parent for path: file_to_be_deleted
ok 74 - detect incorrect fanout final value
*** t5403-post-checkout-hook.sh ***
ok 54 - counting non-linear history (full bitmap, second)
ok 55 - counting commits with limiting (full bitmap, second)
ok 75 - detect incorrect OID order
ok 7 - do not unpack existing large objects
ok 119 - git log option: --topo-order for path: file_to_be_deleted
# passed all 7 test(s)
1..7
ok 26 - [index v2] 2) create a stealth corruption in a delta base reference
ok 27 - [index v2] 3) corrupted delta happily returned wrong data
*** t5404-tracking-branches.sh ***
ok 28 - apply_3way: added submodule doesn't remove untracked unignored file with same name
ok 56 - counting objects via bitmap (full bitmap, second)
# still have 4 known breakage(s)
# passed all remaining 24 test(s)
1..28
ok 28 - [index v2] 4) confirm that the pack is actually corrupted
*** t5405-send-pack-rewind.sh ***
ok 76 - detect OID not in object database
ok 22 - cruft repack with no reachable objects
ok 57 - enumerate commits (full bitmap, second)
ok 47 - create new additional packs
ok 120 - git log option: --date-order for path: file_to_be_deleted
ok 77 - detect incorrect tree OID
ok 48 - create multi-pack midx with bitmaps
ok 58 - enumerate --objects (full bitmap, second)
ok 59 - bitmap --objects handles non-commit objects (full bitmap, second)
ok 49 - reverse index exists (rev)
ok 60 - counting commits via bitmap (full bitmap, other)
ok 121 - git log option: --author-date-order for path: file_to_be_deleted
ok 78 - detect incorrect parent int-id
ok 61 - counting partial commits via bitmap (full bitmap, other)
ok 50 - rev-list --test-bitmap verifies bitmaps
ok 62 - counting commits with limit (full bitmap, other)
ok 51 - counting commits via bitmap (full bitmap, second)
ok 122 - git log option: --ancestry-path side..main for path: file_to_be_deleted
ok 52 - counting partial commits via bitmap (full bitmap, second)
ok 63 - counting non-linear history (full bitmap, other)
ok 79 - detect extra parent int-id
ok 29 - [index v2] 5) pack-objects refuses to reuse corrupted data
ok 53 - counting commits with limit (full bitmap, second)
ok 6 - bitmapPseudoMerge.sampleRate adjusts commit selection rate
ok 20 - am_3way: removed submodule leaves submodule containing a .git directory alone
ok 64 - counting commits with limiting (full bitmap, other)
ok 54 - counting non-linear history (full bitmap, second)
ok 123 - git log -- folder works with and without the trailing slash
ok 65 - counting objects via bitmap (full bitmap, other)
ok 80 - detect wrong parent
ok 55 - counting commits with limiting (full bitmap, second)
ok 124 - git log for path that does not exist. 
ok 1 - setup
ok 66 - enumerate commits (full bitmap, other)
ok 2 - post-checkout receives the right arguments with HEAD unchanged 
ok 56 - counting objects via bitmap (full bitmap, second)
ok 1 - setup
ok 3 - post-checkout args are correct with git checkout -b 
ok 125 - git log with --walk-reflogs does not use Bloom filters
ok 81 - detect incorrect generation number
ok 4 - post-checkout receives the right args with HEAD changed 
ok 60 - force some 64-bit offsets with pack-objects
ok 67 - enumerate --objects (full bitmap, other)
ok 1 - setup
ok 61 - verify multi-pack-index with 64-bit offsets
ok 57 - enumerate commits (full bitmap, second)
ok 5 - post-checkout receives the right args when not switching branches 
ok 2 - non forced push should die not segfault
ok 68 - bitmap --objects handles non-commit objects (full bitmap, other)
ok 126 - git log -- multiple path specs does not use Bloom filters
ok 62 - verify incorrect 64-bit offset
ok 127 - git log -- "." pathspec at root does not use Bloom filters
ok 58 - enumerate --objects (full bitmap, second)
ok 2 - prepare pushable branches
ok 82 - detect incorrect commit date
ok 3 - forced push should succeed
ok 31 - build pack index for an existing pack
# passed all 3 test(s)
1..3
ok 59 - bitmap --objects handles non-commit objects (full bitmap, second)
ok 6 - post-checkout is triggered on rebase --apply
*** t5406-remote-rejects.sh ***
ok 60 - counting commits via bitmap (full bitmap, other)
ok 61 - counting partial commits via bitmap (full bitmap, other)
ok 128 - git log with wildcard that resolves to a single path uses Bloom filters
ok 83 - detect incorrect parent for octopus merge
ok 62 - counting commits with limit (full bitmap, other)
ok 3 - mixed-success push returns error
ok 4 - check tracking branches updated correctly after push
ok 69 - clone from bitmapped repository
ok 7 - post-checkout is triggered on rebase --apply with fast-forward
ok 5 - check tracking branches not updated for failed refs
ok 63 - counting non-linear history (full bitmap, other)
ok 6 - deleted branches have their tracking branches removed
ok 84 - detect invalid checksum hash
ok 129 - git log with wildcard that resolves to a multiple paths does not uses Bloom filters
ok 64 - counting commits with limiting (full bitmap, other)
not ok 21 - am_3way: replace submodule with a directory must fail # TODO known breakage
ok 8 - rebase --apply fast-forward branch checkout runs post-checkout hook
ok 7 - already deleted tracking branches ignored
ok 65 - counting objects via bitmap (full bitmap, other)
# passed all 7 test(s)
1..7
ok 85 - detect incorrect chunk count
*** t5407-post-rewrite-hook.sh ***
ok 66 - enumerate commits (full bitmap, other)
ok 9 - rebase --apply checkout does not remove untracked files
ok 77 - setup repo with moderate-sized history
ok 78 - setup writing bitmaps during repack
ok 130 - setup - add commit-graph to the chain without Bloom filters
ok 67 - enumerate --objects (full bitmap, other)
ok 86 - detect mixed generation numbers (non-zero to zero)
ok 68 - bitmap --objects handles non-commit objects (full bitmap, other)
ok 10 - post-checkout is triggered on rebase --merge
ok 131 - use Bloom filters even if the latest graph does not have Bloom filters
ok 70 - partial clone from bitmapped repository
ok 7 - bitmapPseudoMerge.threshold excludes newer commits
ok 23 - cruft repack with --max-pack-size
ok 87 - detect mixed generation numbers (zero to non-zero)
ok 1 - setup
ok 79 - full repack creates bitmaps
ok 71 - setup further non-bitmapped commits
ok 80 - rev-list --test-bitmap verifies bitmaps
ok 11 - post-checkout is triggered on rebase --merge with fast-forward
ok 72 - counting commits via bitmap (partial bitmap, second)
ok 132 - setup - add commit-graph to the chain with Bloom filters
ok 81 - counting commits via bitmap (full bitmap, second)
ok 2 - push reports error
ok 73 - counting partial commits via bitmap (partial bitmap, second)
ok 82 - counting partial commits via bitmap (full bitmap, second)
ok 3 - individual ref reports error
# passed all 3 test(s)
1..3
ok 83 - counting commits with limit (full bitmap, second)
ok 74 - counting commits with limit (partial bitmap, second)
*** t5408-send-pack-stdin.sh ***
ok 69 - clone from bitmapped repository
ok 133 - Use Bloom filters if they exist in the latest but not all commit graphs in the chain.
ok 12 - rebase --merge fast-forward branch checkout runs post-checkout hook
ok 75 - counting non-linear history (partial bitmap, second)
ok 84 - counting non-linear history (full bitmap, second)
ok 13 - rebase --merge checkout does not remove untracked files
ok 88 - git fsck (checks commit-graph when config set to true)
ok 85 - counting commits with limiting (full bitmap, second)
ok 76 - counting commits with limiting (partial bitmap, second)
ok 134 - persist filter settings
ok 14 - post-checkout hook is triggered by clone
ok 86 - counting objects via bitmap (full bitmap, second)
ok 77 - counting objects via bitmap (partial bitmap, second)
# passed all 14 test(s)
1..14
*** t5409-colorize-remote-messages.sh ***
ok 24 - cruft repack with pack.packSizeLimit
ok 87 - enumerate commits (full bitmap, second)
not ok 22 - am_3way: replace submodule containing a .git directory with a directory must fail # TODO known breakage
ok 78 - enumerate commits (partial bitmap, second)
ok 88 - enumerate --objects (full bitmap, second)
ok 89 - git fsck (ignores commit-graph when config set to false)
ok 89 - bitmap --objects handles non-commit objects (full bitmap, second)
ok 79 - enumerate --objects (partial bitmap, second)
ok 80 - bitmap --objects handles non-commit objects (partial bitmap, second)
ok 90 - counting commits via bitmap (full bitmap, other)
ok 25 - cruft repack respects repack.cruftWindow
ok 70 - partial clone from bitmapped repository
ok 91 - counting partial commits via bitmap (full bitmap, other)
ok 81 - counting commits via bitmap (partial bitmap, other)
ok 92 - counting commits with limit (full bitmap, other)
ok 82 - counting partial commits via bitmap (partial bitmap, other)
ok 71 - setup further non-bitmapped commits
ok 93 - counting non-linear history (full bitmap, other)
ok 83 - counting commits with limit (partial bitmap, other)
ok 72 - counting commits via bitmap (partial bitmap, second)
ok 94 - counting commits with limiting (full bitmap, other)
ok 26 - cruft repack respects --window by default
ok 73 - counting partial commits via bitmap (partial bitmap, second)
ok 84 - counting non-linear history (partial bitmap, other)
ok 95 - counting objects via bitmap (full bitmap, other)
ok 1 - setup refs
ok 90 - git fsck (checks commit-graph when config unset)
ok 74 - counting commits with limit (partial bitmap, second)
ok 96 - enumerate commits (full bitmap, other)
ok 85 - counting commits with limiting (partial bitmap, other)
ok 1 - setup
ok 75 - counting non-linear history (partial bitmap, second)
ok 27 - cruft repack respects --quiet
ok 91 - git fsck shows commit-graph output with --progress
ok 32 - unpacking with --strict
ok 97 - enumerate --objects (full bitmap, other)
ok 86 - counting objects via bitmap (partial bitmap, other)
ok 92 - git fsck suppresses commit-graph output with --no-progress
ok 98 - bitmap --objects handles non-commit objects (full bitmap, other)
ok 2 - git commit --amend
ok 76 - counting commits with limiting (partial bitmap, second)
ok 63 - setup expire tests
ok 87 - enumerate commits (partial bitmap, other)
ok 1 - setup
ok 3 - git commit --amend --no-post-rewrite
ok 64 - expire does not remove any packs
ok 77 - counting objects via bitmap (partial bitmap, second)
ok 65 - expire progress off for redirected stderr
ok 2 - refs on cmdline
ok 66 - expire force progress on for stderr
not ok 23 - am_3way: replace submodule with a file must fail # TODO known breakage
ok 67 - expire with the --no-progress option
ok 88 - enumerate --objects (partial bitmap, other)
ok 78 - enumerate commits (partial bitmap, second)
ok 89 - bitmap --objects handles non-commit objects (partial bitmap, other)
ok 93 - setup non-the_repository tests
ok 2 - keywords
ok 99 - clone from bitmapped repository
ok 8 - bitmapPseudoMerge.stableThreshold creates stable groups
ok 79 - enumerate --objects (partial bitmap, second)
ok 80 - bitmap --objects handles non-commit objects (partial bitmap, second)
ok 4 - git rebase --apply
ok 94 - parse_commit_in_graph works for non-the_repository
ok 3 - whole words at line start
ok 68 - expire removes unreferenced packs
ok 81 - counting commits via bitmap (partial bitmap, other)
ok 90 - fetch (partial bitmap)
ok 28 - cruft --local drops unreachable objects
ok 82 - counting partial commits via bitmap (partial bitmap, other)
ok 95 - get_commit_tree_in_graph works for non-the_repository
ok 83 - counting commits with limit (partial bitmap, other)
ok 3 - refs over stdin
ok 69 - repack with minimum size does not alter existing packs
ok 9 - out of order thresholds are rejected
ok 4 - short line
ok 84 - counting non-linear history (partial bitmap, other)
ok 96 - corrupt commit-graph write (broken parent)
ok 85 - counting commits with limiting (partial bitmap, other)
ok 5 - case-insensitive
ok 100 - partial clone from bitmapped repository
ok 4 - stdin lines are full refspecs
ok 70 - repack respects repack.packKeptObjects=false
ok 135 - correctly report changes over limit
ok 97 - corrupt commit-graph write (missing tree)
ok 86 - counting objects via bitmap (partial bitmap, other)
ok 5 - git rebase --apply --skip
ok 91 - enumerating progress counts pack-reused objects
ok 6 - leading space
ok 101 - setup further non-bitmapped commits
ok 87 - enumerate commits (partial bitmap, other)
ok 71 - repack creates a new pack
ok 136 - correctly report commits with no changed paths
ok 102 - counting commits via bitmap (partial bitmap, second)
ok 5 - stdin mixed with cmdline
ok 103 - counting partial commits via bitmap (partial bitmap, second)
ok 88 - enumerate --objects (partial bitmap, other)
ok 7 - spaces only
ok 89 - bitmap --objects handles non-commit objects (partial bitmap, other)
ok 29 - MIDX bitmaps tolerate reachable cruft objects
ok 104 - counting commits with limit (partial bitmap, second)
not ok 24 - am_3way: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 6 - cmdline refs written in order
ok 105 - counting non-linear history (partial bitmap, second)
ok 6 - git rebase --apply --skip the last one
ok 8 - no coloring for redirected output
ok 92 - --no-bitmap is respected when bitmaps exist
ok 106 - counting commits with limiting (partial bitmap, second)
ok 90 - fetch (partial bitmap)
ok 137 - Bloom generation is limited by --max-new-filters
ok 107 - counting objects via bitmap (partial bitmap, second)
ok 30 - cruft objects are freshend via loose
ok 72 - repack (all) ignores cruft pack
ok 9 - push with customized color
ok 138 - Bloom generation backfills previously-skipped filters
ok 7 - --stdin refs come after cmdline
ok 108 - enumerate commits (partial bitmap, second)
ok 8 - refspecs and --mirror do not mix (cmdline)
ok 7 - git rebase -m
ok 9 - refspecs and --mirror do not mix (stdin)
ok 10 - error in customized color
# passed all 9 test(s)
1..9
ok 109 - enumerate --objects (partial bitmap, second)
*** t5410-receive-pack-alternates.sh ***
ok 110 - bitmap --objects handles non-commit objects (partial bitmap, second)
ok 93 - setup midx with base from later pack
ok 111 - counting commits via bitmap (partial bitmap, other)
ok 91 - enumerating progress counts pack-reused objects
ok 94 - counting commits via bitmap (full bitmap with backwards delta, second)
ok 112 - counting partial commits via bitmap (partial bitmap, other)
ok 139 - --max-new-filters overrides configuration
ok 11 - fallback to color.ui
# passed all 11 test(s)
1..11
ok 95 - counting partial commits via bitmap (full bitmap with backwards delta, second)
ok 113 - counting commits with limit (partial bitmap, other)
*** t5411-proc-receive-hook.sh ***
ok 96 - counting commits with limit (full bitmap with backwards delta, second)
ok 8 - git rebase -m --skip
ok 114 - counting non-linear history (partial bitmap, other)
ok 97 - counting non-linear history (full bitmap with backwards delta, second)
ok 115 - counting commits with limiting (partial bitmap, other)
ok 73 - repack (--batch-size) ignores cruft pack
ok 33 - index-pack with --strict
ok 116 - counting objects via bitmap (partial bitmap, other)
ok 92 - --no-bitmap is respected when bitmaps exist
ok 98 - counting commits with limiting (full bitmap with backwards delta, second)
ok 74 - expire removes repacked packs
ok 99 - counting objects via bitmap (full bitmap with backwards delta, second)
ok 117 - enumerate commits (partial bitmap, other)
ok 34 - setup for --strict and --fsck-objects downgrading fsck msgs
ok 100 - enumerate commits (full bitmap with backwards delta, second)
ok 9 - git rebase with implicit use of merge backend
ok 118 - enumerate --objects (partial bitmap, other)
ok 35 - index-pack with --strict downgrading fsck msgs
ok 119 - bitmap --objects handles non-commit objects (partial bitmap, other)
ok 36 - index-pack with --fsck-objects downgrading fsck msgs
ok 37 - cleanup for --strict and --fsck-objects downgrading fsck msgs
ok 101 - enumerate --objects (full bitmap with backwards delta, second)
ok 75 - expire works when adding new packs
ok 140 - Bloom generation backfills empty commits
ok 102 - bitmap --objects handles non-commit objects (full bitmap with backwards delta, second)
ok 93 - setup midx with base from later pack
ok 98 - set up and verify repo with generation data overflow chunk
ok 31 - gc.recentObjectsHook
ok 103 - counting commits via bitmap (full bitmap with backwards delta, other)
ok 94 - counting commits via bitmap (full bitmap with backwards delta, second)
ok 76 - expire respects .keep files
ok 104 - counting partial commits via bitmap (full bitmap with backwards delta, other)
ok 120 - fetch (partial bitmap)
ok 95 - counting partial commits via bitmap (full bitmap with backwards delta, second)
ok 10 - git rebase --skip with implicit use of merge backend
ok 1 - setup
ok 105 - counting commits with limit (full bitmap with backwards delta, other)
ok 25 - am_3way: modified submodule does not update submodule work tree
ok 96 - counting commits with limit (full bitmap with backwards delta, second)
ok 106 - counting non-linear history (full bitmap with backwards delta, other)
ok 141 - setup for mixed Bloom setting tests
ok 97 - counting non-linear history (full bitmap with backwards delta, second)
ok 2 - with core.alternateRefsCommand
ok 99 - check normal git operations: generation data overflow chunk repo
ok 107 - counting commits with limiting (full bitmap with backwards delta, other)
ok 98 - counting commits with limiting (full bitmap with backwards delta, second)
ok 108 - counting objects via bitmap (full bitmap with backwards delta, other)
ok 3 - with core.alternateRefsPrefixes
# passed all 3 test(s)
1..3
ok 142 - ensure Bloom filters with incompatible settings are ignored
ok 99 - counting objects via bitmap (full bitmap with backwards delta, second)
*** t5500-fetch-pack.sh ***
ok 121 - enumerating progress counts pack-reused objects
ok 77 - expiring unreferenced cruft pack retains pack
ok 109 - enumerate commits (full bitmap with backwards delta, other)
ok 100 - overflow during generation version upgrade
ok 1 - setup upstream and workbench
ok 143 - merge graph layers with incompatible Bloom settings
ok 2 - setup receive.procReceiveRefs
ok 100 - enumerate commits (full bitmap with backwards delta, second)
ok 3 - setup proc-receive hook
ok 1 - setup
ok 110 - enumerate --objects (full bitmap with backwards delta, other)
ok 111 - bitmap --objects handles non-commit objects (full bitmap with backwards delta, other)
ok 101 - enumerate --objects (full bitmap with backwards delta, second)
ok 78 - repack --batch-size=0 repacks everything
ok 101 - reader notices too-small oid fanout chunk
ok 102 - bitmap --objects handles non-commit objects (full bitmap with backwards delta, second)
ok 103 - counting commits via bitmap (full bitmap with backwards delta, other)
ok 144 - ensure Bloom filter with incompatible versions are ignored
ok 11 - git rebase with failed pick
ok 104 - counting partial commits via bitmap (full bitmap with backwards delta, other)
ok 79 - repack --batch-size=<large> repacks everything
ok 122 - pack-objects respects --local (non-local loose)
ok 102 - reader notices fanout/lookup table mismatch
ok 32 - multi-valued gc.recentObjectsHook
ok 105 - counting commits with limit (full bitmap with backwards delta, other)
ok 30 - [index v2] 6) verify-pack detects CRC mismatch
ok 145 - set up repo with high bit path, version 1 changed-path
ok 106 - counting non-linear history (full bitmap with backwards delta, other)
ok 4 - proc-receive: report status v1
ok 146 - setup check value of version 1 changed-path
ok 112 - clone with bitmaps enabled
ok 147 - check value of version 1 changed-path
ok 103 - reader notices out-of-bounds fanout
ok 31 - running index-pack in the object store
ok 107 - counting commits with limiting (full bitmap with backwards delta, other)
ok 148 - setup make another commit
ok 104 - reader notices too-small commit data chunk
ok 149 - version 1 changed-path used when version 1 requested
ok 10 - pseudo-merge pattern with capture groups
ok 108 - counting objects via bitmap (full bitmap with backwards delta, other)
ok 33 - additional cruft blobs via gc.recentObjectsHook
ok 123 - pack-objects respects --honor-pack-keep (local non-bitmapped pack)
# passed all 33 test(s)
1..33
ok 12 - git rebase -i (unchanged)
*** t5501-fetch-push-alternates.sh ***
ok 32 - index-pack --strict warns upon missing tagger in tag
ok 109 - enumerate commits (full bitmap with backwards delta, other)
ok 33 - index-pack --fsck-objects also warns upon missing tagger in tag
ok 150 - version 1 changed-path not used when version 2 requested
ok 105 - reader notices out-of-bounds extra edge
ok 110 - enumerate --objects (full bitmap with backwards delta, other)
ok 111 - bitmap --objects handles non-commit objects (full bitmap with backwards delta, other)
ok 151 - version 1 changed-path used when autodetect requested
ok 2 - pack the source repository
ok 32 - handles file descriptor exhaustion
ok 106 - reader notices too-small generations chunk
ok 124 - pack-objects respects --local (non-local pack)
ok 80 - repack/expire loop
ok 113 - changing the preferred pack does not corrupt bitmaps
ok 13 - git rebase -i (skip)
ok 34 - index-pack -v --stdin produces progress for both phases
ok 152 - when writing another commit graph, preserve existing version 1 of changed-path
ok 33 - split commit-graph respects core.sharedrepository 0666
ok 5 - setup upstream and workbench
ok 35 - too-large packs report the breach
ok 26 - am_3way: modified submodule does not update submodule work tree to invalid commit
# passed all 35 test(s)
1..35
ok 125 - pack-objects respects --honor-pack-keep (local bitmapped pack)
ok 153 - set up repo with high bit path, version 2 changed-path
*** t5502-quickfetch.sh ***
ok 154 - check value of version 2 changed-path
ok 34 - split commit-graph respects core.sharedrepository 0600
ok 114 - setup pack reuse tests (pack -> MIDX)
ok 112 - clone with bitmaps enabled
ok 81 - load reverse index when missing .idx, .pack
ok 126 - pack-objects respects --local (non-local bitmapped pack)
ok 6 - git-push (builtin protocol)
ok 107 - stale commit cannot be parsed when given directly
ok 82 - usage shown without sub-command
ok 155 - setup make another commit
ok 38 - honor pack.packSizeLimit
ok 83 - complains when run outside of a repository
ok 3 - pack the destination repository
ok 35 - --split=replace with partial Bloom data
ok 156 - version 2 changed-path used when version 2 requested
ok 14 - git rebase -i (squash)
ok 7 - git-push --atomic (builtin protocol)
ok 115 - build bitmap from existing (pack -> MIDX)
ok 157 - version 2 changed-path not used when version 1 requested
ok 127 - pack-objects to file can use bitmap
ok 116 - verify resulting bitmaps (pack -> MIDX)
ok 158 - version 2 changed-path used when autodetect requested
ok 8 - non-fast-forward git-push (builtin protocol)
ok 113 - changing the preferred pack does not corrupt bitmaps
ok 15 - git rebase -i (fixup without conflict)
ok 108 - stale commit cannot be parsed when traversing graph
ok 36 - prevent regression for duplicate commits across layers
# passed all 108 test(s)
1..108
ok 128 - full repack, reusing previous bitmaps
ok 4 - refuse pushing rewound head without --force
ok 39 - verify resulting packs
ok 84 - repack with delta islands
ok 159 - when writing another commit graph, preserve existing version 2 of changed-path
ok 1 - setup
*** t5503-tagfollow.sh ***
ok 1 - setup
ok 5 - push can be used to delete a ref
ok 129 - fetch (full bitmap)
ok 117 - setup pack reuse tests (MIDX -> pack)
ok 85 - reader notices too-small oid fanout chunk
ok 9 - git-push -f (builtin protocol)
ok 130 - create objects for missing-HAVE tests
ok 114 - setup partial bitmaps
ok 6 - refuse deleting push with denyDeletes
ok 10 - cleanup (builtin protocol)
ok 2 - clone without alternate
ok 86 - reader notices too-small oid lookup chunk
ok 16 - git rebase -i (double edit)
ok 3 - further commits in the original
ok 115 - reverse index exists (rev)
ok 118 - build bitmap from existing (MIDX -> pack)
ok 7 - cannot override denyDeletes with git -c send-pack
ok 131 - pack-objects respects --incremental
ok 11 - pseudo-merge overlap setup
ok 116 - rev-list --test-bitmap verifies bitmaps
ok 160 - when writing commit graph, do not reuse changed-path of another version
ok 132 - pack with missing blob
ok 119 - verify resulting bitmaps (MIDX -> pack)
ok 12 - pseudo-merge overlap generates overlapping groups
ok 117 - counting commits via bitmap (full bitmap, second)
ok 133 - pack with missing tree
ok 4 - copy commit and tree but not blob by hand
ok 87 - reader notices too-small pack names chunk
ok 2 - 1st pull
ok 8 - override denyDeletes with git -c receive-pack
ok 118 - counting partial commits via bitmap (full bitmap, second)
ok 11 - git-push (builtin protocol/porcelain)
ok 134 - pack with missing parent
ok 135 # skip we can read jgit bitmaps (missing JGIT of JGIT,SHA1)
ok 136 # skip jgit can read our bitmaps (missing JGIT of JGIT,SHA1)
ok 27 - am_3way: modified submodule does not update submodule work tree from invalid commit
ok 119 - counting commits with limit (full bitmap, second)
ok 5 - quickfetch should not leave a corrupted repository
ok 13 - pseudo-merge overlap traversal
ok 12 - git-push --atomic (builtin protocol/porcelain)
ok 88 - reader handles unaligned chunks
ok 120 - counting non-linear history (full bitmap, second)
ok 161 - when writing commit graph, reuse changed-path of another version where possible
ok 9 - denyNonFastforwards trumps --force
ok 120 - setup pack reuse tests (MIDX -> MIDX)
ok 121 - counting commits with limiting (full bitmap, second)
ok 17 - git rebase -i (exec)
# passed all 17 test(s)
1..17
ok 89 - reader notices too-small object offset chunk
ok 1 - setup
ok 2 - setup expect
ok 162 - Bloom reader notices too-small data chunk
ok 122 - counting objects via bitmap (full bitmap, second)
*** t5504-fetch-receive-strict.sh ***
ok 6 - quickfetch should not copy from alternate
ok 13 - non-fast-forward git-push (builtin protocol/porcelain)
ok 121 - build bitmap from existing (MIDX -> MIDX)
ok 14 - pseudo-merge overlap stale traversal
ok 123 - enumerate commits (full bitmap, second)
ok 90 - reader bounds-checks large offset table
ok 10 - send-pack --all sends all branches
ok 163 - Bloom reader notices out-of-bounds filter offsets
ok 122 - verify resulting bitmaps (MIDX -> MIDX)
ok 3 - fetch A (new commit : 1 connection)
ok 124 - enumerate --objects (full bitmap, second)
ok 28 - am_3way: added submodule doesn't remove untracked unignored file with same name
ok 125 - bitmap --objects handles non-commit objects (full bitmap, second)
ok 11 - push --all excludes remote-tracking hierarchy
ok 14 - git-push -f (builtin protocol/porcelain)
ok 126 - counting commits via bitmap (full bitmap, other)
ok 4 - create tag T on A, create C on branch cat
ok 5 - setup expect
ok 91 - reader notices too-small revindex chunk
ok 15 - cleanup (builtin protocol/porcelain)
ok 127 - counting partial commits via bitmap (full bitmap, other)
ok 164 - Bloom reader notices too-small index chunk
ok 16 - setup pre-receive hook (builtin protocol)
ok 128 - counting commits with limit (full bitmap, other)
ok 123 - missing object closure fails gracefully
ok 129 - counting non-linear history (full bitmap, other)
ok 92 - reader notices out-of-bounds fanout
ok 6 - fetch C, T (new branch, tag : 1 connection)
ok 165 - Bloom reader notices out-of-order index offsets
# passed all 165 test(s)
1..165
ok 17 - git-push is declined (builtin protocol)
ok 18 - cleanup (builtin protocol)
ok 130 - counting commits with limiting (full bitmap, other)
ok 19 - setup pre-receive hook (builtin protocol/porcelain)
ok 1 - setup and inject "corrupt or missing" object
ok 131 - counting objects via bitmap (full bitmap, other)
ok 7 - create commits O, B, tag S on B
ok 8 - setup expect
*** t5505-remote.sh ***
ok 132 - enumerate commits (full bitmap, other)
ok 124 - setup partial bitmaps
ok 20 - git-push is declined (builtin protocol/porcelain)
ok 21 - cleanup (builtin protocol/porcelain)
ok 2 - fetch without strict
ok 125 - reverse index exists (midx)
ok 22 - add two receive.procReceiveRefs settings
ok 133 - enumerate --objects (full bitmap, other)
ok 134 - bitmap --objects handles non-commit objects (full bitmap, other)
ok 126 - rev-list --test-bitmap verifies bitmaps
ok 127 - counting commits via bitmap (full bitmap, second)
ok 9 - fetch B, S (commit and tag : 1 connection)
ok 10 - setup expect
ok 128 - counting partial commits via bitmap (full bitmap, second)
ok 3 - fetch with !fetch.fsckobjects
ok 137 - splitting packs does not generate bogus bitmaps
ok 129 - counting commits with limit (full bitmap, second)
ok 12 - receive-pack runs auto-gc in remote repo
ok 23 - proc-receive: no hook, fail to push special ref (builtin protocol)
ok 24 - cleanup (builtin protocol)
ok 4 - fetch with fetch.fsckobjects
ok 138 - set up reusable pack
ok 130 - counting non-linear history (full bitmap, second)
ok 135 - clone from bitmapped repository
ok 139 - pack reuse respects --honor-pack-keep
ok 5 - fetch with transfer.fsckobjects
ok 131 - counting commits with limiting (full bitmap, second)
ok 140 - pack reuse respects --local
ok 11 - new clone fetch main and tags
ok 25 - proc-receive: no hook, all failed for atomic push (builtin protocol)
ok 141 - pack reuse respects --incremental
ok 29 - setup diff.submodule
ok 132 - counting objects via bitmap (full bitmap, second)
ok 93 - bitmapped packs are stored via the BTMP chunk
# passed all 93 test(s)
1..93
ok 6 - push without strict
ok 133 - enumerate commits (full bitmap, second)
ok 26 - proc-receive: no hook, fail to push special ref (builtin protocol/porcelain)
ok 40 - tolerate packsizelimit smaller than biggest object
*** t5506-remote-groups.sh ***
ok 27 - cleanup (builtin protocol/porcelain)
ok 134 - enumerate --objects (full bitmap, second)
ok 12 - fetch specific OID with tag following
ok 13 - pushing explicit refspecs respects forcing
# passed all 12 test(s)
1..12
ok 135 - bitmap --objects handles non-commit objects (full bitmap, second)
ok 136 - partial clone from bitmapped repository
ok 1 - setup
*** t5507-remote-environment.sh ***
ok 136 - counting commits via bitmap (full bitmap, other)
ok 15 - pseudo-merge reuse
ok 142 - truncated bitmap fails gracefully (ewah)
ok 7 - push with !receive.fsckobjects
ok 2 - add remote whose URL agrees with url.<...>.insteadOf
ok 137 - setup further non-bitmapped commits
ok 137 - counting partial commits via bitmap (full bitmap, other)
ok 138 - counting commits via bitmap (partial bitmap, second)
ok 138 - counting commits with limit (full bitmap, other)
ok 28 - proc-receive: no hook, all failed for atomic push (builtin protocol/porcelain)
ok 29 - setup proc-receive hook (unknown version, builtin protocol)
ok 139 - counting partial commits via bitmap (partial bitmap, second)
ok 139 - counting non-linear history (full bitmap, other)
ok 3 - remote information for the origin
ok 140 - counting commits with limit (partial bitmap, second)
ok 16 - empty pseudo-merge group
ok 8 - push with receive.fsckobjects
ok 41 - verify resulting packs
ok 140 - counting commits with limiting (full bitmap, other)
ok 42 - set up pack for non-repo tests
ok 141 - counting non-linear history (partial bitmap, second)
ok 143 - truncated bitmap fails gracefully (cache)
ok 43 - index-pack --stdin complains of non-repo
ok 9 - push with transfer.fsckobjects
ok 141 - counting objects via bitmap (full bitmap, other)
ok 30 - diff.submodule unset
ok 7 - quickfetch should handle ~1000 refs (on Windows)
# passed all 7 test(s)
1..7
ok 30 - proc-receive: bad protocol (unknown version, builtin protocol)
ok 4 - add another remote
ok 14 - pushing wildcard refspecs respects forcing
ok 31 - setup proc-receive hook (hook --die-read-version, builtin protocol)
ok 142 - counting commits with limiting (partial bitmap, second)
ok 142 - enumerate commits (full bitmap, other)
ok 10 - repair the "corrupt or missing" object
ok 11 - setup bogus commit
ok 12 - fsck with no skipList input
ok 143 - counting objects via bitmap (partial bitmap, second)
ok 44 - index-pack <pack> works in non-repo
ok 5 - setup bare clone for server
ok 13 - setup sorted and unsorted skipLists
ok 143 - enumerate --objects (full bitmap, other)
ok 1 - setup
ok 17 - pseudo-merge closure
# passed all 17 test(s)
1..17
ok 14 - fsck with sorted skipList
ok 144 - bitmap --objects handles non-commit objects (full bitmap, other)
ok 144 - enumerate commits (partial bitmap, second)
ok 15 - fsck with unsorted skipList
ok 32 - proc-receive: bad protocol (hook --die-read-version, builtin protocol)
ok 1 - set up "remote" push situation
ok 2 - set up fake ssh
ok 33 - setup proc-receive hook (hook --die-write-version, builtin protocol)
ok 145 - enumerate --objects (partial bitmap, second)
*** t5509-fetch-push-namespaces.sh ***
ok 16 - fsck with invalid or bogus skipList input
ok 146 - bitmap --objects handles non-commit objects (partial bitmap, second)
ok 3 - confirm default push fails
ok 15 - deny pushing to delete current branch
ok 6 - filters for promisor remotes are listed by git remote -v
ok 147 - counting commits via bitmap (partial bitmap, other)
ok 45 - index-pack --strict <pack> works in non-repo
ok 148 - counting partial commits via bitmap (partial bitmap, other)
ok 2 - no group updates all
ok 46 - show-index works OK outside a repository
ok 4 - config does not travel over same-machine push
ok 17 - fsck with other accepted skipList input (comments & empty lines)
ok 18 - fsck no garbage output from comments & empty lines errors
ok 149 - counting commits with limit (partial bitmap, other)
ok 7 - filters should not be listed for non promisor remotes (remote -v)
ok 19 - fsck with invalid abbreviated skipList input
*** t5510-fetch.sh ***
ok 34 - proc-receive: bad protocol (hook --die-write-version, builtin protocol)
ok 145 - clone from bitmapped repository
ok 35 - setup proc-receive hook (hook --die-read-commands, builtin protocol)
ok 150 - counting non-linear history (partial bitmap, other)
ok 20 - fsck with exhaustive accepted skipList input (various types of comments etc.)
ok 31 - diff.submodule unset with extra file
ok 5 - config does not travel over ssh push
ok 21 - receive-pack with missing receive.fsck.skipList path
# passed all 5 test(s)
1..5
ok 3 - nonexistent group produces error
*** t5511-refspec.sh ***
ok 151 - counting commits with limiting (partial bitmap, other)
ok 47 - show-index works OK outside a repository with hash algo passed in via --object-format
ok 152 - counting objects via bitmap (partial bitmap, other)
ok 8 - filters are listed by git remote -v only
ok 144 - set up thin delta-reuse parent
ok 153 - enumerate commits (partial bitmap, other)
ok 36 - proc-receive: bad protocol (hook --die-read-commands, builtin protocol)
ok 37 - setup proc-receive hook (hook --die-read-push-options, builtin protocol)
ok 48 - show-index works OK outside a repository with hash algo passed in via --object-format
ok 154 - enumerate --objects (partial bitmap, other)
ok 49 # skip index-pack --threads=N or pack.threads=N warns when no pthreads (missing !PTHREADS of !PTHREADS,!FAIL_PREREQS)
ok 50 # skip pack-objects --threads=N or pack.threads=N warns when no pthreads (missing !PTHREADS of !PTHREADS,!FAIL_PREREQS)
ok 16 - receive-pack de-dupes .have lines
ok 155 - bitmap --objects handles non-commit objects (partial bitmap, other)
# passed all 16 test(s)
1..16
ok 9 - check remote-tracking
ok 10 - remote forces tracking branches
ok 11 - remove remote
*** t5512-ls-remote.sh ***
ok 146 - partial clone from bitmapped repository
ok 4 - updating group updates all members (remote update)
ok 38 - proc-receive: bad protocol (hook --die-read-push-options, builtin protocol)
ok 39 - setup proc-receive hook (hook --die-write-report, builtin protocol)
ok 51 - pack-objects in too-many-packs mode
ok 1 - setup
ok 156 - fetch (partial bitmap)
ok 12 - remove remote
ok 147 - setup further non-bitmapped commits
ok 1 - setup
ok 52 - setup: fake a SHA1 hash collision
ok 148 - counting commits via bitmap (partial bitmap, second)
ok 1 - push  (invalid)
ok 32 - diff.submodule=log
ok 149 - counting partial commits via bitmap (partial bitmap, second)
ok 2 - push :
ok 40 - proc-receive: bad protocol (hook --die-write-report, builtin protocol)
ok 13 - remove remote protects local branches
ok 41 - setup proc-receive hook (no report, builtin protocol)
ok 150 - counting commits with limit (partial bitmap, second)
ok 53 - make sure index-pack detects the SHA1 collision
ok 14 - remove errors out early when deleting non-existent branch
ok 22 - push with receive.fsck.skipList
ok 3 - push :: (invalid)
ok 145 - fetch without bitmaps ignores delta against old base
ok 151 - counting non-linear history (partial bitmap, second)
ok 157 - enumerating progress counts pack-reused objects
ok 5 - updating group updates all members (fetch)
ok 4 - push +:
ok 158 - setup bitmap config
ok 5 - fetch 
ok 1 - set up fake upload-pack
ok 15 - remove remote with a branch without configured merge
ok 152 - counting commits with limiting (partial bitmap, second)
ok 2 - dies when no remote found
ok 16 - rename errors out early when deleting non-existent branch
ok 54 - make sure index-pack detects the SHA1 collision (large blobs)
ok 42 - proc-receive: bad protocol (no report, builtin protocol)
ok 43 - cleanup (builtin protocol)
ok 6 - fetch :
ok 17 - rename errors out early when new name is invalid
ok 44 - setup proc-receive hook (no ref, builtin protocol)
ok 2 - clone and setup child repos
ok 153 - counting objects via bitmap (partial bitmap, second)
ok 2 - pushing into a repository using a ref namespace
ok 18 - add existing foreign_vcs remote
ok 7 - fetch :: (invalid)
ok 154 - enumerate commits (partial bitmap, second)
ok 19 - add existing foreign_vcs remote
ok 6 - updating group does not update non-members (remote update)
ok 8 - push refs/heads/*:refs/remotes/frotz/*
ok 20 - add invalid foreign_vcs remote
ok 33 - diff.submodule=log with extra file
ok 3 - setup
# still have 6 known breakage(s)
# passed all remaining 27 test(s)
1..33
ok 21 - without subcommand
ok 155 - enumerate --objects (partial bitmap, second)
ok 4 - ls-remote --tags .git
ok 9 - push refs/heads/*:refs/remotes/frotz (invalid)
ok 45 - proc-receive: bad protocol (no ref, builtin protocol)
ok 22 - without subcommand accepts -v
ok 3 - pulling from a repository using a ref namespace
ok 46 - setup proc-receive hook (unknown status, builtin protocol)
ok 23 - without subcommand does not take arguments
ok 156 - bitmap --objects handles non-commit objects (partial bitmap, second)
ok 5 - ls-remote .git
ok 3 - fetch test
ok 6 - ls-remote --tags self
ok 146 - fetch with bitmaps can reuse old base
*** t5513-fetch-track.sh ***
ok 157 - counting commits via bitmap (partial bitmap, other)
ok 10 - push refs/heads:refs/remotes/frotz/* (invalid)
ok 7 - ls-remote self
ok 158 - counting partial commits via bitmap (partial bitmap, other)
ok 4 - mirroring a repository using a ref namespace
ok 159 - counting commits with limit (partial bitmap, other)
ok 8 - ls-remote --branches self
ok 5 - hide namespaced refs with transfer.hideRefs
ok 11 - push refs/heads/main:refs/remotes/frotz/xyzzy
ok 23 - fetch with fetch.fsck.skipList
ok 9 - ls-remote -h is deprecated w/o warning
ok 7 - updating group does not update non-members (fetch)
ok 4 - fetch test for-merge
ok 47 - proc-receive: bad protocol (unknown status, builtin protocol)
ok 24 - fsck.<unknownmsg-id> dies
ok 6 - check that transfer.hideRefs does not match unstripped refs
ok 48 - setup proc-receive hook (unknown version, builtin protocol/porcelain)
ok 10 - ls-remote --heads is deprecated and hidden w/o warning
ok 160 - counting non-linear history (partial bitmap, other)
ok 12 - fetch refs/heads/*:refs/remotes/frotz/*
ok 7 - hide full refs with transfer.hideRefs
ok 161 - counting commits with limiting (partial bitmap, other)
ok 13 - fetch refs/heads/*:refs/remotes/frotz (invalid)
ok 11 - ls-remote --sort="version:refname" --tags self
ok 5 - fetch test remote HEAD
ok 162 - counting objects via bitmap (partial bitmap, other)
ok 14 - fetch refs/heads:refs/remotes/frotz/* (invalid)
ok 12 - ls-remote --sort="-version:refname" --tags self
ok 8 - try to update a hidden ref
ok 163 - enumerate commits (partial bitmap, other)
ok 15 - fetch refs/heads/main:refs/remotes/frotz/xyzzy
ok 49 - proc-receive: bad protocol (unknown version, builtin protocol/porcelain)
ok 9 - try to update a ref that is not hidden
ok 13 - ls-remote --sort="-refname" --tags self
ok 8 - updating remote name updates that remote
ok 24 - show
ok 14 - dies when no remote specified, multiple remotes found, and no default specified
ok 50 - setup proc-receive hook (hook --die-read-version, builtin protocol/porcelain)
ok 55 - prefetch objects
ok 164 - enumerate --objects (partial bitmap, other)
ok 6 - fetch test remote HEAD in bare repository
ok 16 - fetch refs/heads/main::refs/remotes/frotz/xyzzy (invalid)
ok 165 - bitmap --objects handles non-commit objects (partial bitmap, other)
ok 15 - succeeds when no remote specified but only one found
ok 25 - show with negative refspecs
ok 17 - fetch refs/heads/maste :refs/remotes/frotz/xyzzy (invalid)
ok 16 - use "origin" when no remote specified and multiple found
ok 10 - git-receive-pack(1) with transfer.hideRefs does not match unstripped refs during advertisement
ok 1 - setup
ok 17 - suppress "From <url>" with -q
ok 18 - push main~1:refs/remotes/frotz/backup
not ok 26 - show stale with negative refspecs # TODO known breakage
ok 51 - proc-receive: bad protocol (hook --die-read-version, builtin protocol/porcelain)
ok 9 - updating group in parallel with a duplicate remote does not fail (fetch)
# passed all 9 test(s)
1..9
ok 56 - verify-pack with sha1 packfile
ok 52 - setup proc-receive hook (hook --die-write-version, builtin protocol/porcelain)
ok 2 - fetch
ok 166 - fetch (partial bitmap)
ok 19 - fetch main~1:refs/remotes/frotz/backup (invalid)
# passed all 2 test(s)
1..2
ok 27 - show -n
ok 11 - try to update a hidden full ref
ok 25 - push with receive.fsck.missingEmail=warn
*** t5514-fetch-multiple.sh ***
*** t5515-fetch-merge-logic.sh ***
ok 20 - push HEAD~4:refs/remotes/frotz/new
ok 147 - pack.preferBitmapTips
ok 18 - use branch.<name>.remote if possible
ok 7 - fetch test remote HEAD change
ok 21 - fetch HEAD~4:refs/remotes/frotz/new (invalid)
ok 19 - confuses pattern as remote when no remote specified
ok 12 - set up ambiguous HEAD
ok 20 - die with non-2 for wrong repository even with --exit-code
ok 57 - index-pack outside of a sha1 repository
ok 53 - proc-receive: bad protocol (hook --die-write-version, builtin protocol/porcelain)
ok 21 - Report success even when nothing matches
ok 22 - push HEAD
ok 54 - setup proc-receive hook (hook --die-read-commands, builtin protocol/porcelain)
ok 28 - prune
ok 8 - fetch test followRemoteHEAD never
ok 22 - Report no-match with --exit-code
ok 13 - clone chooses correct HEAD (v0)
ok 29 - set-head --delete
ok 23 - fetch HEAD
ok 167 - enumerating progress counts pack-reused objects
ok 23 - Report match with --exit-code
ok 14 - clone chooses correct HEAD (v2)
ok 30 - set-head --auto
ok 24 - set up some extra tags for ref hiding
ok 24 - push @
ok 9 - fetch test followRemoteHEAD warn no change
ok 55 - proc-receive: bad protocol (hook --die-read-commands, builtin protocol/porcelain)
ok 56 - setup proc-receive hook (hook --die-read-push-options, builtin protocol/porcelain)
ok 25 - Hide some refs with transfer.hiderefs
ok 25 - fetch @
ok 58 - verify-pack with sha256 packfile
ok 26 - push refs/heads/ nitfol (invalid)
ok 10 - fetch test followRemoteHEAD warn create
ok 26 - fetch with fetch.fsck.missingEmail=warn
ok 26 - Override hiding of transfer.hiderefs
ok 27 - fetch refs/heads/ nitfol (invalid)
ok 1 - setup
ok 28 - push HEAD: (invalid)
ok 57 - proc-receive: bad protocol (hook --die-read-push-options, builtin protocol/porcelain)
ok 168 - removing a MIDX clears stale bitmaps
ok 148 - pack.preferBitmapTips
ok 15 - denyCurrentBranch and unborn branch with ref namespace
ok 11 - fetch test followRemoteHEAD warn detached
ok 27 - Hide some refs with uploadpack.hiderefs
ok 59 - index-pack outside of a sha256 repository
# passed all 15 test(s)
1..15
ok 58 - setup proc-receive hook (hook --die-write-report, builtin protocol/porcelain)
ok 27 - receive.fsck.unterminatedHeader=warn triggers error
ok 29 - fetch HEAD:
ok 60 - valid and invalid --name-hash-versions
*** t5516-fetch-push.sh ***
ok 28 - Override hiding of uploadpack.hiderefs
ok 2 - pushing into a repository with the same alternate
ok 30 - push refs/heads/ nitfol: (invalid)
ok 61 - --name-hash-version=2 and --write-bitmap-index are incompatible
# passed all 61 test(s)
ok 28 - fetch.fsck.unterminatedHeader=warn triggers error
1..61
ok 12 - fetch test followRemoteHEAD warn quiet
ok 31 - fetch refs/heads/ nitfol: (invalid)
ok 29 - overrides work between mixed transfer/upload-pack hideRefs
ok 59 - proc-receive: bad protocol (hook --die-write-report, builtin protocol/porcelain)
ok 60 - setup proc-receive hook (no report, builtin protocol/porcelain)
ok 30 - protocol v2 supports hiderefs
ok 32 - push :refs/remotes/frotz/deleteme
*** t5517-push-mirror.sh ***
ok 3 - post 1st pull setup
ok 3 - fetching from a repository with the same alternate
# passed all 3 test(s)
ok 1 - setup
1..3
ok 149 - complains about multiple pack bitmaps
ok 29 - badFilemode is not a strict error
ok 33 - fetch :refs/remotes/frotz/HEAD-to-me
# passed all 29 test(s)
1..29
ok 13 - fetch test followRemoteHEAD warn-if-not-branch branch is same
*** t5518-fetch-exit-status.sh ***
ok 34 - push :refs/remotes/frotz/delete me (invalid)
ok 61 - proc-receive: bad protocol (no report, builtin protocol/porcelain)
ok 150 - incremental repack fails when bitmaps are requested
ok 62 - cleanup (builtin protocol/porcelain)
ok 35 - fetch :refs/remotes/frotz/HEAD to me (invalid)
*** t5519-push-alternates.sh ***
ok 63 - setup proc-receive hook (no ref, builtin protocol/porcelain)
ok 31 - ls-remote --symref
ok 14 - fetch test followRemoteHEAD warn-if-not-branch branch is different
ok 32 - ls-remote with filtered symref (refname)
ok 36 - fetch refs/heads/*/for-linus:refs/remotes/mine/*-blah
ok 31 - set-head --auto failure
ok 151 - incremental repack can disable bitmaps
ok 1 - setup
ok 159 - setup repo with moderate-sized history
ok 37 - push refs/heads/*/for-linus:refs/remotes/mine/*-blah
ok 32 - set-head --auto detects creation
ok 2 - git fetch --all
ok 2 - reject 'git push --no-ipv4'
ok 33 - ls-remote with filtered symref (--branches)
ok 64 - proc-receive: bad protocol (no ref, builtin protocol/porcelain)
ok 3 - reject 'git push --no-ipv6'
ok 65 - setup proc-receive hook (unknown status, builtin protocol/porcelain)
ok 4 - reject 'git fetch --no-ipv4'
ok 34 - indicate no refs in v0 standards-compliant empty remote
ok 5 - reject 'git fetch --no-ipv6'
ok 38 - fetch refs/heads*/for-linus:refs/remotes/mine/*
ok 15 - fetch test followRemoteHEAD always
ok 33 - set-head --auto to update a non symbolic ref
ok 169 - pack.preferBitmapTips
ok 34 - set-head --auto detects no change
ok 35 - ls-remote works outside repository
ok 39 - push refs/heads*/for-linus:refs/remotes/mine/*
ok 35 - set-head --auto detects change
ok 36 - ls-remote --sort fails gracefully outside repository
ok 160 - create single-pack midx with bitmaps
ok 66 - proc-receive: bad protocol (unknown status, builtin protocol/porcelain)
ok 40 - fetch refs/heads/*/*/for-linus:refs/remotes/mine/* (invalid)
ok 36 - set-head --auto detects strange ref
ok 16 - fetch --prune on its own works as expected
ok 6 - fetch without wildcard
ok 3 - git fetch --all --no-write-fetch-head
ok 67 - setup proc-receive hook (ng, no message, builtin protocol)
ok 161 - reverse index exists (rev)
ok 37 - ls-remote patterns work with all protocol versions
ok 41 - push refs/heads/*/*/for-linus:refs/remotes/mine/* (invalid)
ok 162 - rev-list --test-bitmap verifies bitmaps
ok 152 - boundary-based traversal is used when requested
ok 163 - counting commits via bitmap (full bitmap, second)
ok 42 - fetch refs/heads/*g*/for-linus:refs/remotes/mine/* (invalid)
ok 38 - ls-remote prefixes work with all protocol versions
ok 37 - set-head --auto has no problem w/multiple HEADs
ok 1 - push mirror creates new branches
ok 1 - setup
ok 1 - setup
ok 164 - counting partial commits via bitmap (full bitmap, second)
ok 17 - fetch --prune with a branch name keeps branches
ok 43 - push refs/heads/*g*/for-linus:refs/remotes/mine/* (invalid)
ok 153 - left-right not confused by bitmap index
ok 39 - v0 clients can handle multiple symrefs
ok 68 - proc-receive: fail to update (ng, no message, builtin protocol)
ok 165 - counting commits with limit (full bitmap, second)
ok 38 - set-head changes followRemoteHEAD always to warn
ok 2 - non-fast-forward fetch
ok 7 - fetch with wildcard
ok 69 - setup proc-receive hook (ng message, builtin protocol)
ok 4 - 2nd pull
ok 154 - left-right count not confused by bitmap-index
ok 40 - helper with refspec capability fails gracefully
ok 44 - fetch refs/heads/*/for-linus:refs/remotes/mine/*
# passed all 40 test(s)
1..40
ok 170 - writing a bitmap with --refs-snapshot
ok 166 - counting non-linear history (full bitmap, second)
ok 3 - forced update
ok 39 - set-head explicit
# passed all 3 test(s)
1..3
*** t5520-pull.sh ***
*** t5521-pull-options.sh ***
ok 18 - fetch --prune with a namespace keeps other namespaces
ok 40 - set-head --auto reports change
ok 45 - push refs/heads/*/for-linus:refs/remotes/mine/*
ok 167 - counting commits with limiting (full bitmap, second)
ok 155 - setup test repository
ok 168 - counting objects via bitmap (full bitmap, second)
ok 8 - fetch with insteadOf
ok 70 - proc-receive: fail to update (ng, with message, builtin protocol)
ok 46 - fetch refs/heads/Ä
ok 4 - git fetch --all should continue if a remote has errors
ok 1 - setup
ok 71 - setup proc-receive hook (ng, no message, builtin protocol/porcelain)
ok 169 - enumerate commits (full bitmap, second)
ok 5 - git fetch --all does not allow non-option arguments
ok 41 - prune --dry-run
ok 47 - fetch refs/heads/	tab (invalid)
# passed all 47 test(s)
ok 170 - enumerate --objects (full bitmap, second)
1..47
*** t5522-pull-symlink.sh ***
ok 171 - bitmap --objects handles non-commit objects (full bitmap, second)
ok 2 - alice works and pushes
ok 5 - 3rd pull
ok 2 - push mirror updates existing branches
ok 172 - counting commits via bitmap (full bitmap, other)
ok 2 - br-config-explicit
ok 19 - fetch --prune handles overlapping refspecs
ok 9 - fetch with pushInsteadOf (should not rewrite)
ok 173 - counting partial commits via bitmap (full bitmap, other)
ok 72 - proc-receive: fail to update (ng, no message, builtin protocol/porcelain)
ok 6 - git fetch --multiple (but only one remote)
ok 174 - counting commits with limit (full bitmap, other)
ok 73 - setup proc-receive hook (ng message, builtin protocol/porcelain)
ok 175 - counting non-linear history (full bitmap, other)
ok 176 - counting commits with limiting (full bitmap, other)
ok 1 - setup
ok 42 - add --mirror && prune
ok 20 - fetch --prune --tags prunes branches but not tags
ok 177 - counting objects via bitmap (full bitmap, other)
ok 74 - proc-receive: fail to update (ng, with message, builtin protocol/porcelain)
ok 1 - setup
ok 6 - single branch clone
ok 75 - setup proc-receive hook (unexpected ref, builtin protocol)
ok 178 - enumerate commits (full bitmap, other)
ok 7 - single branch object count
ok 37 - setup repo for mixed generation commit-graph-chain
ok 2 - pulling into void
ok 7 - git fetch --multiple (two remotes)
ok 3 - bob fetches from alice, works and pushes
ok 4 - clean-up in case the previous failed
ok 3 - br-config-explicit config-explicit
ok 8 - git fetch --multiple (bad remote names)
ok 43 - add --mirror setting HEAD
ok 179 - enumerate --objects (full bitmap, other)
ok 180 - bitmap --objects handles non-commit objects (full bitmap, other)
ok 21 - fetch --prune --tags with branch does not prune other things
ok 2 - git pull -q --no-rebase
ok 10 - push without negotiation
ok 3 - pulling into void using main:main
ok 8 - single given branch clone
ok 5 - alice works and pushes again
ok 44 - non-mirror fetch does not interfere with mirror
ok 76 - proc-receive: report unexpected ref (builtin protocol)
ok 3 - push mirror force updates existing branches
ok 77 - cleanup (builtin protocol)
ok 78 - setup proc-receive hook (unexpected ref, builtin protocol/porcelain)
ok 171 - write a bitmap with --refs-snapshot (preferred tips)
ok 4 - pulling into void does not overwrite untracked files
ok 22 - fetch --prune --tags with refspec prunes based on refspec
ok 1 - setup
ok 181 - clone from bitmapped repository
ok 9 - clone shallow depth 1
ok 3 - git pull -q --rebase
ok 9 - git fetch --all (skipFetchAll)
ok 6 - bob works and pushes
ok 45 - add --mirror=fetch
ok 4 - br-config-explicit-merge
ok 10 - clone shallow depth 1 with fsck
ok 5 - pulling into void does not overwrite staged files
ok 4 - git pull --no-rebase
ok 2 - pulling from real subdir
ok 46 - fetch mirrors act as mirrors during fetch
ok 79 - proc-receive: report unexpected ref (builtin protocol/porcelain)
ok 80 - cleanup (builtin protocol/porcelain)
ok 23 - fetch --tags gets tags even without a configured remote
ok 81 - setup proc-receive hook (unexpected ref, builtin protocol)
ok 47 - fetch mirrors can prune
ok 7 - alice works and pushes yet again
ok 11 - push with negotiation
ok 11 - clone shallow
ok 12 - clone shallow depth count
ok 5 - git pull --rebase
ok 6 - pulling into void does not remove new staged files
ok 10 - git fetch --multiple (ignoring skipFetchAll)
ok 13 - clone shallow object count
ok 14 - clone shallow object count (part 2)
ok 4 - push mirror removes branches
ok 48 - fetch mirrors do not act as mirrors during push
ok 15 - fsck in shallow repo
ok 3 - pulling from symlinked subdir
ok 182 - partial clone from bitmapped repository
ok 49 - add fetch mirror with specific branches
ok 172 - hash-cache values are propagated from pack bitmaps
ok 24 - fetch --prune fails to delete branches
ok 7 - pulling into void must not create an octopus
ok 16 - simple fetch in shallow repo
ok 17 - no changes expected
ok 82 - proc-receive: report unknown reference (builtin protocol)
ok 8 - bob works and pushes again
ok 6 - git pull -v --no-rebase
ok 50 - fetch mirror respects specific branches
# passed all 8 test(s)
ok 183 - setup further non-bitmapped commits
1..8
ok 5 - br-config-explicit-merge config-explicit
ok 173 - no .bitmap is written without any objects
ok 83 - setup proc-receive hook (unexpected ref, builtin protocol/porcelain)
*** t5523-push-upstream.sh ***
ok 184 - counting commits via bitmap (partial bitmap, second)
ok 4 - pushing from symlinked subdir
# passed all 4 test(s)
1..4
ok 11 - git fetch --all --no-tags
ok 18 - fetch same depth in shallow repo
ok 19 - no changes expected
ok 25 - fetch --atomic works with a single branch
ok 185 - counting partial commits via bitmap (partial bitmap, second)
*** t5524-pull-msg.sh ***
ok 186 - counting commits with limit (partial bitmap, second)
ok 7 - git pull -v --rebase
ok 51 - add --mirror=push
ok 8 - test . as a remote
ok 12 - push with negotiation proceeds anyway even if negotiation fails
ok 187 - counting non-linear history (partial bitmap, second)
ok 84 - proc-receive: report unknown reference (builtin protocol/porcelain)
ok 174 - graceful fallback when missing reverse index
ok 20 - add two more
ok 85 - setup proc-receive hook and disable push-options (builtin protocol)
ok 38 - do not write generation data chunk if not present on existing tip
ok 8 - git pull -v -q --no-rebase
ok 188 - counting commits with limiting (partial bitmap, second)
ok 26 - fetch --atomic works with multiple branches
ok 175 - setup test_repository
ok 52 - push mirrors act as mirrors during push
ok 86 - proc-receive: not support push options (builtin protocol)
ok 189 - counting objects via bitmap (partial bitmap, second)
ok 87 - enable push options (builtin protocol)
ok 88 - setup version=0 for proc-receive hook (builtin protocol)
ok 9 - the default remote . should not break explicit pull
ok 21 - pull in shallow repo
ok 9 - git pull -q -v --no-rebase
ok 6 - br-config-explicit-octopus
ok 190 - enumerate commits (partial bitmap, second)
ok 22 - clone shallow object count
ok 12 - git fetch --all --tags
ok 5 - push mirror adds, updates and removes branches together
ok 53 - push mirrors do not act as mirrors during fetch
ok 10 - git pull --cleanup errors early on invalid argument
ok 27 - fetch --atomic works with mixed branches and tags
ok 54 - push mirrors do not allow you to specify refs
ok 11 - git pull --no-write-fetch-head fails
ok 191 - enumerate --objects (partial bitmap, second)
ok 13 - push deletion with negotiation
ok 10 - fail if wildcard spec does not match any refs
ok 13 - parallel
ok 192 - bitmap --objects handles non-commit objects (partial bitmap, second)
ok 1 - setup bare parent
ok 23 - add two more (part 2)
ok 89 - proc-receive: ignore push-options for version 0 (builtin protocol)
ok 90 - restore proc-receive hook (builtin protocol)
ok 14 - git fetch --multiple --jobs=0 picks a default
ok 2 - setup local commit
ok 91 - cleanup (builtin protocol)
ok 193 - counting commits via bitmap (partial bitmap, other)
ok 194 - counting partial commits via bitmap (partial bitmap, other)
ok 195 - counting commits with limit (partial bitmap, other)
ok 28 - fetch --atomic prunes references
ok 6 - push mirror creates new tags
ok 156 - setup repo with moderate-sized history
ok 3 - push -u main:main
ok 157 - setup writing bitmaps during repack
ok 11 - fail if no branches specified with non-default remote
ok 196 - counting non-linear history (partial bitmap, other)
ok 7 - br-config-explicit-octopus config-explicit
ok 24 - deepening pull in shallow repo
ok 25 - clone shallow object count
ok 92 - proc-receive: push with options (builtin protocol)
ok 93 - cleanup (builtin protocol)
ok 55 - add alt && prune
ok 197 - counting commits with limiting (partial bitmap, other)
ok 12 - git pull --force
ok 4 - push -u main:other
ok 94 - setup proc-receive hook and disable push-options (builtin protocol/porcelain)
ok 158 - full repack creates bitmaps
ok 1 - setup
ok 198 - counting objects via bitmap (partial bitmap, other)
ok 159 - rev-list --test-bitmap verifies bitmaps
ok 26 - deepening fetch in shallow repo
ok 5 - push -u --dry-run main:otherX
ok 12 - fail if not on a branch
ok 160 - counting commits via bitmap (full bitmap, second)
ok 199 - enumerate commits (partial bitmap, other)
ok 27 - clone shallow object count
ok 29 - fetch --atomic aborts with non-fast-forward update
ok 95 - proc-receive: not support push options (builtin protocol/porcelain)
ok 96 - enable push options (builtin protocol/porcelain)
ok 15 - git fetch --all (works with fetch.all = true)
ok 161 - counting partial commits via bitmap (full bitmap, second)
ok 97 - setup version=0 for proc-receive hook (builtin protocol/porcelain)
ok 162 - counting commits with limit (full bitmap, second)
ok 200 - enumerate --objects (partial bitmap, other)
ok 13 - git pull --all
ok 6 - push -u topic_2:topic_2
ok 201 - bitmap --objects handles non-commit objects (partial bitmap, other)
ok 163 - counting non-linear history (full bitmap, second)
ok 2 - pull
ok 28 - pull in shallow repo with missing merge base
ok 8 - br-config-glob
ok 164 - counting commits with limiting (full bitmap, second)
ok 56 - add with reachable tags (default)
ok 13 - fail if no configuration for current branch
ok 7 - push -u topic_2:other2
ok 14 - git pull --dry-run
ok 165 - counting objects via bitmap (full bitmap, second)
ok 30 - fetch --atomic executes a single reference transaction only
ok 7 - push mirror updates existing tags
ok 98 - proc-receive: ignore push-options for version 0 (builtin protocol/porcelain)
ok 202 - fetch (partial bitmap)
ok 8 - push -u :topic_2
ok 166 - enumerate commits (full bitmap, second)
ok 99 - restore proc-receive hook (builtin protocol/porcelain)
ok 39 - do not write generation data chunk if the topmost remaining layer does not have generation data chunk
ok 14 - push with negotiation does not attempt to fetch submodules
ok 100 - cleanup (builtin protocol/porcelain)
ok 3 - --log=1 limits shortlog length
ok 16 - git fetch --all (works with fetch.all = false)
ok 15 - git pull --all --dry-run
# passed all 3 test(s)
1..3
ok 167 - enumerate --objects (full bitmap, second)
ok 57 - add --tags
*** t5525-fetch-tagopt.sh ***
ok 168 - bitmap --objects handles non-commit objects (full bitmap, second)
ok 14 - pull --all: fail if no configuration for current branch
ok 169 - counting commits via bitmap (full bitmap, other)
ok 9 - br-config-glob config-glob
ok 203 - enumerating progress counts pack-reused objects
ok 15 - push without wildcard
ok 170 - counting partial commits via bitmap (full bitmap, other)
ok 101 - proc-receive: push with options (builtin protocol/porcelain)
ok 29 - additional simple shallow deepenings
ok 171 - counting commits with limit (full bitmap, other)
ok 102 - cleanup (builtin protocol/porcelain)
ok 30 - clone shallow depth count
ok 103 - setup proc-receive hook (ok, builtin protocol)
ok 31 - fetch --atomic aborts all reference updates if hook aborts
ok 58 - add --no-tags
ok 172 - counting non-linear history (full bitmap, other)
ok 59 - reject --no-no-tags
ok 31 - clone shallow object count
ok 32 - fetch --no-shallow on full repo
ok 15 - fail if upstream branch does not exist
ok 33 - fetch --depth --no-shallow
ok 173 - counting commits with limiting (full bitmap, other)
ok 9 - push -u --all(the same behavior with--branches)
ok 16 - push with wildcard
ok 174 - counting objects via bitmap (full bitmap, other)
ok 175 - enumerate commits (full bitmap, other)
ok 17 - git fetch (fetch all remotes with fetch.all = true)
ok 104 - proc-receive: ok (builtin protocol)
ok 8 - push mirror force updates existing tags
ok 105 - setup proc-receive hook (ok, builtin protocol/porcelain)
ok 60 - update
ok 10 - push -u HEAD
ok 176 - enumerate --objects (full bitmap, other)
ok 10 - br-config-glob-merge
ok 177 - bitmap --objects handles non-commit objects (full bitmap, other)
ok 16 - fetch upstream branch even if refspec excludes it
ok 11 # skip progress messages go to tty (missing TTY)
ok 17 - push with insteadOf
ok 16 - git pull --allow-unrelated-histories
ok 32 - fetch --atomic --append appends to FETCH_HEAD
ok 18 - git fetch one (explicit remote overrides fetch.all)
ok 106 - proc-receive: ok (builtin protocol/porcelain)
ok 12 - progress messages do not go to non-tty
ok 107 - setup proc-receive hook (option without matching ok, builtin protocol)
ok 178 - clone from bitmapped repository
ok 34 - turn shallow to complete repository
ok 1 - setup
ok 108 - proc-receive: report option without matching ok (builtin protocol)
ok 13 - progress messages go to non-tty (forced)
ok 14 # skip push -q suppresses progress (missing TTY)
ok 18 - push with pushInsteadOf
ok 15 # skip push --no-progress suppresses progress (missing TTY)
ok 61 - update with arguments
ok 16 # skip quiet push (missing TTY)
ok 109 - setup proc-receive hook (option refname, builtin protocol)
ok 17 # skip quiet push -u (missing TTY)
# passed all 17 test(s)
1..17
ok 35 - clone shallow without --no-single-branch
ok 17 - fail if the index has unresolved entries
ok 2 - fetch with tagopt=--no-tags does not get tag
ok 9 - push mirror removes tags
ok 11 - br-config-glob-merge config-glob
*** t5526-fetch-submodules.sh ***
ok 36 - clone shallow object count
ok 19 - git config fetch.all false (fetch only default remote)
ok 33 - --refmap="" ignores configured refspec
ok 3 - fetch --tags with tagopt=--no-tags gets tag
ok 110 - proc-receive: report option refname (builtin protocol)
ok 37 - clone shallow with --branch
ok 111 - setup proc-receive hook (option refname and forced-update, builtin protocol)
ok 38 - clone shallow object count
ok 176 - setup repo with moderate-sized history
ok 17 - git pull does not add a sign-off line
ok 62 - update --prune
ok 18 - fast-forwards working tree if branch head is updated
ok 4 - fetch --no-tags with tagopt=--tags does not get tag
ok 179 - partial clone from bitmapped repository
ok 34 - --refmap="" and --prune
ok 20 - git fetch --no-all (fetch only default remote with fetch.all = true)
ok 39 - clone shallow with detached HEAD
ok 19 - push with pushInsteadOf and explicit pushurl (pushInsteadOf should not rewrite)
ok 5 - fetch with tagopt=--tags gets tag
ok 180 - setup further non-bitmapped commits
ok 112 - proc-receive: report option refname and forced-update (builtin protocol)
# passed all 5 test(s)
1..5
ok 113 - setup proc-receive hook (option refname and old-oid, builtin protocol)
ok 181 - counting commits via bitmap (partial bitmap, second)
ok 177 - create single-pack midx with bitmaps
*** t5527-fetch-odd-refs.sh ***
ok 19 - fast-forward fails with conflicting work tree
ok 12 - br-config-glob-octopus
ok 178 - reverse index exists (midx)
ok 182 - counting partial commits via bitmap (partial bitmap, second)
ok 35 - fetch tags when there is no tags
ok 183 - counting commits with limit (partial bitmap, second)
ok 179 - rev-list --test-bitmap verifies bitmaps
ok 180 - counting commits via bitmap (full bitmap, second)
ok 114 - proc-receive: report option refname and old-oid (builtin protocol)
ok 21 - git fetch --no-all (fetch only default remote with fetch.all = false)
ok 184 - counting non-linear history (partial bitmap, second)
ok 181 - counting partial commits via bitmap (full bitmap, second)
ok 115 - setup proc-receive hook (option old-oid, builtin protocol)
ok 40 - shallow clone pulling tags
ok 63 - update default
ok 182 - counting commits with limit (full bitmap, second)
ok 10 - push mirror adds, updates and removes tags together
ok 185 - counting commits with limiting (partial bitmap, second)
ok 36 - fetch following tags
ok 183 - counting non-linear history (full bitmap, second)
ok 186 - counting objects via bitmap (partial bitmap, second)
ok 18 - git pull --no-signoff does not add sign-off line
ok 20 - push with matching heads
ok 41 - shallow cloning single tag
ok 116 - proc-receive: report option old-oid (builtin protocol)
ok 184 - counting commits with limiting (full bitmap, second)
ok 117 - setup proc-receive hook (option old-oid and new-oid, builtin protocol)
ok 187 - enumerate commits (partial bitmap, second)
ok 20 - --rebase
ok 185 - counting objects via bitmap (full bitmap, second)
ok 13 - br-config-glob-octopus config-glob
ok 64 - update default (overridden, with funny whitespace)
ok 22 - git fetch --no-all (fetch only default remote without fetch.all)
ok 42 - clone shallow with packed refs
ok 188 - enumerate --objects (partial bitmap, second)
ok 186 - enumerate commits (full bitmap, second)
ok 189 - bitmap --objects handles non-commit objects (partial bitmap, second)
ok 118 - proc-receive: report option old-oid and new-oid (builtin protocol)
ok 190 - counting commits via bitmap (partial bitmap, other)
ok 119 - setup proc-receive hook (report with multiple rewrites, builtin protocol)
ok 187 - enumerate --objects (full bitmap, second)
ok 191 - counting partial commits via bitmap (partial bitmap, other)
ok 188 - bitmap --objects handles non-commit objects (full bitmap, second)
ok 65 - update (with remotes.default defined)
ok 192 - counting commits with limit (partial bitmap, other)
ok 1 - setup repo with odd suffix ref
ok 189 - counting commits via bitmap (full bitmap, other)
ok 11 - remote.foo.mirror adds and removes branches
ok 21 - push with matching heads on the command line
ok 23 - git fetch --all --no-all (fetch only default remote)
ok 21 - --rebase (merge) fast forward
ok 190 - counting partial commits via bitmap (full bitmap, other)
ok 193 - counting non-linear history (partial bitmap, other)
ok 191 - counting commits with limit (full bitmap, other)
ok 66 - "remote show" does not show symbolic refs
ok 67 - reject adding remote with an invalid name
ok 2 - suffix ref is ignored during fetch
ok 19 - git pull --signoff add a sign-off line
ok 194 - counting commits with limiting (partial bitmap, other)
ok 37 - fetch uses remote ref names to describe new refs
ok 40 - write generation data chunk if topmost remaining layer has generation data chunk
ok 192 - counting non-linear history (full bitmap, other)
ok 120 - proc-receive: report with multiple rewrites (builtin protocol)
ok 14 - br-remote-explicit
ok 121 - setup proc-receive hook (option without matching ok, builtin protocol/porcelain)
ok 195 - counting objects via bitmap (partial bitmap, other)
ok 193 - counting commits with limiting (full bitmap, other)
ok 22 - --rebase (am) fast forward
ok 196 - enumerate commits (partial bitmap, other)
ok 24 - git fetch --no-all one (fetch only explicit remote)
ok 38 - fetch must not resolve short tag name
ok 194 - counting objects via bitmap (full bitmap, other)
ok 3 - try to create repo with absurdly long refname
ok 122 - proc-receive: report option without matching ok (builtin protocol/porcelain)
ok 195 - enumerate commits (full bitmap, other)
ok 197 - enumerate --objects (partial bitmap, other)
ok 123 - setup proc-receive hook (option refname, builtin protocol/porcelain)
ok 12 - remote.foo.mirror=no has no effect
ok 198 - bitmap --objects handles non-commit objects (partial bitmap, other)
ok 68 - rename a remote
ok 39 - fetch can now resolve short remote name
ok 196 - enumerate --objects (full bitmap, other)
ok 197 - bitmap --objects handles non-commit objects (full bitmap, other)
ok 41 - write generation data chunk when commit-graph chain is replaced
ok 22 - failed (non-fast-forward) push with matching heads
ok 124 - proc-receive: report option refname (builtin protocol/porcelain)
ok 20 - git pull --no-signoff flag cancels --signoff flag
ok 4 - fetch handles extremely long refname
ok 69 - rename a remote renames repo remote.pushDefault
ok 40 - create bundle 1
ok 125 - setup proc-receive hook (option refname and forced-update, builtin protocol/porcelain)
ok 41 - header of bundle looks right
ok 13 - push to mirrored repository with refspec fails
ok 15 - br-remote-explicit remote-explicit
ok 199 - fetch (partial bitmap)
# passed all 13 test(s)
1..13
ok 42 - create bundle 2
ok 5 - push handles extremely long refname
# passed all 5 test(s)
1..5
*** t5528-push-default.sh ***
ok 198 - clone from bitmapped repository
ok 25 - git fetch --no-all --all (fetch all remotes)
ok 43 - unbundle 1
ok 23 - --rebase --autostash fast forward
*** t5529-push-errors.sh ***
# passed all 25 test(s)
1..25
ok 70 - rename a remote renames repo remote.pushDefault but ignores global
ok 44 - bundle 1 has only 3 files 
ok 126 - proc-receive: report option refname and forced-update (builtin protocol/porcelain)
ok 42 - temporary graph layer is discarded upon failure
# passed all 42 test(s)
1..42
ok 127 - setup proc-receive hook (option refname and old-oid, builtin protocol/porcelain)
ok 45 - unbundle 2
ok 200 - enumerating progress counts pack-reused objects
ok 71 - rename a remote renames repo remote.pushDefault but keeps global
ok 1 - setup
ok 128 - proc-receive: report option refname and old-oid (builtin protocol/porcelain)
ok 129 - setup proc-receive hook (option old-oid, builtin protocol/porcelain)
*** t5530-upload-pack-error.sh ***
ok 46 - bundle does not prerequisite objects
ok 21 - git pull --no-verify flag passed to merge
ok 16 - br-remote-explicit-merge
ok 23 - push --force with matching heads
ok 72 - rename handles remote without fetch refspec
ok 47 - bundle should be able to create a full history
ok 199 - partial clone from bitmapped repository
ok 130 - proc-receive: report option old-oid (builtin protocol/porcelain)
ok 201 - pack-objects respects --local (non-local loose)
ok 200 - setup further non-bitmapped commits
ok 73 - rename does not update a non-default fetch refspec
ok 131 - setup proc-receive hook (option old-oid and new-oid, builtin protocol/porcelain)
ok 1 - setup commits
ok 201 - counting commits via bitmap (partial bitmap, second)
ok 48 - fetch with a non-applying branch.<name>.merge
ok 2 - setup remote
ok 202 - counting partial commits via bitmap (partial bitmap, second)
ok 3 - setup fake receive-pack
ok 203 - counting commits with limit (partial bitmap, second)
ok 4 - detect missing branches early
ok 24 - --rebase with rebase.autostash succeeds on ff
ok 5 - detect missing sha1 expressions early
ok 6 - detect empty remote with existing local ref
ok 204 - counting non-linear history (partial bitmap, second)
ok 132 - proc-receive: report option old-oid and new-oid (builtin protocol/porcelain)
ok 7 - detect empty remote with targeted refspec
ok 49 - fetch from GIT URL with a non-applying branch.<name>.merge [1]
ok 74 - rename a remote with name part of fetch spec
ok 133 - setup proc-receive hook (report with multiple rewrites, builtin protocol/porcelain)
ok 17 - br-remote-explicit-merge remote-explicit
ok 2 - fetch --recurse-submodules recurses into submodules
ok 205 - counting commits with limiting (partial bitmap, second)
ok 8 - detect ambiguous refs early
# passed all 8 test(s)
1..8
*** t5531-deep-submodule-push.sh ***
ok 202 - pack-objects respects --honor-pack-keep (local non-bitmapped pack)
ok 206 - counting objects via bitmap (partial bitmap, second)
ok 1 - setup bare remotes
ok 22 - git pull --no-verify --verify passed to merge
ok 75 - rename a remote with name prefix of other remote
# passed all 22 test(s)
1..22
ok 50 - fetch from GIT URL with a non-applying branch.<name>.merge [2]
ok 24 - push with matching heads and forced update
ok 207 - enumerate commits (partial bitmap, second)
ok 1 - setup and corrupt repository
*** t5532-fetch-proxy.sh ***
*** t5533-push-cas.sh ***
ok 134 - proc-receive: report with multiple rewrites (builtin protocol/porcelain)
ok 2 - fsck fails
ok 135 - setup proc-receive hook (ft, builtin protocol)
ok 51 - fetch from GIT URL with a non-applying branch.<name>.merge [3]
ok 203 - pack-objects respects --local (non-local pack)
ok 208 - enumerate --objects (partial bitmap, second)
ok 52 - quoting of a strangely named repo
ok 3 - upload-pack fails due to error in pack-objects packing
ok 76 - rename succeeds with existing remote.<target>.prune
ok 209 - bitmap --objects handles non-commit objects (partial bitmap, second)
ok 25 - --rebase with conflicts shows advice
ok 4 - corrupt repo differently
ok 210 - counting commits via bitmap (partial bitmap, other)
ok 53 - bundle should record HEAD correctly
ok 5 - fsck fails
ok 211 - counting partial commits via bitmap (partial bitmap, other)
ok 18 - br-remote-explicit-octopus
ok 54 - mark initial state of origin/main
ok 2 - "upstream" pushes to configured upstream
ok 204 - pack-objects respects --honor-pack-keep (local bitmapped pack)
ok 212 - counting commits with limit (partial bitmap, other)
ok 6 - upload-pack fails due to error in rev-list
ok 136 - proc-receive: fall through, let receive-pack to execute (builtin protocol)
ok 137 - cleanup (builtin protocol)
ok 7 - upload-pack fails due to bad want (no object)
ok 77 - remove a remote
ok 213 - counting non-linear history (partial bitmap, other)
ok 138 - setup proc-receive hook (fall-through, builtin protocol/porcelain)
ok 25 - push with no ambiguity (1)
ok 214 - counting commits with limiting (partial bitmap, other)
ok 8 - upload-pack fails due to bad want (not tip)
ok 205 - pack-objects respects --local (non-local bitmapped pack)
ok 55 - explicit fetch should update tracking
ok 3 - fetch --recurse-submodules honors --no-write-fetch-head
ok 3 - "upstream" does not push on unconfigured remote
ok 9 - upload-pack fails due to error in pack-objects enumeration
ok 215 - counting objects via bitmap (partial bitmap, other)
ok 78 - remove a remote removes repo remote.pushDefault
ok 216 - enumerate commits (partial bitmap, other)
ok 10 - upload-pack tolerates EOF just after stateless client wants
ok 1 - setup remote repo
ok 11 - create empty repository
ok 2 - setup proxy script
ok 204 - create new additional packs
ok 139 - proc-receive: fall through, let receive-pack to execute (builtin protocol/porcelain)
ok 1 - setup
ok 12 - fetch fails
ok 140 - cleanup (builtin protocol/porcelain)
# passed all 12 test(s)
1..12
ok 217 - enumerate --objects (partial bitmap, other)
ok 3 - setup local repo
ok 4 - "upstream" does not push on unconfigured branch
ok 56 - explicit pull should update tracking
ok 218 - bitmap --objects handles non-commit objects (partial bitmap, other)
ok 79 - remove a remote removes repo remote.pushDefault but ignores global
ok 206 - pack-objects to file can use bitmap
ok 19 - br-remote-explicit-octopus remote-explicit
*** t5534-push-signed.sh ***
ok 141 - setup git config for remote-tracking of special refs
ok 205 - create multi-pack midx with bitmaps
ok 57 - explicit --refmap is allowed only with command-line refspec
ok 142 - setup proc-receive hook (multiple rewrites for one ref, no refname for the 1st rewrite, builtin protocol)
ok 2 - push works with recorded gitlink
ok 26 - failed --rebase shows advice
ok 1 - setup
ok 207 - full repack, reusing previous bitmaps
ok 206 - reverse index exists (rev)
ok 43 - in_vain not triggered before first ACK
ok 4 - fetch through proxy works
ok 26 - push with no ambiguity (2)
ok 5 - funny hostnames are rejected before running proxy
ok 207 - rev-list --test-bitmap verifies bitmaps
# passed all 5 test(s)
1..5
ok 5 - "upstream" does not push when remotes do not match
ok 58 - explicit --refmap option overrides remote.*.fetch
*** t5535-fetch-push-symref.sh ***
ok 80 - remove a remote removes repo remote.pushDefault but keeps global
ok 208 - counting commits via bitmap (full bitmap, second)
ok 219 - fetch (partial bitmap)
ok 208 - fetch (full bitmap)
ok 143 - proc-receive: multiple rewrite for one ref, no refname for the 1st rewrite (builtin protocol)
ok 27 - --rebase fails with multiple branches
ok 209 - counting partial commits via bitmap (full bitmap, second)
ok 4 - submodule.recurse option triggers recursive fetch
ok 3 - push if submodule has no remote
ok 210 - counting commits with limit (full bitmap, second)
ok 6 - "current" does not push when multiple remotes and none origin
ok 209 - create objects for missing-HAVE tests
ok 144 - proc-receive: check remote-tracking #1 (builtin protocol)
ok 59 - explicitly empty --refmap option disables remote.*.fetch
ok 145 - setup proc-receive hook (multiple rewrites for one ref, no refname for the 2nd rewrite, builtin protocol)
ok 211 - counting non-linear history (full bitmap, second)
ok 20 - br-remote-glob
ok 210 - pack-objects respects --incremental
ok 220 - enumerating progress counts pack-reused objects
ok 2 - push to update (protected)
ok 81 - migrate a remote from named file in $GIT_DIR/remotes
ok 211 - pack with missing blob
ok 212 - counting commits with limiting (full bitmap, second)
ok 212 - pack with missing tree
ok 60 - configured fetch updates tracking
ok 146 - proc-receive: multiple rewrites for one ref, no refname for the 2nd rewrite (builtin protocol)
ok 213 - pack with missing parent
ok 213 - counting objects via bitmap (full bitmap, second)
ok 214 # skip we can read jgit bitmaps (missing JGIT of JGIT,SHA1)
ok 215 # skip jgit can read our bitmaps (missing JGIT of JGIT,SHA1)
ok 7 - "current" pushes when remote explicitly specified
ok 1 - setup
ok 214 - enumerate commits (full bitmap, second)
ok 28 - pull --rebase succeeds with dirty working directory and rebase.autostash set
ok 147 - proc-receive: check remote-tracking #2 (builtin protocol)
ok 82 - migrate a remote from named file in $GIT_DIR/branches
ok 148 - setup proc-receive hook (multiple rewrites for one ref, builtin protocol)
ok 4 - push fails if submodule commit not on remote
ok 61 - non-matching refspecs do not confuse tracking update
ok 62 - pushing nonexistent branch by mistake should not segv
ok 215 - enumerate --objects (full bitmap, second)
ok 216 - bitmap --objects handles non-commit objects (full bitmap, second)
ok 5 - fetch --recurse-submodules -j2 has the same output behaviour
ok 27 - push with colon-less refspec, no ambiguity
ok 83 - migrate a remote from named file in $GIT_DIR/branches (2)
ok 21 - br-remote-glob remote-glob
ok 217 - counting commits via bitmap (full bitmap, other)
ok 218 - counting partial commits via bitmap (full bitmap, other)
ok 149 - proc-receive: multiple rewrites for one ref (builtin protocol)
ok 219 - counting commits with limit (full bitmap, other)
ok 8 - "current" pushes to origin when no remote specified among multiple
ok 2 - unsigned push does not send push certificate
ok 150 - proc-receive: check remote-tracking #3 (builtin protocol)
ok 5 - push succeeds after commit was pushed to remote
ok 151 - setup proc-receive hook (multiple rewrites for one ref, no refname for the 1st rewrite, builtin protocol/porcelain)
ok 6 - fetch alone only fetches superproject
ok 29 - pull --rebase --autostash & rebase.autostash=true
ok 220 - counting non-linear history (full bitmap, other)
ok 3 - push to update (protected, forced)
ok 84 - remote prune to cause a dangling symref
ok 7 - fetch --no-recurse-submodules only fetches superproject
ok 221 - counting commits with limiting (full bitmap, other)
ok 1 - setup
ok 85 - show empty remote
ok 222 - counting objects via bitmap (full bitmap, other)
ok 86 - remote set-branches requires a remote
ok 22 - br-remote-glob-merge
ok 3 - talking with a receiver without push certificate support
ok 223 - enumerate commits (full bitmap, other)
ok 152 - proc-receive: multiple rewrite for one ref, no refname for the 1st rewrite (builtin protocol/porcelain)
ok 153 - setup proc-receive hook (multiple rewrites for one ref, no refname for the 2nd rewrite, builtin protocol/porcelain)
ok 9 - "current" pushes to single remote even when not specified
ok 2 - push
ok 224 - enumerate --objects (full bitmap, other)
ok 30 - pull --rebase --autostash & rebase.autostash=false
ok 225 - bitmap --objects handles non-commit objects (full bitmap, other)
ok 63 - auto tag following fetches minimum
ok 4 - push --signed fails with a receiver without push certificate support
ok 8 - using fetchRecurseSubmodules=true in .gitmodules recurses into submodules
ok 28 - push with weak ambiguity (1)
ok 64 - refuse to fetch into the current branch
ok 65 - fetch into the current branch with --update-head-ok
ok 6 - push succeeds if submodule commit not on remote but using on-demand on command line
ok 3 - fetch
ok 154 - proc-receive: multiple rewrites for one ref, no refname for the 2nd rewrite (builtin protocol/porcelain)
# passed all 3 test(s)
1..3
ok 10 - push from/to new branch with non-defaulted remote fails with upstream, matching, current and simple 
ok 155 - setup proc-receive hook (multiple rewrites for one ref, builtin protocol/porcelain)
ok 87 - remote set-branches
ok 5 - push --signed=1 is accepted
*** t5536-fetch-conflicts.sh ***
ok 6 # skip no certificate for a signed push with no update (missing GPG)
ok 7 # skip signed push sends push certificate (missing GPG)
ok 66 - fetch --dry-run does not touch FETCH_HEAD, but still prints what would be written
ok 8 # skip ssh signed push sends push certificate (missing GPGSSH)
ok 9 # skip inconsistent push options in signed push not allowed (missing GPG)
ok 226 - clone from bitmapped repository
ok 9 - --no-recurse-submodules overrides .gitmodules config
ok 10 # skip fail without key and heed user.signingkey (missing GPG)
ok 23 - br-remote-glob-merge remote-glob
ok 216 - splitting packs does not generate bogus bitmaps
ok 11 # skip fail without key and heed user.signingkey x509 (missing GPGSM)
ok 12 # skip fail without key and heed user.signingkey ssh (missing GPGSSH)
ok 88 - remote set-branches with --mirror
ok 13 # skip failed atomic push does not execute GPG (missing GPG)
ok 11 - push from/to new branch fails with upstream and simple 
# passed all 13 test(s)
1..13
ok 67 - --no-write-fetch-head does not touch FETCH_HEAD, and does not print what would be written
ok 31 - pull --rebase --autostash & rebase.autostash unset
ok 4 - push to update (protected, tracking)
ok 89 - new remote
*** t5537-fetch-shallow.sh ***
ok 10 - using fetchRecurseSubmodules=false in .git/config overrides setting in .gitmodules
ok 156 - proc-receive: multiple rewrites for one ref (builtin protocol/porcelain)
ok 68 - --write-fetch-head gets defeated by --dry-run
ok 32 - pull --rebase --no-autostash & rebase.autostash=true
ok 217 - set up reusable pack
ok 157 - setup proc-receive hook (builtin protocol)
ok 90 - get-url on new remote
ok 218 - pack reuse respects --honor-pack-keep
not ok 12 - push from/to new branch fails with matching  # TODO known breakage
ok 91 - remote set-url with locked config
ok 33 - pull --rebase --no-autostash & rebase.autostash=false
ok 92 - remote set-url bar
ok 219 - pack reuse respects --local
ok 93 - remote set-url baz bar
ok 34 - pull --rebase --no-autostash & rebase.autostash unset
ok 7 - push succeeds if submodule commit not on remote but using on-demand from config
ok 13 - push from/to branch with tracking fails with nothing 
ok 220 - pack reuse respects --incremental
ok 94 - remote set-url zot bar
ok 24 - br-remote-glob-octopus
ok 95 - remote set-url --push zot baz
ok 69 - should be able to fetch with duplicate refspecs
ok 227 - partial clone from bitmapped repository
ok 158 - proc-receive: report update of mixed refs (builtin protocol)
ok 96 - remote set-url --push zot
ok 11 - --recurse-submodules overrides fetchRecurseSubmodules setting from .git/config
ok 29 - push with weak ambiguity (2)
ok 159 - cleanup (builtin protocol)
ok 228 - setup further non-bitmapped commits
ok 160 - setup proc-receive hook (builtin protocol/porcelain)
ok 97 - get-url with different urls
ok 229 - counting commits via bitmap (partial bitmap, second)
ok 14 - push from/to new branch succeeds with upstream if push.autoSetupRemote
ok 1 - setup
ok 230 - counting partial commits via bitmap (partial bitmap, second)
ok 98 - remote set-url --push qux zot
ok 221 - truncated bitmap fails gracefully (ewah)
ok 12 - --quiet propagates to submodules
ok 99 - remote set-url --push foo qu+x
ok 35 - pull succeeds with dirty working directory and merge.autostash set
ok 231 - counting commits with limit (partial bitmap, second)
ok 100 - remote set-url --push --add aaa
ok 5 - push to update (protected, tracking, forced)
ok 1 - setup
ok 101 - get-url on multi push remote
ok 2 - fetch with no conflict
ok 232 - counting non-linear history (partial bitmap, second)
ok 25 - br-remote-glob-octopus remote-glob
ok 161 - proc-receive: report update of mixed refs (builtin protocol/porcelain)
ok 15 - push from/to new branch succeeds with simple if push.autoSetupRemote
ok 102 - remote set-url --push bar aaa
ok 13 - --quiet propagates to parallel submodules
ok 103 - remote set-url --push --delete bar
ok 16 - "matching" fails if none match
ok 162 - cleanup (builtin protocol/porcelain)
ok 3 - fetch conflict: config vs. config
ok 163 - config receive.procReceiveRefs = refs (builtin protocol)
ok 233 - counting commits with limiting (partial bitmap, second)
ok 222 - truncated bitmap fails gracefully (cache)
ok 8 - push succeeds if submodule commit not on remote but using auto-on-demand via submodule.recurse config
ok 104 - remote set-url --push --delete foo
ok 2 - setup shallow clone
ok 30 - push with ambiguity
ok 164 - setup upstream branches (builtin protocol)
ok 234 - counting objects via bitmap (partial bitmap, second)
ok 105 - remote set-url --add bbb
ok 165 - setup proc-receive hook (builtin protocol)
ok 36 - pull --autostash & merge.autostash=true
ok 70 - LHS of refspec follows ref disambiguation rules
ok 44 - in_vain reset upon ACK
ok 235 - enumerate commits (partial bitmap, second)
ok 106 - get-url on multi fetch remote
ok 4 - fetch duplicate: config vs. config
ok 107 - remote set-url --delete .*
ok 3 - clone from shallow clone
ok 236 - enumerate --objects (partial bitmap, second)
ok 108 - remote set-url --delete bbb
ok 237 - bitmap --objects handles non-commit objects (partial bitmap, second)
ok 109 - remote set-url --delete baz
ok 26 - br-branches-default
ok 238 - counting commits via bitmap (partial bitmap, other)
ok 5 - fetch conflict: arg overrides config
ok 166 - proc-receive: process all refs (builtin protocol)
ok 110 - remote set-url --add ccc
ok 17 - push ambiguously named branch with upstream, matching and simple
ok 6 - push to update (allowed)
ok 239 - counting partial commits via bitmap (partial bitmap, other)
ok 167 - cleanup (builtin protocol)
ok 31 - push with onelevel ref
ok 168 - config receive.procReceiveRefs = refs (builtin protocol/porcelain)
ok 71 - fetch.writeCommitGraph
ok 6 - fetch conflict: arg vs. arg
ok 111 - remote set-url --delete baz
ok 240 - counting commits with limit (partial bitmap, other)
ok 112 - extra args: setup
ok 14 - --dry-run propagates to submodules
ok 113 - extra args: add nick url
ok 4 - fetch from shallow clone
ok 169 - setup upstream branches (builtin protocol/porcelain)
ok 37 - pull --autostash & merge.autostash=false
ok 114 - extra args: rename origin newname
ok 115 - extra args: remove origin
ok 170 - setup proc-receive hook (builtin protocol/porcelain)
ok 241 - counting non-linear history (partial bitmap, other)
ok 116 - extra args: set-head origin main
ok 117 - extra args: get-url origin newurl
ok 118 - extra args: set-url origin newurl oldurl
ok 18 - push from/to new branch with current creates remote branch
ok 242 - counting commits with limiting (partial bitmap, other)
ok 119 - add remote matching the "insteadOf" URL
ok 27 - br-branches-default branches-default
ok 7 - fetch conflict: criss-cross args
# passed all 7 test(s)
1..7
ok 243 - counting objects via bitmap (partial bitmap, other)
ok 15 - Without --dry-run propagates to submodules
*** t5538-push-shallow.sh ***
ok 5 - fetch --depth from shallow clone
ok 244 - enumerate commits (partial bitmap, other)
ok 171 - proc-receive: process all refs (builtin protocol/porcelain)
ok 19 - push to existing branch, with no upstream configured
ok 172 - cleanup (builtin protocol/porcelain)
ok 38 - pull --autostash & merge.autostash unset
ok 173 - config receive.procReceiveRefs with modifiers (builtin protocol)
ok 245 - enumerate --objects (partial bitmap, other)
ok 174 - setup proc-receive hook (builtin protocol)
ok 7 - push to update (allowed, tracking)
ok 246 - bitmap --objects handles non-commit objects (partial bitmap, other)
ok 223 - set up thin delta-reuse parent
ok 45 - fetch in shallow repo unreachable shallow objects
ok 28 - br-branches-default-merge
ok 6 - fetch --unshallow from shallow clone
ok 32 - push with colon-less refspec (1)
ok 120 - unqualified <dst> refspec DWIM and advice
ok 9 - push recurse-submodules on command line overrides config
ok 247 - fetch (partial bitmap)
ok 72 - fetch.writeCommitGraph with submodules
ok 175 - proc-receive: update branch and new tag (builtin protocol)
ok 39 - pull --no-autostash & merge.autostash=true
ok 176 - setup upstream: create tags/v123 (builtin protocol)
ok 16 - recurseSubmodules=true propagates into submodules
ok 7 - fetch --unshallow from a full clone
ok 73 - fetch from multiple configured URLs in single remote
ok 177 - setup proc-receive hook (builtin protocol)
ok 74 - setup cmdline_setup variable for subsequent test
ok 29 - br-branches-default-merge branches-default
ok 20 - push to existing branch, upstream configured with same name
ok 224 - fetch without bitmaps ignores delta against old base
ok 248 - enumerating progress counts pack-reused objects
ok 121 - refs/remotes/* <src> refspec and unqualified <dst> DWIM and advice
ok 40 - pull --no-autostash & merge.autostash=false
ok 46 - fetch creating new shallow root
ok 8 - push to update (allowed even though no-ff)
ok 178 - proc-receive: create/delete branch, and delete tag (builtin protocol)
ok 122 - empty config clears remote.*.url list
ok 8 - fetch something upstream has but hidden by clients shallow boundaries
# passed all 178 test(s)
# SKIP no web server found at ''
1..178
ok 33 - push with colon-less refspec (2)
*** t5539-fetch-http-shallow.sh ***
ok 221 - create new additional packs
ok 123 - empty config clears remote.*.pushurl list
# still have 1 known breakage(s)
# passed all remaining 122 test(s)
1..123
ok 249 - --no-bitmap is respected when bitmaps exist
ok 30 - br-branches-default-octopus
ok 222 - create multi-pack midx with bitmaps
ok 17 - --recurse-submodules overrides config in submodule
ok 41 - pull --no-autostash & merge.autostash unset
ok 75 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:kept tag:kept
ok 223 - reverse index exists (midx)
ok 9 - fetch that requires changes in .git/shallow is filtered
ok 224 - rev-list --test-bitmap verifies bitmaps
ok 9 - push to delete (protected)
ok 47 - setup tests for the --stdin parameter
ok 225 - counting commits via bitmap (full bitmap, second)
ok 34 - push with colon-less refspec (3)
ok 225 - fetch with bitmaps can reuse old base
ok 226 - counting partial commits via bitmap (full bitmap, second)
ok 18 - --no-recurse-submodules overrides config setting
ok 227 - counting commits with limit (full bitmap, second)
ok 21 - push to existing branch, upstream configured with different name
ok 31 - br-branches-default-octopus branches-default
ok 10 - push recurse-submodules last one wins on command line
ok 42 - pull.rebase
*** t5540-http-push-webdav.sh ***
ok 1 - setup
ok 250 - setup midx with base from later pack
ok 19 - Recursion doesn't happen when no new commits are fetched in the superproject
ok 228 - counting non-linear history (full bitmap, second)
ok 251 - counting commits via bitmap (full bitmap with backwards delta, second)
ok 10 - fetch --update-shallow
ok 252 - counting partial commits via bitmap (full bitmap with backwards delta, second)
1..0 # SKIP no web server found at ''
ok 229 - counting commits with limiting (full bitmap, second)
ok 76 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:kept tag:kept
*** t5541-http-push-smart.sh ***
ok 253 - counting commits with limit (full bitmap with backwards delta, second)
ok 230 - counting objects via bitmap (full bitmap, second)
ok 48 - setup fetch refs from cmdline v[12]
ok 10 - push to delete (protected, forced)
ok 254 - counting non-linear history (full bitmap with backwards delta, second)
ok 35 - push with colon-less refspec (4)
ok 2 - push from shallow clone
ok 22 - push.default = current success in central workflows
ok 255 - counting commits with limiting (full bitmap with backwards delta, second)
ok 231 - enumerate commits (full bitmap, second)
ok 43 - pull --autostash & pull.rebase=true
ok 256 - counting objects via bitmap (full bitmap with backwards delta, second)
ok 32 - br-branches-one
ok 20 - Recursion stops when no new submodule commits are fetched
ok 49 - protocol.version= fetch refs from cmdline
ok 44 - pull --no-autostash & pull.rebase=true
ok 3 - push from shallow clone, with grafted roots
ok 232 - enumerate --objects (full bitmap, second)
ok 257 - enumerate commits (full bitmap with backwards delta, second)
ok 233 - bitmap --objects handles non-commit objects (full bitmap, second)
ok 50 - protocol.version=0 fetch refs from cmdline
ok 77 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept
ok 234 - counting commits via bitmap (full bitmap, other)
1..0 # SKIP no web server found at ''
ok 258 - enumerate --objects (full bitmap with backwards delta, second)
*** t5542-push-http-shallow.sh ***
ok 259 - bitmap --objects handles non-commit objects (full bitmap with backwards delta, second)
ok 36 - push head with non-existent, incomplete dest
ok 235 - counting partial commits via bitmap (full bitmap, other)
ok 11 - push succeeds if submodule commit not on remote using on-demand from cmdline overriding config
ok 11 - push to delete (allowed)
ok 260 - counting commits via bitmap (full bitmap with backwards delta, other)
ok 23 - push.default = upstream success in central workflows
ok 236 - counting commits with limit (full bitmap, other)
ok 4 - add new shallow root with receive.updateshallow on
1..0 # SKIP no web server found at ''
*** t5543-atomic-push.sh ***
ok 261 - counting partial commits via bitmap (full bitmap with backwards delta, other)
ok 33 - br-branches-one branches-one
ok 51 - protocol.version=1 fetch refs from cmdline
ok 262 - counting commits with limit (full bitmap with backwards delta, other)
ok 45 - branch.to-rebase.rebase
ok 237 - counting non-linear history (full bitmap, other)
ok 21 - Recursion doesn't happen when new superproject commits don't change any submodules
ok 226 - pack.preferBitmapTips
ok 263 - counting non-linear history (full bitmap with backwards delta, other)
ok 238 - counting commits with limiting (full bitmap, other)
ok 11 - fetch --update-shallow into a repo with submodules
ok 239 - counting objects via bitmap (full bitmap, other)
ok 264 - counting commits with limiting (full bitmap with backwards delta, other)
ok 52 - protocol.version=2 fetch refs from cmdline
ok 5 - push from shallow to shallow
ok 24 - push.default = simple failure in central workflows
ok 37 - push tag with non-existent, incomplete dest
ok 265 - counting objects via bitmap (full bitmap with backwards delta, other)
ok 240 - enumerate commits (full bitmap, other)
ok 78 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept
ok 53 - fetch refs from stdin
ok 266 - enumerate commits (full bitmap with backwards delta, other)
ok 241 - enumerate --objects (full bitmap, other)
ok 46 - branch.to-rebase.rebase should override pull.rebase
1..0 # SKIP no web server found at ''
ok 242 - bitmap --objects handles non-commit objects (full bitmap, other)
*** t5544-pack-objects-hook.sh ***
ok 38 - push sha1 with non-existent, incomplete dest
ok 267 - enumerate --objects (full bitmap with backwards delta, other)
ok 12 - cover everything with default force-with-lease (protected)
ok 268 - bitmap --objects handles non-commit objects (full bitmap with backwards delta, other)
ok 34 - br-branches-one-merge
ok 54 - fetch mixed refs from cmdline and stdin
ok 39 - push ref expression with non-existent, incomplete dest
ok 12 - push succeeds if submodule commit disabling recursion from cmdline overriding config
ok 6 - push from full to shallow
# passed all 6 test(s)
1..6
ok 25 - push.default = matching success in central workflows
ok 55 - test duplicate refs from stdin
ok 56 - set up tests of missing reference
ok 12 - fetch --update-shallow a commit that is also a shallow point into a repo with submodules
ok 227 - pack.preferBitmapTips
ok 47 - pull --rebase warns on --verify-signatures
*** t5545-push-options.sh ***
ok 243 - clone from bitmapped repository
ok 79 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept
ok 57 - test lonely missing ref
ok 269 - clone with bitmaps enabled
ok 58 - test missing ref after existing
ok 35 - br-branches-one-merge branches-one
ok 59 - test missing ref before existing
ok 48 - pull --rebase does not warn on --no-verify-signatures
ok 1 - atomic push works for a single branch
ok 40 - push with HEAD
ok 60 - test --all, --depth, and explicit head
ok 13 - cover everything with default force-with-lease (allowed)
ok 1 - create some history to fetch
ok 2 - create debugging hook script
ok 13 - fetch --update-shallow (with fetch.writeCommitGraph)
ok 26 - push.default = current success in triangular workflows
ok 228 - complains about multiple pack bitmaps
ok 270 - changing the preferred pack does not corrupt bitmaps
ok 13 - push succeeds if submodule commit disabling recursion from cmdline (alternative form) overriding config
ok 61 - test --all, --depth, and explicit tag
ok 22 - Recursion picks up config in submodule
ok 244 - partial clone from bitmapped repository
ok 36 - br-branches-one-octopus
ok 80 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept
ok 49 - preserve merge setup
ok 229 - verify writing bitmap lookup table when enabled
ok 3 - hook runs via global config
ok 245 - setup further non-bitmapped commits
ok 4 - hook outputs are sane
ok 27 - push.default = upstream failure in triangular workflows
ok 14 - shallow fetch from a read-only repo
ok 246 - counting commits via bitmap (partial bitmap, second)
ok 14 - submodule entry pointing at a tag is error
ok 271 - setup partial bitmaps
ok 247 - counting partial commits via bitmap (partial bitmap, second)
ok 62 - test --all with tag to non-tip
ok 5 - hook runs from -c config
ok 41 - push with HEAD nonexisting at remote
ok 248 - counting commits with limit (partial bitmap, second)
ok 14 - new branch covered by force-with-lease
ok 272 - reverse index exists (rev)
ok 50 - pull.rebase=false create a new merge commit
ok 273 - rev-list --test-bitmap verifies bitmaps
ok 249 - counting non-linear history (partial bitmap, second)
ok 230 - truncated bitmap fails gracefully (lookup table)
# passed all 230 test(s)
1..230
ok 2 - atomic push works for two branches
ok 37 - br-branches-one-octopus branches-one
ok 274 - counting commits via bitmap (full bitmap, second)
ok 250 - counting commits with limiting (partial bitmap, second)
*** t5546-receive-limits.sh ***
ok 275 - counting partial commits via bitmap (full bitmap, second)
ok 28 - push.default = simple success in triangular workflows
ok 1 - one push option works for a single branch
ok 251 - counting objects via bitmap (partial bitmap, second)
ok 276 - counting commits with limit (full bitmap, second)
ok 6 - hook does not run from repo config
ok 81 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune origin refs/tags/*:refs/tags/*; branch:kept tag:pruned
ok 252 - enumerate commits (partial bitmap, second)
ok 277 - counting non-linear history (full bitmap, second)
ok 51 - pull.rebase=true flattens keep-merge
ok 278 - counting commits with limiting (full bitmap, second)
ok 15 - push fails if recurse submodules option passed as yes
ok 38 - main
ok 253 - enumerate --objects (partial bitmap, second)
ok 254 - bitmap --objects handles non-commit objects (partial bitmap, second)
ok 15 - new branch covered by force-with-lease (explicit)
ok 279 - counting objects via bitmap (full bitmap, second)
ok 255 - counting commits via bitmap (partial bitmap, other)
ok 7 - hook works with partial clone
ok 29 - push.default = matching success in triangular workflows
# passed all 7 test(s)
1..7
*** t5547-push-quarantine.sh ***
ok 256 - counting partial commits via bitmap (partial bitmap, other)
ok 63 - test --all wrt tag to non-commits
ok 280 - enumerate commits (full bitmap, second)
ok 3 - atomic push works in combination with --mirror
ok 257 - counting commits with limit (partial bitmap, other)
ok 82 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune origin refs/tags/*:refs/tags/*; branch:kept tag:pruned
ok 2 - push option denied by remote
ok 52 - pull.rebase=1 is treated as true and flattens keep-merge
ok 23 - Recursion picks up all submodules when necessary
ok 258 - counting non-linear history (partial bitmap, other)
ok 281 - enumerate --objects (full bitmap, second)
ok 282 - bitmap --objects handles non-commit objects (full bitmap, second)
ok 16 - push fails when commit on multiple branches if one branch has no remote
ok 39 - main config-explicit
ok 259 - counting commits with limiting (partial bitmap, other)
ok 283 - counting commits via bitmap (full bitmap, other)
ok 1 - create known-size (1024 bytes) commit
ok 15 - .git/shallow is edited by repack
ok 2 - prepare destination repository
ok 284 - counting partial commits via bitmap (full bitmap, other)
ok 3 - set unpacklimit to 1
ok 260 - counting objects via bitmap (partial bitmap, other)
ok 53 - pull.rebase=interactive
ok 42 - push with +HEAD
# passed all 15 test(s)
# SKIP no web server found at ''
1..15
ok 285 - counting commits with limit (full bitmap, other)
ok 16 - new branch already exists
ok 4 - setting receive.maxInputSize to 512 rejects push
ok 30 - default behavior allows "simple" push
ok 261 - enumerate commits (partial bitmap, other)
ok 24 - '--recurse-submodules=on-demand' doesn't recurse when no new commits are fetched in the superproject (and ignores config)
ok 286 - counting non-linear history (full bitmap, other)
*** t5548-push-porcelain.sh ***
ok 54 - pull --rebase=i
ok 287 - counting commits with limiting (full bitmap, other)
ok 5 - bumping limit to 4k allows push
ok 262 - enumerate --objects (partial bitmap, other)
ok 17 - push succeeds if submodule has no remote and is on the first superproject commit
ok 6 - prepare destination repository (again)
ok 55 - pull.rebase=invalid fails
ok 1 - create picky dest repo
ok 64 - shallow fetch with tags does not break the repository
ok 288 - counting objects via bitmap (full bitmap, other)
ok 83 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune origin refs/tags/*:refs/tags/* +refs/heads/*:refs/remotes/origin/*; branch:pruned tag:pruned
ok 263 - bitmap --objects handles non-commit objects (partial bitmap, other)
ok 31 - default behavior rejects non-simple push
ok 43 - push HEAD with non-existent, incomplete dest
ok 40 - main config-glob
ok 7 - lifting the limit allows push
ok 289 - enumerate commits (full bitmap, other)
ok 8 - prepare destination repository (once more)
ok 264 - fetch (partial bitmap)
ok 290 - enumerate --objects (full bitmap, other)
ok 2 - accepted objects work
ok 3 - two push options work
ok 291 - bitmap --objects handles non-commit objects (full bitmap, other)
ok 56 - --rebase=false create a new merge commit
ok 9 - receive trumps transfer
ok 10 - prepare destination repository
ok 11 - set unpacklimit to 10000
ok 65 - fetch-pack can fetch a raw sha1
ok 12 - setting receive.maxInputSize to 512 rejects push
ok 32 - default triangular behavior acts like "current"
# still have 1 known breakage(s)
# passed all remaining 31 test(s)
1..32
ok 3 - rejected objects are not installed
ok 4 - rejected objects are removed
ok 292 - clone from bitmapped repository
ok 41 - main remote-explicit
ok 4 - atomic push works in combination with --force
ok 265 - enumerating progress counts pack-reused objects
ok 84 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune origin refs/tags/*:refs/tags/* +refs/heads/*:refs/remotes/origin/*; branch:pruned tag:pruned
ok 13 - bumping limit to 4k allows push
ok 14 - prepare destination repository (again)
ok 57 - --rebase=true rebases and flattens keep-merge
*** t5549-fetch-push-http.sh ***
ok 66 - fetch-pack can fetch a raw sha1 that is advertised as a ref
ok 58 - --rebase=invalid fails
ok 18 - push unpushed submodules when not needed
ok 15 - lifting the limit allows push
ok 16 - prepare destination repository (once more)
ok 44 - push with config remote.*.push = HEAD
ok 5 - push to repo path with path separator (colon)
ok 266 - --no-bitmap is respected when bitmaps exist
ok 25 - '--recurse-submodules=on-demand' recurses as deep as necessary (and ignores config)
ok 17 - background updates of REMOTE can be mitigated with a non-updated REMOTE-push
ok 42 - main remote-glob
ok 67 - fetch-pack can fetch a raw sha1 overlapping a named ref
ok 17 - receive trumps transfer
# passed all 17 test(s)
1..17
ok 1 - setup upstream repository and workbench
*** t5550-http-fetch-dumb.sh ***
ok 59 - --rebase overrides pull.rebase=merges and flattens keep-merge
ok 85 - name prune fetch.prune=false remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:kept tag:kept
ok 293 - partial clone from bitmapped repository
ok 6 - updating a ref from quarantine is forbidden
# passed all 6 test(s)
1..6
ok 294 - setup further non-bitmapped commits
ok 19 - push unpushed submodules when not needed 2
1..0 # SKIP no web server found at ''
*** t5551-http-fetch-smart.sh ***
ok 295 - counting commits via bitmap (partial bitmap, second)
*** t5552-skipping-fetch-negotiator.sh ***
ok 68 - fetch-pack cannot fetch a raw sha1 that is not advertised as a ref
ok 296 - counting partial commits via bitmap (partial bitmap, second)
ok 267 - setup midx with base from later pack
ok 2 - .. git-push --porcelain (builtin protocol)
ok 69 - fetch-pack --diag-url ssh+git://host/repo
ok 297 - counting commits with limit (partial bitmap, second)
ok 45 - push with @
ok 268 - counting commits via bitmap (full bitmap with backwards delta, second)
ok 70 - fetch-pack --diag-url ssh+git://host/~repo
ok 43 - main branches-default
ok 269 - counting partial commits via bitmap (full bitmap with backwards delta, second)
ok 298 - counting non-linear history (partial bitmap, second)
ok 71 - fetch-pack --diag-url ssh+git://host:/repo
ok 270 - counting commits with limit (full bitmap with backwards delta, second)
ok 72 - fetch-pack --diag-url ssh+git://host:/~repo
ok 73 - fetch-pack --diag-url ssh+git://user@host/repo
ok 86 - link prune fetch.prune=false remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:kept tag:kept
ok 299 - counting commits with limiting (partial bitmap, second)
ok 271 - counting non-linear history (full bitmap with backwards delta, second)
ok 74 - fetch-pack --diag-url ssh+git://user@host/~repo
1..0 # SKIP no web server found at ''
ok 60 - --rebase with rebased upstream
ok 3 - .. git-push --porcelain --force (builtin protocol)
*** t5553-set-upstream.sh ***
ok 75 - fetch-pack --diag-url ssh+git://user@host:/repo
ok 5 - atomic push fails if one branch fails
ok 300 - counting objects via bitmap (partial bitmap, second)
ok 76 - fetch-pack --diag-url ssh+git://user@host:/~repo
ok 272 - counting commits with limiting (full bitmap with backwards delta, second)
ok 26 - setup downstream branch without submodules
ok 77 - fetch-pack --diag-url ssh+git://user@[::1]/repo
ok 273 - counting objects via bitmap (full bitmap with backwards delta, second)
ok 301 - enumerate commits (partial bitmap, second)
ok 78 - fetch-pack --diag-url ssh+git://user@[::1]/~repo
ok 4 - .. git push --porcelain --atomic (builtin protocol)
ok 79 - fetch-pack --diag-url ssh+git://user@[::1]:/repo
ok 274 - enumerate commits (full bitmap with backwards delta, second)
ok 44 - main branches-one
1..0 # SKIP no web server found at ''
ok 1 - fetch.negotiationalgorithm config
*** t5554-noop-fetch-negotiator.sh ***
ok 61 - --rebase -f with rebased upstream
ok 80 - fetch-pack --diag-url ssh+git://user@[::1]:/~repo
ok 20 - push unpushed submodules recursively
ok 302 - enumerate --objects (partial bitmap, second)
ok 4 - push options and submodules
ok 46 - push with @ nonexisting at remote
ok 303 - bitmap --objects handles non-commit objects (partial bitmap, second)
ok 81 - fetch-pack --diag-url ssh+git://user@::1/repo
ok 275 - enumerate --objects (full bitmap with backwards delta, second)
ok 276 - bitmap --objects handles non-commit objects (full bitmap with backwards delta, second)
ok 82 - fetch-pack --diag-url ssh+git://user@::1/~repo
ok 304 - counting commits via bitmap (partial bitmap, other)
ok 87 - name prune fetch.prune=false remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept
ok 277 - counting commits via bitmap (full bitmap with backwards delta, other)
ok 83 - fetch-pack --diag-url ssh+git://user@::1:/repo
ok 305 - counting partial commits via bitmap (partial bitmap, other)
ok 84 - fetch-pack --diag-url ssh+git://user@::1:/~repo
ok 278 - counting partial commits via bitmap (full bitmap with backwards delta, other)
ok 306 - counting commits with limit (partial bitmap, other)
ok 5 - .. pre-receive hook declined (builtin protocol)
ok 85 - fetch-pack --diag-url ssh+git://host:22/repo
ok 279 - counting commits with limit (full bitmap with backwards delta, other)
ok 62 - --rebase with rebased default upstream
ok 307 - counting non-linear history (partial bitmap, other)
ok 45 - br-unconfig
ok 1 - setup bare parent fetch
ok 86 - fetch-pack --diag-url ssh+git://User@host:22/repo
ok 280 - counting non-linear history (full bitmap with backwards delta, other)
ok 87 - fetch-pack --diag-url ssh+git://User@[::1]:22/repo
ok 308 - counting commits with limiting (partial bitmap, other)
ok 88 - fetch-pack --diag-url git+ssh://host/repo
ok 281 - counting commits with limiting (full bitmap with backwards delta, other)
ok 89 - fetch-pack --diag-url git+ssh://host/~repo
ok 309 - counting objects via bitmap (partial bitmap, other)
ok 90 - fetch-pack --diag-url git+ssh://host:/repo
ok 21 - push unpushable submodule recursively fails
ok 282 - counting objects via bitmap (full bitmap with backwards delta, other)
ok 6 - .. non-fastforward push (builtin protocol)
ok 91 - fetch-pack --diag-url git+ssh://host:/~repo
ok 310 - enumerate commits (partial bitmap, other)
ok 283 - enumerate commits (full bitmap with backwards delta, other)
ok 92 - fetch-pack --diag-url git+ssh://user@host/repo
ok 88 - link prune fetch.prune=false remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept
ok 93 - fetch-pack --diag-url git+ssh://user@host/~repo
ok 311 - enumerate --objects (partial bitmap, other)
ok 6 - atomic push fails if one tag fails remotely
ok 94 - fetch-pack --diag-url git+ssh://user@host:/repo
ok 284 - enumerate --objects (full bitmap with backwards delta, other)
ok 46 - br-unconfig config-explicit
ok 312 - bitmap --objects handles non-commit objects (partial bitmap, other)
ok 2 - setup commit on main and other fetch
ok 95 - fetch-pack --diag-url git+ssh://user@host:/~repo
ok 7 - .. git push --porcelain --atomic --force (builtin protocol)
ok 5 - default push option
ok 285 - bitmap --objects handles non-commit objects (full bitmap with backwards delta, other)
ok 63 - rebased upstream + fetch + pull --rebase
ok 96 - fetch-pack --diag-url git+ssh://user@[::1]/repo
ok 97 - fetch-pack --diag-url git+ssh://user@[::1]/~repo
ok 313 - fetch (partial bitmap)
ok 98 - fetch-pack --diag-url git+ssh://user@[::1]:/repo
ok 1 - noop negotiator does not emit any "have"
ok 99 - fetch-pack --diag-url git+ssh://user@[::1]:/~repo
# passed all 1 test(s)
1..1
ok 22 - push --dry-run does not recursively update submodules
ok 3 - fetch --set-upstream does not set upstream w/o branch
ok 47 - push with +@
*** t5555-http-smart-common.sh ***
ok 100 - fetch-pack --diag-url git+ssh://user@::1/repo
ok 8 - setup upstream repository and workbench
ok 2 - commits with no parents are sent regardless of skip distance
ok 101 - fetch-pack --diag-url git+ssh://user@::1/~repo
ok 286 - clone with bitmaps enabled
ok 102 - fetch-pack --diag-url git+ssh://user@::1:/repo
ok 89 - name prune fetch.prune=false remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept
ok 9 - .. git-push --porcelain --dry-run (builtin protocol)
ok 47 - br-unconfig config-glob
ok 103 - fetch-pack --diag-url git+ssh://user@::1:/~repo
ok 4 - fetch --set-upstream upstream main sets branch main but not other
ok 23 - push --dry-run does not recursively update submodules
ok 104 - fetch-pack --diag-url git+ssh://host:22/repo
ok 314 - enumerating progress counts pack-reused objects
ok 105 - fetch-pack --diag-url git+ssh://User@host:22/repo
# passed all 314 test(s)
1..314
ok 106 - fetch-pack --diag-url git+ssh://User@[::1]:22/repo
*** t5557-http-get.sh ***
ok 10 - .. git-push --porcelain --dry-run --force (builtin protocol)
ok 48 - push @ with non-existent, incomplete dest
ok 107 - fetch-pack --diag-url git://host/repo
ok 5 - fetch --set-upstream upstream other sets branch other
ok 64 - pull --rebase dies early with dirty working directory
ok 108 - fetch-pack --diag-url git://host/~repo
ok 27 - '--recurse-submodules=on-demand' should fetch submodule commits if the submodule is changed but the index has no submodules
ok 287 - changing the preferred pack does not corrupt bitmaps
ok 11 - .. git-push --porcelain --dry-run --atomic (builtin protocol)
ok 109 - fetch-pack --diag-url git://host:/repo
ok 18 - background updates to remote can be mitigated with "--force-if-includes"
ok 110 - fetch-pack --diag-url git://host:/~repo
ok 6 - two default push options
ok 6 - fetch --set-upstream main:other does not set the branch other2
ok 111 - fetch-pack --diag-url git://user@host/repo
ok 1 - setup
ok 48 - br-unconfig remote-explicit
ok 12 - .. git-push --porcelain --dry-run --atomic --force (builtin protocol)
ok 112 - fetch-pack --diag-url git://user@host/~repo
ok 2 - git upload-pack --http-backend-info-refs and --advertise-refs are aliased
ok 65 - pull --rebase works on branch yet to be born
ok 113 - fetch-pack --diag-url git://user@host:/repo
ok 90 - link prune fetch.prune=false remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept
ok 3 - git receive-pack --http-backend-info-refs and --advertise-refs are aliased
ok 7 - atomic push obeys update hook preventing a branch to be pushed
ok 288 - setup pack reuse tests (pack -> MIDX)
# passed all 12 test(s)
# SKIP no web server found at ''
1..12
ok 7 - fetch --set-upstream ./does-not-exist fails with invalid url
ok 114 - fetch-pack --diag-url git://user@host:/~repo
ok 24 - push only unpushed submodules recursively
*** t5558-clone-bundle-uri.sh ***
ok 115 - fetch-pack --diag-url git://user@[::1]/repo
ok 4 - git upload-pack --advertise-refs
ok 66 - pull --rebase fails on unborn branch with staged changes
ok 116 - fetch-pack --diag-url git://user@[::1]/~repo
ok 117 - fetch-pack --diag-url git://user@[::1]:/repo
1..0 # SKIP no web server found at ''
*** t5559-http-fetch-smart-http2.sh ***
ok 118 - fetch-pack --diag-url git://user@[::1]:/~repo
ok 5 - git upload-pack --advertise-refs: v0
ok 8 - fetch --set-upstream with valid URL sets upstream to URL
ok 289 - build bitmap from existing (pack -> MIDX)
ok 119 - fetch-pack --diag-url git://user@::1/repo
ok 67 - pull --rebase fails on corrupt HEAD
ok 120 - fetch-pack --diag-url git://user@::1/~repo
ok 49 - br-unconfig remote-glob
ok 290 - verify resulting bitmaps (pack -> MIDX)
ok 6 - git receive-pack --advertise-refs: v0
ok 121 - fetch-pack --diag-url git://user@::1:/repo
ok 49 - push with config remote.*.push = @
ok 9 - fetch --set-upstream with a detached HEAD
ok 122 - fetch-pack --diag-url git://user@::1:/~repo
ok 7 - git upload-pack --advertise-refs: v1
ok 7 - push option from command line overrides from-config push option
ok 91 - name prune fetch.prune=true remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:pruned tag:kept
ok 123 - fetch-pack --diag-url git://host:22/repo
ok 10 - setup bare parent pull
ok 8 - atomic push is not advertised if configured
ok 8 - git receive-pack --advertise-refs: v1
ok 124 - fetch-pack --diag-url git://User@host:22/repo
ok 9 - git upload-pack --advertise-refs: v2
ok 125 - fetch-pack --diag-url git://User@[::1]:22/repo
ok 126 - fetch-pack --diag-url ssh://host/repo
ok 68 - setup for detecting upstreamed changes
ok 10 - git receive-pack --advertise-refs: v2
ok 291 - setup pack reuse tests (MIDX -> pack)
# passed all 10 test(s)
1..10
*** t5560-http-backend-noserver.sh ***
ok 127 - fetch-pack --diag-url ssh://host/~repo
ok 1 - fail to clone from non-existent file
ok 128 - fetch-pack --diag-url ssh://host:/repo
ok 2 - fail to clone from non-bundle file
ok 129 - fetch-pack --diag-url ssh://host:/~repo
ok 50 - br-unconfig branches-default
ok 130 - fetch-pack --diag-url ssh://user@host/repo
1..0 # SKIP no web server found at ''
ok 292 - build bitmap from existing (MIDX -> pack)
*** t5561-http-backend.sh ***
ok 28 - '--recurse-submodules' should fetch submodule commits if the submodule is changed but the index has no submodules
ok 131 - fetch-pack --diag-url ssh://user@host/~repo
ok 69 - git pull --rebase detects upstreamed changes
ok 132 - fetch-pack --diag-url ssh://user@host:/repo
ok 293 - verify resulting bitmaps (MIDX -> pack)
ok 11 - setup commit on main and other pull
ok 92 - link prune fetch.prune=true remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:pruned tag:kept
ok 133 - fetch-pack --diag-url ssh://user@host:/~repo
ok 50 - push to remote with no explicit refspec and config remote.*.push = src:dest
ok 3 - when two skips collide, favor the larger one
ok 134 - fetch-pack --diag-url ssh://user@[::1]/repo
ok 135 - fetch-pack --diag-url ssh://user@[::1]/~repo
ok 8 - empty value of push.pushOption in config clears the list
ok 136 - fetch-pack --diag-url ssh://user@[::1]:/repo
ok 9 - atomic push reports (reject by update hook)
ok 12 - pull --set-upstream upstream main sets branch main but not other
ok 137 - fetch-pack --diag-url ssh://user@[::1]:/~repo
ok 51 - br-unconfig branches-one
ok 294 - setup pack reuse tests (MIDX -> MIDX)
ok 138 - fetch-pack --diag-url ssh://user@::1/repo
ok 3 - create bundle
ok 139 - fetch-pack --diag-url ssh://user@::1/~repo
ok 13 - pull --set-upstream main:other2 does not set the branch other2
ok 140 - fetch-pack --diag-url ssh://user@::1:/repo
ok 10 - atomic push reports (mirror, but reject by update hook)
ok 70 - setup for avoiding reapplying old patches
ok 4 - clone with path bundle
ok 141 - fetch-pack --diag-url ssh://user@::1:/~repo
ok 295 - build bitmap from existing (MIDX -> MIDX)
ok 142 - fetch-pack --diag-url ssh://host:22/repo
ok 93 - name prune fetch.prune=true remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept
1..0 # SKIP no web server found at ''
ok 143 - fetch-pack --diag-url ssh://User@host:22/repo
*** t5562-http-backend-content-length.sh ***
ok 296 - verify resulting bitmaps (MIDX -> MIDX)
ok 52 - main ../.git
ok 144 - fetch-pack --diag-url ssh://User@[::1]:22/repo
ok 5 - clone with bundle that has bad header
ok 145 - fetch-pack --diag-url file://User@[::1]/repo
ok 71 - git pull --rebase does not reapply old patches
ok 146 # skip fetch-pack --diag-url file://User@[::1]/repo (missing MINGW)
ok 147 # skip fetch-pack --diag-url file:///repo (missing MINGW)
ok 11 - atomic push reports (reject by non-ff)
ok 14 - pull --set-upstream upstream other sets branch main
ok 9 - invalid push option in config
ok 148 - fetch-pack --diag-url file://User@[::1]/~repo
ok 149 # skip fetch-pack --diag-url file://User@[::1]/~repo (missing MINGW)
ok 29 - '--recurse-submodules' should ignore changed, inactive submodules
ok 150 - fetch-pack --diag-url ./nohost:repo
ok 151 - fetch-pack --diag-url ./file:nohost/~repo
ok 152 - fetch-pack --diag-url ./nohost:12:repo
ok 12 - atomic push reports exit code failure
ok 53 - main ../.git one
ok 153 - fetch-pack --diag-url ./file:nohost:12/~repo
ok 1 - setup repository
ok 72 - git pull --rebase against local branch
ok 154 - fetch-pack --diag-url ./[::1]:repo
ok 6 - clone with bundle that has bad object
ok 297 - missing object closure fails gracefully
# passed all 72 test(s)
1..72
ok 2 - direct refs/heads/main not found
ok 15 - pull --set-upstream upstream tag does not set the tag
ok 155 - fetch-pack --diag-url ./file:[::1]/~repo
ok 156 - fetch-pack --diag-url ./[::1]:23:repo
ok 13 - atomic push reports exit code failure with porcelain
# passed all 13 test(s)
1..13
ok 25 - push with push.recurseSubmodules=only on superproject
ok 157 - fetch-pack --diag-url ./file:[::1]:23/~repo
ok 51 - push with remote.pushdefault
*** t5563-simple-http-auth.sh ***
ok 158 - fetch-pack --diag-url ./[:repo
ok 7 - clone with path bundle and non-default hash
ok 94 - link prune fetch.prune=true remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept
ok 159 - fetch-pack --diag-url ./file:[/~repo
*** t5564-http-proxy.sh ***
ok 54 - main ../.git one two
ok 10 - push options keep quoted characters intact (direct)
ok 160 - fetch-pack --diag-url ./[:aa:repo
ok 161 - fetch-pack --diag-url ./file:[:aa/~repo
ok 4 - use ref advertisement to filter out commits
ok 162 - fetch-pack --diag-url host:repo
# passed all 10 test(s)
# SKIP no web server found at ''
1..10
ok 16 - pull --set-upstream ./does-not-exist fails with invalid url
ok 8 - clone with file:// bundle
*** t5570-git-daemon.sh ***
ok 163 - fetch-pack --diag-url host:/~repo
ok 298 - setup partial bitmaps
ok 3 - static file is ok
ok 164 - fetch-pack --diag-url [::1]:repo
ok 299 - reverse index exists (midx)
ok 55 - main --tags ../.git
ok 19 - background updates to remote can be mitigated with "push.useForceIfIncludes"
ok 165 - fetch-pack --diag-url [::1]:/~repo
ok 300 - rev-list --test-bitmap verifies bitmaps
ok 166 - fetch-pack --diag-url ssh+git://host/re:po
ok 301 - counting commits via bitmap (full bitmap, second)
ok 167 - fetch-pack --diag-url ssh+git://host/~re:po
ok 302 - counting partial commits via bitmap (full bitmap, second)
ok 1 - setup
ok 168 - fetch-pack --diag-url ssh+git://host:/re:po
ok 303 - counting commits with limit (full bitmap, second)
ok 169 - fetch-pack --diag-url ssh+git://host:/~re:po
ok 95 - name prune fetch.prune=true remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept
ok 2 # skip setup, compression related (missing GZIP)
ok 304 - counting non-linear history (full bitmap, second)
ok 170 - fetch-pack --diag-url ssh+git://user@host/re:po
ok 52 - push with config remote.*.pushurl
1..0 # SKIP no web server found at ''
ok 171 - fetch-pack --diag-url ssh+git://user@host/~re:po
*** t5571-pre-push-hook.sh ***
ok 17 - pull --set-upstream upstream HEAD sets branch HEAD
ok 4 - no export by default
ok 305 - counting commits with limiting (full bitmap, second)
ok 3 - fetch plain
ok 172 - fetch-pack --diag-url ssh+git://user@host:/re:po
1..0 # SKIP no web server found at ''
ok 56 - main ../.git tag tag-one tag tag-three
*** t5572-pull-submodule.sh ***
ok 173 - fetch-pack --diag-url ssh+git://user@host:/~re:po
ok 306 - counting objects via bitmap (full bitmap, second)
ok 174 - fetch-pack --diag-url ssh+git://user@[::1]/re:po
ok 9 - construct incremental bundle list
ok 4 - fetch plain truncated
ok 175 - fetch-pack --diag-url ssh+git://user@[::1]/~re:po
ok 1 - daemon rejects invalid --init-timeout values
ok 307 - enumerate commits (full bitmap, second)
ok 176 - fetch-pack --diag-url ssh+git://user@[::1]:/re:po
ok 18 - pull --set-upstream upstream with more than one branch does nothing
ok 5 - fetch plain empty
ok 6 # skip fetch gzipped (missing GZIP)
ok 7 # skip fetch gzipped truncated (missing GZIP)
ok 8 # skip fetch gzipped empty (missing GZIP)
ok 9 # skip push plain (missing GZIP)
ok 2 - daemon rejects invalid --timeout values
ok 177 - fetch-pack --diag-url ssh+git://user@[::1]:/~re:po
ok 3 - daemon rejects invalid --max-connections values
ok 308 - enumerate --objects (full bitmap, second)
ok 178 - fetch-pack --diag-url ssh+git://user@::1/re:po
ok 309 - bitmap --objects handles non-commit objects (full bitmap, second)
ok 10 - push plain truncated
ok 96 - link prune fetch.prune=true remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept
ok 179 - fetch-pack --diag-url ssh+git://user@::1/~re:po
ok 5 - export if git-daemon-export-ok
ok 4 - setup repository
ok 5 - handle clock skew
ok 310 - counting commits via bitmap (full bitmap, other)
ok 180 - fetch-pack --diag-url ssh+git://user@::1:/re:po
ok 11 - push plain empty
ok 57 - main ../.git tag tag-one-tree tag tag-three-file
ok 12 # skip push gzipped (missing GZIP)
ok 13 # skip push gzipped truncated (missing GZIP)
ok 10 - clone bundle list (file, no heuristic)
ok 14 # skip push gzipped empty (missing GZIP)
ok 181 - fetch-pack --diag-url ssh+git://user@::1:/~re:po
ok 311 - counting partial commits via bitmap (full bitmap, other)
ok 19 - pull --set-upstream with valid URL sets upstream to URL
ok 15 - CONTENT_LENGTH overflow ssite_t
ok 182 - fetch-pack --diag-url ssh+git://host:22/re:po
ok 312 - counting commits with limit (full bitmap, other)
ok 5 - create git-accessible bare repository
ok 183 - fetch-pack --diag-url ssh+git://User@host:22/re:po
ok 16 - empty CONTENT_LENGTH
# passed all 16 test(s)
1..16
*** t5573-pull-verify-signatures.sh ***
ok 313 - counting non-linear history (full bitmap, other)
ok 184 - fetch-pack --diag-url ssh+git://User@[::1]:22/re:po
ok 185 - fetch-pack --diag-url git+ssh://host/re:po
ok 314 - counting commits with limiting (full bitmap, other)
ok 186 - fetch-pack --diag-url git+ssh://host/~re:po
ok 6 - static file if http.getanyfile true is ok
ok 11 - clone bundle list (file, all mode, some failures)
ok 187 - fetch-pack --diag-url git+ssh://host:/re:po
ok 315 - counting objects via bitmap (full bitmap, other)
ok 58 - main ../.git one tag tag-one tag tag-three-file
ok 188 - fetch-pack --diag-url git+ssh://host:/~re:po
ok 20 - pull --set-upstream with valid URL and branch sets branch
ok 97 - name prune fetch.prune=unset remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:kept tag:kept
ok 316 - enumerate commits (full bitmap, other)
ok 189 - fetch-pack --diag-url git+ssh://user@host/re:po
ok 1 - setup
ok 190 - fetch-pack --diag-url git+ssh://user@host/~re:po
ok 317 - enumerate --objects (full bitmap, other)
ok 12 - clone bundle list (file, all mode, all failures)
ok 191 - fetch-pack --diag-url git+ssh://user@host:/re:po
ok 318 - bitmap --objects handles non-commit objects (full bitmap, other)
ok 192 - fetch-pack --diag-url git+ssh://user@host:/~re:po
ok 21 - pull --set-upstream with a detached HEAD
# passed all 21 test(s)
1..21
ok 193 - fetch-pack --diag-url git+ssh://user@[::1]/re:po
*** t5574-fetch-output.sh ***
ok 7 - static file if http.getanyfile false fails
ok 59 - br-unconfig ../.git
ok 2 - push with failing hook
ok 194 - fetch-pack --diag-url git+ssh://user@[::1]/~re:po
ok 13 - clone bundle list (file, any mode)
ok 1 # skip create repositories with signed commits (missing GPG)
ok 195 - fetch-pack --diag-url git+ssh://user@[::1]:/re:po
ok 2 # skip pull unsigned commit with --verify-signatures (missing GPG)
ok 3 # skip pull commit with bad signature with --verify-signatures (missing GPG)
ok 4 # skip pull commit with untrusted signature with --verify-signatures (missing GPG)
ok 5 # skip pull commit with untrusted signature with --verify-signatures and minTrustLevel=ultimate (missing GPG)
ok 8 - http.uploadpack default enabled
ok 6 # skip pull commit with untrusted signature with --verify-signatures and minTrustLevel=marginal (missing GPG)
ok 7 # skip pull commit with untrusted signature with --verify-signatures and minTrustLevel=undefined (missing GPG)
ok 8 # skip pull signed commit with --verify-signatures (missing GPG)
ok 9 # skip pull commit with bad signature without verification (missing GPG)
ok 196 - fetch-pack --diag-url git+ssh://user@[::1]:/~re:po
ok 53 - push with config branch.*.pushremote
ok 10 # skip pull commit with bad signature with --no-verify-signatures (missing GPG)
ok 11 # skip pull unsigned commit into unborn branch (missing GPG)
ok 12 # skip pull commit into unborn branch with bad signature and --verify-signatures (missing GPG)
ok 3 - --no-verify bypasses hook
ok 13 # skip pull commit into unborn branch with untrusted signature and --verify-signatures (missing GPG)
ok 14 # skip pull commit into unborn branch with untrusted signature and --verify-signatures and minTrustLevel=ultimate (missing GPG)
ok 15 # skip pull commit into unborn branch with untrusted signature and --verify-signatures and minTrustLevel=marginal (missing GPG)
ok 16 # skip pull commit into unborn branch with untrusted signature and --verify-signatures and minTrustLevel=undefined (missing GPG)
# passed all 16 test(s)
1..16
ok 197 - fetch-pack --diag-url git+ssh://user@::1/re:po
ok 319 - clone from bitmapped repository
ok 14 - clone bundle list (file, any mode, all failures)
*** t5580-unc-paths.sh ***
ok 98 - link prune fetch.prune=unset remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:kept tag:kept
ok 9 - http.uploadpack true
ok 198 - fetch-pack --diag-url git+ssh://user@::1/~re:po
ok 60 - br-unconfig ../.git one
ok 199 - fetch-pack --diag-url git+ssh://user@::1:/re:po
ok 30 - setup downstream branch with other submodule
ok 10 - http.uploadpack false
ok 4 - push with hook
ok 200 - fetch-pack --diag-url git+ssh://user@::1:/~re:po
ok 201 - fetch-pack --diag-url git+ssh://host:22/re:po
ok 6 - clone git repository
ok 11 - http.receivepack default disabled
ok 202 - fetch-pack --diag-url git+ssh://User@host:22/re:po
ok 5 - add a branch
ok 26 - push with push.recurseSubmodules=only on superproject and top-level submodule
ok 15 - negotiation: bundle with part of wanted commits
ok 203 - fetch-pack --diag-url git+ssh://User@[::1]:22/re:po
ok 61 - br-unconfig ../.git one two
ok 204 - fetch-pack --diag-url git://host/re:po
ok 12 - http.receivepack true
ok 205 - fetch-pack --diag-url git://host/~re:po
ok 206 - fetch-pack --diag-url git://host:/re:po
ok 6 - push to default
ok 13 - http.receivepack false
ok 1 - fetch with invalid output format configuration
ok 16 - negotiation: bundle with all wanted commits
ok 207 - fetch-pack --diag-url git://host:/~re:po
ok 99 - name prune fetch.prune=unset remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept
ok 208 - fetch-pack --diag-url git://user@host/re:po
ok 320 - partial clone from bitmapped repository
ok 62 - br-unconfig --tags ../.git
ok 209 - fetch-pack --diag-url git://user@host/~re:po
1..0 # SKIP skipping Windows-only path tests
ok 7 - push non-branches
*** t5581-http-curl-verbose.sh ***
ok 210 - fetch-pack --diag-url git://user@host:/re:po
ok 321 - setup further non-bitmapped commits
ok 211 - fetch-pack --diag-url git://user@host:/~re:po
ok 8 - push delete
ok 20 - "--force-if-includes" should be disabled for --force-with-lease="<refname>:<expect>"
ok 212 - fetch-pack --diag-url git://user@[::1]/re:po
ok 322 - counting commits via bitmap (partial bitmap, second)
ok 14 - http-backend blocks bad PATH_INFO
ok 213 - fetch-pack --diag-url git://user@[::1]/~re:po
# passed all 14 test(s)
1..14
ok 323 - counting partial commits via bitmap (partial bitmap, second)
*** t5582-fetch-negative-refspec.sh ***
ok 2 - fetch aligned output
ok 214 - fetch-pack --diag-url git://user@[::1]:/re:po
ok 9 - push to URL
ok 17 - negotiation: bundle list (no heuristic)
ok 324 - counting commits with limit (partial bitmap, second)
ok 215 - fetch-pack --diag-url git://user@[::1]:/~re:po
ok 54 - branch.*.pushremote config order is irrelevant
ok 216 - fetch-pack --diag-url git://user@::1/re:po
ok 325 - counting non-linear history (partial bitmap, second)
ok 63 - br-unconfig ../.git tag tag-one tag tag-three
ok 217 - fetch-pack --diag-url git://user@::1/~re:po
ok 218 - fetch-pack --diag-url git://user@::1:/re:po
ok 326 - counting commits with limiting (partial bitmap, second)
ok 219 - fetch-pack --diag-url git://user@::1:/~re:po
ok 100 - link prune fetch.prune=unset remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept
ok 220 - fetch-pack --diag-url git://host:22/re:po
ok 327 - counting objects via bitmap (partial bitmap, second)
ok 3 - fetch compact output
ok 221 - fetch-pack --diag-url git://User@host:22/re:po
ok 18 - negotiation: bundle list (creationToken)
ok 222 - fetch-pack --diag-url git://User@[::1]:22/re:po
ok 328 - enumerate commits (partial bitmap, second)
1..0 # SKIP no web server found at ''
*** t5583-push-branches.sh ***
ok 223 - fetch-pack --diag-url ssh://host/re:po
ok 224 - fetch-pack --diag-url ssh://host/~re:po
ok 27 - push propagating the remotes name to a submodule
ok 64 - br-unconfig ../.git tag tag-one-tree tag tag-three-file
ok 329 - enumerate --objects (partial bitmap, second)
ok 225 - fetch-pack --diag-url ssh://host:/re:po
ok 330 - bitmap --objects handles non-commit objects (partial bitmap, second)
ok 1 - setup
ok 226 - fetch-pack --diag-url ssh://host:/~re:po
ok 331 - counting commits via bitmap (partial bitmap, other)
ok 55 - push rejects empty branch name entries
ok 227 - fetch-pack --diag-url ssh://user@host/re:po
ok 19 - negotiation: bundle list with all wanted commits
ok 332 - counting partial commits via bitmap (partial bitmap, other)
ok 228 - fetch-pack --diag-url ssh://user@host/~re:po
ok 333 - counting commits with limit (partial bitmap, other)
ok 7 - fetch changes via git protocol
ok 229 - fetch-pack --diag-url ssh://user@host:/re:po
# passed all 19 test(s)
# SKIP no web server found at ''
1..19
ok 230 - fetch-pack --diag-url ssh://user@host:/~re:po
ok 334 - counting non-linear history (partial bitmap, other)
ok 101 - name prune fetch.prune=unset remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept
ok 231 - fetch-pack --diag-url ssh://user@[::1]/re:po
ok 335 - counting commits with limiting (partial bitmap, other)
ok 232 - fetch-pack --diag-url ssh://user@[::1]/~re:po
ok 65 - br-unconfig ../.git one tag tag-one tag tag-three-file
# passed all 65 test(s)
1..65
ok 336 - counting objects via bitmap (partial bitmap, other)
ok 233 - fetch-pack --diag-url ssh://user@[::1]:/re:po
ok 4 - setup for fetch porcelain output
*** t5600-clone-fail-cleanup.sh ***
ok 31 - '--recurse-submodules' should fetch submodule commits in changed submodules and the index
ok 234 - fetch-pack --diag-url ssh://user@[::1]:/~re:po
ok 10 - set up many-ref tests
ok 337 - enumerate commits (partial bitmap, other)
*** t5601-clone.sh ***
ok 235 - fetch-pack --diag-url ssh://user@::1/re:po
ok 2 - clone and setup child repos
ok 236 - fetch-pack --diag-url ssh://user@::1/~re:po
ok 237 - fetch-pack --diag-url ssh://user@::1:/re:po
ok 338 - enumerate --objects (partial bitmap, other)
ok 339 - bitmap --objects handles non-commit objects (partial bitmap, other)
ok 238 - fetch-pack --diag-url ssh://user@::1:/~re:po
ok 1 - setup bare remote
ok 56 - push ignores "branch." config without subsection
ok 239 - fetch-pack --diag-url ssh://host:22/re:po
ok 2 - setup different types of references
ok 240 - fetch-pack --diag-url ssh://User@host:22/re:po
ok 3 - fetch one
ok 241 - fetch-pack --diag-url ssh://User@[::1]:22/re:po
ok 102 - link prune fetch.prune=unset remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept
ok 340 - fetch (partial bitmap)
ok 8 - no-op fetch -v stderr is as expected
ok 242 - fetch-pack --diag-url file://User@[::1]/re:po
ok 243 # skip fetch-pack --diag-url file://User@[::1]/re:po (missing MINGW)
ok 244 # skip fetch-pack --diag-url file:///re:po (missing MINGW)
ok 32 - '--recurse-submodules=on-demand' stops when no new submodule commits are found in the superproject (and ignores config)
ok 245 - fetch-pack --diag-url file://User@[::1]/~re:po
ok 246 # skip fetch-pack --diag-url file://User@[::1]/~re:po (missing MINGW)
ok 5 - fetch porcelain output 
ok 247 - fetch-pack --diag-url ./nohost:re:po
ok 28 - push propagating refspec to a submodule
ok 4 - fetch with negative refspec on commandline
ok 1 - clone of non-existent source should fail
ok 2 - failed clone should not leave a directory
ok 248 - fetch-pack --diag-url ./file:nohost/~re:po
ok 3 - create a repo to clone
ok 249 - fetch-pack --diag-url ./nohost:12:re:po
ok 57 - push with dry-run
ok 250 - fetch-pack --diag-url ./file:nohost:12/~re:po
ok 5 - fetch with negative sha1 refspec fails
ok 3 - --all and --branches have the same behavior
ok 251 - fetch-pack --diag-url ./[::1]:re:po
ok 4 - --all or --branches can not be combined with refspecs
ok 252 - fetch-pack --diag-url ./file:[::1]/~re:po
ok 1 - setup
ok 2 - clone with excess parameters (1)
ok 253 - fetch-pack --diag-url ./[::1]:23:re:po
ok 3 - clone with excess parameters (2)
ok 5 - --all or --branches can not be combined with --mirror
ok 4 - create objects in repo for later corruption
ok 6 - fetch with negative pattern refspec
ok 6 - --all or --branches can not be combined with --tags
ok 5 - clone of non-existent (relative to $PWD) source should fail
ok 254 - fetch-pack --diag-url ./file:[::1]:23/~re:po
ok 341 - enumerating progress counts pack-reused objects
ok 255 - fetch-pack --diag-url ./[:re:po
ok 7 - --all or --branches can not be combined with --delete
ok 6 - clone should work now that source exists
ok 7 - successful clone must leave the directory
ok 256 - fetch-pack --diag-url ./file:[/~re:po
ok 4 - output from clone
ok 257 - fetch-pack --diag-url ./[:aa:re:po
ok 103 - name prune fetch.prune=false remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:kept tag:kept
ok 258 - fetch-pack --diag-url ./file:[:aa/~re:po
ok 7 - fetch with negative pattern refspec does not expand prefix
ok 8 - failed clone --separate-git-dir should not leave any directories
ok 259 - fetch-pack --diag-url host:re:po
ok 6 - fetch porcelain output (atomic)
ok 9 - no-op fetch without "-v" is quiet
ok 5 - output from clone with core.abbrev does not crash
ok 260 - fetch-pack --diag-url host:/~re:po
ok 9 - failed clone into empty leaves directory (vanilla)
ok 261 - fetch-pack --diag-url [::1]:re:po
ok 262 - fetch-pack --diag-url [::1]:/~re:po
ok 263 - fetch-pack --diag-url ssh+git://host/re/po
ok 10 - failed clone into empty leaves directory (bare)
ok 8 - fetch with negative refspec avoids duplicate conflict
ok 6 - clone does not keep pack
ok 342 - removing a MIDX clears stale bitmaps
ok 8 - --all or --branches combines with --follow-tags have same behavior
ok 29 - push propagating HEAD refspec to a submodule
# passed all 29 test(s)
1..29
# passed all 8 test(s)
1..8
ok 264 - fetch-pack --diag-url ssh+git://host/~re/po
*** t5602-clone-remote-exec.sh ***
ok 58 - push updates local refs
ok 11 - failed clone into empty leaves directory (separate)
ok 265 - fetch-pack --diag-url ssh+git://host:/re/po
ok 7 - clone checks out files
ok 266 - fetch-pack --diag-url ssh+git://host:/~re/po
ok 12 - failed clone into empty leaves directory (separate, git)
*** t5603-clone-dirname.sh ***
ok 267 - fetch-pack --diag-url ssh+git://user@host/re/po
ok 8 - clone respects GIT_WORK_TREE
ok 21 - "--force-if-includes" should allow forced update after a rebase ("pull --rebase")
ok 33 - 'fetch.recurseSubmodules=on-demand' overrides global config
ok 268 - fetch-pack --diag-url ssh+git://user@host/~re/po
ok 104 - link prune fetch.prune=false remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:kept tag:kept
ok 13 - failed clone into empty leaves directory (separate, wt)
ok 269 - fetch-pack --diag-url ssh+git://user@host:/re/po
ok 9 - push --prune with negative refspec
ok 270 - fetch-pack --diag-url ssh+git://user@host:/~re/po
ok 14 - transport failure cleans up directory
# passed all 14 test(s)
1..14
ok 7 - fetch porcelain with multiple remotes
ok 271 - fetch-pack --diag-url ssh+git://user@[::1]/re/po
*** t5604-clone-reference.sh ***
ok 272 - fetch-pack --diag-url ssh+git://user@[::1]/~re/po
ok 9 - clone from hooks
ok 273 - fetch-pack --diag-url ssh+git://user@[::1]:/re/po
ok 8 - fetch porcelain refuses to work with submodules
ok 10 - clone creates intermediate directories
ok 274 - fetch-pack --diag-url ssh+git://user@[::1]:/~re/po
ok 10 - remote detects correct HEAD
ok 1 - setup
ok 10 - push --prune with negative refspec apply to the destination
ok 11 - clone creates intermediate directories for bare repo
ok 275 - fetch-pack --diag-url ssh+git://user@::1/re/po
ok 2 - clone calls git upload-pack unqualified with no -u option
ok 11 - prepare pack objects
ok 276 - fetch-pack --diag-url ssh+git://user@::1/~re/po
ok 12 - clone --mirror
ok 1 - setup ssh wrapper
ok 105 - name prune fetch.prune=false remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept
ok 277 - fetch-pack --diag-url ssh+git://user@::1:/re/po
ok 3 - clone calls specified git upload-pack with -u option
# passed all 3 test(s)
1..3
*** t5605-clone-local.sh ***
ok 2 - clone of host:foo goes to foo (non-bare)
ok 278 - fetch-pack --diag-url ssh+git://user@::1:/~re/po
ok 343 - pack.preferBitmapTips
ok 3 - clone of host:foo goes to foo.git (bare)
ok 279 - fetch-pack --diag-url ssh+git://host:22/re/po
ok 13 - clone --mirror with detached HEAD
ok 280 - fetch-pack --diag-url ssh+git://User@host:22/re/po
ok 281 - fetch-pack --diag-url ssh+git://User@[::1]:22/re/po
ok 4 - clone of host:foo.git goes to foo (non-bare)
ok 11 - fetch --prune with negative refspec
ok 282 - fetch-pack --diag-url git+ssh://host/re/po
ok 9 - fetch porcelain overrides fetch.output config
ok 14 - clone --bare with detached HEAD
ok 11 - sigpipe does not cause pre-push hook failure
ok 283 - fetch-pack --diag-url git+ssh://host/~re/po
ok 1 - preparing first repository
# passed all 11 test(s)
ok 5 - clone of host:foo.git goes to foo.git (bare)
1..11
ok 284 - fetch-pack --diag-url git+ssh://host:/re/po
ok 59 - push updates up-to-date local refs
ok 15 - clone --bare names the local repository <name>.git
ok 12 - push with matching : and negative refspec
ok 6 - clone of host:foo/.git goes to foo (non-bare)
ok 285 - fetch-pack --diag-url git+ssh://host:/~re/po
ok 286 - fetch-pack --diag-url git+ssh://user@host/re/po
ok 16 - clone --mirror does not repeat tags
ok 7 - clone of host:foo/.git goes to foo.git (bare)
ok 287 - fetch-pack --diag-url git+ssh://user@host/~re/po
ok 106 - link prune fetch.prune=false remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept
ok 288 - fetch-pack --diag-url git+ssh://user@host:/re/po
ok 8 - clone of ssh://host/foo goes to foo (non-bare)
ok 17 - clone with files ref format
ok 2 - preparing second repository
ok 289 - fetch-pack --diag-url git+ssh://user@host:/~re/po
ok 9 - clone of ssh://host/foo goes to foo.git (bare)
ok 18 - clone with garbage ref format
ok 13 - push with matching +: and negative refspec
ok 344 - writing a bitmap with --refs-snapshot
ok 290 - fetch-pack --diag-url git+ssh://user@[::1]/re/po
ok 34 - 'submodule.<sub>.fetchRecurseSubmodules=on-demand' overrides fetch.recurseSubmodules
ok 3 - cloning with reference (-l -s)
ok 4 - existence of info/alternates
ok 10 - clone of ssh://host/foo.git goes to foo (non-bare)
ok 291 - fetch-pack --diag-url git+ssh://user@[::1]/~re/po
ok 10 - fetch --no-porcelain overrides previous --porcelain
ok 12 - fetch notices corrupt pack
ok 19 - clone to destination with trailing /
ok 292 - fetch-pack --diag-url git+ssh://user@[::1]:/re/po
ok 11 - clone of ssh://host/foo.git goes to foo.git (bare)
ok 60 - push preserves up-to-date packed refs
ok 293 - fetch-pack --diag-url git+ssh://user@[::1]:/~re/po
ok 5 - pulling from reference
ok 12 - clone of ssh://host/foo/.git goes to foo (non-bare)
*** t5606-clone-options.sh ***
ok 294 - fetch-pack --diag-url git+ssh://user@::1/re/po
ok 20 - clone to destination with extra trailing /
ok 6 - that reference gets used
ok 295 - fetch-pack --diag-url git+ssh://user@::1/~re/po
ok 13 - clone of ssh://host/foo/.git goes to foo.git (bare)
ok 296 - fetch-pack --diag-url git+ssh://user@::1:/re/po
ok 21 - clone to an existing empty directory
ok 14 - clone of ssh://host/foo/ goes to foo (non-bare)
ok 1 - git_pull: added submodule creates empty directory
ok 297 - fetch-pack --diag-url git+ssh://user@::1:/~re/po
ok 22 - clone to an existing non-empty directory
ok 107 - name prune fetch.prune=false remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept
ok 7 - cloning with reference (no -l -s)
ok 23 - clone to an existing path
ok 8 - fetched no objects
ok 9 - existence of info/alternates
ok 35 - don't fetch submodule when newly recorded commits are already present
ok 1 - preparing origin repository
ok 298 - fetch-pack --diag-url git+ssh://host:22/re/po
ok 15 - clone of ssh://host/foo/// goes to foo (non-bare)
ok 14 - --prefetch correctly modifies refspecs
ok 299 - fetch-pack --diag-url git+ssh://User@host:22/re/po
ok 300 - fetch-pack --diag-url git+ssh://User@[::1]:22/re/po
ok 16 - clone of ssh://host/foo/.git/ goes to foo (non-bare)
ok 11 - fetch output with HEAD
ok 301 - fetch-pack --diag-url git://host/re/po
ok 10 - pulling from reference
ok 2 - local clone without .git suffix
ok 11 - that reference gets used
ok 302 - fetch-pack --diag-url git://host/~re/po
ok 17 - clone of ssh://host/foo.git/ goes to foo (non-bare)
ok 303 - fetch-pack --diag-url git://host:/re/po
ok 15 - --prefetch succeeds when refspec becomes empty
ok 18 - clone of ssh://host/foo.git/// goes to foo (non-bare)
ok 304 - fetch-pack --diag-url git://host:/~re/po
ok 24 - clone a void
ok 16 - --prefetch succeeds with empty command line refspec
# passed all 16 test(s)
1..16
ok 12 - updating origin
ok 3 - local clone with .git suffix
ok 305 - fetch-pack --diag-url git://user@host/re/po
ok 19 - clone of ssh://host/foo///.git/ goes to foo (non-bare)
*** t5607-clone-bundle.sh ***
ok 13 - fetch notices corrupt idx
ok 20 - clone of ssh://host/foo/.git/// goes to foo (non-bare)
ok 306 - fetch-pack --diag-url git://user@host/~re/po
ok 25 - clone respects global branch.autosetuprebase
ok 61 - push does not update local refs on failure
ok 14 - client refuses to ask for repo with newline
ok 1 - setup
ok 108 - link prune fetch.prune=false remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept
ok 307 - fetch-pack --diag-url git://user@host:/re/po
ok 13 - pulling changes from origin
ok 345 - write a bitmap with --refs-snapshot (preferred tips)
ok 4 - local clone from x
ok 21 - clone of host:foo/ goes to foo (non-bare)
ok 5 - local clone from x.git that does not exist
ok 15 - clone non-existent
ok 308 - fetch-pack --diag-url git://user@host:/~re/po
ok 14 - that alternate to origin gets used
ok 6 - With -no-hardlinks, local will make a copy
ok 22 - clone of host:foo/// goes to foo (non-bare)
ok 16 - push disabled
ok 309 - fetch-pack --diag-url git://user@[::1]/re/po
ok 26 - respect url-encoding of file://
ok 12 - fetch porcelain output with HEAD
ok 17 - read access denied
ok 7 - Even without -l, local will make a hardlink
ok 23 - clone of host:foo.git/ goes to foo (non-bare)
ok 310 - fetch-pack --diag-url git://user@[::1]/~re/po
ok 18 - not exported
ok 311 - fetch-pack --diag-url git://user@[::1]:/re/po
ok 24 - clone of host:foo/.git/ goes to foo (non-bare)
ok 27 - do not query-string-decode + in URLs
ok 312 - fetch-pack --diag-url git://user@[::1]:/~re/po
ok 313 - fetch-pack --diag-url git://user@::1/re/po
ok 62 - allow deleting an invalid remote ref
ok 25 - clone of host:foo.git/// goes to foo (non-bare)
ok 15 - pulling changes from origin
ok 8 - local clone of repo with nonexistent ref in HEAD
ok 314 - fetch-pack --diag-url git://user@::1/~re/po
ok 19 - clone non-existent
ok 28 - do not respect url-encoding of non-url path
ok 16 - check objects expected to exist locally
ok 20 - push disabled
ok 315 - fetch-pack --diag-url git://user@::1:/re/po
ok 26 - clone of host:foo///.git/ goes to foo (non-bare)
ok 22 - "--force-if-includes" should allow forced update after a rebase ("pull --rebase", local rebase)
ok 29 - clone separate gitdir
ok 21 - read access denied
ok 316 - fetch-pack --diag-url git://user@::1:/~re/po
ok 30 - clone separate gitdir: output
ok 346 - hash-cache values are propagated from pack bitmaps
ok 13 - fetch output with object ID
ok 17 - preparing alternate repository #1
ok 9 - bundle clone without .bundle suffix
ok 22 - not exported
ok 317 - fetch-pack --diag-url git://host:22/re/po
ok 27 - clone of host:foo/.git/// goes to foo (non-bare)
ok 31 - clone from .git file
ok 109 - name prune fetch.prune=false remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --prune origin refs/tags/*:refs/tags/*; branch:kept tag:pruned
ok 318 - fetch-pack --diag-url git://User@host:22/re/po
ok 2 - submodule.stickyRecursiveClone flag manipulates submodule.recurse value
ok 18 - cloning alternate repo #2 and adding changes to repo #1
ok 347 - no .bitmap is written without any objects
ok 32 - fetch from .git gitfile
ok 28 - clone of ssh://host/ goes to host (non-bare)
ok 319 - fetch-pack --diag-url git://User@[::1]:22/re/po
ok 10 - bundle clone with .bundle suffix
ok 3 - clone -o
ok 33 - fetch from gitfile parent
ok 19 - cloning alternate repo #1, using #2 as reference
ok 320 - fetch-pack --diag-url ssh://host/re/po
ok 36 - 'fetch.recurseSubmodules=on-demand' works also without .gitmodules entry
ok 34 - clone separate gitdir where target already exists
ok 4 - rejects invalid -o/--origin
ok 29 - clone of ssh://host:1234/ goes to host (non-bare)
ok 321 - fetch-pack --diag-url ssh://host/~re/po
ok 20 - cloning with reference being subset of source (-l -s)
ok 2 - git_pull: added submodule leaves existing empty directory alone
ok 322 - fetch-pack --diag-url ssh://host:/re/po
ok 30 - clone of ssh://user@host/ goes to host (non-bare)
ok 1 - setup
ok 5 - clone --bare -o
ok 11 - bundle clone from b4
ok 12 - bundle clone from b4.bundle that does not exist
ok 6 - disallows --bare with --separate-git-dir
ok 323 - fetch-pack --diag-url ssh://host:/~re/po
ok 21 - cloning with multiple references drops duplicates
ok 348 - graceful fallback when missing reverse index
ok 31 - clone of host:/ goes to host (non-bare)
ok 2 - "verify" needs a worktree
ok 7 - disallows --bundle-uri with shallow options
ok 324 - fetch-pack --diag-url ssh://user@host/re/po
ok 35 - clone --reference from original
ok 32 - clone of ssh://user:password@host/ goes to host (non-bare)
ok 325 - fetch-pack --diag-url ssh://user@host/~re/po
ok 22 - clone with reference from a tagged repository
ok 13 - bundle clone with nonexistent HEAD (match default)
ok 326 - fetch-pack --diag-url ssh://user@host:/re/po
ok 33 - clone of ssh://user:password@host:1234/ goes to host (non-bare)
ok 327 - fetch-pack --diag-url ssh://user@host:/~re/po
ok 14 - --no-show-forced-updates
# passed all 14 test(s)
1..14
ok 8 - reject cloning shallow repository
ok 328 - fetch-pack --diag-url ssh://user@[::1]/re/po
ok 34 - clone of ssh://user:passw@rd@host:1234/ goes to host (non-bare)
ok 349 - multi-pack-index write writes lookup table if enabled
ok 110 - link prune fetch.prune=false remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --prune origin refs/tags/*:refs/tags/*; branch:kept tag:pruned
ok 3 - annotated tags can be excluded by rev-list options
ok 23 - prepare branched repository
ok 14 - bundle clone with nonexistent HEAD (no match default)
ok 329 - fetch-pack --diag-url ssh://user@[::1]/~re/po
*** t5608-clone-2gb.sh ***
ok 36 - clone with more than one --reference
ok 35 - clone of user@host:/ goes to host (non-bare)
ok 63 - pushing valid refs triggers post-receive and post-update hooks
ok 4 - die if bundle file cannot be created
ok 330 - fetch-pack --diag-url ssh://user@[::1]:/re/po
ok 37 - fetching submodules respects parallel settings
ok 36 - clone of user:password@host:/ goes to host (non-bare)
ok 331 - fetch-pack --diag-url ssh://user@[::1]:/~re/po
ok 9 - reject cloning non-local shallow repository
ok 5 - bundle --stdin
ok 332 - fetch-pack --diag-url ssh://user@::1/re/po
ok 37 - clone of user:passw@rd@host:/ goes to host (non-bare)
ok 37 - clone from original with relative alternate
ok 333 - fetch-pack --diag-url ssh://user@::1/~re/po
ok 24 - fetch with incomplete alternates
ok 6 - bundle --stdin <rev-list options>
ok 334 - fetch-pack --diag-url ssh://user@::1:/re/po
ok 38 - clone of ssh://host/foo@bar goes to foo@bar (non-bare)
ok 15 - clone empty repository
ok 7 - empty bundle file is rejected
ok 335 - fetch-pack --diag-url ssh://user@::1:/~re/po
ok 38 - clone checking out a tag
ok 39 - clone of ssh://host/foo@bar.git goes to foo@bar (non-bare)
ok 39 - set up ssh wrapper
ok 336 - fetch-pack --diag-url ssh://host:22/re/po
ok 40 - clone of ssh://user:password@host/foo@bar goes to foo@bar (non-bare)
ok 25 - clone using repo with gitfile as a reference
ok 337 - fetch-pack --diag-url ssh://User@host:22/re/po
ok 16 - clone empty repository, and then push should not segfault.
ok 17 - cloning non-existent directory fails
ok 18 - cloning non-git directory fails
ok 338 - fetch-pack --diag-url ssh://User@[::1]:22/re/po
ok 111 - name prune fetch.prune=false remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --prune origin refs/tags/*:refs/tags/* +refs/heads/*:refs/remotes/origin/*; branch:pruned tag:pruned
ok 41 - clone of ssh://user:passw@rd@host/foo@bar.git goes to foo@bar (non-bare)
ok 339 - fetch-pack --diag-url file://User@[::1]/re/po
ok 26 - clone using repo pointed at by gitfile as reference
ok 340 # skip fetch-pack --diag-url file://User@[::1]/re/po (missing MINGW)
1..0 # SKIP expensive 2GB clone test; enable with GIT_TEST_CLONE_2GB=true
*** t5609-clone-branch.sh ***
ok 341 # skip fetch-pack --diag-url file:///re/po (missing MINGW)
ok 40 - clone myhost:src uses ssh
ok 42 - clone of host:/foo@bar goes to foo@bar (non-bare)
ok 10 - succeed cloning normal repository
ok 342 - fetch-pack --diag-url file://User@[::1]/~re/po
ok 343 # skip fetch-pack --diag-url file://User@[::1]/~re/po (missing MINGW)
ok 19 - cloning file:// does not hardlink
ok 8 - ridiculously long subject in boundary
ok 344 - fetch-pack --diag-url ./nohost:re/po
ok 64 - deleting dangling ref triggers hooks with correct args
ok 43 - clone of host:/foo@bar.git goes to foo@bar (non-bare)
ok 345 - fetch-pack --diag-url ./file:nohost/~re/po
ok 11 - uses "origin" for default remote name
ok 350 - preferred pack change with existing MIDX bitmap
ok 346 - fetch-pack --diag-url ./nohost:12:re/po
ok 41 - clone local path foo:bar
ok 20 - cloning a local path with --no-local does not hardlink
ok 347 - fetch-pack --diag-url ./file:nohost:12/~re/po
ok 44 - clone of user:password@host:/foo@bar goes to foo@bar (non-bare)
ok 348 - fetch-pack --diag-url ./[::1]:re/po
ok 349 - fetch-pack --diag-url ./file:[::1]/~re/po
ok 45 - clone of user:passw@rd@host:/foo@bar.git goes to foo@bar (non-bare)
ok 350 - fetch-pack --diag-url ./[::1]:23:re/po
ok 23 - access repo via interpolated hostname
ok 42 - bracketed hostnames are still ssh
ok 12 - prefers --template config over normal config
ok 21 - cloning a local path with --no-local from a different user succeeds
ok 351 - fetch-pack --diag-url ./file:[::1]:23/~re/po
ok 9 - prerequisites with an empty commit message
ok 3 - git_pull: replace tracked file with submodule creates empty directory
ok 46 - clone of ssh://user:password@host/test:1234 goes to 1234 (non-bare)
ok 10 - failed bundle creation does not leave cruft
ok 352 - fetch-pack --diag-url ./[:re/po
ok 22 - cloning locally respects "-u" for fetching refs
ok 353 - fetch-pack --diag-url ./file:[/~re/po
ok 47 - clone of ssh://user:password@host/test:1234.git goes to 1234 (non-bare)
# passed all 47 test(s)
1..47
ok 354 - fetch-pack --diag-url ./[:aa:re/po
ok 355 - fetch-pack --diag-url ./file:[:aa/~re/po
ok 112 - link prune fetch.prune=false remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --prune origin refs/tags/*:refs/tags/* +refs/heads/*:refs/remotes/origin/*; branch:pruned tag:pruned
*** t5610-clone-detached.sh ***
ok 351 - tagged commits are selected for bitmapping
ok 13 - prefers -c config over --template config
ok 38 - fetching submodule into a broken repository
ok 356 - fetch-pack --diag-url host:re/po
ok 43 - OpenSSH variant passes -4
ok 24 - hostname cannot break out of directory
ok 357 - fetch-pack --diag-url host:/~re/po
ok 23 - local clone from repo with corrupt refs fails gracefully
ok 11 - fetch SHA-1 from bundle
# passed all 23 test(s)
1..23
ok 14 - ignore --template config for core.bare
ok 358 - fetch-pack --diag-url [::1]:re/po
*** t5611-clone-config.sh ***
ok 359 - fetch-pack --diag-url [::1]:/~re/po
ok 360 # skip fetch-pack --diag-url file://c:/repo (missing MINGW)
ok 361 # skip fetch-pack --diag-url c:repo (missing MINGW)
ok 15 - prefers config "clone.defaultRemoteName" over default
ok 44 - variant can be overridden
ok 27 - clone and dissociate from reference
ok 1 - setup
ok 65 - deletion of a non-existent ref is not fed to post-receive and post-update hooks
ok 16 - prefers --origin over -c config
ok 23 - "--force-if-includes" should allow deletes
# passed all 23 test(s)
1..23
*** t5612-clone-refspec.sh ***
ok 2 - vanilla clone chooses HEAD
ok 45 - variant=auto picks based on basename
ok 352 - do not follow replace objects for MIDX bitmap
ok 17 - redirected clone does not show progress
ok 113 - name prune fetch.prune=true remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:kept tag:kept
ok 362 - clone shallow since ...
ok 3 - clone -b chooses specified branch
ok 25 - hostname interpolation works after LF-stripping
ok 4 - clone -b sets up tracking
ok 46 - simple does not support -4/-6
ok 18 - redirected clone -v does show progress
ok 5 - clone -b does not munge remotes/origin/HEAD
# passed all 25 test(s)
1..25
ok 1 - setup
*** t5613-info-alternate.sh ***
ok 6 - clone -b with bogus branch
ok 47 - simple does not support port
ok 363 - fetch shallow since ...
ok 7 - clone -b not allowed with empty repos
ok 19 - clone does not segfault with --bare and core.bare=false
# passed all 7 test(s)
1..7
ok 12 - clone bundle with different fsckObjects configurations
ok 2 - clone repo (detached HEAD points to branch)
ok 3 - cloned HEAD matches
*** t5614-clone-submodules-shallow.sh ***
ok 66 - deletion of a non-existent ref alone does trigger post-receive and post-update hooks
ok 1 - clone -c sets config in cloned repo
not ok 4 - cloned HEAD is detached # TODO known breakage
ok 13 - git bundle uses expected default format
ok 20 - chooses correct default initial branch name
ok 364 - clone shallow since selects no commits
ok 28 - clone, dissociate from partial reference and repack
ok 2 - clone -c can set multi-keys
ok 5 - clone repo (detached HEAD points to tag)
ok 48 - uplink is treated as simple
ok 14 - git bundle v3 has expected contents
ok 114 - link prune fetch.prune=true remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:kept tag:kept
ok 6 - cloned HEAD matches
ok 15 - git bundle v3 rejects unknown capabilities
# passed all 15 test(s)
1..15
ok 7 - cloned HEAD is detached
ok 3 - clone -c can set multi-keys, including some empty
ok 4 - git_pull: replace directory with submodule
*** t5615-alternate-env.sh ***
ok 4 - clone -c without a value is boolean true
ok 8 - clone repo (detached HEAD points to history)
ok 9 - cloned HEAD matches
ok 49 - OpenSSH-like uplink is treated as ssh
ok 10 - cloned HEAD is detached
ok 29 - clone, dissociate from alternates
ok 5 - clone -c config is available during clone
ok 365 - shallow since with commit graph and already-seen commit
ok 11 - clone repo (orphan detached HEAD)
ok 1 - preparing first repository
ok 30 - setup repo with garbage in objects/*
ok 50 - plink is treated specially (as putty)
ok 12 - cloned HEAD matches
ok 21 - guesses initial branch name correctly
ok 6 - clone -c remote.origin.fetch=<refspec> works
ok 13 - cloned HEAD is detached
# passed all 21 test(s)
1..21
ok 115 - name prune fetch.prune=true remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept
# still have 1 known breakage(s)
# passed all remaining 12 test(s)
1..13
ok 39 - fetch new commits when submodule got renamed
*** t5616-partial-clone.sh ***
ok 2 - preparing second repository
*** t5617-clone-submodules-remote.sh ***
ok 7 - git -c remote.origin.fetch=<refspec> clone works
ok 51 - plink.exe is treated specially (as putty)
ok 1 - create alternate repositories
ok 2 - objects inaccessible without alternates
ok 8 - clone -c remote.<remote>.fetch=<refspec> --origin=<name>
ok 3 - access alternate via absolute path
ok 366 - shallow clone exclude tag two
ok 4 - access multiple alternates
ok 5 - access alternate via relative path (bare)
ok 52 - tortoiseplink is like putty, with extra arguments
ok 3 - preparing third repository
ok 9 - set up shallow repository
ok 6 - access alternate via relative path (worktree)
ok 4 - count-objects shows the alternates
ok 67 - mixed ref updates, deletes, invalid deletes trigger hooks with correct input
ok 7 - access alternate via relative path (subdir)
ok 8 - mix of quoted and unquoted alternates
ok 116 - link prune fetch.prune=true remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept
ok 9 - broken quoting falls back to interpreting raw
# passed all 9 test(s)
1..9
ok 367 - fetch exclude tag one
ok 31 - clone a repo with garbage in objects/*
*** t5618-alternate-refs.sh ***
ok 53 - double quoted plink.exe in GIT_SSH_COMMAND
ok 1 - setup
ok 368 - fetch exclude tag one as revision
ok 10 - clone.rejectshallow=true should reject cloning shallow repo
ok 5 - git_pull: removed submodule leaves submodule directory and its contents in place
ok 54 - single quoted plink.exe in GIT_SSH_COMMAND
ok 68 - allow deleting a ref using --delete
ok 5 - creating too deep nesting
ok 11 - option --[no-]reject-shallow override clone.rejectshallow config
ok 1 - setup
ok 353 - git fsck correctly identifies good and bad bitmaps
ok 1 - setup normal src repo
ok 12 - clone.rejectshallow=true should succeed cloning normal repo
ok 13 # skip clone -c core.hideDotFiles (missing MINGW)
ok 55 - GIT_SSH_VARIANT overrides plink detection
# passed all 13 test(s)
1..13
ok 6 - validity of seventh repository
ok 117 - name prune fetch.prune=true remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept
*** t5619-clone-local-ambiguous-transport.sh ***
ok 2 - by default all branches will be kept updated
ok 32 - setup repo with manually symlinked or unknown files at objects/
ok 2 - setup bare clone for server
ok 3 - by default no tags will be kept updated
ok 1 - set up local refs
ok 7 - invalidity of eighth repository
ok 2 - nonshallow clone implies nonshallow submodule
ok 56 - ssh.variant overrides plink detection
ok 1 - setup
ok 69 - allow deleting a tag using --delete
ok 4 - clone with --no-tags
ok 354 - corrupt MIDX with bitmap causes fallback
ok 2 - set up shared clone
ok 3 - do partial clone 1
ok 8 - breaking of loops
ok 369 - fetching deepen
ok 4 - rev-list --missing=allow-promisor on partial clone
ok 3 - rev-list --alternate-refs
ok 2 - setup bare clone for server
ok 9 - that info/alternates is necessary
ok 57 - GIT_SSH_VARIANT overrides plink detection to plink
ok 5 - verify that .promisor file contains refs fetched
ok 4 - rev-list --not --alternate-refs
ok 10 - that relative alternate is possible for current dir
ok 118 - link prune fetch.prune=true remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept
ok 33 - clone repo with symlinked or unknown files at objects/
ok 355 - reading MIDX without BTMP chunk does not complain with single pack reuse
ok 5 - limiting with alternateRefsPrefixes
ok 70 - push --delete without args aborts
ok 6 - verify checkout with dynamic object fetch
ok 5 - --single-branch while HEAD pointing at main
1..0 # SKIP no web server found at ''
ok 6 - log --source shows .alternate marker
*** t5620-backfill.sh ***
# passed all 6 test(s)
1..6
ok 11 - that relative alternate is recursive
*** t5621-clone-revision.sh ***
ok 58 - GIT_SSH_VARIANT overrides plink to tortoiseplink
ok 34 - clone repo with symlinked objects directory
# passed all 34 test(s)
1..34
ok 59 - clean failure on broken quoting
ok 356 - reading MIDX without BTMP chunk does not complain with multi pack reuse
ok 12 - relative duplicates are eliminated
ok 13 # skip dup finding can be case-insensitive (missing CASE_INSENSITIVE_FS)
# passed all 13 test(s)
1..13
ok 60 - clone c:temp is ssl
ok 61 # skip clone c:temp is dos drive (missing MINGW)
*** t5700-protocol-v1.sh ***
ok 6 - git_pull: removed submodule leaves submodule containing a .git directory alone
ok 71 - push --delete refuses src:dest refspecs
ok 3 - shallow clone with shallow submodule
*** t5701-git-serve.sh ***
ok 62 - clone host:rep
ok 6 - --single-branch while HEAD pointing at main and --no-tags
ok 63 - clone host:rep/home/project
ok 119 - name prune fetch.prune=unset remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:pruned tag:kept
ok 3 - clone with --no-remote-submodules
ok 7 - push new commits to server
ok 72 - push --delete refuses empty string
ok 64 - clone host:123
ok 357 - remove one packfile between MIDX bitmap writes
# passed all 357 test(s)
1..357
ok 65 - clone [::1]:rep
ok 7 - --single-branch while HEAD pointing at side
ok 8 - partial fetch inherits filter settings
*** t5702-protocol-v2.sh ***
ok 66 - clone [::1]:rep/home/project
ok 370 - use ref advertisement to prune "have" lines sent
ok 9 - verify diff causes dynamic object fetch
ok 8 - --single-branch with explicit --branch side
ok 67 - clone [::1]:123
ok 1 - setup to generate files with expected content
ok 2 - test capability advertisement
ok 1 - setup
ok 1 - create repo to be served by git-daemon
ok 73 - push --delete onelevel refspecs
ok 120 - link prune fetch.prune=unset remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:pruned tag:kept
ok 68 - clone host:/~repo
ok 3 - stateless-rpc flag does not list capabilities
ok 4 - request invalid capability
ok 9 - --single-branch with explicit --branch with tag fetches updated tag
ok 4 - shallow clone does not imply shallow submodule
ok 5 - request with no command
ok 4 - clone with --remote-submodules
ok 69 - clone [::1]:/~repo
ok 2 - clone with --revision being a branch
ok 6 - request invalid command
ok 7 - request capability as command
ok 70 - clone foo/bar:baz is not ssh
ok 8 - request command as capability
ok 10 - --single-branch with explicit --branch with tag fetches updated tag despite --no-tags
ok 9 - requested command is command=value
ok 10 - verify blame causes dynamic object fetch
ok 71 - clone [foo]bar/baz:qux is not ssh
ok 10 - wrong object-format
ok 7 - git_pull: replace submodule with a directory must fail
ok 72 - clone [foo/bar]:baz is not ssh
ok 3 - clone with --depth and --revision being a branch
ok 1 - create repo to be served by git-daemon
ok 74 - warn on push to HEAD of non-bare repository
ok 11 - --single-branch with --mirror
ok 73 - clone ssh://host.xz/home/user/repo
ok 2 - clone with git:// using protocol v1
ok 1 - setup repo for object creation
ok 121 - name prune fetch.prune=unset remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept
ok 11 - setup some refs and tags
ok 4 - clone with --revision being a tag
ok 74 - clone ssh://host.xz/~repo
ok 12 - --single-branch with explicit --branch and --mirror
ok 75 - clone ssh://host.xz:/home/user/repo
ok 5 - check the default is --no-remote-submodules
ok 12 - basics of ls-refs
ok 13 - ls-refs complains about unknown options
ok 5 - clone with --revision being HEAD
ok 76 - clone ssh://host.xz:/~repo
ok 5 - shallow clone with non shallow submodule
ok 13 - --single-branch with detached
# passed all 13 test(s)
1..13
ok 14 - basic ref-prefixes
ok 2 - setup bare clone for server
ok 77 - clone ssh://host.xz:22/home/user/repo
ok 75 - deny push to HEAD of non-bare repository
ok 11 - push new commits to server for file.2.txt
ok 15 - refs/heads prefix
ok 6 - clone with --revision being a raw commit hash
ok 78 - clone ssh://host.xz:22/~repo
ok 371 - same as last but with config overrides
*** t5703-upload-pack-ref-in-want.sh ***
ok 372 - ensure bogus fetch.negotiationAlgorithm yields error
ok 3 - fetch with git:// using protocol v1
ok 122 - link prune fetch.prune=unset remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept
ok 79 - clone ssh://::1/home/user/repo
ok 7 - clone with --revision and --bare
ok 12 - override inherited filter-spec using --no-filter
ok 3 - do partial clone 1, backfill gets all objects
ok 40 - fetch new submodule commits on-demand outside standard refspec
ok 80 - clone ssh://[::1]/home/user/repo
ok 8 - clone with --revision being a short raw commit hash
ok 4 - pull with git:// using protocol v1
ok 6 - clone with --single-branch
ok 373 - fetch-pack with fsckObjects and keep-file does not segfault
ok 81 - clone ssh://[::1]:/home/user/repo
ok 9 - clone with --revision being a tree hash
ok 76 - allow push to HEAD of bare repository (bare)
ok 10 - clone with --revision being the parent of a ref fails
ok 82 - clone ssh://user@::1/home/user/repo
ok 11 - clone with --revision and --branch fails
ok 12 - clone with --revision and --mirror fails
# passed all 12 test(s)
1..12
ok 83 - clone ssh://user@[::1]/home/user/repo
*** t5704-protocol-violations.sh ***
ok 6 - non shallow clone with shallow submodule
ok 123 - name prune fetch.prune=unset remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept
ok 84 - clone ssh://user@[::1]:/home/user/repo
ok 8 - git_pull: replace submodule containing a .git directory with a directory must fail
ok 85 - clone ssh://[user@::1]/home/user/repo
ok 374 - filtering by size
ok 2 - list refs with git:// using protocol v2
ok 4 - do partial clone 2, backfill min batch size
ok 5 - backfill --sparse without sparse-checkout fails
ok 86 - clone ssh://[user@::1]:/home/user/repo
ok 5 - push with git:// using protocol v1
ok 13 - push new commits to server for file.3.txt
ok 77 - allow push to HEAD of non-bare repository (config)
ok 87 - clone ssh://::1/~repo
ok 6 - create repo to be served by file:// transport
ok 7 - clone with --filter
ok 375 - filtering by size has no effect if support for it is not advertised
ok 88 - clone ssh://[::1]/~repo
ok 1 - extra delim packet in v2 ls-refs args
ok 2 - extra delim packet in v2 fetch args
ok 124 - link prune fetch.prune=unset remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept
ok 7 - clone with file:// using protocol v1
ok 89 - clone ssh://user@::1/~repo
ok 78 - fetch with branches
ok 3 - bogus symref in v0 capabilities
# passed all 3 test(s)
1..3
ok 14 - manual prefetch of missing objects
ok 90 - clone ssh://user@[::1]/~repo
*** t5705-session-id-in-capabilities.sh ***
ok 1 - setup repository
ok 7 - clone follows shallow recommendation
ok 91 - clone ssh://[user@::1]/~repo
ok 8 - fetch with file:// using protocol v1
ok 2 - config controls ref-in-want advertisement
ok 3 - ref advertisement is filtered with ls-remote using protocol v2
ok 79 - fetch with branches containing #
ok 3 - invalid want-ref line
ok 92 - clone ssh://[::1]:22/home/user/repo
ok 9 - pull with file:// using protocol v1
ok 93 - clone ssh://user@[::1]:22/home/user/repo
ok 376 - fetch with --filter=blob:limit=0
ok 125 - name prune fetch.prune=false remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:pruned tag:kept
not ok 9 - git_pull: replace submodule with a file must fail # TODO known breakage
# passed all 376 test(s)
# SKIP no web server found at ''
1..376
ok 4 - basic want-ref
ok 94 - clone ssh://[user@::1]:22/home/user/repo
ok 80 - push with branches
ok 8 - filters applied with clone.filterSubmodules
ok 6 - backfill --sparse
ok 95 - clone ssh://[::1]:22/~repo
ok 10 - push with file:// using protocol v1
ok 96 - clone ssh://user@[::1]:22/~repo
ok 15 - push new commits to server for file.4.txt
ok 5 - multiple want-ref lines
ok 8 - get unshallow recommended shallow submodule
ok 81 - push with branches containing #
ok 97 - clone ssh://[user@::1]:22/~repo
ok 1 - setup repos for session ID capability tests
ok 126 - link prune fetch.prune=false remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:pruned tag:kept
ok 11 - cloning branchless tagless but not refless remote
ok 12 - setup ssh wrapper
*** t5710-promisor-remote-capability.sh ***
ok 98 - clone from a repository with two identical branches
ok 6 - mix want and want-ref
ok 13 - create repo to be served by ssh:// transport
ok 41 - fetch new submodule commit on-demand in FETCH_HEAD
ok 2 - session IDs not advertised by default (fetch v0)
ok 7 - backfill --sparse without cone mode (positive)
ok 14 - clone with ssh:// using protocol v1
ok 9 - --no-also-filter-submodules overrides clone.filterSubmodules=true
ok 4 - clone with git:// using protocol v2
ok 7 - want-ref with ref we already have commit for
# passed all 9 test(s)
1..9
ok 99 - shallow clone locally
*** t5730-protocol-v2-bundle-uri-file.sh ***
ok 127 - name prune fetch.prune=false remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept
ok 16 - ignore very large set of prefixes
not ok 10 - git_pull: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 100 - GIT_TRACE_PACKFILE produces a usable pack
ok 3 - session IDs not advertised by default (push v0)
ok 15 - fetch with ssh:// using protocol v1
ok 16 - apply a different filter using --refetch
ok 9 - clone follows non shallow recommendation
ok 17 - peel parameter
# passed all 9 test(s)
1..9
ok 82 - push into aliased refs (consistent)
*** t5731-protocol-v2-bundle-uri-git.sh ***
ok 18 - symrefs parameter
ok 4 - session IDs not advertised by default (fetch v1)
ok 101 - clone on case-insensitive fs
ok 8 - backfill --sparse without cone mode (negative)
ok 16 - pull with ssh:// using protocol v1
ok 102 # skip colliding file detection (missing CASE_INSENSITIVE_FS)
ok 19 - sending server-options
ok 103 # skip colliding symlink/directory keeps directory (missing CASE_INSENSITIVE_FS of CASE_INSENSITIVE_FS,SYMLINKS)
# passed all 8 test(s)
# SKIP no web server found at ''
1..8
ok 20 - unexpected lines are not allowed in fetch request
ok 17 - fetch --refetch works with a shallow clone
ok 1 - setup: create "template" repository
*** t5732-protocol-v2-bundle-uri-http.sh ***
ok 128 - link prune fetch.prune=false remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept
ok 21 - basics of object-info
ok 17 - push with ssh:// using protocol v1
ok 1 - setup protocol v2 file:// tests
ok 2 - setup: create bare "server" repository
ok 22 - test capability advertisement with uploadpack.advertiseBundleURIs
ok 5 - session IDs not advertised by default (push v1)
ok 23 - basics of bundle-uri: dies if not enabled
ok 104 - clone with GIT_DEFAULT_HASH
ok 2 - connect with file:// using protocol v2: no bundle-uri
ok 18 - clone propagates object-format from empty repo
ok 24 - object-info missing from capabilities when disabled
ok 3 - connect with file:// using protocol v2: have bundle-uri
ok 8 - setup repos for fetching with ref-in-want tests
ok 25 - object-info commands rejected when disabled
# passed all 25 test(s)
1..25
# passed all 18 test(s)
# SKIP no web server found at ''
1..18
*** t5750-bundle-uri-parse.sh ***
ok 5 - fetch with git:// using protocol v2
ok 1 - setup protocol v2 git:// tests
ok 6 - session IDs not advertised by default (fetch v2)
*** t5801-remote-helpers.sh ***
ok 83 - push into aliased refs (inconsistent)
ok 3 - setup for testing promisor remote advertisement
ok 129 - name prune fetch.prune=false remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept
1..0 # SKIP no web server found at ''
*** t5802-connect-helper.sh ***
ok 9 - fetching with exact OID
ok 4 - clone with file:// using protocol v2: request bundle-uris
ok 18 - fetch --refetch triggers repacking
ok 5 - enable transfer.bundleURI for remaining tests
ok 7 - session IDs not advertised by default (push v2)
ok 4 - clone with promisor.advertise set to 'true'
ok 10 - fetching multiple refs
ok 8 - enable SID advertisement
ok 1 - bundle_uri_parse_line() just URIs
ok 6 - fetch by hash without tag following with protocol v2 does not list refs
ok 42 - fetch new submodule commits on-demand without .gitmodules entry
ok 105 - partial clone
ok 6 - test bundle-uri with file:// using protocol v2
ok 11 - git_pull: modified submodule does not update submodule work tree
ok 2 - bundle_uri_parse_line(): relative URIs
ok 3 - bundle_uri_parse_line(): relative URIs and parent paths
ok 9 - session IDs advertised (fetch v0)
ok 4 - bundle_uri_parse_line() parsing edge cases: empty key or value
ok 7 - test bundle-uri with file:// using protocol v2 and extra data
ok 130 - link prune fetch.prune=false remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept
ok 1 - setup repository
ok 2 - connect with git:// using protocol v2: no bundle-uri
ok 11 - fetching ref and exact OID
ok 5 - bundle_uri_parse_line() parsing edge cases: empty lines
ok 12 - fetching with wildcard that does not match any refs
ok 6 - bundle_uri_parse_line() parsing edge cases: duplicate lines
ok 1 - setup
ok 8 - test bundle-uri with file:// using protocol v2 with list
# passed all 8 test(s)
1..8
ok 2 - cloning from local repo
ok 7 - parse config format: just URIs
*** t5810-proto-disable-local.sh ***
ok 5 - clone with promisor.advertise set to 'false'
ok 8 - parse config format: relative URIs
ok 2 - clone
ok 10 - session IDs advertised (push v0)
ok 13 - fetching with wildcard that matches multiple refs
ok 106 - partial clone with -o
ok 3 - clone with remote.*.vcs config
ok 131 - name prune fetch.prune=true remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:pruned tag:kept
ok 9 - parse config format edge cases: empty key or value
ok 19 - partial clone with transfer.fsckobjects=1 works with submodules
ok 10 - parse config format: creationToken heuristic
ok 11 - parse config format edge cases: creationToken heuristic
# passed all 11 test(s)
1..11
ok 7 - pull with git:// using protocol v2
*** t5811-proto-disable-git.sh ***
ok 11 - client & server log negotiated version (v0)
ok 3 - connect with git:// using protocol v2: have bundle-uri
ok 3 - update following tag
ok 4 - fetch with configured remote.*.vcs
ok 107 - partial clone: warn if server does not support object filtering
ok 20 - lazily fetched .gitmodules works
ok 43 - fetch new submodule commit intermittently referenced by superproject
ok 12 - session IDs advertised (fetch v1)
ok 1 - setup repository to clone
ok 6 - clone with promisor.acceptfromserver set to 'None'
ok 14 - setup namespaced repo
ok 5 - vcs remote with no url
ok 2 - clone file:// (enabled)
ok 132 - link prune fetch.prune=true remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:pruned tag:kept
ok 6 - create new commit on remote
ok 84 - force pushing required to update lightweight tag
ok 3 - fetch file:// (enabled)
ok 4 - update backfilled tag
ok 4 - push file:// (enabled)
ok 5 - push file:// (disabled)
ok 15 - with namespace: want-ref is considered relative to namespace
ok 6 - fetch file:// (disabled)
ok 16 - with namespace: want-ref outside namespace is unknown
ok 8 - push with git:// and a config of v2 does not request v2
ok 7 - clone file:// (disabled)
ok 7 - init + fetch with promisor.advertise set to 'true'
ok 5 - update backfilled tag without primary transfer
ok 13 - session IDs advertised (push v1)
ok 7 - pulling from local repo
ok 8 - clone file:// (env var has precedence)
ok 12 - git_pull: modified submodule does not update submodule work tree to invalid commit
ok 6 - set up fake git-daemon
ok 21 - partial clone with transfer.fsckobjects=1 uses index-pack --fsck-objects
ok 9 - create repo to be served by file:// transport
ok 108 - batch missing blob request during checkout
ok 9 - clone file:// (enabled with config)
ok 7 - ext command can connect to git daemon (no vhost)
ok 10 - list refs with file:// using protocol v2
ok 17 - without namespace: want-ref outside namespace succeeds
ok 14 - client & server log negotiated version (v1)
ok 1 - create git-accessible repo
ok 10 - fetch file:// (enabled)
ok 133 - name prune fetch.prune=true remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept
ok 18 - with namespace: hideRefs is matched, relative to namespace
ok 8 - clone with promisor.acceptfromserver set to 'KnownName'
ok 11 - push file:// (enabled)
ok 11 - ref advertisement is filtered with ls-remote using protocol v2
ok 8 - pushing to local repo
ok 12 - push file:// (disabled)
ok 13 - fetch file:// (disabled)
ok 8 - ext command can connect to git daemon (vhost)
# passed all 8 test(s)
1..8
ok 14 - clone file:// (disabled)
ok 12 - server-options are sent when using ls-remote
*** t5812-proto-disable-http.sh ***
ok 15 - session IDs advertised (fetch v2)
ok 15 - clone file:// (enabled)
ok 19 - with namespace: want-ref succeeds if hideRefs is removed
ok 16 - fetch file:// (enabled)
ok 17 - push file:// (enabled)
ok 18 - push file:// (disabled)
ok 19 - fetch file:// (disabled)
ok 20 - clone file:// (disabled)
ok 9 - fetch new branch
ok 20 - without namespace: relative hideRefs does not match
ok 134 - link prune fetch.prune=true remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept
# passed all 20 test(s)
# SKIP no web server found at ''
1..20
ok 16 - session IDs advertised (push v2)
ok 21 - clone file:// (enabled)
ok 9 - clone with 'KnownName' and different remote names
ok 13 - server-options from configuration are used by ls-remote
*** t5813-proto-disable-ssh.sh ***
ok 14 - warn if using server-option with ls-remote with legacy protocol
ok 10 - fetch multiple branches
ok 22 - fetch file:// (enabled)
1..0 # SKIP no web server found at ''
*** t5814-proto-disable-ext.sh ***
ok 23 - push file:// (enabled)
ok 17 - client & server log negotiated version (v2)
# passed all 17 test(s)
1..17
ok 24 - push file:// (disabled)
ok 15 - clone with file:// using protocol v2
*** t5815-submodule-protos.sh ***
ok 10 - clone with promisor.acceptfromserver set to 'KnownUrl'
ok 109 - batch missing blob request does not inadvertently try to fetch gitlinks
ok 25 - fetch file:// (disabled)
# passed all 109 test(s)
# SKIP no web server found at ''
1..109
ok 16 - clone of empty repo propagates name of default branch
ok 2 - clone git:// (enabled)
ok 26 - clone file:// (disabled)
ok 11 - push when remote has extra refs
ok 27 - clone path (enabled)
ok 135 - name prune fetch.prune=true remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept
ok 13 - git_pull: modified submodule does not update submodule work tree from invalid commit
ok 28 - fetch path (enabled)
ok 29 - push path (enabled)
ok 17 - ...but not if explicitly forbidden by config
ok 1 - setup ssh wrapper
ok 30 - push path (disabled)
ok 31 - fetch path (disabled)
ok 85 - force pushing required to update annotated tag
ok 32 - clone path (disabled)
ok 18 - bare clone propagates empty default branch
ok 12 - push new branch by name
ok 1 - setup ext wrapper
ok 33 - clone path (env var has precedence)
*** t5900-repo-selection.sh ***
ok 1 - setup ext wrapper
ok 34 - clone path (enabled with config)
ok 2 - setup ssh wrapper
ok 11 - clone with 'KnownUrl' and different remote urls
ok 2 - setup repository to clone
ok 35 - fetch path (enabled)
ok 36 - push path (enabled)
ok 13 - push new branch with old:new refspec
ok 37 - push path (disabled)
ok 2 - setup repository to clone
ok 3 - clone host:path (enabled)
ok 38 - fetch path (disabled)
ok 136 - link prune fetch.prune=true remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept
ok 19 - clone propagates unborn HEAD from non-empty repo
ok 39 - clone path (disabled)
ok 4 - fetch host:path (enabled)
ok 3 - clone remote-helper (enabled)
ok 3 - fetch git:// (enabled)
ok 40 - clone path (enabled)
ok 12 - clone with promisor.advertise set to 'true' but don't delete the client
ok 4 - fetch remote-helper (enabled)
ok 41 - fetch path (enabled)
ok 20 - clone propagates object-format from empty repo
ok 5 - push host:path (enabled)
ok 42 - push path (enabled)
ok 14 - git_pull: added submodule doesn't remove untracked unignored file with same name
ok 6 - push host:path (disabled)
ok 14 - push new branch with HEAD:new refspec
ok 43 - push path (disabled)
ok 7 - fetch host:path (disabled)
ok 44 - fetch path (disabled)
ok 8 - clone host:path (disabled)
ok 5 - push remote-helper (enabled)
ok 45 - clone path (disabled)
ok 6 - push remote-helper (disabled)
ok 7 - fetch remote-helper (disabled)
ok 6 - do not send "have" with ancestors of commits that server ACKed
ok 15 - push delete branch
# passed all 6 test(s)
1..6
ok 9 - clone host:path (env var has precedence)
ok 8 - clone remote-helper (disabled)
ok 46 - clone path (enabled)
ok 21 - bare clone propagates unborn HEAD from non-empty repo
ok 9 - clone remote-helper (env var has precedence)
ok 4 - push git:// (enabled)
ok 47 - fetch path (enabled)
ok 10 - clone host:path (enabled with config)
ok 5 - push git:// (disabled)
*** t6000-rev-list-misc.sh ***
ok 6 - fetch git:// (disabled)
ok 86 - fetch will not clobber an existing lightweight tag without --force
ok 48 - push path (enabled)
ok 137 - name prune fetch.prune=true remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --prune origin refs/tags/*:refs/tags/*; branch:kept tag:pruned
ok 11 - fetch host:path (enabled)
ok 10 - clone remote-helper (enabled with config)
ok 7 - clone git:// (disabled)
ok 12 - push host:path (enabled)
ok 49 - push path (disabled)
ok 13 - push host:path (disabled)
ok 14 - fetch host:path (disabled)
ok 11 - fetch remote-helper (enabled)
ok 50 - fetch path (disabled)
ok 8 - clone git:// (env var has precedence)
ok 15 - clone host:path (disabled)
ok 1 - find .git dir in worktree
ok 12 - push remote-helper (enabled)
ok 51 - clone path (disabled)
ok 22 - defaulted HEAD uses remote branch if available
ok 13 - push remote-helper (disabled)
ok 3 - setup repository with submodules
ok 14 - fetch remote-helper (disabled)
ok 16 - clone host:path (enabled)
ok 15 - clone remote-helper (disabled)
ok 16 - forced push
ok 17 - fetch host:path (enabled)
ok 4 - clone with git:// using protocol v2: request bundle-uris
ok 52 - setup repo with dash
ok 5 - enable transfer.bundleURI for remaining tests
ok 18 - push host:path (enabled)
ok 16 - clone remote-helper (enabled)
ok 13 - setup for subsequent fetches
ok 53 - repo names starting with dash are rejected
ok 19 - push host:path (disabled)
ok 20 - fetch host:path (disabled)
ok 44 - setup nested submodule fetch test
ok 54 - full paths still work
ok 23 - fetch with file:// using protocol v2
# passed all 54 test(s)
1..54
ok 21 - clone host:path (disabled)
*** t6001-rev-list-graft.sh ***
ok 17 - fetch remote-helper (enabled)
ok 1 - setup
ok 2 - automagically add .git suffix
ok 138 - link prune fetch.prune=true remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --prune origin refs/tags/*:refs/tags/*; branch:kept tag:pruned
ok 2 - rev-list --objects heeds pathspecs
ok 18 - push remote-helper (enabled)
ok 19 - push remote-helper (disabled)
ok 20 - fetch remote-helper (disabled)
ok 21 - clone remote-helper (disabled)
ok 22 - clone host:path (enabled)
ok 3 - rev-list --objects with pathspecs and deeper paths
ok 17 - cloning without refspec
ok 4 - clone with recurse-submodules fails
ok 24 - ref advertisement is filtered during fetch using protocol v2
ok 14 - subsequent fetch from a client when promisor.advertise is true
ok 45 - fetching a superproject containing an uninitialized sub/sub project
ok 23 - fetch host:path (enabled)
ok 87 - fetch will not clobber an existing annotated tag without --force
ok 22 - clone remote-helper (enabled)
ok 4 - rev-list --objects with pathspecs and copied files
ok 24 - push host:path (enabled)
ok 15 - git_pull_ff: added submodule creates empty directory
ok 5 - rev-list --objects --no-object-names has no space/names
ok 25 - push host:path (disabled)
ok 6 - rev-list --objects --no-object-names works with cat-file
ok 23 - fetch remote-helper (enabled)
ok 3 - automagically add .git suffix to worktree
ok 26 - fetch host:path (disabled)
ok 5 - setup individual updates
ok 18 - pulling without refspecs
ok 7 - --no-object-names and --object-names are last-one-wins
ok 88 - push --porcelain
ok 24 - push remote-helper (enabled)
ok 25 - server-options are sent when fetching
ok 27 - clone host:path (disabled)
ok 139 - name prune fetch.prune=true remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --prune origin refs/tags/*:refs/tags/* +refs/heads/*:refs/remotes/origin/*; branch:pruned tag:pruned
ok 6 - test bundle-uri with git:// using protocol v2
ok 25 - push remote-helper (disabled)
ok 8 - rev-list A..B and rev-list ^A B are the same
ok 89 - push --porcelain bad url
ok 9 - propagate uninteresting flag down correctly
ok 9 - clone git:// (enabled with config)
ok 26 - fetch remote-helper (disabled)
ok 15 - subsequent fetch from a client when promisor.advertise is false
ok 28 - clone ssh:// (enabled)
# passed all 15 test(s)
1..15
ok 10 - symleft flag bit is propagated down from tag
ok 19 - pushing without refspecs
*** t6002-rev-list-bisect.sh ***
ok 27 - clone remote-helper (disabled)
ok 29 - fetch ssh:// (enabled)
# passed all 27 test(s)
1..27
*** t6003-rev-list-topo-order.sh ***
ok 30 - push ssh:// (enabled)
ok 11 - rev-list can show index objects
ok 31 - push ssh:// (disabled)
ok 12 - rev-list can negate index objects
ok 32 - fetch ssh:// (disabled)
ok 13 - --bisect and --first-parent can be combined
ok 33 - clone ssh:// (disabled)
ok 6 - update of ssh allowed
ok 14 - --header shows a NUL after each commit
ok 26 - server-options are sent when fetch multiple remotes
ok 34 - clone ssh:// (env var has precedence)
ok 15 - rev-list --end-of-options
ok 4 - prefer worktree foo over bare foo.git
ok 1 - setup
ok 20 - pulling without marks
ok 90 - push --porcelain rejected
ok 16 - rev-list --count
ok 2 - without grafts
ok 17 - rev-list --count --objects
ok 3 - with grafts
ok 140 - link prune fetch.prune=true remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --prune origin refs/tags/*:refs/tags/* +refs/heads/*:refs/remotes/origin/*; branch:pruned tag:pruned
ok 35 - clone ssh:// (enabled with config)
ok 4 - without grafts, with pathlimit
ok 5 - with grafts, with pathlimit
ok 46 - setup recursive fetch with uninit submodule
ok 7 - update of ext not allowed
ok 6 - without grafts
ok 36 - fetch ssh:// (enabled)
ok 37 - push ssh:// (enabled)
ok 7 - with grafts
ok 38 - push ssh:// (disabled)
not ok 21 - pushing without marks # TODO known breakage
ok 18 - rev-list --unpacked
# passed all 18 test(s)
1..18
ok 39 - fetch ssh:// (disabled)
ok 91 - push --porcelain --dry-run rejected
ok 8 - without grafts, with pathlimit
ok 10 - fetch git:// (enabled)
*** t6004-rev-list-path-optim.sh ***
ok 9 - with grafts, with pathlimit
ok 11 - push git:// (enabled)
ok 7 - test bundle-uri with git:// using protocol v2 and extra data
ok 12 - push git:// (disabled)
ok 40 - clone ssh:// (disabled)
ok 13 - fetch git:// (disabled)
ok 10 - without grafts
ok 14 - clone git:// (disabled)
ok 11 - with grafts
ok 47 - recursive fetch with uninit submodule
ok 22 - push all with existing object
ok 12 - without grafts, with pathlimit
ok 5 - prefer bare foo over bare foo.git
ok 41 - clone ssh:// (enabled)
ok 13 - with grafts, with pathlimit
ok 27 - server-options from configuration are used by git-fetch
ok 8 - user can filter protocols with GIT_ALLOW_PROTOCOL
ok 42 - fetch ssh:// (enabled)
# passed all 8 test(s)
1..8
ok 43 - push ssh:// (enabled)
ok 141 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune-tags; branch:kept tag:kept
ok 28 - warn if using server-option with fetch with legacy protocol
*** t6005-rev-list-count.sh ***
ok 14 - show advice that grafts are deprecated
# passed all 14 test(s)
1..14
ok 44 - push ssh:// (disabled)
*** t6006-rev-list-format.sh ***
ok 45 - fetch ssh:// (disabled)
ok 16 - git_pull_ff: added submodule leaves existing empty directory alone
ok 23 - push ref with existing object
ok 46 - clone ssh:// (disabled)
ok 24 # skip push signed tag (missing GPG)
ok 25 # skip push signed tag with signed-tags capability (missing GPG)
ok 29 - server-options are sent when cloning
ok 47 - clone ssh:// (enabled)
ok 6 - disambiguate with full foo.git
ok 1 - setup
ok 48 - fetch ssh:// (enabled)
ok 2 - path-optimization
ok 92 - push --prune
ok 49 - push ssh:// (enabled)
ok 50 - push ssh:// (disabled)
ok 26 - push update refs
ok 51 - fetch ssh:// (disabled)
ok 8 - test bundle-uri with git:// using protocol v2 with list
ok 142 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune-tags; branch:kept tag:kept
ok 48 - recursive fetch after deinit a submodule
# passed all 8 test(s)
1..8
*** t6007-rev-list-cherry-pick-file.sh ***
ok 52 - clone ssh:// (disabled)
ok 7 - we are not fooled by non-git foo directory
ok 53 - clone git+ssh:// (enabled)
ok 30 - server-options from configuration are used by git-clone
ok 15 - clone git:// (enabled)
ok 1 - setup
ok 27 - push update refs disabled by no-private-update
ok 54 - fetch git+ssh:// (enabled)
ok 2 - no options
ok 31 - warn if using server-option with clone with legacy protocol
ok 55 - push git+ssh:// (enabled)
ok 56 - push git+ssh:// (disabled)
ok 57 - fetch git+ssh:// (disabled)
ok 1 - setup
ok 58 - clone git+ssh:// (disabled)
ok 2 - format percent
ok 3 - format hash
ok 3 - further setup
ok 32 - server-option configuration with legacy protocol is ok
ok 4 - format hash-no-header
ok 4 - path optimization 2
ok 5 - format hash-no-header-abbrev
ok 59 - clone git+ssh:// (env var has precedence)
ok 33 - invalid server-option configuration
ok 5 - pathspec with leading path
ok 3 - --max-count
ok 6 - format tree
ok 143 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=true remote.origin.pruneTags=unset; branch:kept tag:kept
ok 28 - push update refs failure
ok 7 - format parents
ok 6 - pathspec with glob (1)
ok 8 - format author
ok 8 - prefer inner .git over outer bare
ok 93 - push --prune refspec
ok 9 - format committer
ok 60 - clone git+ssh:// (enabled with config)
# passed all 8 test(s)
1..8
ok 7 - pathspec with glob (2)
# passed all 7 test(s)
1..7
ok 10 - format encoding
*** t6009-rev-list-parent.sh ***
*** t6008-rev-list-submodule.sh ***
ok 11 - format subject
ok 29 - proper failure checks for fetching
ok 61 - fetch git+ssh:// (enabled)
ok 17 - git_pull_ff: replace tracked file with submodule creates empty directory
ok 12 - format subject-truncated
ok 13 - format body
ok 34 - upload-pack respects config using protocol v2
ok 14 - format raw-body
ok 62 - push git+ssh:// (enabled)
ok 63 - push git+ssh:// (disabled)
ok 15 - format raw-body-no-header
ok 4 - --max-count all forms
ok 64 - fetch git+ssh:// (disabled)
ok 16 - pretty oneline (without --no-commit-header)
ok 17 - pretty oneline (with --no-commit-header)
ok 65 - clone git+ssh:// (disabled)
ok 16 - fetch git:// (enabled)
ok 18 - pretty short (without --no-commit-header)
ok 17 - push git:// (enabled)
ok 19 - pretty short (with --no-commit-header)
ok 18 - push git:// (disabled)
ok 19 - fetch git:// (disabled)
ok 20 - basic colors
ok 30 - proper failure checks for pushing
ok 21 - %S is not a placeholder for rev-list yet
ok 5 - --skip
ok 66 - clone git+ssh:// (enabled)
ok 20 - clone git:// (disabled)
ok 22 - advanced colors
ok 144 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=true remote.origin.pruneTags=unset; branch:kept tag:kept
ok 23 - %Cred does not enable color by default
ok 24 - %Cred enables colors for color.diff
ok 35 - setup filter tests
ok 25 - %Cred enables colors for color.ui
ok 67 - fetch git+ssh:// (enabled)
ok 1 - setup
ok 26 - %Cred respects --color
ok 68 - push git+ssh:// (enabled)
ok 69 - push git+ssh:// (disabled)
ok 27 - %Cred respects --no-color
ok 70 - fetch git+ssh:// (disabled)
ok 2 - --left-right
ok 28 # skip %Cred respects --color=auto (stdout is tty) (missing TTY)
ok 71 - clone git+ssh:// (disabled)
ok 3 - --count
ok 29 - %Cred respects --color=auto (stdout not tty)
ok 4 - --cherry-pick foo comes up empty
ok 30 - %C(...) does not enable color by default
ok 31 - %C(...) enables colors for color.diff
ok 5 - --cherry-pick bar does not come up empty
ok 6 - --skip --max-count
ok 32 - %C(...) enables colors for color.ui
# passed all 6 test(s)
1..6
ok 6 - bar does not come up empty
ok 72 - clone git+ssh:// (enabled)
*** t6010-merge-base.sh ***
ok 33 - %C(...) respects --color
ok 36 - partial clone
ok 34 - %C(...) respects --no-color
ok 35 # skip %C(...) respects --color=auto (stdout is tty) (missing TTY)
ok 36 - %C(...) respects --color=auto (stdout not tty)
ok 7 - --cherry-pick bar does not come up empty (II)
ok 37 - %C(auto,...) does not enable color by default
ok 73 - fetch git+ssh:// (enabled)
ok 145 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=true; branch:kept tag:kept
ok 8 - name-rev multiple --refs combine inclusive
ok 38 - %C(auto,...) enables colors for color.diff
ok 39 - %C(auto,...) enables colors for color.ui
ok 1 - setup
ok 37 - dynamically fetch missing object
ok 38 - when dynamically fetching missing object, do not list refs
ok 74 - push git+ssh:// (enabled)
ok 40 - %C(auto,...) respects --color
ok 2 - one is ancestor of others and should not be shown
ok 41 - %C(auto,...) respects --no-color
ok 42 # skip %C(auto,...) respects --color=auto (stdout is tty) (missing TTY)
ok 9 - name-rev --refs excludes non-matched patterns
ok 43 - %C(auto,...) respects --color=auto (stdout not tty)
ok 75 - push git+ssh:// (disabled)
ok 44 - %C(always,...) enables color even without tty
ok 76 - fetch git+ssh:// (disabled)
ok 45 - %C(auto) respects --color
ok 10 - name-rev --exclude excludes matched patterns
ok 77 - clone git+ssh:// (disabled)
ok 46 - %C(auto) respects --no-color
ok 31 - push messages
ok 11 - name-rev --no-refs clears the refs list
ok 49 - setup repo with upstreams that share a submodule name
ok 78 - hostnames starting with dash are rejected
ok 47 - rev-list %C(auto,...) respects --color
ok 12 - --cherry-mark
ok 39 - partial fetch
ok 13 - --cherry-mark --left-right
ok 1 - setup
ok 48 - setup complex body
ok 1 - setup
ok 79 - setup repo with dash
ok 2 - Ilari's test
ok 49 - format complex-encoding
# passed all 2 test(s)
1..2
ok 14 - --cherry-pick --right-only
ok 80 - repo names starting with dash are rejected
*** t6011-rev-list-with-bad-commit.sh ***
ok 94 - push to update a ref hidden by transfer.hiderefs
ok 50 - format complex-subject
ok 21 - clone git:// (enabled)
ok 40 - do not advertise filter if not configured to do so
ok 146 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=true; branch:kept tag:kept
ok 18 - git_pull_ff: replace directory with submodule
ok 15 - --cherry-pick --left-only
ok 51 - format complex-subject-trunc
ok 52 - format complex-subject-mtrunc
ok 32 - fetch HEAD
ok 16 - --cherry
ok 53 - format complex-subject-ltrunc
ok 54 - setup expected messages (for test %b)
ok 81 - full paths still work
# passed all 81 test(s)
1..81
ok 55 - format complex-body
ok 41 - partial clone warns if filter is not advertised
ok 17 - --cherry --count
*** t6012-rev-list-simplify.sh ***
ok 18 - --cherry-mark --count
ok 56 - format complex-subject-commitencoding-unset
ok 57 - format complex-subject-commitencoding-unset-trunc
ok 19 - --cherry-mark --left-right --count
ok 2 - set up G and H
ok 58 - format complex-subject-commitencoding-unset-mtrunc
ok 42 - even with handcrafted request, filter does not work if not advertised
ok 59 - format complex-subject-commitencoding-unset-ltrunc
ok 60 - format complex-body-commitencoding-unset
ok 33 - fetch url
ok 20 - --cherry-pick with independent, but identical branches
ok 61 - %x00 shows NUL
ok 3 - merge-base G H
ok 21 - --count --left-right
ok 62 - %ad respects --date=
ok 43 - default refspec is used to filter ref when fetchcing
ok 63 - empty email
ok 147 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune --prune-tags; branch:pruned tag:pruned
ok 64 - del LF before empty (1)
ok 65 - del LF before empty (2)
ok 66 - add LF before non-empty (1)
ok 67 - add LF before non-empty (2)
ok 4 - merge-base/show-branch --independent
ok 68 - add SP before non-empty (1)
ok 69 - add SP before non-empty (2)
ok 22 - fetch git:// (enabled)
ok 34 - fetch tag
ok 70 - --abbrev
ok 22 - --cherry-pick with duplicates on each side
ok 23 - push git:// (enabled)
ok 71 - %H is not affected by --abbrev-commit
ok 50 - fetch --recurse-submodules updates name-conflicted, populated submodule
ok 35 - totally broken helper reports failure message
ok 72 - %h is not affected by --abbrev-commit
# still have 1 known breakage(s)
# passed all remaining 34 test(s)
1..35
ok 24 - push git:// (disabled)
ok 73 - "%h %gD: %gs" is same as git-reflog
ok 1 - setup
ok 25 - fetch git:// (disabled)
ok 74 - "%h %gD: %gs" is same as git-reflog (with date)
ok 2 - verify number of revisions
ok 75 - "%h %gD: %gs" is same as git-reflog (with --abbrev)
ok 26 - clone git:// (disabled)
*** t6013-rev-list-reverse-parents.sh ***
ok 22 - use fsck before and after manually fetching a missing subtree
ok 76 - %gd shortens ref name
ok 3 - corrupt second commit object
# passed all 26 test(s)
1..26
ok 77 - reflog identity
ok 4 - rev-list should fail
ok 148 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune --prune-tags; branch:pruned tag:pruned
*** t6014-rev-list-all.sh ***
ok 5 - git repack _MUST_ fail
ok 6 - first commit is still available
ok 3 - setup roots, merges and octopuses
# passed all 6 test(s)
1..6
ok 23 - --cherry-pick avoids looking at full diffs
# passed all 23 test(s)
*** t6016-rev-list-graph-simplify-history.sh ***
1..23
*** t6017-rev-list-stdin.sh ***
ok 19 - git_pull_ff: removed submodule leaves submodule directory and its contents in place
ok 1 - bisection diff --bisect l0 ^root <= 0
ok 78 - oneline with empty message
ok 4 - parse --max-parents & --min-parents
ok 5 - rev-list roots
ok 79 - single-character name is parsed correctly
ok 2 - bisection diff --bisect l1 ^root <= 0
ok 80 - unused %G placeholders are passed through
# passed all 80 test(s)
1..80
*** t6018-rev-list-glob.sh ***
ok 6 - rev-list no merges
ok 5 - unsynchronized clocks
ok 3 - bisection diff --bisect l2 ^root <= 0
ok 44 - fetch supports various ways of have lines
ok 95 - push to update a ref hidden by receive.hiderefs
ok 7 - rev-list no octopuses
ok 4 - bisection diff --bisect a0 ^root <= 0
ok 8 - rev-list no roots
ok 149 - name prune fetch.prune=true remote.origin.prune=unset fetch.pruneTags=true remote.origin.pruneTags=unset; branch:pruned tag:pruned
ok 9 - rev-list merges
ok 5 - bisection diff --bisect a1 ^root <= 0
ok 10 - rev-list octopus
ok 6 - bisection diff --bisect a2 ^root <= 0
ok 11 - rev-list ordinary commits
ok 7 - bisection diff --bisect a3 ^root <= 0
ok 12 - rev-list --merges --no-merges yields empty set
ok 45 - fetch supports include-tag and tag following
ok 1 - setup
ok 8 - bisection diff --bisect b1 ^root <= 0
ok 2 - rev-list --all lists detached HEAD
ok 9 - bisection diff --bisect b2 ^root <= 0
ok 6 - --independent with unsynchronized clocks
ok 1 - setup
ok 10 - bisection diff --bisect b3 ^root <= 0
ok 51 - fetch --recurse-submodules updates name-conflicted, unpopulated submodule
ok 1 - set up --reverse example
ok 2 - log --full-history --topo-order
ok 11 - bisection diff --bisect c1 ^root <= 0
ok 2 - --reverse --parents --full-history combines correctly
ok 3 - repack does not lose detached HEAD
ok 4 - rev-list --graph --no-walk is forbidden
ok 13 - rev-list override and infinities
ok 150 - link prune fetch.prune=true remote.origin.prune=unset fetch.pruneTags=true remote.origin.pruneTags=unset; branch:pruned tag:pruned
# passed all 4 test(s)
1..4
*** t6019-rev-list-ancestry-path.sh ***
ok 3 - log --full-history
ok 3 - --boundary does too
# passed all 3 test(s)
1..3
ok 12 - bisection diff --bisect c2 ^root <= 0
*** t6020-bundle-misc.sh ***
ok 13 - bisection diff --bisect c3 ^root <= 0
ok 4 - log --full-history --date-order
ok 23 - implicitly construct combine: filter with repeated flags
ok 24 - upload-pack complains of bogus filter config
ok 14 - bisection diff --bisect E ^F <= 0
ok 5 - log --full-history --author-date-order
ok 1 - rev-list has correct number of entries
ok 20 - git_pull_ff: removed submodule leaves submodule containing a .git directory alone
ok 15 - bisection diff --bisect e1 ^F <= 0
ok 25 - upload-pack fails banned object filters
ok 2 - simple topo order
ok 6 - log --full-history -- file
ok 16 - bisection diff --bisect e2 ^F <= 0
ok 3 - simple date order
ok 17 - bisection diff --bisect e3 ^F <= 0
ok 96 - fetch exact SHA1
ok 7 - log --full-history --topo-order -- file
ok 46 - upload-pack respects client shallows
ok 151 - name prune fetch.prune=unset remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=true; branch:pruned tag:pruned
ok 18 - bisection diff --bisect e4 ^F <= 0
ok 4 - simple author-date order
ok 8 - log --full-history --date-order -- file
ok 26 - upload-pack fails banned combine object filters
ok 52 - fetch --all with --recurse-submodules
ok 5 - two diamonds topo order (g6)
ok 19 - bisection diff --bisect e5 ^F <= 0
ok 1 - usage: git bundle create needs an argument
ok 9 - log --full-history --author-date-order -- file
ok 27 - upload-pack fails banned object filters with fallback
ok 2 - usage: git bundle verify needs an argument
ok 3 - usage: git bundle list-heads needs an argument
ok 20 - bisection diff --bisect e6 ^F <= 0
ok 6 - multiple heads
ok 4 - usage: git bundle unbundle needs an argument
ok 1 - setup
ok 10 - log --simplify-merges -- file
ok 7 - multiple heads, prune at a1
ok 2 - rev-parse --glob=refs/heads/subspace/*
ok 21 - bisection diff --bisect e7 ^F <= 0
ok 3 - rev-parse --glob=heads/subspace/*
ok 22 - bisection diff --bisect f1 ^F <= 0
ok 11 - log --simplify-merges --topo-order -- file
ok 8 - multiple heads, prune at l1
ok 4 - rev-parse --glob=refs/heads/subspace/
ok 5 - rev-parse --glob=heads/subspace/
ok 23 - bisection diff --bisect f2 ^F <= 0
ok 6 - rev-parse --glob=heads/subspace
ok 12 - log --simplify-merges --date-order -- file
ok 9 - cross-epoch, head at l5, prune at l1
not ok 7 - rev-parse accepts --glob as detached option # TODO known breakage
not ok 8 - rev-parse is not confused by option-like glob # TODO known breakage
ok 13 - log --simplify-merges --author-date-order -- file
ok 24 - bisection diff --bisect f3 ^F <= 0
ok 10 - duplicated head arguments
ok 152 - link prune fetch.prune=unset remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=true; branch:pruned tag:pruned
ok 9 - rev-parse --branches=subspace/*
ok 14 - log -- file
ok 10 - rev-parse --branches=subspace/
ok 25 - bisection diff --bisect f4 ^F <= 0
ok 11 - rev-parse --branches=subspace
ok 11 - prune near topo
ok 47 - ensure that multiple fetches in same process from a shallow repo works
ok 12 - rev-parse --glob=heads/subspace/* --glob=heads/other/*
ok 15 - log --topo-order -- file
ok 7 - merge-base for octopus-step (setup)
ok 13 - rev-parse --glob=heads/someref/* main
ok 12 - head has no parent
ok 26 - bisection diff --bisect E ^F <= 0
ok 53 - fetch --all with --recurse-submodules with multiple
ok 14 - rev-parse --glob=heads/*
ok 1 - set up rev-list --graph test
ok 16 - log --date-order -- file
ok 13 - two nodes - one head, one base
ok 27 - bisection diff --bisect V ^U <= 1
ok 21 - git_pull_ff: replace submodule with a directory must fail
ok 15 - rev-parse --tags=foo
ok 8 - merge-base A B C
ok 2 - --graph --all
ok 16 - rev-parse --remotes=foo
ok 17 - log --author-date-order -- file
ok 14 - three nodes one head, one internal, one base
ok 28 - bisection diff --bisect V ^U ^u1 ^u2 ^u3 <= 0
ok 17 - rev-parse --exclude with --branches
ok 3 - --graph --simplify-by-decoration
ok 97 - fetch exact SHA1 in protocol v2
ok 28 - upload-pack limits tree depth filters
ok 18 - rev-parse --exclude with --all
ok 18 - log --first-parent -- another-file
ok 4 - setup: get rid of decorations on B
ok 15 - linear prune l2 ^root
ok 29 - bisection diff --bisect u1 ^U <= 0
ok 19 - rev-parse accumulates multiple --exclude
ok 5 - --graph --simplify-by-decoration prune branch B
ok 20 - rev-parse --branches clears --exclude
ok 16 - linear prune l2 ^l0
ok 19 - log --first-parent --topo-order -- another-file
ok 30 - bisection diff --bisect u2 ^U <= 0
ok 153 - name prune fetch.prune=true remote.origin.prune=unset fetch.pruneTags=true remote.origin.pruneTags=unset; branch:pruned tag:pruned
ok 6 - --graph --full-history -- bar.txt
ok 21 - rev-parse --tags clears --exclude
ok 7 - --graph --full-history --simplify-merges -- bar.txt
ok 31 - bisection diff --bisect u3 ^U <= 0
ok 20 - log --first-parent L
ok 17 - linear prune l2 ^l1
ok 22 - rev-parse --all clears --exclude
ok 8 - --graph -- bar.txt
ok 23 - rev-parse --exclude=glob with --branches=glob
ok 32 - bisection diff --bisect u4 ^U <= 0
ok 21 - log --exclude-first-parent-only F ^L
ok 9 - --graph --sparse -- bar.txt
ok 18 - linear prune l5 ^a4
ok 24 - rev-parse --exclude=glob with --tags=glob
ok 1 - setup
ok 10 - --graph ^C4
ok 33 - bisection diff --bisect u5 ^U <= 0
ok 25 - rev-parse --exclude=glob with --remotes=glob
ok 2 - log D..M
ok 22 - log F ^L
ok 19 - linear prune l5 ^l3
ok 26 - rev-parse --exclude=ref with --branches=glob
ok 11 - --graph ^C3
ok 98 - shallow fetch reachable SHA1 (but not a ref), allowtipsha1inwant=true
ok 3 - log --ancestry-path D..M
ok 27 - rev-parse --exclude=ref with --tags=glob
ok 34 - --bisect l5 ^root
ok 12 - --graph --boundary ^C3
ok 20 - linear prune l5 ^l4
# passed all 12 test(s)
1..12
ok 4 - log --ancestry-path=F D..M
ok 23 - log L ^F
ok 28 - rev-parse --exclude=ref with --remotes=glob
ok 54 - fetch --all with --no-recurse-submodules only fetches superproject
# passed all 54 test(s)
1..54
ok 35 - --bisect l5 ^root ^c3
*** t6021-rev-list-exclude-hidden.sh ***
ok 29 - rev-parse --exclude-hidden=fetch with --all
ok 5 - log --ancestry-path=G D..M
ok 1 - setup
ok 29 - partial clone fetches blobs pointed to by refs even if normally filtered out
ok 21 - max-count 10 - topo order
ok 6 - log --ancestry-path=H D..M
ok 30 - rev-parse --exclude-hidden=fetch with --all
ok 36 - --bisect l5 ^root ^c3 ^b4
ok 48 - deepen-relative
ok 24 - log --exclude-first-parent-only L ^F
ok 2 - check rev-list main
ok 31 - rev-parse --exclude-hidden=fetch with --glob
ok 7 - log --ancestry-path=K D..M
ok 25 - log --exclude-first-parent-only --first-parent L ^F
ok 37 - --bisect l3 ^root ^c3 ^b4
ok 22 - max-count 10 - non topo order
ok 32 - rev-parse --exclude-hidden=fetch can be passed once per pseudo-ref
ok 8 - log --ancestry-path=F --ancestry-path=K D..M
ok 33 - rev-parse --exclude-hidden=fetch can only be passed once per pseudo-ref
ok 9 - criss-cross merge-base for octopus-step
ok 34 - rev-parse --exclude-hidden=fetch fails with --branches
ok 9 - log D..M -- M.t
ok 35 - rev-parse --exclude-hidden=fetch fails with --branches=pattern
ok 3 - check log --stat main
ok 38 - --bisect l5 ^b3 ^a3 ^b4 ^a4
ok 36 - rev-parse --exclude-hidden=fetch fails with --tags
ok 154 - link prune fetch.prune=true remote.origin.prune=unset fetch.pruneTags=true remote.origin.pruneTags=unset; branch:pruned tag:pruned
ok 26 - log --full-history E -- lost
ok 10 - log --ancestry-path D..M -- M.t
ok 37 - rev-parse --exclude-hidden=fetch fails with --tags=pattern
ok 23 - --max-age=c3, no --topo-order
ok 11 - log F...I
ok 4 - check rev-list side-1 ^side-4
ok 38 - rev-parse --exclude-hidden=fetch fails with --remotes
ok 27 - full history simplification without parent
ok 39 - rev-parse --exclude-hidden=fetch fails with --remotes=pattern
ok 39 - --bisect l4 ^a2 ^a3 ^b ^a4
ok 12 - log --ancestry-path F...I
ok 40 - rev-parse --exclude-hidden=receive with --all
ok 13 - log G..M -- G.t
ok 24 - --max-age=c3, --topo-order
ok 41 - rev-parse --exclude-hidden=receive with --all
ok 28 - --full-diff is not affected by --parents
ok 5 - check log --stat side-1 ^side-4
ok 40 - --bisect l3 ^a2 ^a3 ^b ^a4
ok 5 - setup
ok 14 - log --ancestry-path G..M -- G.t
ok 42 - rev-parse --exclude-hidden=receive with --glob
ok 15 - log --ancestry-path --simplify-merges G^..M -- G.t
ok 25 - one specified head reachable from another a4, c3, --topo-order
ok 43 - rev-parse --exclude-hidden=receive can be passed once per pseudo-ref
ok 41 - --bisect a4 ^a2 ^a3 ^b4
ok 6 - check rev-list side-1 ^side-7 --
ok 30 - fetch what is specified on CLI even if already promised
ok 44 - rev-parse --exclude-hidden=receive can only be passed once per pseudo-ref
ok 45 - rev-parse --exclude-hidden=receive fails with --branches
ok 46 - rev-parse --exclude-hidden=receive fails with --branches=pattern
ok 49 - usage: --negotiate-only without --negotiation-tip
ok 26 - one specified head reachable from another c3, a4, --topo-order
ok 42 - --bisect a4 ^a2 ^a3 ^b4 ^c2
ok 47 - rev-parse --exclude-hidden=receive fails with --tags
ok 50 - usage: --negotiate-only with --recurse-submodules
ok 48 - rev-parse --exclude-hidden=receive fails with --tags=pattern
ok 43 - --bisect a4 ^a2 ^a3 ^b4 ^c2 ^c3
ok 49 - rev-parse --exclude-hidden=receive fails with --remotes
ok 7 - check log --stat side-1 ^side-7 --
ok 99 - deny fetch unreachable SHA1, allowtipsha1inwant=true
ok 22 - git_pull_ff: replace submodule containing a .git directory with a directory must fail
ok 27 - one specified head reachable from another a4, c3, no --topo-order
ok 50 - rev-parse --exclude-hidden=receive fails with --remotes=pattern
ok 44 - --bisect a4 ^a2 ^a3 ^b4
ok 6 - create bundle from special rev: main^!
ok 1 - setup
ok 28 - one specified head reachable from another c3, a4, no --topo-order
ok 51 - rev-parse --exclude-hidden=uploadpack with --all
ok 2 - invalid section
ok 8 - check rev-list side-1 ^side-7 -- file-1
ok 3 - fetch: passed multiple times
ok 52 - rev-parse --exclude-hidden=uploadpack with --all
ok 4 - fetch: without hiddenRefs
ok 29 - graph with c3 and a4 parents of head
ok 31 - setup src repo for sparse filter
ok 45 - --bisect c3 ^a2 ^a3 ^b4 ^c2
ok 5 - fetch: hidden via transfer.hideRefs
ok 53 - rev-parse --exclude-hidden=uploadpack with --glob
*** t6022-rev-list-missing.sh ***
ok 9 - check log --stat side-1 ^side-7 -- file-1
ok 155 - name prune fetch.prune=false remote.origin.prune=true fetch.pruneTags=false remote.origin.pruneTags=true; branch:pruned tag:pruned
ok 6 - fetch: hidden via fetch.hideRefs
ok 30 - graph with a4 and c3 parents of head
ok 54 - rev-parse --exclude-hidden=uploadpack can be passed once per pseudo-ref
ok 14 - dodecapus
ok 31 - head ^head --topo-order
ok 7 - fetch: respects both transfer.hideRefs and fetch.hideRefs
ok 46 - set up fake --bisect refs
ok 55 - rev-parse --exclude-hidden=uploadpack can only be passed once per pseudo-ref
ok 7 - create bundle with --max-count option
ok 10 - using reflog to find the fork point
ok 32 - head ^head no --topo-order
ok 10 - check rev-list side-1 ^side-7 -- file-2
ok 8 - fetch: negation without hidden refs marks everything as uninteresting
ok 56 - rev-parse --exclude-hidden=uploadpack fails with --branches
ok 47 - rev-list --bisect can default to good/bad refs
ok 11 - --fork-point works with empty reflog
ok 9 - fetch: negation with hidden refs marks them as interesting
ok 57 - rev-parse --exclude-hidden=uploadpack fails with --branches=pattern
ok 16 - setup criss-cross
ok 58 - rev-parse --exclude-hidden=uploadpack fails with --tags
ok 10 - fetch: hidden refs and excludes work together
ok 48 - rev-parse --bisect can default to good/bad refs
ok 17 - criss-cross: rev-list --ancestry-path cb..bc
ok 33 - simple topo order (l5r1)
ok 59 - rev-parse --exclude-hidden=uploadpack fails with --tags=pattern
ok 32 - partial clone with sparse filter succeeds
ok 11 - check log --stat side-1 ^side-7 -- file-2
ok 11 - fetch: excluded hidden refs get reset
ok 18 - criss-cross: rev-list --ancestry-path --all ^cb
ok 60 - rev-parse --exclude-hidden=uploadpack fails with --remotes
# passed all 18 test(s)
1..18
ok 12 - fetch: excluded hidden refs can be used with multiple pseudo-refs
ok 61 - rev-parse --exclude-hidden=uploadpack fails with --remotes=pattern
ok 51 - file:// --negotiate-only
ok 100 - shallow fetch reachable SHA1 (but not a ref), allowtipsha1inwant=false
*** t6030-bisect-porcelain.sh ***
ok 49 - --bisect --first-parent
ok 13 - fetch: works with --glob
ok 34 - simple topo order (r1l5)
ok 12 - check rev-list side-3 ^side-4 -- file-3
ok 62 - rev-list --exclude=glob with --branches=glob
ok 14 - fetch: operates on stripped refs by default
ok 50 - --first-parent
ok 15 - fetch: does not hide namespace by default
ok 35 - don't print things unreachable from one branch
ok 13 - check log --stat side-3 ^side-4 -- file-3
ok 63 - rev-list --exclude=glob with --tags=glob
ok 16 - fetch: can operate on unstripped refs
ok 51 - --bisect-vars --first-parent
ok 17 - fetch: fails with --remotes
ok 33 - partial clone with unresolvable sparse filter fails cleanly
ok 8 - create bundle with --since option
ok 64 - rev-list --exclude=glob with --remotes=glob
ok 18 - fetch: fails with --remotes=pattern
ok 14 - check rev-list side-3 ^side-2
ok 19 - fetch: fails with --branches
ok 36 - --topo-order a4 l3
ok 65 - rev-list --exclude=ref with --branches=glob
ok 20 - fetch: fails with --branches=pattern
# passed all 36 test(s)
1..36
ok 21 - fetch: fails with --tags
ok 66 - rev-list --exclude=ref with --tags=glob
ok 15 - check log --stat side-3 ^side-2
ok 22 - fetch: fails with --tags=pattern
*** t6040-tracking-info.sh ***
ok 23 - receive: passed multiple times
ok 67 - rev-list --exclude=ref with --remotes=glob
ok 156 - link prune fetch.prune=false remote.origin.prune=true fetch.pruneTags=false remote.origin.pruneTags=true; branch:pruned tag:pruned
ok 16 - check rev-list side-3 ^side-2 -- file-1
ok 24 - receive: without hiddenRefs
ok 68 - rev-list --glob=refs/heads/subspace/*
ok 52 - --bisect-all --first-parent
ok 25 - receive: hidden via transfer.hideRefs
ok 53 - --bisect without any revisions
ok 17 - check log --stat side-3 ^side-2 -- file-1
# passed all 53 test(s)
1..53
ok 26 - receive: hidden via receive.hideRefs
ok 69 - rev-list --glob refs/heads/subspace/*
ok 27 - receive: respects both transfer.hideRefs and receive.hideRefs
*** t6041-bisect-submodule.sh ***
ok 28 - receive: negation without hidden refs marks everything as uninteresting
ok 52 - file:// --negotiate-only with protocol v0
ok 18 - check rev-list --all
ok 70 - rev-list not confused by option-like --glob arg
ok 29 - receive: negation with hidden refs marks them as interesting
not ok 23 - git_pull_ff: replace submodule with a file must fail # TODO known breakage
ok 71 - rev-list --glob=heads/subspace/*
ok 30 - receive: hidden refs and excludes work together
ok 15 - ancestors with the same commit time
ok 72 - rev-list --glob=refs/heads/subspace/
ok 31 - receive: excluded hidden refs get reset
# passed all 15 test(s)
1..15
ok 32 - receive: excluded hidden refs can be used with multiple pseudo-refs
ok 1 - create repository and alternate directory
ok 73 - rev-list --glob=heads/subspace/
ok 53 - push with custom path does not request v2
ok 19 - check log --stat --all
ok 33 - receive: works with --glob
*** t6050-replace.sh ***
ok 74 - rev-list --glob=heads/subspace
ok 9 - create bundle 1 - no prerequisites
ok 2 - rev-list --missing=error fails with missing object HEAD~1
ok 1 - bisect usage
ok 34 - receive: operates on stripped refs by default
ok 20 - check rev-list --all --not --branches
ok 75 - rev-list --branches=subspace/*
ok 54 - fetch with custom path does request v2
ok 35 - receive: does not hide namespace by default
ok 3 - rev-list --missing=error fails with missing object HEAD~1^{tree}
ok 36 - receive: can operate on unstripped refs
ok 76 - rev-list --branches=subspace/
ok 37 - receive: fails with --remotes
ok 4 - rev-list --missing=error fails with missing object HEAD:1.t
ok 55 - archive with custom path does not request v2
ok 21 - check log --stat --all --not --branches
ok 38 - receive: fails with --remotes=pattern
ok 101 - deny fetch unreachable SHA1, allowtipsha1inwant=false
ok 39 - receive: fails with --branches
ok 77 - rev-list --branches=subspace
ok 40 - receive: fails with --branches=pattern
ok 56 - reject client packfile-uris if not advertised
ok 157 - name prune fetch.prune=true remote.origin.prune=false fetch.pruneTags=true remote.origin.pruneTags=false; branch:kept tag:kept
ok 22 - check rev-list --glob=refs/heads
ok 78 - rev-list --branches
ok 41 - receive: fails with --tags
ok 2 - set up basic repo with 1 file (hello) and 4 commits
ok 5 - rev-list --missing=allow-any with missing HEAD~1
ok 29 - setup rebuild repo
ok 42 - receive: fails with --tags=pattern
ok 79 - rev-list --glob=heads/someref/* main
# passed all 56 test(s)
# SKIP no web server found at ''
1..56
ok 43 - uploadpack: passed multiple times
ok 44 - uploadpack: without hiddenRefs
ok 30 - log -- file
ok 23 - check log --stat --glob=refs/heads
ok 3 - bisect starts with only one bad
ok 80 - rev-list --glob=heads/subspace/* --glob=heads/other/*
ok 45 - uploadpack: hidden via transfer.hideRefs
ok 12 - merge-base --octopus --all for complex tree
# passed all 12 test(s)
1..12
ok 6 - rev-list --missing=print with missing HEAD~1
ok 46 - uploadpack: hidden via uploadpack.hideRefs
*** t6060-merge-index.sh ***
ok 81 - rev-list --glob=heads/*
ok 24 - check rev-list --glob=refs/heads --
ok 47 - uploadpack: respects both transfer.hideRefs and uploadpack.hideRefs
ok 31 - log --show-pulls -- file
*** t6100-rev-list-in-order.sh ***
ok 4 - bisect does not start with only one good
ok 48 - uploadpack: negation without hidden refs marks everything as uninteresting
ok 82 - rev-list --tags=foo
ok 49 - uploadpack: negation with hidden refs marks them as interesting
ok 83 - rev-list --tags
ok 10 - create bundle 2 - has prerequisites
ok 7 - rev-list --missing=allow-any with missing HEAD~1^{tree}
ok 32 - log --full-history --topo-order -- file
ok 50 - uploadpack: hidden refs and excludes work together
ok 84 - rev-list --remotes=foo
ok 51 - uploadpack: excluded hidden refs get reset
ok 5 - bisect start with one bad and good
ok 52 - uploadpack: excluded hidden refs can be used with multiple pseudo-refs
ok 85 - rev-list --exclude with --branches
ok 53 - uploadpack: works with --glob
ok 33 - log --simplify-merges --topo-order --show-pulls -- file
ok 25 - check log --stat --glob=refs/heads --
ok 86 - rev-list --exclude with --all
ok 54 - uploadpack: operates on stripped refs by default
ok 8 - rev-list --missing=print with missing HEAD~1^{tree}
ok 55 - uploadpack: does not hide namespace by default
ok 87 - rev-list accumulates multiple --exclude
ok 26 - check rev-list --glob=refs/heads -- file-1
ok 88 - rev-list should succeed with empty output on empty stdin
ok 34 - log --simplify-merges --topo-order -- file
ok 56 - uploadpack: can operate on unstripped refs
ok 89 - rev-list should succeed with empty output with all refs excluded
ok 11 - fail to verify bundle without prerequisites
ok 57 - uploadpack: fails with --remotes
ok 158 - link prune fetch.prune=true remote.origin.prune=false fetch.pruneTags=true remote.origin.pruneTags=false; branch:kept tag:kept
ok 9 - rev-list --missing=allow-any with missing HEAD:1.t
ok 58 - uploadpack: fails with --remotes=pattern
ok 35 - log --first-parent -- file
ok 90 - rev-list should succeed with empty output with empty --all
ok 27 - check log --stat --glob=refs/heads -- file-1
ok 59 - uploadpack: fails with --branches
ok 91 - rev-list should succeed with empty output with empty glob
ok 92 - rev-list should succeed with empty output when ignoring missing
ok 60 - uploadpack: fails with --branches=pattern
ok 6 - bisect fails if given any junk instead of revs
ok 61 - uploadpack: fails with --tags
not ok 24 - git_pull_ff: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 10 - rev-list --missing=print with missing HEAD:1.t
ok 36 - log --first-parent --show-pulls -- file
ok 62 - uploadpack: fails with --tags=pattern
ok 28 - check rev-list --end-of-options -dashed-branch
# passed all 62 test(s)
1..62
*** t6101-rev-parse-parents.sh ***
ok 7 - bisect start without -- takes unknown arg as pathspec
ok 102 - fetch follows tags by default
ok 29 - check log --stat --end-of-options -dashed-branch
ok 11 - --missing=allow-any with tip 'annot_tag' missing and tip ''
ok 37 - log --topo-order --ancestry-path A..HEAD -- file
ok 1 - set up buggy branch
ok 30 - check rev-list --all --not refs/heads/main
ok 38 - log --topo-order --show-pulls --ancestry-path A..HEAD -- file
ok 12 - --missing=print with tip 'annot_tag' missing and tip ''
ok 39 - log --topo-order --full-history --ancestry-path A..HEAD -- file
ok 1 - setup
ok 1 - setup diverging branches
ok 12 - create bundle 3 - two refs, same object
ok 31 - check log --stat --all --not refs/heads/main
ok 103 - peeled advertisements are not considered ref tips
ok 2 - replace the author
ok 159 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune --prune-tags origin +refs/heads/*:refs/remotes/origin/*; branch:pruned tag:kept
ok 2 - branch -v
ok 2 - read-tree does not resolve content merge
ok 32 - not only --stdin
ok 93 - shortlog accepts --glob/--tags/--remotes
ok 13 - --missing=allow-any with tip 'annot_tag' missing and tip 'HEAD'
ok 3 - branch -vv
ok 40 - log --topo-order --simplify-merges --ancestry-path A..HEAD -- file
ok 33 - pseudo-opt with missing value
not ok 94 - shortlog accepts --glob as detached option # TODO known breakage
ok 4 - checkout (diverged from upstream)
ok 3 - test --no-replace-objects option
ok 34 - pseudo-opt with invalid value
not ok 95 - shortlog --glob is not confused by option-like argument # TODO known breakage
# still have 4 known breakage(s)
# passed all remaining 91 test(s)
1..95
ok 35 - unknown option without --end-of-options
ok 5 - checkout with local tracked branch
ok 4 - test GIT_NO_REPLACE_OBJECTS env variable
ok 41 - log --topo-order --simplify-merges --show-pulls --ancestry-path A..HEAD -- file
*** t6102-rev-list-unexpected-objects.sh ***
ok 1 - setup a commit history with trees, blobs
ok 14 - --missing=print with tip 'annot_tag' missing and tip 'HEAD'
ok 6 - checkout (upstream is gone)
ok 42 - log --graph --simplify-merges --show-pulls
ok 36 - --not on command line does not influence revisions read via --stdin
# passed all 42 test(s)
1..42
ok 5 - test core.usereplacerefs config option
ok 7 - checkout (up-to-date with upstream)
*** t6110-rev-list-sparse.sh ***
ok 2 - rev-list --in-commit-order
ok 37 - --not via stdin does not influence revisions from command line
ok 15 - --missing=allow-any with tip 'regul_tag' missing and tip ''
# passed all 37 test(s)
1..37
ok 6 - tag replaced commit
ok 8 - bisect reset: back in a branch checked out also elsewhere
ok 8 - status (diverged from upstream)
ok 3 - git merge-index git-merge-one-file resolves
ok 3 - rev-list lists blobs and trees after commits
*** t6111-rev-list-treesame.sh ***
ok 16 - --missing=print with tip 'regul_tag' missing and tip ''
# passed all 3 test(s)
1..3
ok 9 - status (upstream is gone)
*** t6112-rev-list-filters-objects.sh ***
ok 9 - bisect reset: back in the main branch
ok 13 - create bundle 4 - with tags
ok 4 - setup bare merge
ok 10 - status (up-to-date with upstream)
ok 7 - "git fsck" works
ok 17 - --missing=allow-any with tip 'regul_tag' missing and tip 'HEAD'
ok 11 - status -s -b (diverged from upstream)
ok 10 - bisect reset: back in another branch
ok 160 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune --prune-tags origin +refs/heads/*:refs/remotes/origin/*; branch:pruned tag:kept
ok 11 - bisect reset when not bisecting
ok 5 - merge-one-file fails without a work tree
ok 12 - bisect reset cleans up even when not bisecting
ok 12 - status -s -b --no-ahead-behind (diverged from upstream)
ok 18 - --missing=print with tip 'regul_tag' missing and tip 'HEAD'
ok 13 - status.aheadbehind=false status -s -b (diverged from upstream)
ok 104 - pushing a specific ref applies remote.$name.push as refmap
ok 19 - --missing=allow-any with tip 'a_branch' missing and tip ''
ok 14 - status --long --branch
ok 1 - setup well-formed objects
ok 20 - --missing=print with tip 'a_branch' missing and tip ''
ok 15 - status --long --branch
ok 6 - merge-one-file respects GIT_WORK_TREE
ok 13 - bisect reset removes packed refs
ok 2 - setup unexpected non-blob entry
ok 3 - TODO (should fail!): traverse unexpected non-blob entry (lone)
ok 4 - traverse unexpected non-blob entry (seen)
ok 16 - status --long --branch --no-ahead-behind
ok 21 - --missing=allow-any with tip 'a_branch' missing and tip 'HEAD'
ok 5 - setup unexpected non-tree entry
ok 6 - traverse unexpected non-tree entry (lone)
ok 17 - status.aheadbehind=false status --long --branch
ok 7 - traverse unexpected non-tree entry (seen)
ok 14 - bisect reset removes bisect state after --no-checkout
ok 8 - repack, clone and fetch work
ok 8 - setup unexpected non-commit parent
ok 25 - git_pull_ff: modified submodule does not update submodule work tree
ok 9 - traverse unexpected non-commit parent (lone)
ok 18 - status -s -b (upstream is gone)
ok 161 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=true remote.origin.pruneTags=unset --prune origin +refs/heads/*:refs/remotes/origin/*; branch:pruned tag:kept
ok 22 - --missing=print with tip 'a_branch' missing and tip 'HEAD'
ok 10 - traverse unexpected non-commit parent (seen)
ok 11 - setup unexpected non-tree root
ok 9 - "git replace" listing and deleting
ok 19 - status -s -b (up-to-date with upstream)
ok 12 - traverse unexpected non-tree root (lone)
ok 23 - --missing=allow-any with tip 'HEAD~1' missing and tip ''
ok 13 - traverse unexpected non-tree root (seen)
ok 14 - clone from bundle
ok 20 - fail to track lightweight tags
ok 10 - "git replace" replacing
ok 14 - setup unexpected non-commit tag
ok 24 - --missing=print with tip 'HEAD~1' missing and tip ''
ok 7 - merge-one-file respects core.worktree
ok 15 - traverse unexpected non-commit tag (lone)
# passed all 7 test(s)
1..7
ok 15 - bisect start: back in good branch
ok 1 - setup r1
ok 16 - traverse unexpected non-commit tag (seen)
ok 21 - fail to track annotated tags
*** t6113-rev-list-bitmap-filters.sh ***
ok 1 - setup
ok 16 - bisect start: no ".git/BISECT_START" created if junk rev
ok 2 - rev-list --first-parent --boundary
ok 34 - fetch lazy-fetches only to resolve deltas
# passed all 2 test(s)
1..2
ok 2 - verify blob:none omits all 5 blobs
ok 25 - --missing=allow-any with tip 'HEAD~1' missing and tip 'HEAD'
ok 11 - "git replace" resolves sha1
ok 17 - setup unexpected non-tree tag
*** t6114-keep-packs.sh ***
ok 15 - unfiltered bundle with --objects
ok 18 - traverse unexpected non-tree tag (lone)
ok 105 - with no remote.$name.push, it is not used as refmap
ok 19 - traverse unexpected non-tree tag (seen)
ok 3 - specify blob explicitly prevents filtering
ok 17 - bisect start: existing ".git/BISECT_START" not modified if junk rev
ok 26 - --missing=print with tip 'HEAD~1' missing and tip 'HEAD'
ok 20 - setup unexpected non-blob tag
ok 22 - --set-upstream-to does not change branch
ok 21 - traverse unexpected non-blob tag (lone)
ok 4 - verify emitted+omitted == all
ok 22 - traverse unexpected non-blob tag (seen)
# passed all 22 test(s)
1..22
ok 16 - full bundle upto annotated tag
ok 162 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=true remote.origin.pruneTags=unset --prune origin +refs/heads/*:refs/remotes/origin/*; branch:pruned tag:kept
ok 27 - --missing=allow-any with tip 'HEAD~1^{tree}' missing and tip ''
*** t6115-rev-list-du.sh ***
ok 28 - --missing=print with tip 'HEAD~1^{tree}' missing and tip ''
ok 18 - bisect start: no ".git/BISECT_START" if mistaken rev
ok 5 - setup r2
ok 23 - --set-upstream-to @{-1}
# passed all 23 test(s)
1..23
ok 17 - clone from full bundle upto annotated tag
*** t6120-describe.sh ***
ok 6 - verify blob:limit=500 omits all blobs
ok 12 - create parallel branch without the bug
ok 19 - bisect start: no ".git/BISECT_START" if checkout error
ok 29 - --missing=allow-any with tip 'HEAD~1^{tree}' missing and tip 'HEAD'
ok 7 - verify emitted+omitted == all
ok 8 - verify blob:limit=1000
ok 18 - incremental bundle between two annotated tags
ok 9 - verify blob:limit=1001
ok 20 - bisect skip: successful result
ok 30 - --missing=print with tip 'HEAD~1^{tree}' missing and tip 'HEAD'
ok 13 - push to cloned repo
ok 10 - verify blob:limit=1k
ok 31 - --missing=allow-any with tip 'HEAD:1.t' missing and tip ''
ok 11 - verify blob:limit=1m
ok 163 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=true --prune origin +refs/heads/*:refs/remotes/origin/*; branch:pruned tag:kept
ok 32 - --missing=print with tip 'HEAD:1.t' missing and tip ''
ok 106 - with no remote.$name.push, upstream mapping is used
ok 12 - setup object-type
ok 21 - bisect skip: cannot tell between 3 commits
ok 13 - verify object:type= fails with invalid type
ok 1 - setup
ok 33 - --missing=allow-any with tip 'HEAD:1.t' missing and tip 'HEAD'
ok 14 - verify object:type=blob prints blob and commit
ok 1 - setup
ok 1 - set up bitmapped repo
ok 2 - log 
ok 15 - verify object:type=tree prints tree and commit
ok 3 - log 
ok 2 - filters fallback to non-bitmap traversal
ok 16 - verify object:type=commit prints commit
ok 2 - --no-kept-objects excludes trees and blobs in .keep packs
ok 14 - push branch with replacement
ok 34 - --missing=print with tip 'HEAD:1.t' missing and tip 'HEAD'
ok 22 - bisect skip: cannot tell between 2 commits
ok 4 - log --topo-order
ok 17 - verify object:type=tag prints tag
ok 1 - set up repository
ok 3 - blob:none filter
ok 2 - generate expected size (HEAD)
ok 5 - log -- file
ok 26 - git_pull_ff: modified submodule does not update submodule work tree to invalid commit
ok 18 - verify object:type=blob prints only blob with --filter-provided-objects
ok 3 - rev-list --disk-usage without bitmaps (HEAD)
ok 4 - blob:none filter with specified blob
ok 4 - rev-list --disk-usage with bitmaps (HEAD)
ok 19 - verify object:type=tree prints only tree with --filter-provided-objects
ok 6 - log --parents -- file
ok 5 - generate expected size (--objects HEAD)
ok 3 - --no-kept-objects excludes kept non-MIDX object
# passed all 3 test(s)
1..3
ok 20 - verify object:type=commit prints only commit with --filter-provided-objects
ok 7 - log --full-history -- file
ok 6 - rev-list --disk-usage without bitmaps (--objects HEAD)
ok 5 - blob:limit filter
*** t6130-pathspec-noglob.sh ***
ok 7 - rev-list --disk-usage with bitmaps (--objects HEAD)
ok 164 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=true --prune origin +refs/heads/*:refs/remotes/origin/*; branch:pruned tag:kept
ok 21 - verify object:type=tag prints only tag with --filter-provided-objects
ok 8 - generate expected size (--objects HEAD^..HEAD)
ok 8 - log --full-history --parents -- file
ok 9 - rev-list --disk-usage without bitmaps (--objects HEAD^..HEAD)
ok 23 - bisect skip: with commit both bad and skipped
ok 6 - blob:limit filter with specified blob
ok 35 - --missing=print-info with missing 'HEAD~1'
ok 10 - rev-list --disk-usage with bitmaps (--objects HEAD^..HEAD)
ok 9 - log --simplify-merges -- file
ok 10 - log --first-parent
ok 19 - filtered bundle: blob:none
ok 15 - fetch branch with replacement
ok 7 - tree:0 filter
ok 22 - setup r3
ok 23 - verify sparse:path=pattern1 fails
ok 11 - log --first-parent -- file
ok 24 - verify sparse:path=pattern2 fails
ok 11 - setup for --unpacked tests
ok 8 - tree:0 filter with specified blob, tree
ok 12 - log F..M
ok 12 - generate expected size (--all --objects --unpacked)
ok 25 - setup r3 part 2
ok 13 - rev-list --disk-usage without bitmaps (--all --objects --unpacked)
ok 9 - tree:1 filter
ok 13 - log F..M --topo-order
ok 14 - rev-list --disk-usage with bitmaps (--all --objects --unpacked)
ok 107 - push does not follow tags by default
ok 24 - git bisect run: args, stdout and stderr with no arguments
ok 26 - verify sparse:oid=OID omits top-level files
ok 36 - --missing=print-info with missing 'HEAD^{tree}'
ok 14 - log F..M -- file
ok 15 - rev-list --disk-usage=human
ok 15 - log --parents F..M -- file
ok 27 - verify sparse:oid=oid-ish omits top-level files
ok 16 - rev-list --disk-usage=human with bitmaps
ok 17 - rev-list use --disk-usage unproperly
ok 16 - log F..M --full-history -- file
ok 165 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset origin --prune-tags; branch:kept tag:kept
ok 16 - bisect and replacements
# passed all 17 test(s)
1..17
*** t6131-pathspec-icase.sh ***
ok 17 - log F..M --full-history --parents -- file
ok 17 - index-pack and replacements
ok 25 - git bisect run: args, stdout and stderr: "--" argument
ok 10 - object:type filter
ok 28 - rev-list W/ --missing=print and --missing=allow-any for trees
ok 1 - setup
ok 18 - log F..M --simplify-merges -- file
ok 37 - --missing=print-info with missing 'HEAD:foo'
ok 19 - log F..M --ancestry-path
ok 2 - describe HEAD
ok 3 - describe HEAD^
ok 20 - log F..M --ancestry-path -- file
ok 18 - not just commits
ok 4 - describe HEAD^^
ok 29 - verify tree:0 includes trees in "filtered" output
ok 5 - describe HEAD^^2
ok 19 - replaced and replacement objects must be of the same type
ok 21 - log F..M --ancestry-path --parents -- file
ok 6 - describe HEAD^^2^
ok 20 - filtered bundle: tree:0
ok 20 - -f option bypasses the type check
ok 30 - verify skipping tree iteration when not collecting omits
ok 11 - object:type filter with --filter-provided-objects
ok 22 - log F..M --ancestry-path --simplify-merges -- file
ok 7 - describe HEAD^^^
ok 26 - git bisect run: args, stdout and stderr: "--log foo --no-log bar" arguments
ok 21 - git cat-file --batch works on replace objects
ok 38 - --missing=print-info with missing 'HEAD:foo/bar'
ok 22 - test --format bogus
ok 23 - log F..M --first-parent
ok 31 - verify tree:1 includes root trees
ok 23 - test --format short
ok 8 - describe R-1-g2976a87~1
ok 24 - log F..M --first-parent -- file
ok 1 - create commits with glob characters
ok 2 - vanilla pathspec matches literally
ok 12 - combine filter
ok 9 - describe --tags HEAD
ok 3 - star pathspec globs
ok 166 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset origin --prune-tags; branch:kept tag:kept
ok 25 - log E..M --ancestry-path
ok 10 - describe --tags HEAD^
ok 24 - test --format medium
ok 4 - star pathspec globs
ok 32 - verify tree:2 includes root trees and immediate children
ok 11 - describe --tags HEAD^^
ok 5 - bracket pathspec globs and matches literal brackets
ok 25 - test --format long
ok 26 - log E..M --ancestry-path -- file
ok 13 - combine filter with --filter-provided-objects
ok 26 - setup fake editors
ok 12 - describe --tags HEAD^^2
ok 6 - bracket pathspec globs and matches literal brackets
ok 27 - log E..M --ancestry-path --parents -- file
ok 108 - push --follow-tags only pushes relevant tags
ok 7 - no-glob option matches literally (vanilla)
ok 27 - git_pull_ff: modified submodule does not update submodule work tree from invalid commit
ok 13 - describe --tags c-2-gd761ce1^0
ok 28 - log E..M --ancestry-path --simplify-merges -- file
ok 8 - no-glob option matches literally (vanilla)
ok 39 - --missing=print-info with missing 'HEAD:baz baz'
ok 14 - describe --tags HEAD^^2^
ok 27 - git bisect run: args, stdout and stderr: "--bisect-start" argument
ok 9 - no-glob option matches literally (star)
# passed all 39 test(s)
1..39
ok 29 - log G..M
*** t6132-pathspec-exclude.sh ***
ok 15 - describe --tags HEAD^^^
ok 10 - no-glob option matches literally (star)
ok 30 - log G..M --topo-order
ok 14 - bitmap traversal with --unpacked
ok 16 - describe --tags --exact-match HEAD^^^
# passed all 14 test(s)
1..14
ok 11 - no-glob option matches literally (bracket)
ok 1 - setup
ok 2 - start is valid
ok 31 - log G..M -- file
*** t6133-pathspec-rev-dwim.sh ***
ok 12 - no-glob option matches literally (bracket)
ok 17 - describe --all HEAD
ok 33 - verify tree:3 includes everything expected
ok 13 - no-glob option disables :(literal)
ok 3 - start^0
ok 27 - --edit with and without already replaced object
ok 18 - describe --all HEAD^
ok 14 - no-glob environment variable works
ok 4 - start^1 not valid
ok 32 - log G..M --parents -- file
ok 19 - describe --all HEAD^^^
ok 28 - git bisect run: negative exit code
ok 5 - second^1 = second^
ok 20 - describe --long HEAD^^2^
ok 15 - blame takes global pathspec flags
ok 33 - log G..M --full-history -- file
ok 6 - final^1^1^1
ok 34 - combine:... for a simple combination
ok 21 - describe --long HEAD^^2
ok 34 - log G..M --full-history --parents -- file
ok 7 - final^1^1^1 = final^^^
ok 22 - describe --tags
ok 35 - log G..M --simplify-merges -- file
ok 28 - --edit and change nothing or command failed
ok 21 - filtered bundle: tree:1
ok 16 - setup xxx/bar
ok 8 - final^1^2
ok 167 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset origin --prune --prune-tags; branch:pruned tag:pruned
ok 35 - combine:... with URL encoding
ok 23 - describe --first-parent --tags
ok 36 - log G..M --ancestry-path
ok 9 - final^1^2 != final^1^1
ok 36 - combine:... while URL-encoding things that should not be
ok 17 - **/ works with :(glob)
ok 10 - final^1^3 not valid
ok 24 - describe --tags --no-exact-match HEAD
ok 37 - combine: with nothing after the :
ok 11 - --verify start2^1
ok 29 - replace ref cleanup
ok 109 - push --no-thin must produce non-thin pack
ok 18 - **/ does not work with --noglob-pathspecs
ok 37 - log G..M --ancestry-path -- file
ok 38 - parse error in first sub-filter in combine:
ok 12 - --verify start2^0
ok 25 - describe --first-parent --tags --no-exact-match HEAD
ok 19 - **/ works with :(glob) and --noglob-pathspecs
ok 26 - --exact-match failure
ok 38 - log G..M --ancestry-path --parents -- file
ok 13 - final^1^@ = final^1^1 final^1^2
ok 29 - git bisect run: unable to verify on good
ok 39 - combine:... with non-encoded reserved chars
ok 20 - **/ works with --glob-pathspecs
ok 40 - validate err msg for "combine:<valid-filter>+"
ok 14 - symbolic final^1^@ = final^1^1 final^1^2
ok 21 - **/ does not work with :(literal) and --glob-pathspecs
ok 39 - log G..M --ancestry-path --simplify-merges -- file
# passed all 21 test(s)
1..21
ok 28 - git_pull_ff: added submodule doesn't remove untracked unignored file with same name
ok 35 - fetch lazy-fetches only to resolve deltas, protocol v2
*** t6134-pathspec-in-submodule.sh ***
ok 27 - describe --contains defaults to HEAD without commit-ish
ok 15 - final^1^! = final^1 ^final^1^1 ^final^1^2
ok 40 - log B..F
ok 28 - describe --all A^0
ok 41 - combine:... with edge-case hex digits: Ff Aa 0 9
ok 16 - symbolic final^1^! = final^1 ^final^1^1 ^final^1^2
ok 41 - log B..F -- file
ok 17 - large graft octopus
ok 110 - pushing a tag pushes the tagged object
ok 42 - log B..F --parents -- file
ok 30 - --graft with and without already replaced object
ok 29 - renaming tag A to Q locally produces a warning
ok 42 - add sparse pattern blobs whose paths have reserved chars
ok 43 - log B..F --full-history -- file
ok 30 - misnamed annotated tag forces long output
ok 30 - "git bisect run" simple case
ok 1 - setup
ok 31 - abbrev=0 will not break misplaced tag (1)
ok 44 - log B..F --full-history --parents -- file
ok 32 - abbrev=0 will not break misplaced tag (2)
ok 2 - non-rev wildcard dwims to pathspec
ok 18 - repack for next test
ok 45 - log B..F --simplify-merges -- file
ok 33 - rename tag Q back to A
ok 168 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset origin --prune --prune-tags; branch:kept tag:pruned
ok 34 - pack tag refs
ok 19 - short SHA-1 works
ok 3 - tree:path with metacharacters dwims to rev
ok 46 - log B..F --ancestry-path
ok 1 - create commits with glob characters
ok 4 - ^{foo} with metacharacters dwims to rev
ok 35 - describe HEAD
ok 31 - "git bisect run" simple case
ok 31 - --graft using a tag as the new parent
ok 47 - log B..F --ancestry-path -- file
ok 2 - tree_entry_interesting matches bar
ok 5 - @{foo} with metacharacters dwims to rev
ok 1 - setup
ok 3 - tree_entry_interesting matches :(icase)bar
ok 48 - log B..F --ancestry-path --parents -- file
ok 6 - :/*.t from a subdir dwims to a pathspec
ok 2 - exclude only pathspec uses default implicit pathspec
ok 22 - filtered bundle: blob:limit=100
ok 43 - combine:... with more than two sub-filters
# passed all 6 test(s)
1..6
ok 111 - push into bare respects core.logallrefupdates
ok 36 - describe works from outside repo using --git-dir
ok 4 - tree_entry_interesting matches :(icase)bar with prefix
*** t6135-pathspec-with-attrs.sh ***
ok 49 - log B..F --ancestry-path --simplify-merges -- file
ok 3 - t_e_i() exclude sub
ok 37 - describe --dirty
ok 50 - log B..F --first-parent
ok 5 - tree_entry_interesting matches :(icase)bar with empty prefix
ok 32 - "git bisect run" with more complex "git bisect start"
ok 38 - describe --dirty with --work-tree
ok 39 - set-up dirty work tree
ok 4 - t_e_i() exclude sub/sub/file
ok 36 - fetch does not lazy-fetch missing targets of its refs
ok 51 - log B..F --first-parent -- file
ok 44 - setup r4
ok 6 - match_pathspec matches :(icase)bar
ok 23 - cloning from filtered bundle has useful error
ok 5 - t_e_i() exclude sub using mnemonic
ok 7 - match_pathspec matches :(icase)bar with prefix
ok 52 - log E F ^B -- file
ok 40 - describe --dirty with --work-tree (dirty)
ok 32 - --graft using a tag as the replaced object
ok 8 - match_pathspec matches :(icase)bar with empty prefix
ok 1 - git_bisect: added submodule creates empty directory
ok 45 - test tree:# filter provisional omit for blob and tree
ok 6 - t_e_i() exclude :(icase)SUB
ok 33 # skip set up a signed commit (missing GPG)
ok 34 # skip --graft with a signed commit (missing GPG)
ok 35 # skip set up a merge commit with a mergetag (missing GPG)
ok 53 - log E...F -- file
ok 9 - "git diff" can take magic :(icase) pathspec
ok 36 # skip --graft on a commit with a mergetag (missing GPG)
ok 46 - verify skipping tree iteration when collecting omits
# passed all 9 test(s)
1..9
ok 41 - describe --dirty=.mod with --work-tree (dirty)
ok 7 - t_e_i() exclude sub2 from sub
ok 42 - describe --dirty HEAD
ok 54 - log C..F
ok 20 - setup for rev^- tests
ok 8 - t_e_i() exclude sub/*file
*** t6136-pathspec-in-bare.sh ***
ok 21 - rev-list --count merge^- = merge^..merge
ok 55 - log C..F -- file
ok 22 - rev-parse merge^- = merge^..merge
ok 9 - t_e_i() exclude :(glob)sub/*/file
ok 47 - setup r5
ok 169 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune --prune-tags origin; branch:pruned tag:pruned
ok 56 - log C..F --parents -- file
ok 112 - fetch into bare respects core.logallrefupdates
ok 10 - m_p_d() exclude sub
ok 23 - rev-parse merge^-1 = merge^..merge
ok 33 - bisect run accepts exit code 126 as bad
ok 57 - log C..F --full-history -- file
ok 11 - m_p_d() exclude sub/sub/file
ok 24 - rev-parse merge^-2 = merge^2..merge
ok 12 - m_p_d() exclude sub using mnemonic
ok 48 - verify collecting omits in combined: filter
ok 58 - log C..F --full-history --parents -- file
ok 13 - m_p_d() exclude :(icase)SUB
ok 25 - symbolic merge^-1 = merge^1..merge
ok 26 - rev-parse merge^-0 (invalid parent)
ok 43 - set-up matching pattern tests
ok 27 - rev-parse merge^-3 (invalid parent)
ok 14 - m_p_d() exclude sub2 from sub
ok 59 - log C..F --simplify-merges -- file
ok 28 - rev-parse merge^-^ (garbage after ^-)
ok 44 - describe --match=test-*
ok 29 - rev-parse merge^-1x (garbage after ^-1)
ok 15 - m_p_d() exclude sub/*file
ok 60 - log C..F --ancestry-path
ok 45 - describe --tags --match=test1-*
ok 16 - m_p_d() exclude :(glob)sub/*/file
ok 61 - log C..F --ancestry-path -- file
ok 30 - rev-list merge^- = merge^..merge
ok 46 - describe --tags --match=test2-*
ok 17 - multiple exclusions
ok 47 - describe --long --tags --match=test2-* HEAD^
ok 62 - log C..F --ancestry-path --parents -- file
ok 34 - bisect run fails with non-executable test script
ok 31 - rev-list merge^-1 = merge^1..merge
ok 49 - tree:<depth> where we iterate over tree at two levels
ok 48 - describe --long --tags --match=test1-* --match=test2-* HEAD^
ok 32 - rev-list merge^-2 = merge^2..merge
ok 50 - tree:<depth> which filters out blob but given as arg
ok 29 - git_pull_ff_only: added submodule creates empty directory
ok 63 - log C..F --ancestry-path --simplify-merges -- file
ok 33 - rev-list merge^-0 (invalid parent)
ok 49 - describe --long --tags --match=test1-* --no-match --match=test2-* HEAD^
ok 34 - rev-list merge^-3 (invalid parent)
ok 37 - --convert-graft-file
ok 35 - rev-list merge^-^ (garbage after ^-)
ok 50 - describe --long --tags --match=test1-* --match=test3-* HEAD
ok 64 - log C..F --first-parent
# passed all 37 test(s)
1..37
ok 36 - rev-list merge^-1x (garbage after ^-1)
ok 37 - rev-parse $garbage^@ does not segfault
ok 51 - describe --long --tags --match=test3-* --match=test1-* HEAD
ok 65 - log C..F --first-parent -- file
ok 24 - verify catches unreachable, broken prerequisites
*** t6200-fmt-merge-msg.sh ***
ok 38 - rev-parse $garbage...$garbage does not segfault
ok 51 - rev-list W/ --missing=print
# passed all 65 test(s)
1..65
# passed all 38 test(s)
1..38
ok 52 - rev-list W/O --missing fails
ok 53 - rev-list W/ missing=allow-any
*** t6300-for-each-ref.sh ***
*** t6301-for-each-ref-errors.sh ***
ok 170 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune --prune-tags origin; branch:kept tag:pruned
ok 18 - t_e_i() exclude case #8
ok 52 - set-up branches
ok 1 - setup a bare and non-bare repository
ok 53 - describe --all --match=branch_* --exclude=branch_C HEAD
ok 19 - grep --untracked PATTERN
ok 25 - bundle progress includes write phase
ok 2 - log and ls-files in a bare repository
ok 54 - describe --all --match=origin/remote_branch_* --exclude=origin/remote_branch_C HEAD
ok 35 - bisect run accepts exit code 127 as bad
ok 20 - grep --untracked PATTERN :(exclude)DIR
ok 3 - log and ls-files in .git directory
ok 55 - describe --all test-annotated~1
# passed all 3 test(s)
1..3
ok 26 # skip create --quiet disables all bundle progress (missing TTY)
ok 56 - --match does not work for other types
*** t6302-for-each-ref-filter.sh ***
ok 1 - setup a tree
ok 21 - grep --untracked PATTERN :(exclude)*FILE
ok 57 - --exclude does not work for other types
ok 2 - pathspec with no attr
ok 3 - pathspec with labels and non existent .gitattributes
ok 1 - setup a submodule
ok 54 - expand blob limit in protocol
ok 55 # skip large sparse filter file ignored (missing EXPENSIVE)
ok 2 - error message for path inside submodule
ok 37 - verify fetch succeeds when asking for new tags
# passed all 55 test(s)
1..55
ok 22 - archive with all negative
ok 4 - pathspec with labels and non existent .gitattributes (2)
ok 27 - bundle progress with --no-quiet
ok 3 - error message for path inside submodule from within submodule
# passed all 3 test(s)
1..3
ok 58 - name-rev with exact tags
ok 36 - bisect run fails with missing test script
*** t6400-merge-df.sh ***
*** t6401-merge-criss-cross.sh ***
ok 5 - setup .gitattributes
ok 6 - setup .gitignore
ok 23 - add with all negative
ok 7 - check specific set attr
ok 8 - check set attr with pathspec pattern
ok 171 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=true remote.origin.pruneTags=unset --prune origin; branch:pruned tag:pruned
ok 28 - read bundle over stdin
ok 9 - check specific set attr in tree-ish
ok 37 - bisect skip: add line and then a new test
ok 1 - setup
ok 2 - Broken refs are reported correctly
ok 10 - check specific set attr with pathspec pattern in tree-ish
ok 24 - add -p with all negative
ok 1 - setup
ok 11 - check specific unset attr
ok 38 - bisect skip and bisect replay
ok 59 - name-rev --all
ok 2 - basic atom: refs/heads/main refname
ok 3 - NULL_SHA1 refs are reported correctly
ok 12 - check specific unset attr (2)
ok 25 - clean with all negative
ok 29 - send a bundle to standard output
ok 3 - basic atom: refs/heads/main refname:
ok 13 - check specific value attr
ok 4 - basic atom: refs/heads/main refname:short
ok 4 - Missing objects are reported correctly
ok 2 - git_bisect: added submodule leaves existing empty directory alone
ok 5 - ahead-behind requires an argument
ok 30 - unbundle outside of a repository
ok 5 - basic atom: refs/heads/main refname:lstrip=1
ok 6 - missing ahead-behind base
# passed all 6 test(s)
1..6
ok 6 - basic atom: refs/heads/main refname:lstrip=2
*** t6402-merge-rename.sh ***
ok 14 - check specific value attr (2)
ok 7 - basic atom: refs/heads/main refname:lstrip=-1
ok 26 - commit with all negative
ok 31 - list-heads outside of a repository
ok 15 - check unspecified attr
ok 8 - basic atom: refs/heads/main refname:lstrip=-2
ok 9 - basic atom: refs/heads/main refname:rstrip=1
ok 16 - check unspecified attr (2)
ok 17 - check multiple unspecified attr
ok 39 - bisect run & skip: cannot tell between 2
ok 172 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=true remote.origin.pruneTags=unset --prune origin; branch:kept tag:pruned
ok 18 - check label with more labels but excluded path
ok 10 - basic atom: refs/heads/main refname:rstrip=2
ok 30 - git_pull_ff_only: added submodule leaves existing empty directory alone
ok 38 - verify fetch downloads only one pack when updating refs
ok 1 - prepare repository
ok 19 - check label excluding other labels
ok 27 - reset with all negative
ok 11 - basic atom: refs/heads/main refname:rstrip=-1
ok 20 - fail on multiple attr specifiers in one pathspec item
ok 32 - list-heads with bundle using sha1
ok 12 - basic atom: refs/heads/main refname:rstrip=-2
ok 21 - fail if attr magic is used in places not implemented
ok 2 - Merge with d/f conflicts
ok 1 - setup some history and refs
ok 13 - basic atom: refs/heads/main refname:strip=1
ok 28 - grep with all negative
ok 60 - name-rev --annotate-stdin
ok 2 - --include-root-refs pattern prints pseudorefs
ok 14 - basic atom: refs/heads/main refname:strip=2
ok 61 - name-rev --stdin deprecated
ok 29 - ls-files with all negative
ok 15 - basic atom: refs/heads/main refname:strip=-1
ok 33 - list-heads with bundle using sha256
ok 16 - basic atom: refs/heads/main refname:strip=-2
# passed all 33 test(s)
1..33
ok 39 - single-branch tag following respects partial clone
ok 17 - basic atom: refs/heads/main upstream
ok 22 - check that attr magic works for git stash push
ok 62 - describe --contains with the exact tags
ok 1 - prepare repository
ok 1 - setup
*** t6403-merge-file.sh ***
ok 18 - basic atom: refs/heads/main upstream:short
ok 30 - rm with all negative
ok 2 # skip set up a signed tag (missing GPG)
ok 19 - basic atom: refs/heads/main upstream:lstrip=2
ok 63 - describe --contains and --match
ok 23 - check that attr magic works for git add --all
ok 40 - bisect run & skip: find first bad
ok 3 # skip created ssh signed commit and tag (missing GPGSSH)
ok 2 - Criss-cross merge
ok 3 - --include-root-refs pattern does not print special refs
ok 20 - basic atom: refs/heads/main upstream:lstrip=-2
ok 3 - Criss-cross merge result
ok 4 # skip create signed tags with keys having defined lifetimes (missing GPGSSH_VERIFYTIME,GPGSSH of GPGSSH,GPGSSH_VERIFYTIME)
ok 3 - F/D conflict
ok 21 - basic atom: refs/heads/main upstream:rstrip=2
ok 4 - --include-root-refs with other patterns
ok 24 - check that attr magic works for git add -u
ok 64 - describe --exclude
ok 173 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=true --prune origin; branch:pruned tag:pruned
ok 22 - basic atom: refs/heads/main upstream:rstrip=-2
ok 65 - describe --contains and --no-match
ok 23 - basic atom: refs/heads/main upstream:strip=2
ok 5 - message for merging local branch
ok 6 # skip message for merging local tag signed by good key (missing GPG)
ok 7 # skip message for merging local tag signed by unknown key (missing GPG)
ok 25 - check that attr magic works for git add <path>
ok 8 # skip message for merging local tag signed by good ssh key (missing GPGSSH)
ok 24 - basic atom: refs/heads/main upstream:strip=-2
ok 9 # skip message for merging local tag signed by unknown ssh key (missing GPGSSH)
ok 10 # skip message for merging local tag signed by expired ssh key (missing GPGSSH_VERIFYTIME,GPGSSH of GPGSSH,GPGSSH_VERIFYTIME)
ok 11 # skip message for merging local tag signed by not yet valid ssh key (missing GPGSSH_VERIFYTIME,GPGSSH of GPGSSH,GPGSSH_VERIFYTIME)
ok 41 - bisect skip only one range
ok 12 # skip message for merging local tag signed by valid timeboxed ssh key (missing GPGSSH_VERIFYTIME,GPGSSH of GPGSSH,GPGSSH_VERIFYTIME)
ok 13 # skip message for merging local tag signed by invalid timeboxed ssh key (missing GPGSSH_VERIFYTIME,GPGSSH of GPGSSH,GPGSSH_VERIFYTIME)
ok 31 - stash with all negative
# passed all 31 test(s)
1..31
ok 5 - --include-root-refs omits dangling symrefs
ok 25 - basic atom: refs/heads/main push
*** t6404-recursive-merge.sh ***
ok 6 - filtering with --points-at
ok 26 - check that attr magic works for git -add .
ok 26 - basic atom: refs/heads/main push:short
ok 27 - basic atom: refs/heads/main push:lstrip=1
ok 7 - check signed tags with --points-at
ok 27 - check that attr magic works for git add --pathspec-from-file
ok 14 - message for merging external branch
ok 4 - setup modify/delete + directory/file conflict
ok 28 - abort on giving invalid label on the command line
ok 8 - filtering with --merged
ok 28 - basic atom: refs/heads/main push:lstrip=-1
ok 29 - abort on asking for wrong magic
ok 9 - filtering with --no-merged
ok 29 - basic atom: refs/heads/main push:rstrip=1
ok 30 - check attribute list
ok 40 - fetch from a partial clone, protocol v0
ok 10 - filtering with --contains
ok 42 - bisect skip many ranges
ok 31 - backslash cannot be the last character
ok 30 - basic atom: refs/heads/main push:rstrip=-1
ok 11 - filtering with --no-contains
ok 4 - Criss-cross merge fails (-s resolve)
# passed all 4 test(s)
1..4
ok 32 - backslash cannot be used as a value
ok 12 - filtering with --contains and --no-contains
ok 31 - basic atom: refs/heads/main push:strip=1
*** t6405-merge-symlinks.sh ***
ok 33 - reading from .gitattributes in a subdirectory (1)
ok 13 - %(color) must fail
ok 32 - basic atom: refs/heads/main push:strip=-1
ok 34 - reading from .gitattributes in a subdirectory (2)
ok 5 - modify/delete + directory/file conflict
ok 35 - reading from .gitattributes in a subdirectory (3)
ok 174 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=true --prune origin; branch:kept tag:pruned
ok 1 - setup
ok 43 - bisect starting with a detached HEAD
ok 33 - basic atom: refs/heads/main objecttype
ok 2 - merge with no changes
ok 34 - basic atom: refs/heads/main objectsize
ok 113 - receive.denyCurrentBranch = updateInstead
ok 44 - bisect errors out if bad and good are mistaken
ok 3 - merge with no changes with --object-id
ok 36 - pathspec with builtin_objectmode attr can be used
ok 4 - merge without conflict
ok 15 - [merge] summary/log configuration
ok 35 - basic atom: refs/heads/main objectsize:disk
ok 5 - merge without conflict with --object-id
ok 36 - basic atom: refs/heads/main deltabase
ok 37 - builtin_objectmode attr can be excluded
# passed all 37 test(s)
1..37
ok 6 - can accept object ID with --object-id
ok 14 - %(color:#aa22ac) must succeed
ok 31 - git_pull_ff_only: replace tracked file with submodule creates empty directory
*** t6406-merge-attr.sh ***
ok 37 - basic atom: refs/heads/main objectname
ok 15 - left alignment is default
ok 6 - modify/delete + directory/file conflict; other way
ok 16 - setup FETCH_HEAD
ok 7 - works in subdirectory
ok 17 - merge.log=3 limits shortlog length
ok 8 - merge without conflict (--quiet)
ok 16 - middle alignment
ok 66 - setup and absorb a submodule
not ok 9 - merge without conflict (missing LF at EOF) # TODO known breakage
ok 38 - basic atom: refs/heads/main objectname:short
not ok 10 - merge result added missing LF # TODO known breakage
ok 18 - merge.log=5 shows all 5 commits
ok 1 - setup
ok 11 - merge without conflict (missing LF at EOF, away from change in the other file)
ok 67 - describe chokes on severely broken submodules
ok 17 - right alignment
ok 12 - merge does not add LF away of change
ok 19 - --log=5 with custom comment character
ok 39 - basic atom: refs/heads/main objectname:short=1
ok 18 - align:middle,42
ok 41 - fetch from a partial clone, protocol v2
ok 13 - merge with conflicts
ok 20 - merge.log=0 disables shortlog
ok 68 - describe ignoring a broken submodule
ok 3 - git_bisect: replace tracked file with submodule creates empty directory
ok 14 - expected conflict markers
ok 45 - bisect does not create a "bisect" branch
ok 19 - align:42,middle
ok 40 - basic atom: refs/heads/main objectname:short=10
ok 21 - --log=3 limits shortlog length
ok 20 - align:position=middle,42
ok 69 - describe with --work-tree ignoring a broken submodule
ok 41 - basic atom: refs/heads/main tree
ok 22 - --log=5 shows all 5 commits
ok 21 - align:42,position=middle
ok 15 - merge with conflicts with --object-id
ok 23 - --no-log disables shortlog
ok 22 - align:middle,width=42
ok 175 - name prune fetch.prune=true remote.origin.prune=unset fetch.pruneTags=true remote.origin.pruneTags=unset origin; branch:pruned tag:pruned
ok 42 - basic atom: refs/heads/main tree:short
ok 23 - align:width=42,middle
ok 24 - --log=0 disables shortlog
ok 24 - align:position=middle,width=42
ok 2 - pull renaming branch into unrenaming one
ok 16 - merge with conflicts with --object-id with labels
ok 25 - align:width=42,position=middle
ok 70 - describe a blob at a directly tagged commit
ok 43 - basic atom: refs/heads/main tree:short=1
ok 42 - repack does not loosen promisor objects
ok 26 - align:32,width=42,middle
ok 17 - merge conflicting with --ours
ok 27 - align:width=30,42,middle
ok 44 - basic atom: refs/heads/main tree:short=10
ok 18 - merge conflicting with --theirs
ok 46 - side branch creation
ok 28 - align:width=42,position=right,middle
ok 19 - merge conflicting with --union
ok 7 - Simple merge in repo with interesting pathnames
ok 29 - align:42,right,position=middle
ok 45 - basic atom: refs/heads/main parent
# passed all 7 test(s)
1..7
ok 20 - merge with conflicts, using -L
ok 46 - basic atom: refs/heads/main parent:short
ok 30 - alignment with format quote
ok 21 - expected conflict markers, with -L
*** t6407-merge-binary.sh ***
ok 31 - nested alignment with quote formatting
ok 22 - conflict in removed tail
ok 47 - basic atom: refs/heads/main parent:short=1
ok 23 - expected conflict markers
ok 25 - fmt-merge-msg -m
ok 71 - describe a blob with its first introduction
ok 24 - binary files cannot be merged
ok 26 - setup: expected shortlog for two branches
ok 32 - check `%(contents:lines=1)`
ok 48 - basic atom: refs/heads/main parent:short=10
ok 1 - setup
ok 49 - basic atom: refs/heads/main numparent
ok 47 - good merge base when good and bad are siblings
ok 33 - check `%(contents:lines=0)`
ok 25 - binary files cannot be merged with --object-id
ok 2 - merge main into b-symlink, which has a different symbolic link
ok 3 - the merge result must be a file
ok 72 - describe directly tagged blob
ok 50 - basic atom: refs/heads/main object
ok 3 - pull renaming branch into another renaming one
ok 34 - check `%(contents:lines=99999)`
ok 26 - MERGE_ZEALOUS simplifies non-conflicts
ok 1 - setup tests
ok 51 - basic atom: refs/heads/main type
ok 35 - `%(contents:lines=-1)` should fail
ok 73 - describe tag object
ok 27 - ZEALOUS_ALNUM
ok 4 - merge main into b-file, which has a file instead of a symbolic link
ok 5 - the merge result must be a file
ok 2 - combined merge conflicts
ok 28 - "diff3 -m" style output (1)
ok 52 - basic atom: refs/heads/main raw
ok 3 - result contains a conflict
ok 29 - "diff3 -m" style output (2)
ok 176 - link prune fetch.prune=true remote.origin.prune=unset fetch.pruneTags=true remote.origin.pruneTags=unset origin; branch:kept tag:pruned
ok 53 - basic atom: refs/heads/main *objectname
ok 48 - skipped merge base when good and bad are siblings
ok 30 - marker size
ok 4 - virtual trees were processed
ok 54 - basic atom: refs/heads/main *objecttype
ok 31 - conflict at EOF without LF resolved by --ours
ok 32 - conflict at EOF without LF resolved by --theirs
ok 6 - merge b-file, which has a file instead of a symbolic link, into main
ok 7 - the merge result must be a file
ok 55 - basic atom: refs/heads/main author
ok 1 - setup
# passed all 7 test(s)
1..7
ok 33 - conflict at EOF without LF resolved by --union
*** t6408-merge-up-to-date.sh ***
ok 56 - basic atom: refs/heads/main authorname
ok 36 - setup for version sort
ok 2 - merge
ok 57 - basic atom: refs/heads/main authorname:mailmap
ok 34 - conflict sections match existing line endings
ok 49 - bad merge base when good and bad are siblings
ok 4 - pull unrenaming branch into renaming one
ok 3 - check merge result in index
ok 37 - version sort
ok 58 - basic atom: refs/heads/main authoremail
ok 35 - --object-id fails without repository
ok 38 - version sort (shortened)
ok 4 - check merge result in working tree
ok 36 - merging C files with "myers" diff algorithm creates some spurious conflicts
ok 59 - basic atom: refs/heads/main authoremail:trim
ok 39 - reverse version sort
ok 5 - refuse to merge binary files
ok 5 - retry the merge with longer context
ok 37 - merging C files with "histogram" diff algorithm avoids some spurious conflicts
ok 60 - basic atom: refs/heads/main authoremail:localpart
# still have 2 known breakage(s)
# passed all remaining 35 test(s)
1..37
*** t6409-merge-subtree.sh ***
ok 61 - basic atom: refs/heads/main authoremail:trim,localpart
ok 6 - invalid conflict-marker-size 3a
ok 62 - basic atom: refs/heads/main authoremail:mailmap
ok 50 - many merge bases creation
ok 63 - basic atom: refs/heads/main authoremail:mailmap,trim
ok 40 - improper usage of %(if), %(then), %(else) and %(end) atoms
ok 27 - shortlog for two branches
ok 41 - check %(if)...%(then)...%(end) atoms
ok 32 - git_pull_ff_only: replace directory with submodule
ok 64 - basic atom: refs/heads/main authoremail:trim,mailmap
ok 42 - check %(if)...%(then)...%(else)...%(end) atoms
ok 65 - basic atom: refs/heads/main authoremail:mailmap,localpart
ok 43 - ignore spaces in %(if) atom usage
ok 5 - pull conflicting renames
ok 177 - name prune fetch.prune=unset remote.origin.prune=true fetch.pruneTags=true remote.origin.pruneTags=unset origin; branch:pruned tag:pruned
ok 66 - basic atom: refs/heads/main authoremail:localpart,mailmap
ok 1 - setup
ok 44 - check %(if:equals=<string>)
ok 67 - basic atom: refs/heads/main authoremail:mailmap,trim,localpart,mailmap,trim
ok 45 - check %(if:notequals=<string>)
ok 114 - updateInstead with push-to-checkout hook
ok 46 - --merged is compatible with --no-merged
ok 28 - merge-msg -F
ok 68 - basic atom: refs/heads/main authordate
ok 7 - custom merge backend
ok 51 - "git bisect run --first-parent" simple case
ok 69 - basic atom: refs/heads/main committer
ok 6 - interference with untracked working tree file
ok 6 - mark rename/delete as unmerged
ok 70 - basic atom: refs/heads/main committername
ok 47 - validate worktree atom
# passed all 6 test(s)
1..6
# passed all 47 test(s)
1..47
*** t6411-merge-filemode.sh ***
ok 71 - basic atom: refs/heads/main committername:mailmap
ok 1 - setup
*** t6412-merge-large-rename.sh ***
ok 29 - merge-msg -F in subdirectory
ok 72 - basic atom: refs/heads/main committeremail
ok 2 - merge -s recursive up-to-date
ok 73 - basic atom: refs/heads/main committeremail:trim
ok 4 - git_bisect: replace directory with submodule
ok 52 - good merge bases when good and bad are siblings
ok 7 - interference with untracked working tree file
ok 74 - basic atom: refs/heads/main committeremail:localpart
ok 8 - custom merge backend
ok 3 - merge -s recursive fast-forward
ok 75 - basic atom: refs/heads/main committeremail:localpart,trim
ok 2 - resolve
ok 76 - basic atom: refs/heads/main committeremail:mailmap
ok 178 - link prune fetch.prune=unset remote.origin.prune=true fetch.pruneTags=true remote.origin.pruneTags=unset origin; branch:kept tag:pruned
ok 4 - merge -s ours up-to-date
ok 77 - basic atom: refs/heads/main committeremail:mailmap,trim
ok 1 - setup
ok 78 - basic atom: refs/heads/main committeremail:trim,mailmap
ok 3 - recursive
# passed all 3 test(s)
1..3
ok 53 - optimized merge base checks
ok 9 - custom merge driver that is killed with a signal
ok 79 - basic atom: refs/heads/main committeremail:mailmap,localpart
*** t6413-merge-crlf.sh ***
ok 30 - merge-msg with nothing to merge
ok 2 - subtree available and works like recursive
ok 80 - basic atom: refs/heads/main committeremail:localpart,mailmap
ok 5 - merge -s ours fast-forward
ok 8 - interference with untracked working tree file
ok 81 - basic atom: refs/heads/main committeremail:trim,mailmap,trim,trim,localpart
ok 82 - basic atom: refs/heads/main committerdate
ok 6 - merge -s subtree up-to-date
ok 3 - setup branch sub
ok 115 - denyCurrentBranch and worktrees
ok 83 - basic atom: refs/heads/main tag
ok 31 - merge-msg tag
ok 1 - setup (initial)
ok 84 - basic atom: refs/heads/main tagger
ok 43 - lazy-fetch in submodule succeeds
ok 7 - merge fast-forward octopus
# passed all 7 test(s)
1..7
*** t6414-merge-rename-nocruft.sh ***
ok 85 - basic atom: refs/heads/main taggername
ok 9 - updated working tree file should prevent the merge
ok 4 - setup topic branch
ok 86 - basic atom: refs/heads/main taggeremail
ok 10 - up-to-date merge without common ancestor
ok 33 - git_pull_ff_only: removed submodule leaves submodule directory and its contents in place
ok 87 - basic atom: refs/heads/main taggeremail:trim
ok 32 - merge-msg two tags
ok 88 - basic atom: refs/heads/main taggeremail:localpart
ok 5 - update branch sub
ok 179 - name prune fetch.prune=unset remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=true origin; branch:pruned tag:pruned
ok 1 - set up mode change in one branch
ok 89 - basic atom: refs/heads/main taggerdate
ok 90 - basic atom: refs/heads/main creator
ok 6 - update topic branch
ok 91 - basic atom: refs/heads/main creatordate
ok 2 - resolve single mode change (recursive, a1)
ok 11 - custom merge does not lock index
ok 92 - basic atom: refs/heads/main subject
ok 33 - merge-msg tag and branch
ok 54 - "parallel" side branch creation
ok 3 - verify executable bit on file (recursive, a1)
ok 93 - basic atom: refs/heads/main subject:sanitize
ok 94 - basic atom: refs/heads/main contents:subject
ok 4 - resolve single mode change (recursive, b1)
ok 10 - updated working tree file should prevent the merge
ok 5 - verify executable bit on file (recursive, b1)
ok 95 - basic atom: refs/heads/main body
ok 7 - setup
ok 55 - restricting bisection on one dir
ok 6 - resolve single mode change (resolve, a1)
ok 96 - basic atom: refs/heads/main contents:body
ok 34 - merge-msg lots of commits
ok 7 - verify executable bit on file (resolve, a1)
ok 2 - rename (5, ok)
ok 97 - basic atom: refs/heads/main contents:signature
ok 12 - binary files with union attribute
ok 3 - set diff.renamelimit to 4
ok 116 - denyCurrentBranch and bare repository worktrees
ok 8 - resolve single mode change (resolve, b1)
ok 9 - verify executable bit on file (resolve, b1)
ok 98 - basic atom: refs/heads/main contents
ok 99 - basic atom: refs/heads/main contents:size
ok 100 - basic atom: refs/heads/main HEAD
ok 1 - setup
ok 180 - link prune fetch.prune=unset remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=true origin; branch:kept tag:pruned
ok 101 - basic atom: refs/tags/testtag refname
ok 181 - remove remote.origin.fetch "one"
ok 8 - initial merge
ok 11 - interference with untracked working tree file
ok 102 - basic atom: refs/tags/testtag refname:short
ok 103 - basic atom: refs/tags/testtag upstream
ok 10 - set up mode change in both branches
ok 2 - Check "ours" is CRLF
ok 104 - basic atom: refs/tags/testtag push
ok 56 - restricting bisection on one dir and a file
ok 105 - basic atom: refs/tags/testtag objecttype
ok 117 - refuse fetch to current branch of worktree
ok 35 - merge-msg with "merging" an annotated tag
ok 106 - basic atom: refs/tags/testtag objectsize
ok 11 - detect conflict on double mode change (recursive)
ok 5 - git_bisect: removed submodule leaves submodule directory and its contents in place
ok 12 - verify executable bit on file (recursive)
ok 3 - Check that conflict file is CRLF
# passed all 3 test(s)
1..3
ok 1 - setup
*** t6415-merge-dir-to-symlink.sh ***
ok 107 - basic atom: refs/tags/testtag objectsize:disk
ok 9 - merge update
ok 2 - merge white into red (A->B,M->N)
ok 108 - basic atom: refs/tags/testtag *objectsize:disk
ok 12 - merge of identical changes in a renamed file
ok 109 - basic atom: refs/tags/testtag deltabase
ok 57 - skipping away from skipped commit
ok 44 - after fetching descendants of non-promisor commits, gc works
ok 110 - basic atom: refs/tags/testtag *deltabase
ok 4 - rename (4, ok)
ok 3 - merge blue into white (A->B, mod A, A untracked)
# passed all 3 test(s)
1..3
ok 10 - initial ambiguous subtree
ok 182 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset origin --prune --prune-tags; branch:kept tag:pruned
ok 111 - basic atom: refs/tags/testtag objectname
*** t6416-recursive-corner-cases.sh ***
ok 58 - erroring out when using bad path arguments
ok 13 - custom merge driver that is killed with a signal on recursive merge
# passed all 13 test(s)
1..13
# passed all 44 test(s)
# SKIP no web server found at ''
1..44
ok 34 - git_pull_ff_only: removed submodule leaves submodule containing a .git directory alone
ok 112 - basic atom: refs/tags/testtag objectname:short
*** t6417-merge-ours-theirs.sh ***
ok 118 - refuse fetch to current branch of bare repository worktree
ok 113 - basic atom: refs/heads/main objectname:short=1
ok 13 - detect conflict on double mode change (resolve)
ok 14 - verify executable bit on file (resolve)
ok 114 - basic atom: refs/heads/main objectname:short=10
*** t6418-merge-text-auto.sh ***
ok 11 - merge using explicit
ok 115 - basic atom: refs/tags/testtag tree
ok 36 - merge --into-name=<name>
ok 116 - basic atom: refs/tags/testtag tree:short
ok 59 - test bisection on bare repo - --no-checkout specified
ok 15 - set up delete/modechange scenario
ok 117 - basic atom: refs/tags/testtag tree:short=1
ok 118 - basic atom: refs/tags/testtag tree:short=10
ok 119 - refuse to push a hidden ref, and make sure do not pollute the repository
ok 119 - basic atom: refs/tags/testtag parent
ok 16 - detect delete/modechange conflict (recursive, b1)
ok 12 - merge2 using explicit
# passed all 12 test(s)
1..12
ok 120 - basic atom: refs/tags/testtag parent:short
ok 121 - basic atom: refs/tags/testtag parent:short=1
ok 183 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset origin --prune --prune-tags; branch:kept tag:pruned
ok 17 - detect delete/modechange conflict (recursive, deletion)
*** t6419-merge-ignorecase.sh ***
ok 122 - basic atom: refs/tags/testtag parent:short=10
ok 5 - rename (5, fail)
ok 60 - test bisection on bare repo - --no-checkout defaulted
ok 123 - basic atom: refs/tags/testtag numparent
ok 6 - set merge.renamelimit to 5
ok 13 - setup for rename + d/f conflicts
ok 1 - create a commit where dir a/b changed to symlink
ok 124 - basic atom: refs/tags/testtag object
ok 125 - basic atom: refs/tags/testtag type
ok 37 - merge.suppressDest configuration
# passed all 37 test(s)
1..37
ok 14 - Rename+D/F conflict; renamed file merges + dir not in way
*** t6421-merge-partial-clone.sh ***
ok 126 - basic atom: refs/tags/testtag *objectname
ok 127 - basic atom: refs/tags/testtag *objecttype
ok 2 - checkout does not clobber untracked symlink
ok 128 - basic atom: refs/tags/testtag author
ok 1 - setup
ok 129 - basic atom: refs/tags/testtag authorname
ok 18 - detect delete/modechange conflict (resolve, b1)
ok 130 - basic atom: refs/tags/testtag authorname:mailmap
ok 2 - plain recursive - should conflict
ok 131 - basic atom: refs/tags/testtag authoremail
ok 132 - basic atom: refs/tags/testtag authoremail:trim
ok 15 - Rename+D/F conflict; renamed file merges but dir in way
ok 133 - basic atom: refs/tags/testtag authoremail:localpart
ok 3 - a/b-2/c/d is kept when clobbering symlink b
ok 61 - broken branch creation
ok 3 - recursive favouring theirs
ok 184 - all boundary commits are excluded
ok 134 - basic atom: refs/tags/testtag authoremail:trim,localpart
ok 4 - checkout should not have deleted a/b-2/c/d
1..0 # SKIP skipping case insensitive tests - case sensitive file system
ok 135 - basic atom: refs/tags/testtag authoremail:mailmap
ok 62 - bisect fails if tree is broken on start commit
*** t6422-merge-rename-corner-cases.sh ***
ok 136 - basic atom: refs/tags/testtag authoremail:mailmap,trim
ok 4 - recursive favouring ours
ok 7 - rename (5, ok)
ok 1 - setup basic criss-cross + rename with no modifications
ok 137 - basic atom: refs/tags/testtag authoremail:trim,mailmap
ok 138 - basic atom: refs/tags/testtag authoremail:mailmap,localpart
ok 5 - setup for merge test
ok 35 - git_pull_ff_only: replace submodule with a directory must fail
ok 63 - bisect fails if tree is broken on trial commit
ok 139 - basic atom: refs/tags/testtag authoremail:localpart,mailmap
ok 16 - Same as previous, but merged other way
ok 140 - basic atom: refs/tags/testtag authoremail:mailmap,trim,localpart,mailmap,trim
ok 19 - detect delete/modechange conflict (resolve, deletion)
ok 6 - git_bisect: removed submodule leaves submodule containing a .git directory alone
# passed all 19 test(s)
1..19
ok 1 - setup
ok 2 - set up fuzz_conflict() helper
*** t6423-merge-rename-directories.sh ***
ok 64 - bisect: --no-checkout - start commit bad
ok 141 - basic atom: refs/tags/testtag authordate
ok 5 - binary file with -Xours/-Xtheirs
ok 185 - fetch --prune prints the remotes url
ok 2 - merge simple rename+criss-cross with no modifications
ok 142 - basic atom: refs/tags/testtag committer
ok 143 - basic atom: refs/tags/testtag committername
ok 120 - push with config push.useBitmaps
ok 65 - bisect: --no-checkout - trial commit bad
# passed all 120 test(s)
1..120
ok 3 - Merge after setting text=auto
ok 144 - basic atom: refs/tags/testtag committername:mailmap
*** t6424-merge-unrelated-index-changes.sh ***
ok 145 - basic atom: refs/tags/testtag committeremail
ok 17 - Rename+D/F conflict; renamed file cannot merge, dir not in way
ok 146 - basic atom: refs/tags/testtag committeremail:trim
ok 147 - basic atom: refs/tags/testtag committeremail:localpart
ok 66 - bisect: --no-checkout - target before breakage
ok 148 - basic atom: refs/tags/testtag committeremail:localpart,trim
ok 4 - Merge addition of text=auto eol=LF
ok 186 - branchname D/F conflict resolved by --prune
ok 6 - Handle D/F conflict, do not lose a/b-2/c/d in merge (resolve)
ok 7 - a/b was resolved as symlink
ok 149 - basic atom: refs/tags/testtag committeremail:mailmap
ok 8 - rename (6, fail)
ok 150 - basic atom: refs/tags/testtag committeremail:mailmap,trim
ok 18 - Rename+D/F conflict; renamed file cannot merge and dir in the way
ok 151 - basic atom: refs/tags/testtag committeremail:trim,mailmap
ok 67 - bisect: --no-checkout - target in breakage
ok 8 - Handle D/F conflict, do not lose a/b-2/c/d in merge (recursive)
ok 9 - a/b was resolved as symlink
ok 152 - basic atom: refs/tags/testtag committeremail:mailmap,localpart
ok 5 - Merge addition of text=auto eol=CRLF
ok 153 - basic atom: refs/tags/testtag committeremail:localpart,mailmap
ok 1 - Does git preserve Gollum's precious artifact?
ok 154 - basic atom: refs/tags/testtag committeremail:trim,mailmap,trim,trim,localpart
ok 3 - setup criss-cross + rename merges with basic modification
ok 155 - basic atom: refs/tags/testtag committerdate
ok 68 - bisect: --no-checkout - target after breakage
ok 156 - basic atom: refs/tags/testtag tag
ok 6 - Detect CRLF/LF conflict after setting text=auto
ok 157 - basic atom: refs/tags/testtag tagger
ok 19 - Same as previous, but merged other way
ok 187 - branchname D/F conflict rejected with targeted error message
ok 158 - basic atom: refs/tags/testtag taggername
ok 6 - pull passes -X to underlying merge
ok 4 - merge criss-cross + rename merges with basic modification
ok 7 - git_bisect: replace submodule with a directory must fail
ok 159 - basic atom: refs/tags/testtag taggername:mailmap
ok 160 - basic atom: refs/tags/testtag taggeremail
ok 161 - basic atom: refs/tags/testtag taggeremail:trim
ok 7 - Detect LF/CRLF conflict from addition of text=auto
ok 162 - basic atom: refs/tags/testtag taggeremail:localpart
not ok 2 - rename/modify/add-source conflict resolvable # TODO known breakage
ok 69 - bisect: demonstrate identification of damage boundary
ok 163 - basic atom: refs/tags/testtag taggeremail:trim,localpart
ok 10 - Handle F/D conflict, do not lose a/b-2/c/d in merge (resolve)
ok 11 - a/b was resolved as symlink
ok 164 - basic atom: refs/tags/testtag taggeremail:mailmap
ok 36 - git_pull_ff_only: replace submodule containing a .git directory with a directory must fail
ok 8 - checkout -m after setting text=auto
ok 165 - basic atom: refs/tags/testtag taggeremail:mailmap,trim
ok 20 - setup both rename source and destination involved in D/F conflict
ok 166 - basic atom: refs/tags/testtag taggeremail:trim,mailmap
ok 188 - fetching a one-level ref works
ok 12 - Handle F/D conflict, do not lose a/b-2/c/d in merge (recursive)
ok 13 - a/b was resolved as symlink
ok 167 - basic atom: refs/tags/testtag taggeremail:mailmap,localpart
ok 1 - 1a: Simple directory rename detection
ok 70 - bisect log: successful result
ok 168 - basic atom: refs/tags/testtag taggeremail:localpart,mailmap
ok 9 - checkout -m addition of text=auto
ok 169 - basic atom: refs/tags/testtag taggeremail:trim,mailmap,trim,localpart,localpart
ok 21 - both rename source and destination involved in D/F conflict
ok 170 - basic atom: refs/tags/testtag taggerdate
ok 71 - bisect log: only skip commits left
not ok 3 - conflict caused if rename not detected # TODO known breakage
ok 171 - basic atom: refs/tags/testtag creator
ok 1 - setup trivial merges
ok 7 - symlink with -Xours/-Xtheirs
ok 172 - basic atom: refs/tags/testtag creatordate
# passed all 7 test(s)
1..7
*** t6425-merge-rename-delete.sh ***
ok 5 - setup differently handled merges of rename/add conflict
ok 173 - basic atom: refs/tags/testtag subject
ok 174 - basic atom: refs/tags/testtag subject:sanitize
ok 175 - basic atom: refs/tags/testtag contents:subject
ok 10 - Test delete/normalize conflict
ok 2 - ff update
ok 176 - basic atom: refs/tags/testtag body
ok 72 - "git bisect bad HEAD" behaves as "git bisect bad"
ok 177 - basic atom: refs/tags/testtag contents:body
ok 22 - setup pair rename to parent of other (D/F conflicts)
not ok 14 - do not lose untracked in merge (resolve) # TODO known breakage
ok 73 - bisect starts with only one new
ok 178 - basic atom: refs/tags/testtag contents:signature
ok 3 - ff update, important file modified
ok 179 - basic atom: refs/tags/testtag contents
ok 15 - do not lose untracked in merge (recursive)
ok 74 - bisect does not start with only one old
not ok 4 - missed conflict if rename not detected # TODO known breakage
ok 6 - git detects differently handled merges conflict
ok 8 - git_bisect: replace submodule containing a .git directory with a directory must fail
ok 2 - 1b: Merge a directory with another
ok 4 - resolve, trivial
ok 180 - basic atom: refs/tags/testtag contents:size
ok 23 - pair rename to parent of other (D/F conflicts) w/ untracked dir
ok 11 - rename/delete vs. renormalization
ok 181 - basic atom: refs/tags/testtag HEAD
ok 189 - fetching with auto-gc does not lock up
# passed all 11 test(s)
1..11
ok 5 - resolve, non-trivial
*** t6426-merge-skip-unneeded-updates.sh ***
ok 182 - basic atom: refs/tags/testtag *raw
ok 183 - Check invalid atoms names are errors
not ok 37 - git_pull_ff_only: replace submodule with a file must fail # TODO known breakage
ok 6 - resolve, trivial, related file removed
ok 75 - bisect start with one new and old
ok 190 - fetch.hideRefs affects connectivity check
ok 184 - Check format specifiers are ignored in naming date atoms
ok 16 - do not lose modifications in merge (resolve)
ok 76 - bisect replay with old and new
ok 185 - Check valid format specifiers for date fields
ok 191 - transfer.hideRefs affects connectivity check
ok 186 - Check invalid format specifiers are errors
ok 24 - pair rename to parent of other (D/F conflicts) w/ clean start
ok 187 - arguments to %(objectname:short=) must be positive integers
not ok 5 - detect rename/add-source and preserve all data # TODO known breakage
ok 17 - do not lose modifications in merge (recursive)
ok 1 - Objects downloaded for single relevant rename
ok 77 - bisect replay with CRLF log
ok 188 - err basic atom: refs/heads/main authoremail:foo
ok 1 - rename/delete
# passed all 1 test(s)
1..1
ok 7 - git detects differently handled merges conflict, swapped
ok 189 - err basic atom: refs/heads/main authoremail:mailmap,trim,bar
ok 192 - prepare source branch
*** t6427-diff3-conflict-markers.sh ***
ok 190 - err basic atom: refs/heads/main authoremail:trim,
not ok 6 - detect rename/add-source and preserve all data, merge other way # TODO known breakage
ok 78 - bisect cannot mix old/new and good/bad
ok 191 - err basic atom: refs/heads/main authoremail:mailmaptrim
ok 192 - err basic atom: refs/heads/main committeremail: 
ok 3 - 1c: Transitive renaming
ok 193 - err basic atom: refs/heads/main committeremail: trim,foo
ok 194 - err basic atom: refs/heads/main committeremail:mailmap,localpart 
ok 18 - setup a merge where dir a/b-2 changed to symlink
ok 79 - bisect terms needs 0 or 1 argument
ok 195 - err basic atom: refs/heads/main committeremail:trim_localpart
ok 196 - err basic atom: refs/heads/main committeremail:localpart,,,trim
ok 25 - setup rename of one file to two, with directories in the way
ok 197 - err basic atom: refs/tags/testtag taggeremail:mailmap,trim, foo 
ok 193 - fetch trumps transfer limit
ok 198 - err basic atom: refs/tags/testtag taggeremail:trim,localpart,
ok 7 - resolve, non-trivial, related file removed
ok 199 - err basic atom: refs/tags/testtag taggeremail:mailmap;localpart trim
ok 80 - bisect terms shows good/bad after start
ok 9 - setup large simple rename
ok 200 - err basic atom: refs/tags/testtag taggeremail:localpart trim
ok 201 - err basic atom: refs/tags/testtag taggeremail:mailmap,mailmap,trim,qux,localpart,trim
not ok 9 - git_bisect: replace submodule with a file must fail # TODO known breakage
ok 202 - Check unformatted date fields output
ok 203 - Check format "default" formatted date fields output
ok 194 - fetch trumps transfer limit
ok 204 - Check format "default-local" date fields output
ok 8 - recursive
ok 205 - Check format "relative" date fields output
ok 26 - check handling of differently renamed file with D/F conflicts
ok 2 - Objects downloaded when a directory rename triggered
ok 81 - bisect start with one term1 and term2
ok 10 - massive simple rename does not spam added files
ok 206 - Check format "relative-local" date fields output
# passed all 10 test(s)
1..10
ok 19 - merge should not have D/F conflicts (resolve)
ok 20 - a/b-2 was resolved as symlink
ok 8 - setup criss-cross + modify/delete resolved differently
ok 82 - bogus command does not start bisect
ok 207 - Check format "short" date fields output
*** t6428-merge-conflicts-sparse.sh ***
ok 7 - rename/directory conflict + clean content merge
ok 9 - recursive, when merge branch matches merge base
ok 208 - Check format "short-local" date fields output
ok 209 - Check format "local" date fields output
ok 1 - 1a-L: Modify(A)/Modify(B), change on B subset of A
ok 1 - setup no merge base
ok 83 - bisect replay with term1 and term2
not ok 38 - git_pull_ff_only: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 21 - merge should not have D/F conflicts (recursive)
ok 22 - a/b-2 was resolved as symlink
ok 210 - Check format "iso8601" date fields output
ok 4 - 1d: Directory renames cause a rename/rename(2to1) conflict
ok 10 - merge-recursive, when index==head but head!=HEAD
ok 2 - check no merge base
ok 211 - Check format "iso8601-local" date fields output
ok 9 - git detects conflict merging criss-cross+modify/delete
ok 27 - setup rename one file to two; directories moving out of the way
ok 212 - Check format "rfc2822" date fields output
ok 213 - Check format "rfc2822-local" date fields output
ok 23 - merge should not have F/D conflicts (recursive)
ok 24 - a/b-2 was resolved as symlink
# still have 1 known breakage(s)
# passed all remaining 23 test(s)
1..24
ok 84 - bisect start term1 term2
ok 214 - Check format "raw" date fields output
*** t6429-merge-sequence-rename-caching.sh ***
ok 10 - git detects conflict merging criss-cross+modify/delete, reverse direction
ok 215 - Check format "raw-local" date fields output
ok 216 - Check format of strftime date fields
ok 217 - Check format of strftime-local date fields
ok 74 - name-rev works in a deep repo
ok 218 - exercise strftime with odd fields
ok 28 - check handling of differently renamed file with D/F conflicts
ok 85 - bisect cannot mix terms
ok 219 - Verify ascending sort
ok 220 - Verify descending sort
ok 3 - setup unique merge base
ok 11 - recursive, when file has staged changes not matching HEAD nor what a merge would give
ok 221 - Give help even with invalid sort atoms
not ok 10 - git_bisect: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 222 - exercise patterns with prefixes
ok 4 - check unique merge base
ok 86 - bisect terms rejects invalid terms
ok 5 - 1e: Renamed directory, with all files being renamed too
ok 2 - 1a-R: Modify(A)/Modify(B), change on B subset of A
ok 223 - exercise glob patterns with prefixes
ok 195 - --negotiation-tip limits "have" lines sent
ok 87 - bisect start --term-* does store terms
ok 8 - rename/directory conflict + content merge conflict
ok 29 - setup avoid unnecessary update, normal rename
ok 224 - exercise patterns with prefix exclusions
ok 12 - recursive, when file has staged changes matching what a merge would give
ok 88 - bisect start takes options and revs in any order
ok 30 - avoid unnecessary update, normal rename
ok 3 - Objects downloaded with lots of renames and modifications
# passed all 3 test(s)
1..3
ok 225 - exercise patterns with pattern exclusions
ok 226 - Quoting style: shell
ok 227 - Quoting style: perl
ok 228 - Quoting style: python
ok 89 - bisect skip works with --term*
ok 229 - Quoting style: tcl
*** t6430-merge-recursive.sh ***
ok 230 - more than one quoting style: --perl --shell
ok 1 - conflicting entries written to worktree even if sparse
ok 231 - more than one quoting style: -s --python
ok 232 - more than one quoting style: --python --tcl
ok 233 - more than one quoting style: --tcl --perl
ok 75 - describe works in a deep repo
ok 3 - 2a-L: Modify/rename, merge into modify side
ok 13 - octopus, unrelated file touched
ok 76 - describe --all A
ok 9 - disappearing dir in rename/directory conflict handled
ok 234 - setup for upstream:track[short]
ok 77 - describe --all c
ok 31 - setup to test avoiding unnecessary update, with D/F conflict
ok 90 - git bisect reset cleans bisection state properly
ok 235 - basic atom: refs/heads/main upstream:track
ok 78 - describe --all --match=branch_* branch_A
ok 79 - describe complains about tree object
ok 80 - describe complains about missing object
ok 6 - 1f: Split a directory into two other directories
ok 5 - setup multiple merge bases
ok 236 - basic atom: refs/heads/main upstream:trackshort
ok 1 - caching renames does not preclude finding new ones
ok 237 - basic atom: refs/heads/main upstream:track,nobracket
ok 32 - avoid unnecessary update, with D/F conflict
ok 238 - basic atom: refs/heads/main upstream:nobracket,track
ok 6 - check multiple merge bases
ok 39 - git_pull_ff_only: modified submodule does not update submodule work tree
ok 91 - bisect handles annotated tags
ok 239 - setup for push:track[short]
ok 14 - octopus, related file removed
ok 240 - basic atom: refs/heads/main push:track
ok 196 - --negotiation-tip understands globs
ok 92 - bisect run fails with exit code equals or greater than 128
ok 2 - present-despite-SKIP_WORKTREE handled reasonably
# passed all 2 test(s)
1..2
ok 241 - basic atom: refs/heads/main push:trackshort
ok 11 - setup differently handled merges of directory/file conflict
ok 242 - Check that :track[short] cannot be used with other atoms
*** t6431-merge-criscross.sh ***
ok 4 - 2a-R: Modify/rename, merge into rename side
ok 81 - name-rev a rev shortly after epoch
ok 243 - Check that :track[short] works when upstream is invalid
ok 93 - bisect visualize with a filename with dash and space
ok 7 - rebase --merge describes parent of commit being picked
ok 33 - setup avoid unnecessary update, dir->(file,nothing)
ok 244 - Check for invalid refname format
ok 10 - handle rename-with-content-merge vs. add
ok 245 - set up color tests
ok 2 - cherry-pick both a commit and its immediate revert
ok 7 - 2a: Directory split into two on one side, with equal numbers of paths
ok 34 - avoid unnecessary update, dir->(file,nothing)
ok 12 - merge of D1 & E1 fails but has appropriate contents
ok 8 - rebase --apply describes fake ancestor base
ok 246 # skip %(color) shows color with a tty (missing TTY)
ok 94 - bisect state output with multiple good commits
ok 247 - %(color) does not show color without tty
ok 248 - --color can override tty check
ok 249 - color.ui=always does not override tty check
ok 15 - octopus, related file modified
ok 1 - setup 1
ok 95 - bisect state output with bad commit
ok 13 - merge of E1 & D1 fails but has appropriate contents
ok 11 - git_bisect: modified submodule does not update submodule work tree
ok 35 - setup avoid unnecessary update, modify/delete
ok 250 - setup for describe atom tests
ok 96 - verify correct error message
# passed all 96 test(s)
1..96
ok 2 - setup 2
ok 16 - ours
ok 82 - name-rev covers all conditions while looking at parents
ok 36 - avoid unnecessary update, modify/delete
ok 5 - 2b-L: Rename+Mod(A)/Mod(B), B mods subset of A
ok 251 - describe atom vs git describe
*** t6432-merge-recursive-space-options.sh ***
ok 252 - describe:tags vs describe --tags
ok 9 - check zdiff3 markers
ok 14 - merge of D1 & E2 fails but has appropriate contents
# passed all 9 test(s)
1..9
ok 3 - rename same file identically, then reintroduce it
ok 8 - 2b: Directory split into two on one side, with equal numbers of paths
ok 3 - setup 3
*** t6433-merge-toplevel.sh ***
ok 11 - handle rename-with-content-merge vs. add, merge other way
ok 17 - subtree
ok 37 - setup avoid unnecessary update, rename/add-dest
ok 197 - --negotiation-tip understands abbreviated SHA-1
ok 253 - describe:abbrev=... vs describe --abbrev=...
ok 15 - merge of E2 & D1 fails but has appropriate contents
ok 83 - non-monotonic commit dates setup
ok 38 - avoid unnecessary update, rename/add-dest
ok 254 - describe:match=... vs describe --match ...
ok 4 - setup 4
ok 84 - name-rev with commitGraph handles non-monotonic timestamps
ok 255 - describe:exclude:... vs describe --exclude ...
ok 6 - 2b-R: Rename+Mod(A)/Mod(B), B mods subset of A
ok 40 - git_pull_ff_only: modified submodule does not update submodule work tree to invalid commit
ok 85 - name-rev --all works with non-monotonic timestamps
ok 16 - merge of D1 & E3 succeeds
ok 256 - deref with describe atom
ok 39 - setup merge of rename + small change
ok 257 - err on bad describe atom arg
ok 9 - 3a: Avoid implicit rename if involved as source on other side
ok 5 - setup 5
ok 86 - name-rev --annotate-stdin works with non-monotonic timestamps
ok 1 - setup repo with criss-cross history
ok 18 - avoid failure due to stat-dirty files
ok 4 - rename same file identically, then add file to old dir
ok 2 - recursive merge between F and G does not cause segfault
# passed all 2 test(s)
1..2
ok 87 - name-rev --all works with commitGraph
ok 17 - merge of D1 & E4 puts merge of a and a2 in both a and a2
ok 258 - Check ambiguous head and tag refs (strict)
ok 12 - handle rename/rename (2to1) conflict correctly
*** t6434-merge-recursive-rename-options.sh ***
ok 40 - merge rename + small change
ok 1 - setup
ok 259 - Check ambiguous head and tag refs (loose)
ok 6 - setup 6
ok 88 - name-rev --annotate-stdin works with commitGraph
ok 2 - naive merge fails
not ok 18 - merge of D2 & E4 merges a2s & reports conflict for a/file # TODO known breakage
ok 3 - --ignore-space-change makes merge succeed
ok 260 - Check ambiguous head and tag refs II (loose)
ok 7 - setup 7
ok 261 - create tag without tagger
ok 262 - basic atom: refs/tags/taggerless type
ok 7 - 2c: Modify b & add c VS rename b->c
ok 4 - naive cherry-pick fails
ok 198 - --negotiation-tip rejects missing OIDs
ok 263 - basic atom: refs/tags/taggerless tag
ok 5 - -Xignore-space-change makes cherry-pick succeed
ok 41 - setup for use of extended merge markers
ok 264 - basic atom: refs/tags/taggerless tagger
ok 265 - basic atom: refs/tags/taggerless taggername
ok 1 - setup
ok 6 - --ignore-space-change: our w/s-only change wins
ok 42 - merge main into rename has correct extended markers
ok 266 - basic atom: refs/tags/taggerless taggeremail
ok 8 - setup 8
ok 13 - merge has correct working tree contents
ok 7 - --ignore-space-change: their real change wins over w/s
ok 10 - 3b: Avoid implicit rename if involved as source on current side
ok 267 - basic atom: refs/tags/taggerless taggeremail:trim
ok 5 - cached dir rename does not prevent noticing later conflict
ok 89 - setup: describe commits with disjoint bases
ok 268 - basic atom: refs/tags/taggerless taggeremail:localpart
ok 43 - merge rename into main has correct extended markers
ok 19 - with multiple strategies, recursive or ort failure do not early abort
ok 9 - setup 9
ok 90 - describe HEAD
# passed all 19 test(s)
1..19
ok 8 - --ignore-space-change: does not ignore new spaces
ok 269 - basic atom: refs/tags/taggerless taggerdate
ok 2 - merge an octopus into void
not ok 91 - describe --candidates=2 HEAD # TODO known breakage
*** t6435-merge-sparse.sh ***
ok 10 - merge-recursive simple
ok 270 - basic atom: refs/tags/taggerless committer
ok 9 - --ignore-all-space drops their new spaces
ok 11 - merge-recursive result
ok 271 - basic atom: refs/tags/taggerless committername
ok 199 - clone does not get confused by a D/F conflict
ok 10 - --ignore-all-space keeps our new spaces
ok 272 - basic atom: refs/tags/taggerless committeremail
ok 19 - setup rename/rename(1to2)/modify followed by what looks like rename/rename(2to1)/modify
ok 273 - basic atom: refs/tags/taggerless committeremail:trim
# passed all 199 test(s)
# SKIP no web server found at ''
1..199
ok 8 - 3a-L: bq_1->foo/bq_2 on A, foo/->bar/ on B
ok 11 - --ignore-space-at-eol
# passed all 11 test(s)
1..11
ok 274 - basic atom: refs/tags/taggerless committeremail:localpart
*** t6436-merge-overwrite.sh ***
ok 275 - basic atom: refs/tags/taggerless committerdate
ok 12 - git_bisect: modified submodule does not update submodule work tree to invalid commit
ok 44 - setup spurious "refusing to lose untracked" message
ok 276 - basic atom: refs/tags/taggerless subject
not ok 14 - detect conflict with rename/rename(1to2)/add-source merge # TODO known breakage
ok 20 - handle rename/rename(1to2)/modify followed by what looks like rename/rename(2to1)/modify
ok 45 - no spurious "refusing to lose untracked" message
ok 277 - an unusual tag with an incomplete line
ok 1 - setup repo
ok 278 - create tag with subject and body content
ok 12 - fail if the index has unresolved entries
ok 11 - 4a: Directory split, with original directory still present
ok 279 - basic atom: refs/tags/subject-body subject
ok 92 - setup: describe commits with disjoint bases 2
ok 2 - setup thresholds
ok 13 - merge-recursive remove conflict
ok 280 - basic atom: refs/tags/subject-body subject:sanitize
ok 93 - describe HEAD
ok 14 - merge-recursive remove conflict
ok 41 - git_pull_ff_only: modified submodule does not update submodule work tree from invalid commit
ok 281 - basic atom: refs/tags/subject-body body
ok 3 - merge an octopus, fast-forward (ff)
not ok 94 - describe --candidates=2 HEAD # TODO known breakage
ok 95 - setup misleading taggerdates
ok 282 - basic atom: refs/tags/subject-body contents
ok 3 - assumption for tests: rename detection with diff
ok 46 - do not follow renames for empty files
ok 96 - describe --contains unique-file~2
# passed all 46 test(s)
1..46
ok 6 - dir rename unneeded, then add new file to old dir
not ok 15 - rename/rename/add-source still tracks new a file # TODO known breakage
ok 15 - merge-recursive d/f simple
ok 16 - merge-recursive result
*** t6437-submodule-merge.sh ***
ok 283 - basic atom: refs/tags/subject-body contents:size
ok 284 - create tag with multiline subject
ok 9 - 3a-R: bq_1->foo/bq_2 on A, foo/->bar/ on B
ok 285 - basic atom: refs/tags/multiline subject
ok 4 - default similarity threshold is 50%
ok 17 - merge-recursive d/f conflict
ok 97 - describe --dirty with a file with changed stat
ok 286 - basic atom: refs/tags/multiline subject:sanitize
ok 18 - merge-recursive d/f conflict result
ok 287 - basic atom: refs/tags/multiline contents:subject
*** t6438-submodule-directory-file-conflicts.sh ***
ok 1 - setup
ok 19 - merge-recursive d/f conflict the other way
ok 288 - basic atom: refs/tags/multiline body
ok 2 - reset --hard works after the conflict
ok 20 - merge-recursive d/f conflict result the other way
ok 5 - low rename threshold
ok 3 - is reset properly
ok 289 - basic atom: refs/tags/multiline contents:body
ok 4 - setup: conflict back
ok 98 - describe --broken --dirty with a file with changed stat
ok 290 - basic atom: refs/tags/multiline contents:signature
ok 21 - merge-recursive d/f conflict
ok 99 - --always with no refs falls back to commit hash
ok 21 - setup criss-cross + rename/rename/add-source + modify/modify
ok 5 - Merge abort works after the conflict
ok 22 - merge-recursive d/f conflict result
ok 291 - basic atom: refs/tags/multiline contents
ok 6 - is aborted properly
# passed all 6 test(s)
1..6
ok 100 - --exact-match does not show --always fallback
ok 12 - 5a: Merge directories, other side adds files to original and target
*** t6439-merge-co-error-msgs.sh ***
ok 292 - basic atom: refs/tags/multiline contents:size
ok 6 - medium rename threshold
not ok 22 - detect rename/rename/add-source for virtual merge-base # TODO known breakage
ok 293 # skip create signed tags (missing GPG)
ok 294 # skip basic atom: refs/tags/signed-empty subject (missing GPG)
ok 23 - merge-recursive d/f conflict
ok 295 # skip basic atom: refs/tags/signed-empty subject:sanitize (missing GPG)
ok 4 - merge octopus, non-fast-forward (ff)
ok 296 # skip basic atom: refs/tags/signed-empty contents:subject (missing GPG)
ok 42 - git_pull_ff_only: added submodule doesn't remove untracked unignored file with same name
ok 297 # skip basic atom: refs/tags/signed-empty body (missing GPG)
ok 24 - merge-recursive d/f conflict result
ok 298 # skip basic atom: refs/tags/signed-empty contents:body (missing GPG)
ok 299 # skip basic atom: refs/tags/signed-empty contents:signature (missing GPG)
ok 300 # skip basic atom: refs/tags/signed-empty contents (missing GPG)
ok 101 - avoid being fooled by describe-like filename
ok 301 # skip basic atom: refs/tags/signed-empty contents:size (missing GPG)
ok 302 # skip basic atom: refs/tags/signed-empty raw (missing GPG)
ok 1 - setup
ok 303 # skip basic atom: refs/tags/signed-short subject (missing GPG)
ok 304 # skip basic atom: refs/tags/signed-short subject:sanitize (missing GPG)
ok 305 # skip basic atom: refs/tags/signed-short contents:subject (missing GPG)
ok 102 - do not be fooled by invalid describe format 
ok 306 # skip basic atom: refs/tags/signed-short body (missing GPG)
# still have 2 known breakage(s)
# passed all remaining 100 test(s)
1..102
ok 7 - high rename threshold
ok 307 # skip basic atom: refs/tags/signed-short contents:body (missing GPG)
ok 308 # skip basic atom: refs/tags/signed-short contents:signature (missing GPG)
ok 309 # skip basic atom: refs/tags/signed-short contents (missing GPG)
ok 16 - rename/rename/add-dest merge still knows about conflicting file versions
ok 10 - 3b-L: bq_1->foo/bq_2 on A, foo/->bar/ on B
ok 310 # skip basic atom: refs/tags/signed-short contents:size (missing GPG)
ok 311 # skip basic atom: refs/tags/signed-short raw (missing GPG)
ok 312 # skip basic atom: refs/tags/signed-long subject (missing GPG)
ok 2 - will not overwrite untracked file
ok 313 # skip basic atom: refs/tags/signed-long subject:sanitize (missing GPG)
ok 314 # skip basic atom: refs/tags/signed-long contents:subject (missing GPG)
*** t6500-gc.sh ***
ok 315 # skip basic atom: refs/tags/signed-long body (missing GPG)
ok 316 # skip basic atom: refs/tags/signed-long contents:body (missing GPG)
ok 317 # skip basic atom: refs/tags/signed-long contents:signature (missing GPG)
ok 318 # skip basic atom: refs/tags/signed-long contents (missing GPG)
ok 319 # skip basic atom: refs/tags/signed-long contents:size (missing GPG)
ok 320 # skip basic atom: refs/tags/signed-long raw (missing GPG)
ok 8 - exact renames only
ok 321 - set up refs pointing to tree and blob
ok 322 # skip basic atom: refs/mytrees/first subject (missing GPG)
ok 323 # skip basic atom: refs/mytrees/first contents:subject (missing GPG)
ok 324 # skip basic atom: refs/mytrees/first body (missing GPG)
ok 3 - will overwrite tracked file
ok 7 - dir rename unneeded, then rename existing file into old dir
ok 325 # skip basic atom: refs/mytrees/first contents:body (missing GPG)
ok 326 # skip basic atom: refs/mytrees/first contents:signature (missing GPG)
ok 25 - dir in working tree with symlink ancestor does not produce d/f conflict
ok 327 # skip basic atom: refs/mytrees/first contents (missing GPG)
ok 328 # skip basic atom: refs/mytrees/first contents:size (missing GPG)
ok 26 - reset and 3-way merge
ok 9 - rename threshold is truncated
ok 329 - basic atom: refs/mytrees/first raw
ok 330 # skip basic atom: refs/myblobs/first subject (missing GPG)
ok 5 - merge octopus, fast-forward (does not ff)
ok 331 # skip basic atom: refs/myblobs/first contents:subject (missing GPG)
ok 332 # skip basic atom: refs/myblobs/first body (missing GPG)
ok 333 # skip basic atom: refs/myblobs/first contents:body (missing GPG)
ok 334 # skip basic atom: refs/myblobs/first contents:signature (missing GPG)
ok 335 # skip basic atom: refs/myblobs/first contents (missing GPG)
ok 336 # skip basic atom: refs/myblobs/first contents:size (missing GPG)
ok 4 - will not overwrite new file
ok 13 - 5b: Rename/delete in order to get add/add/add conflict
ok 10 - disabled rename detection
ok 27 - reset and bind merge
ok 337 - basic atom: refs/myblobs/first raw
ok 13 - git_bisect: modified submodule does not update submodule work tree from invalid commit
ok 17 - rad-check: rename/add/delete conflict
ok 23 - setup criss-cross+rename/rename/add-dest + simple modify
ok 1 - setup
ok 11 - 3b-R: bq_1->foo/bq_2 on A, foo/->bar/ on B
ok 28 - merge-recursive w/ empty work tree - ours has rename
ok 11 - last wins in --find-renames=<m> --find-renames=<n>
ok 1 - setup
ok 29 - merge-recursive w/ empty work tree - theirs has rename
ok 5 - will not overwrite staged changes
ok 24 - virtual merge base handles rename/rename(1to2)/add-dest
ok 12 - --find-renames resets threshold
ok 338 - set up refs pointing to binary blob
ok 2 - untracked files overwritten by merge (fast and non-fast forward)
ok 339 - Verify sorts with raw
ok 340 - Verify sorts with raw:size
ok 6 - merge octopus, non-fast-forward
ok 8 - caching renames only on upstream side, part 1
ok 341 - validate raw atom with %(if:equals)
ok 3 - untracked files or local changes overwritten by merge
ok 30 - merge removes empty directories
ok 6 - will not overwrite removed file
ok 342 - validate raw atom with %(if:notequals)
ok 13 - last wins in --no-renames --find-renames
ok 343 - empty raw refs with %(if)
ok 31 - merge-recursive simple w/submodule
ok 14 - git_bisect: added submodule doesn't remove untracked unignored file with same name
ok 344 - %(raw) with --python must fail
# still have 2 known breakage(s)
# passed all remaining 12 test(s)
1..14
ok 345 - %(raw) with --tcl must fail
ok 32 - merge-recursive simple w/submodule result
ok 4 - cannot switch branches because of local changes
ok 1 - setup
ok 18 - rrdd-check: rename/rename(2to1)/delete/delete conflict
ok 43 - git_pull_noff: added submodule creates empty directory
ok 7 - merge FETCH_HEAD octopus into void
ok 14 - last wins in --find-renames --no-renames
ok 5 - not uptodate file porcelain checkout error
ok 12 - 4a: Change on A, change on B subset of A, dirty mods present
ok 33 - merge-recursive copy vs. rename
*** t6501-freshen-objects.sh ***
ok 2 - gc empty repository
ok 346 - %(raw) with --perl
ok 7 - will not overwrite re-added file
ok 347 - %(raw) with --shell must fail
ok 348 - %(raw) with --shell and --sort=raw must fail
ok 14 - 5c: Transitive rename would cause rename/rename/rename/add/add/add
ok 34 - merge-recursive rename vs. rename/symlink
ok 349 - %(raw:size) with --shell
ok 15 - assumption for further tests: trivial merge succeeds
ok 3 - gc does not leave behind pid file
ok 2 - setup for merge search
ok 4 - gc --gobbledegook
ok 350 - for-each-ref --format compare with cat-file --batch
ok 16 - --find-renames rejects negative argument
ok 25 - setup symlink modify/modify
ok 5 - gc -h with invalid configuration
ok 351 - verify sorts with contents:size
ok 6 - not_uptodate_dir porcelain checkout error
ok 17 - --find-renames rejects non-numbers
# passed all 6 test(s)
1..6
*** t6600-test-reach.sh ***
ok 9 - caching renames only on upstream side, part 2
ok 3 - merging should conflict for non fast-forward
ok 26 - check symlink modify/modify
ok 8 - will not overwrite removed file with staged changes
ok 352 - set up multiple-sort tags
ok 18 - rename-threshold=<n> is a synonym for find-renames=<n>
ok 353 - Verify sort with multiple keys
ok 354 - equivalent sorts fall back on refname
ok 1 - make repo completely empty (loose)
ok 355 - --no-sort cancels the previous sort keys
ok 2 - disable reflogs (loose)
ok 8 - merge FETCH_HEAD octopus fast-forward (ff)
ok 356 - --no-sort without subsequent --sort prints expected refs
ok 19 - last wins in --no-renames --rename-threshold=<n>
ok 9 - will not overwrite unstaged changes in renamed file
ok 3 - setup basic history (loose)
ok 13 - 4b: Rename+Mod(A)/Mod(B), change on B subset of A, dirty mods present
ok 35 - merging with triple rename across D/F conflict
ok 4 - finish setup for merge-search
# passed all 13 test(s)
1..13
ok 10 - will not overwrite untracked subtree
ok 357 - set up custom date sorting
ok 6 - gc is not aborted due to a stale symref
ok 358 - sort by date defaults to full timestamp
ok 20 - last wins in --rename-threshold=<n> --no-renames
ok 15 - 5d: Directory/file/file conflict due to directory rename
ok 4 - create and abandon some objects (loose)
ok 359 - sort by custom date format
ok 11 - will not overwrite untracked file in leading path
ok 5 - merge with one side as a fast-forward of the other
ok 5 - simulate time passing (loose)
ok 21 - --rename-threshold=<n> rejects negative argument
ok 22 - --rename-threshold=<n> rejects non-numbers
*** t6601-path-walk.sh ***
ok 360 - do not dereference NULL upon %(HEAD) on unborn branch
ok 6 - start writing new commit with old blob (loose)
ok 12 - will not overwrite untracked symlink in leading path
ok 10 - avoid assuming we detected renames
# passed all 10 test(s)
1..10
ok 19 - mod6-check: chains of rename/rename(1to2) and rename/rename(2to1)
ok 36 - merge-recursive remembers the names of all base trees
ok 361 - set up trailers for next test
ok 27 - setup symlink add/add
ok 6 - merging should conflict for non fast-forward (resolution exists)
ok 13 - will not be confused by symlink in leading path
ok 7 - simultaneous gc (loose)
ok 362 - %(trailers:unfold) unfolds trailers
ok 23 - last wins in --rename-threshold=<m> --find-renames=<n>
*** t6700-tree-depth.sh ***
ok 8 - finish writing out commit (loose)
ok 363 - %(trailers:only) shows only "key: value" trailers
ok 28 - check symlink add/add
ok 14 - will not overwrite untracked file on unborn branch
ok 9 - repository passes fsck (loose)
ok 15 - will not overwrite untracked file on unborn branch .git/MERGE_HEAD sanity etc.
ok 16 - failed merge leaves unborn branch in the womb
ok 10 - abandon objects again (loose)
ok 364 - %(trailers:only=no,only=true) shows only "key: value" trailers
ok 24 - last wins in --find-renames=<m> --rename-threshold=<n>
ok 17 - set up unborn branch and content
ok 44 - git_pull_noff: added submodule leaves existing empty directory alone
ok 365 - %(trailers:only=yes) shows only "key: value" trailers
ok 9 - merge FETCH_HEAD octopus non-fast-forward (ff)
ok 11 - start writing new commit with same tree (loose)
ok 7 - merging should fail for ambiguous common parent
ok 18 - will not clobber WT/index when merging into unborn
# passed all 18 test(s)
1..18
ok 366 - %(trailers:only=no) shows all trailers
*** t7001-mv.sh ***
ok 16 - 6a: Tricky rename/delete
ok 25 - merge.renames disables rename detection
ok 367 - %(trailers:only) and %(trailers:unfold) work together
ok 12 - simultaneous gc (loose)
ok 368 - %(trailers:unfold) and %(trailers:only) work together
ok 13 - finish writing out commit (loose)
ok 369 - %(trailers:key=foo) shows that trailer
ok 14 - make repo completely empty (repack)
ok 26 - merge.renames defaults to diff.renames
ok 15 - disable reflogs (repack)
ok 370 - %(trailers:key=foo) is case insensitive
ok 37 - merge-recursive internal merge resolves to the sameness
# passed all 37 test(s)
1..37
ok 16 - setup basic history (repack)
ok 371 - %(trailers:key=foo:) trailing colon also works
*** t7002-mv-sparse-checkout.sh ***
ok 372 - %(trailers:key=foo) multiple keys
ok 7 - gc --keep-largest-pack
ok 27 - merge.renames overrides diff.renames
ok 8 - merging should fail for changes that are backwards
# passed all 27 test(s)
1..27
ok 1 - create small tree
ok 373 - %(trailers:key=nonexistent) becomes empty
*** t7003-filter-branch.sh ***
ok 20 - check simple rename/rename conflict
ok 17 - create and abandon some objects (repack)
ok 374 - %(trailers:key=foo) handles multiple lines even if folded
ok 18 - simulate time passing (repack)
ok 10 - merge FETCH_HEAD octopus fast-forward (does not ff)
ok 375 - %(trailers:key=foo,unfold) properly unfolds
ok 19 - start writing new commit with old blob (repack)
ok 9 - git submodule status should display the merge conflict properly with merge base
ok 376 - %(trailers:key=foo,only=no) also includes nontrailer lines
ok 17 - 6b1: Same renames done on both sides, plus another rename
ok 377 - %(trailers:key=foo,valueonly) shows only value
ok 20 - simultaneous gc (repack)
ok 1 - setup test repository
ok 378 - %(trailers:separator) changes separator
ok 21 - finish writing out commit (repack)
ok 29 - setup submodule modify/modify
ok 379 - %(trailers:key_value_separator) changes key-value separator
ok 22 - repository passes fsck (repack)
ok 380 - %(trailers:separator,key_value_separator) changes both separators
ok 1 - setup
ok 8 - pre-auto-gc hook can stop auto gc
ok 23 - abandon objects again (repack)
ok 10 - git submodule status should display the merge conflict properly without merge-base
ok 381 - multiple %(trailers) use their own options
ok 30 - check submodule modify/modify
ok 382 - %(trailers) rejects unknown trailers arguments
ok 24 - start writing new commit with same tree (repack)
ok 2 - mv refuses to move sparse-to-sparse
ok 383 - %(trailers:key) without value is error
ok 11 - merging with a modify/modify conflict between merge bases
ok 384 - if arguments, %(contents:trailers) shows error if colon is missing
ok 385 - basic atom: head contents:trailers
ok 386 - basic atom: rest must fail
ok 25 - simultaneous gc (repack)
ok 387 - HEAD atom does not take arguments
ok 45 - git_pull_noff: replace tracked file with submodule creates empty directory
ok 388 - subject atom rejects unknown arguments
ok 21 - check simple rename/add conflict
ok 389 - refname atom rejects unknown arguments
ok 11 - merge FETCH_HEAD octopus non-fast-forward
ok 18 - 6b2: Same rename done on both sides
ok 3 - mv refuses to move sparse-to-sparse, ignores failure
ok 26 - finish writing out commit (repack)
ok 27 - make repo completely empty (bitmap)
ok 390 - trailer parsing not fooled by --- line
ok 391 - Add symbolic ref for the following tests
ok 28 - disable reflogs (bitmap)
ok 12 - refuse two-project merge by default
ok 392 - Verify usage of %(symref) atom
ok 2 - all
ok 393 - Verify usage of %(symref:short) atom
ok 29 - setup basic history (bitmap)
ok 4 - mv refuses to move non-sparse-to-sparse
ok 394 - Verify usage of %(symref:lstrip) atom
ok 13 - refuse two-project merge by default, quit before --autostash happens
ok 395 - Verify usage of %(symref:rstrip) atom
ok 3 - indexed objects
ok 5 - mv refuses to move sparse-to-non-sparse
ok 30 - create and abandon some objects (bitmap)
ok 31 - simulate time passing (bitmap)
ok 14 - two-project merge with --allow-unrelated-histories
ok 32 - start writing new commit with old blob (bitmap)
ok 1 - setup
ok 19 - 6c: Rename only done on same side
ok 9 - auto gc with too many loose objects does not attempt to create bitmaps
ok 33 - simultaneous gc (bitmap)
ok 6 - recursive mv refuses to move (possible) sparse
ok 34 - finish writing out commit (bitmap)
ok 31 - setup submodule add/add
ok 35 - repository passes fsck (bitmap)
ok 396 - :remotename and :remoteref
ok 36 - abandon objects again (bitmap)
ok 10 - gc --no-quiet
ok 15 - two-project merge with --allow-unrelated-histories with --autostash
ok 22 - check simple add/rename conflict
# passed all 15 test(s)
1..15
ok 4 - branches and indexed objects mix well
ok 397 - for-each-ref --ignore-case ignores case
ok 32 - check submodule add/add
*** t7004-tag.sh ***
ok 11 # skip with TTY: gc --no-quiet (missing TTY)
ok 37 - start writing new commit with same tree (bitmap)
ok 398 - for-each-ref --omit-empty works
ok 7 - recursive mv refuses to move sparse
ok 8 - can move files to non-sparse dir
ok 38 - simultaneous gc (bitmap)
ok 12 - gc --quiet
ok 39 - finish writing out commit (bitmap)
ok 5 - base & topic, sparse
ok 12 - setup for recursive merge with submodule
ok 20 - 6d: We do not always want transitive renaming
ok 9 - refuse to move file to non-skip-worktree sparse path
ok 13 - gc.reflogExpire{Unreachable,}=never skips "expire" via "gc"
ok 40 - do not complain about existing broken links (commit)
ok 46 - git_pull_noff: replace directory with submodule
ok 13 - recursive merge with submodule
ok 399 - for-each-ref --ignore-case works on multiple sort keys
ok 6 - topic only
ok 10 - refuse to move out-of-cone directory without --sparse
ok 1 - setup
ok 400 - for-each-ref reports broken tags
ok 2 - listing all tags in an empty tree should succeed
ok 14 - one of gc.reflogExpire{Unreachable,}=never does not skip "expire" via "gc"
ok 401 - set up tag with signature and no blank lines
ok 402 # skip basic atom: refs/tags/fake-sig-no-blanks contents:subject (missing GPG)
ok 403 # skip basic atom: refs/tags/fake-sig-no-blanks contents:body (missing GPG)
ok 404 # skip basic atom: refs/tags/fake-sig-no-blanks contents:signature (missing GPG)
ok 3 - listing all tags in an empty tree should output nothing
ok 405 - set up tag with CRLF signature
ok 41 - do not complain about existing broken links (tree)
ok 23 - check simple add/add conflict
ok 406 # skip basic atom: refs/tags/fake-sig-crlf contents:subject (missing GPG)
ok 11 - can move out-of-cone directory with --sparse
ok 407 # skip basic atom: refs/tags/fake-sig-crlf contents:body (missing GPG)
ok 7 - topic, not base
ok 408 # skip basic atom: refs/tags/fake-sig-crlf contents:signature (missing GPG)
ok 33 - setup conflicting entry types (submodule vs symlink)
ok 409 - set up tag with signature and trailers
ok 410 # skip basic atom: refs/tags/fake-sig-trailer trailers:separator= (missing GPG)
ok 411 - git for-each-ref --stdin: empty
ok 412 - git for-each-ref --stdin: fails if extra args
ok 4 - sort tags, ignore case
ok 21 - 6e: Add/add from one side
ok 42 - do not complain about existing broken links (tag)
ok 12 - refuse to move out-of-cone file without --sparse
ok 5 - looking for a tag in an empty tree should fail
ok 413 - git for-each-ref --stdin: matches
# passed all 42 test(s)
1..42
ok 6 - creating a tag in an empty tree should fail
ok 34 - check conflicting entry types (submodule vs symlink)
*** t7005-editor.sh ***
ok 7 - creating a tag for HEAD in an empty tree should fail
ok 414 - git for-each-ref with non-existing refs
ok 1 - git_test_func: added submodule creates empty directory
ok 8 - fourth, blob-tag2, not base
ok 8 - creating a tag for an unknown revision should fail
ok 2 - rewrite identically
ok 3 - result is really identical
ok 13 - can move out-of-cone file with --sparse
ok 14 - setup file/submodule conflict
ok 15 - gc.repackFilter launches repack with a filter
ok 9 - creating a tag using default HEAD should succeed
ok 9 - topic, not base, only blobs
ok 415 - git for-each-ref with nested tags
ok 14 - refuse to move sparse file to existing destination
ok 10 - HEAD is forbidden as a tagname
ok 10 - topic, not base, only commits
ok 11 - "git tag" can remove a tag named HEAD
ok 15 - file/submodule conflict
ok 416 - is-base atom with non-commits
ok 11 - topic, not base, only trees
ok 417 # skip setup for signature atom using gpg (missing GPG)
ok 418 # skip setup for signature atom using ssh (missing GPGSSH)
ok 15 - move sparse file to existing destination with --force and --sparse
ok 12 - creating a tag with --create-reflog should create reflog
ok 419 # skip bare signature atom (missing GPG2)
ok 420 # skip show good signature with custom format (missing GPG)
ok 421 # skip show good signature with custom format with ssh (missing GPGSSH)
ok 422 # skip signature atom with grade option and bad signature (missing GPG)
ok 423 # skip show untrusted signature with custom format (missing GPG)
ok 424 # skip show untrusted signature with undefined trust level (missing GPG)
ok 425 # skip show untrusted signature with ultimate trust level (missing GPG)
ok 426 # skip show unknown signature with custom format (missing GPG)
ok 427 # skip show lack of signature with custom format (missing GPG)
# passed all 427 test(s)
1..427
ok 16 - gc.repackFilterTo store filtered out objects
ok 13 - annotated tag with --create-reflog has correct message
ok 16 - file/submodule conflict; merge --abort works afterward
ok 14 - --create-reflog does not create reflog on failure
ok 1 - determine default editor
ok 35 - setup conflicting modes for regular file
*** t7006-pager.sh ***
ok 24 - check nested conflicts from rename/rename(2to1)
ok 16 - move clean path from in-cone to out-of-cone
ok 15 - option core.logAllRefUpdates=always creates reflog
ok 12 - topic, not base, boundary
ok 16 - listing all tags if one exists should succeed
not ok 36 - check conflicting modes for regular file # TODO known breakage
ok 22 - 7a: rename-dir vs. rename-dir (NOT split evenly) PLUS add-other-file
ok 47 - git_pull_noff: removed submodule leaves submodule directory and its contents in place
ok 2 - setup
ok 17 - Multiple -l or --list options are equivalent to one -l option
ok 3 - dumb should error out when falling back on vi
ok 18 - listing all tags if one exists should output that tag
ok 19 - listing a tag using a matching pattern should succeed
ok 13 - topic, not base, boundary with pruning
ok 2 - create big tree
ok 20 - listing a tag with --ignore-case
ok 4 - dumb should prefer EDITOR to VISUAL
ok 21 - listing a tag using a matching pattern should output that tag
ok 22 - listing tags using a non-matching pattern should succeed
ok 23 - listing tags using a non-matching pattern should output nothing
ok 24 - trying to create a tag with the name of one existing should fail
ok 3 - limit recursion of git-archive
ok 5 - Using vi
ok 17 - move clean path from in-cone to out-of-cone overwrite
ok 17 - git gc generates a cruft pack
ok 25 - trying to create a tag with a non-valid name should fail
ok 6 - Using EDITOR
ok 26 - creating a tag using HEAD directly should succeed
ok 4 - default limit for git-archive fails gracefully
ok 27 - --force can create a tag with the name of one existing
ok 5 - limit recursion of ls-tree -r
ok 7 - Using VISUAL
ok 1 - determine default pager
ok 14 - trees are reported exactly once
ok 28 - --force is moot with a non-existing tag name
ok 2 - git_test_func: added submodule leaves existing empty directory alone
# passed all 14 test(s)
1..14
ok 6 - default limit for ls-tree fails gracefully
ok 29 - trying to delete an unknown tag should fail
ok 25 - rename/rename(1to2) with a binary file
*** t7007-show.sh ***
# still have 7 known breakage(s)
# passed all remaining 18 test(s)
1..25
ok 7 - limit recursion of rev-list --objects
ok 2 - setup
ok 8 - Using core_editor
ok 30 - trying to delete tags without params should succeed and do nothing
ok 18 - move clean path from in-cone to out-of-cone file overwrite
ok 4 - rewrite bare repository identically
ok 3 # skip some commands use a pager (missing TTY)
ok 17 - setup directory/submodule conflict
ok 4 # skip pager runs from subdir (missing TTY)
ok 5 - result is really identical
ok 5 # skip LESS and LV envvars are set for pagination (missing TTY)
ok 6 # skip LESS and LV envvars set by git-sh-setup (missing TTY of !MINGW,TTY)
ok 31 - deleting two existing tags in one command should succeed
ok 7 # skip some commands do not use a pager (missing TTY)
ok 8 - default limit for rev-list fails gracefully
ok 9 - Using GIT_EDITOR
ok 23 - 7b: rename/rename(2to1), but only due to transitive rename
ok 8 - no pager when stdout is a pipe
ok 32 - creating a tag with the name of another deleted one should succeed
ok 9 - limit recursion of diff-tree -r
ok 9 - no pager when stdout is a regular file
ok 10 # skip git --paginate rev-list uses a pager (missing TTY)
ok 18 - git -c gc.cruftPacks=true gc generates a cruft pack
ok 11 - no pager even with --paginate when stdout is a pipe
ok 12 # skip no pager with --no-pager (missing TTY)
ok 13 # skip configuration can disable pager (missing TTY)
ok 10 - default limit for diff-tree fails gracefully
ok 10 - Using vi (override)
ok 14 # skip configuration can enable pager (from subdir) (missing TTY)
ok 33 - trying to delete two tags, existing and not, should fail in the 2nd
*** t7008-filter-branch-null-sha1.sh ***
# passed all 10 test(s)
1..10
ok 15 # skip git tag -l defaults to paging (missing TTY)
ok 34 - trying to delete an already deleted tag should fail
ok 16 # skip git tag -l respects pager.tag (missing TTY)
ok 17 # skip git tag -l respects --no-pager (missing TTY)
ok 18 # skip git tag with no args defaults to paging (missing TTY)
ok 19 # skip git tag with no args respects pager.tag (missing TTY)
ok 20 # skip git tag --contains defaults to paging (missing TTY)
ok 21 # skip git tag --contains respects pager.tag (missing TTY)
not ok 18 - directory/submodule conflict; keep submodule clean # TODO known breakage
*** t7010-setup.sh ***
ok 22 # skip git tag -a defaults to not paging (missing TTY)
ok 37 - setup nested conflicts
ok 23 # skip git tag -a ignores pager.tag (missing TTY)
ok 11 - Using EDITOR (override)
ok 24 # skip git tag -a respects --paginate (missing TTY)
ok 25 # skip git tag as alias ignores pager.tag with -a (missing TTY)
ok 26 # skip git tag as alias respects pager.tag with -l (missing TTY)
ok 27 # skip git branch defaults to paging (missing TTY)
ok 19 - move directory with one of the files overwrite
ok 28 # skip git branch respects pager.branch (missing TTY)
ok 29 # skip git branch respects --no-pager (missing TTY)
ok 30 # skip git branch --edit-description ignores pager.branch (missing TTY)
ok 31 # skip git branch --set-upstream-to ignores pager.branch (missing TTY)
ok 32 # skip git config ignores pager.config when setting (missing TTY)
ok 12 - Using VISUAL (override)
ok 33 # skip git config --edit ignores pager.config (missing TTY)
ok 34 # skip git config --get ignores pager.config (missing TTY)
ok 35 # skip git config --get-urlmatch defaults to paging (missing TTY)
ok 36 # skip git config --get-all respects pager.config (missing TTY)
ok 37 # skip git config --list defaults to paging (missing TTY)
ok 38 - tests can detect color
ok 35 - listing all tags should print them ordered
ok 13 - Using core_editor (override)
ok 36 - listing tags with substring as pattern must print those matching
ok 19 - directory/submodule conflict; should not treat submodule files as untracked or in the way
ok 39 - no color when stdout is a regular file
ok 37 - listing tags with a suffix as pattern must print those matching
ok 40 # skip color when writing to a pager (missing TTY)
ok 41 # skip colors are suppressed by color.pager (missing TTY)
ok 1 - setup
ok 38 - listing tags with a prefix as pattern must print those matching
ok 20 - move dirty path from in-cone to out-of-cone
ok 14 - Using GIT_EDITOR (override)
ok 2 - showing a tag that point at a missing object
ok 39 - listing tags using a name as pattern must print that one matching
ok 42 - color when writing to a file intended for a pager
ok 43 # skip colors are sent to pager for external commands (missing TTY)
ok 40 - listing tags using a name as pattern must print that one matching
ok 41 - listing tags with ? in the pattern should print those matching
ok 19 - git -c gc.cruftPacks=false gc --cruft generates a cruft pack
ok 44 - setup: some aliases
ok 15 - editor with a space
ok 42 - listing tags using v.* should print nothing because none have v.
ok 45 # skip git log - default pager is used by default (missing TTY of SIMPLEPAGER,TTY)
not ok 20 - directory/submodule conflict; merge --abort works afterward # TODO known breakage
ok 46 # skip git log - PAGER overrides default pager (missing TTY)
ok 47 # skip git log - repository-local core.pager setting overrides PAGER (missing TTY)
ok 6 - correct GIT_DIR while using -d
ok 24 - 7c: rename/rename(1to...2or3); transitive rename may add complexity
ok 48 # skip git log - core.pager overrides PAGER from subdirectory (missing TTY)
ok 43 - listing tags using v* should print only those having v
ok 49 # skip git log - GIT_PAGER overrides core.pager (missing TTY)
ok 50 # skip git -p log - default pager is used by default (missing TTY of SIMPLEPAGER,TTY)
ok 44 - tag -l can accept multiple patterns
ok 51 # skip git -p log - PAGER overrides default pager (missing TTY)
ok 52 # skip git -p log - repository-local core.pager setting overrides PAGER (missing TTY)
ok 16 - core.editor with a space
ok 53 # skip git -p log - core.pager overrides PAGER from subdirectory (missing TTY)
ok 54 # skip git -p log - GIT_PAGER overrides core.pager (missing TTY)
ok 45 - tag -l <pattern> -l <pattern> works, as our buggy documentation previously suggested
# passed all 16 test(s)
1..16
ok 55 # skip git aliasedlog - default pager is used by default (missing TTY of SIMPLEPAGER,TTY)
ok 56 # skip git aliasedlog - PAGER overrides default pager (missing TTY)
ok 57 # skip git aliasedlog - repository-local core.pager setting overrides PAGER (missing TTY)
ok 21 - move dir from in-cone to out-of-cone
ok 58 # skip git aliasedlog - core.pager overrides PAGER from subdirectory (missing TTY)
*** t7011-skip-worktree-reading.sh ***
ok 59 # skip git aliasedlog - GIT_PAGER overrides core.pager (missing TTY)
ok 46 - listing tags in column
ok 60 # skip git -p aliasedlog - default pager is used by default (missing TTY of SIMPLEPAGER,TTY)
ok 38 - check nested conflicts
ok 61 # skip git -p aliasedlog - PAGER overrides default pager (missing TTY)
ok 1 - setup
ok 62 # skip git -p aliasedlog - repository-local core.pager setting overrides PAGER (missing TTY)
ok 48 - git_pull_noff: removed submodule leaves submodule containing a .git directory alone
ok 63 # skip git -p aliasedlog - core.pager overrides PAGER from subdirectory (missing TTY)
ok 64 # skip git -p aliasedlog - GIT_PAGER overrides core.pager (missing TTY)
ok 65 # skip git -p true - default pager is used by default (missing TTY of SIMPLEPAGER,TTY)
ok 66 # skip git -p true - PAGER overrides default pager (missing TTY)
ok 2 - git add (absolute)
ok 67 # skip git -p true - repository-local core.pager setting overrides PAGER (missing TTY)
ok 68 # skip git -p true - core.pager overrides PAGER from subdirectory (missing TTY)
ok 69 # skip git -p true - GIT_PAGER overrides core.pager (missing TTY)
ok 70 # skip git -p request-pull - default pager is used by default (missing TTY of SIMPLEPAGER,TTY)
ok 71 # skip git -p request-pull - PAGER overrides default pager (missing TTY)
ok 72 # skip git -p request-pull - repository-local core.pager setting overrides PAGER (missing TTY)
ok 3 - git add (funny relative)
ok 47 - listing tags in column with column.*
ok 73 # skip git -p request-pull - core.pager overrides PAGER from subdirectory (missing TTY)
ok 74 # skip git -p request-pull - GIT_PAGER overrides core.pager (missing TTY)
ok 75 # skip git -p - default pager is used by default (missing TTY of SIMPLEPAGER,TTY)
ok 48 - listing tag with -n --column should fail
ok 76 # skip git -p - PAGER overrides default pager (missing TTY)
ok 77 # skip git -p - repository-local core.pager setting is not used (missing TTY)
ok 78 # skip git -p - GIT_PAGER overrides core.pager (missing TTY)
ok 79 # skip core.pager in repo config works and retains cwd (missing TTY)
ok 80 # skip core.pager is found via alias in subdirectory (missing TTY)
ok 81 # skip no pager for 'git -p nonsense' (missing TTY)
ok 4 - git rm (absolute)
ok 82 # skip git shortlog - default pager is used by default (missing TTY of SIMPLEPAGER,TTY)
ok 83 # skip git shortlog - PAGER overrides default pager (missing TTY)
ok 84 # skip git shortlog - repository-local core.pager setting overrides PAGER (missing TTY)
ok 1 - setup: base commits
ok 49 - listing tags -n in column with column.ui ignored
ok 85 # skip git shortlog - core.pager overrides PAGER from subdirectory (missing TTY)
ok 86 # skip git shortlog - GIT_PAGER overrides core.pager (missing TTY)
ok 21 - setup for null merge base
ok 87 - setup: configure shortlog not to paginate
ok 3 - git_test_func: replace tracked file with submodule creates empty directory
ok 5 - git rm (funny relative)
ok 88 # skip no pager for 'git shortlog' (missing TTY)
ok 22 - move partially-dirty dir from in-cone to out-of-cone
ok 89 # skip git shortlog - core.pager is not used from subdirectory (missing TTY)
ok 90 # skip git -p shortlog - default pager is used by default (missing TTY of SIMPLEPAGER,TTY)
# passed all 22 test(s)
1..22
ok 91 # skip git -p shortlog - core.pager overrides PAGER from subdirectory (missing TTY)
ok 92 # skip git -p apply </dev/null - core.pager overrides PAGER from subdirectory (missing TTY)
ok 50 - a non-annotated tag created without parameters should point to HEAD
ok 2 - setup: a commit with a bogus null sha1 in the tree
ok 93 # skip command-specific pager (missing TTY)
ok 6 - git ls-files (absolute)
ok 94 # skip command-specific pager overrides core.pager (missing TTY)
ok 51 - trying to verify an unknown tag should fail
ok 95 # skip command-specific pager overridden by environment (missing TTY)
*** t7012-skip-worktree-writing.sh ***
ok 52 - trying to verify a non-annotated and non-signed tag should fail
ok 96 - setup external command
ok 3 - setup: bring HEAD and index in sync
ok 97 # skip command-specific pager works for external commands (missing TTY)
ok 53 - trying to verify many non-annotated or unknown tags, should fail
ok 7 - git ls-files (relative #1)
ok 98 # skip sub-commands of externals use their own pager (missing TTY)
ok 20 - git gc --no-cruft does not generate a cruft pack
ok 99 # skip external command pagers override sub-commands (missing TTY)
ok 3 - set up a bit of history
ok 8 - git ls-files (relative #2)
ok 100 - command with underscores does not complain
ok 54 - creating an annotated tag with -m message should succeed
ok 101 # skip git tag with auto-columns  (missing TTY)
ok 102 - setup trace2
ok 22 - merging should fail with no merge base
ok 55 - set up editor
# still have 2 known breakage(s)
# passed all remaining 20 test(s)
1..22
ok 4 - showing two commits
ok 9 - git ls-files (relative #3)
ok 5 - showing a tree
ok 56 - creating an annotated tag with -m message --edit should succeed
ok 6 - showing two trees
ok 25 - 7d: transitive rename involved in rename/delete; how is it reported?
ok 10 - commit using absolute path names
ok 57 - creating an annotated tag with -F messagefile should succeed
ok 58 - set up editor
*** t7030-verify-tag.sh ***
ok 11 - log using absolute path names
ok 59 - creating an annotated tag with -F messagefile --edit should succeed
ok 7 - tree-filter works with -d
ok 1 - setup
ok 7 - showing a trees is not recursive
ok 12 - blame using absolute path names
ok 60 - creating an annotated tag with -F - should succeed
ok 13 - setup deeper work tree
ok 14 - add a directory outside the work tree
ok 8 - showing a range walks (linear)
ok 2 - update-index
ok 61 - trying to create a tag with a non-existing -F file should fail
ok 103 - setup large log output
ok 21 - git -c gc.cruftPacks=false gc does not generate a cruft pack
ok 104 # skip git returns SIGPIPE on early pager exit (missing TTY)
ok 105 # skip git returns SIGPIPE on early pager non-zero exit (missing TTY)
ok 15 - add a file outside the work tree, nasty case 1
ok 106 # skip git discards pager non-zero exit without SIGPIPE (missing TTY)
ok 107 # skip git errors when asked to execute nonexisting pager (missing TTY)
ok 108 # skip git returns SIGPIPE on propagated signals from pager (missing TTY)
ok 109 # skip non-existent pager doesnt cause crash (missing TTY)
# passed all 109 test(s)
1..109
ok 9 - showing a range walks (Y shape, ^ first)
ok 16 - add a file outside the work tree, nasty case 2
# passed all 16 test(s)
1..16
*** t7031-verify-tag-signed-ssh.sh ***
ok 3 - update-index
ok 62 - trying to create tags giving both -m or -F options should fail
ok 10 - showing a range walks (Y shape, ^ last)
*** t7060-wtstatus.sh ***
ok 39 - setup virtual merge base with nested conflicts
ok 4 - update-index --remove
ok 63 - creating a tag with an empty -m message should succeed
ok 11 - showing with -N walks
ok 1 - setup
ok 64 - creating a tag with an empty -F messagefile should succeed
ok 12 - showing annotated tag
ok 5 - update-index --remove
ok 2 - read-tree updates worktree, absent case
ok 65 - extra blanks in the message for an annotated tag should be removed
ok 6 - ls-files --deleted
ok 66 - creating a tag with blank -m message with spaces should succeed
ok 1 # skip create signed tags (missing GPG)
ok 49 - git_pull_noff: replace submodule with a directory must fail
ok 13 - showing annotated tag plus commit
ok 8 - Fail if commit filter fails
ok 2 # skip create signed tags x509  (missing GPGSM)
ok 3 # skip verify and show signatures (missing GPG)
ok 3 - read-tree updates worktree, dirty case
ok 26 - 7e: transitive rename in rename/delete AND dirs in the way
ok 4 # skip verify and show signatures x509 (missing GPGSM)
ok 5 # skip verify and show signatures x509 with low minTrustLevel (missing GPGSM)
ok 67 - creating a tag with blank -F messagefile with spaces should succeed
ok 6 # skip verify and show signatures x509 with matching minTrustLevel (missing GPGSM)
ok 7 - ls-files --deleted
ok 7 # skip verify and show signatures x509 with high minTrustLevel (missing GPGSM)
ok 8 # skip detect fudged signature (missing GPG)
ok 4 - noop filter-branch complains
ok 9 # skip verify signatures with --raw (missing GPG)
ok 10 # skip verify signatures with --raw x509 (missing GPGSM)
ok 11 # skip verify multiple tags (missing GPG)
ok 12 # skip verify multiple tags x509 (missing GPGSM)
ok 13 # skip verifying tag with --format (missing GPG)
ok 68 - creating a tag with -F file of spaces and no newline should succeed
ok 14 - showing range
ok 4 - read-tree removes worktree, absent case
ok 8 - ls-files --modified
ok 14 # skip verifying tag with --format="%(rest)" must fail (missing GPG)
ok 15 # skip verifying a forged tag with --format should fail silently (missing GPG)
# passed all 15 test(s)
1..15
ok 22 - git -c gc.cruftPacks=true gc --no-cruft does not generate a cruft pack
ok 15 - -s suppresses diff
*** t7061-wtstatus-ignore.sh ***
ok 69 - creating a tag using a -F messagefile with #comments should succeed
ok 16 - --quiet suppresses diff
ok 4 - git_test_func: replace directory with submodule
ok 9 - ls-files --modified
ok 17 - show --graph is forbidden
ok 40 - check virtual merge base with nested conflicts
# passed all 17 test(s)
1..17
# still have 3 known breakage(s)
# passed all remaining 37 test(s)
1..40
ok 70 - creating a tag with a #comment in the -m message should succeed
ok 5 - read-tree removes worktree, dirty case
*** t7062-wtstatus-ignorecase.sh ***
ok 10 - diff-index does not examine skip-worktree absent entries
ok 1 # skip create signed tags ssh (missing GPGSSH)
ok 71 - creating a tag with #comments in the -F messagefile should succeed
ok 2 # skip create signed tags with keys having defined lifetimes (missing GPGSSH_VERIFYTIME,GPGSSH of GPGSSH,GPGSSH_VERIFYTIME)
ok 6 - index setup
ok 3 # skip verify and show ssh signatures (missing GPGSSH)
ok 4 # skip verify-tag exits failure on expired signature key (missing GPGSSH_VERIFYTIME,GPGSSH of GPGSSH,GPGSSH_VERIFYTIME)
ok 11 - diff-index does not examine skip-worktree dirty entries
ok 5 # skip verify-tag exits failure on not yet valid signature key (missing GPGSSH_VERIFYTIME,GPGSSH of GPGSSH,GPGSSH_VERIFYTIME)
ok 72 - creating a tag with a file of #comment and no newline should succeed
ok 6 # skip verify-tag succeeds with tag date and key validity matching (missing GPGSSH_VERIFYTIME,GPGSSH of GPGSSH,GPGSSH_VERIFYTIME)
ok 7 # skip verify-tag fails with tag date outside of key validity (missing GPGSSH_VERIFYTIME,GPGSSH of GPGSSH,GPGSSH_VERIFYTIME)
ok 8 # skip detect fudged ssh signature (missing GPGSSH)
ok 9 # skip verify ssh signatures with --raw (missing GPGSSH)
ok 10 # skip verify signatures with --raw ssh (missing GPGSSH)
ok 12 - diff-files does not examine skip-worktree absent entries
ok 11 # skip verify multiple tags ssh (missing GPGSSH)
ok 12 # skip verifying tag with --format - ssh (missing GPGSSH)
ok 7 - git-rm fails if worktree is dirty
ok 13 # skip verifying a forged tag with --format should fail silently - ssh (missing GPGSSH)
ok 14 # skip rev-list --format=%G (missing GPGSSH)
ok 73 - create tag with -m and --trailer
# passed all 14 test(s)
1..14
ok 13 - diff-files does not examine skip-worktree dirty entries
*** t7063-status-untracked-cache.sh ***
ok 74 - list tag extracting trailers
ok 8 - git-clean, absent case
ok 1 - setup
*** t7064-wtstatus-pv2.sh ***
ok 14 - commit on skip-worktree absent entries
ok 75 - create tag with -F and --trailer
ok 9 - git-clean, dirty case
ok 27 - 8a: Dual-directory rename, one into the others way
ok 2 - A/A conflict
ok 3 - Report path with conflict
ok 15 - commit on skip-worktree dirty entries
# passed all 15 test(s)
1..15
ok 4 - Report new path with conflict
ok 76 - create tag with -m and --trailer and --edit
*** t7101-reset-empty-subdirs.sh ***
ok 1 - status untracked directory with --ignored
ok 2 - same with gitignore starting with BOM
ok 3 - status untracked files --ignored with pathspec (no match)
ok 10 - --ignore-skip-worktree-entries leaves worktree alone
ok 77 - create tag with -F and --trailer and --edit
ok 4 - status untracked files --ignored with pathspec (literal match)
ok 1 - status with hash collisions
# passed all 1 test(s)
1..1
ok 23 - --keep-largest-pack ignores cruft packs
*** t7102-reset.sh ***
ok 5 - status untracked files --ignored with pathspec (glob match)
ok 5 - filter commands are still checked
ok 6 - status untracked directory with --ignored -u
ok 78 - create annotated tag and force editor when only --trailer is given
ok 79 - bad editor causes panic when only --trailer is given
ok 7 - status of untracked directory with --ignored works with or without prefix
ok 8 - status prefixed untracked sub-directory with --ignored -u
ok 5 - git_test_func: removed submodule leaves submodule directory and its contents in place
ok 9 - status ignored directory with --ignore
ok 5 - M/D conflict does not segfault
ok 10 - status ignored directory with --ignore -u
ok 11 - stash restore in sparse checkout
ok 11 - status empty untracked directory with --ignore
# passed all 11 test(s)
1..11
ok 1 - setup
ok 12 - status empty untracked directory with --ignore -u
*** t7103-reset-bare.sh ***
ok 2 - before initial commit, nothing added, only untracked
ok 13 - status untracked directory with ignored files with --ignore
ok 28 - 8b: Dual-directory rename, one into the others way, with conflicting filenames
ok 6 - rename & unmerged setup
ok 14 - status untracked directory with ignored files with --ignore -u
ok 80 - listing the one-line message of a non-signed tag should succeed
ok 50 - git_pull_noff: replace submodule containing a .git directory with a directory must fail
ok 7 - rename & unmerged status
ok 1 - creating initial files
ok 81 - The -n 100 invocation means -n --list 100, not -n100
ok 8 - git diff-index --cached shows 2 added + 1 unmerged
ok 3 - before initial commit, things added
ok 15 - status ignored tracked directory with --ignore
ok 1 - mv -f refreshes updated index entry
ok 4 - before initial commit, things added (-z)
ok 9 - git diff-index --cached -M shows 2 added + 1 unmerged
ok 16 - status ignored tracked directory with --ignore -u
ok 24 - gc.bigPackThreshold ignores cruft packs
ok 2 - prepare reference tree
ok 10 - git diff-index --cached -C shows 2 copies + 1 unmerged
ok 17 - status ignored tracked directory and ignored file with --ignore
ok 3 - moving the file out of subdirectory
ok 5 - make first commit, confirm HEAD oid and branch
ok 18 - status ignored tracked directory and ignored file with --ignore -u
ok 2 - creating second files
ok 4 - commiting the change
ok 3 - resetting tree HEAD^
ok 4 - checking initial files exist after rewind
ok 5 - checking lack of path1/path2/COPYING
ok 6 - checking lack of path1/COPYING
ok 7 - checking lack of COPYING
ok 8 - checking checking lack of path1/COPYING-TOO
ok 9 - checking lack of path1/path2
ok 19 - status ignored tracked directory and uncommitted file with --ignore
ok 10 - checking lack of path1
ok 6 - after first commit, create unstaged changes
# passed all 10 test(s)
1..10
ok 5 - checking the commit
*** t7104-reset-hard.sh ***
ok 6 - moving the file back into subdirectory
ok 20 - status ignored tracked directory and uncommitted file with --ignore -u
ok 7 - commiting the change
ok 82 - listing the zero-lines message of a non-signed tag should succeed
ok 21 - status ignored tracked directory with uncommitted file in untracked subdir with --ignore
ok 8 - checking the commit
ok 22 - status ignored tracked directory with uncommitted file in untracked subdir with --ignore -u
ok 9 - mv --dry-run does not move file
ok 10 - checking -k on non-existing file
ok 11 - checking -k on untracked file
ok 12 - checking -k on multiple untracked files
ok 25 - setup for --max-cruft-size tests
ok 13 - checking -f on untracked file with existing target
ok 23 - status ignored tracked directory with uncommitted file in tracked subdir with --ignore
ok 1 - setup non-bare
ok 2 - "hard" reset requires a worktree
ok 14 - moving to absent target with trailing slash
ok 24 - status ignored tracked directory with uncommitted file in tracked subdir with --ignore -u
ok 3 - "merge" reset requires a worktree
ok 4 - "keep" reset requires a worktree
ok 15 - clean up
ok 1 - creating initial files and commits
ok 5 - "mixed" reset is ok
ok 16 - moving to existing untracked target with trailing slash
ok 7 - after first commit, stash existing changes
ok 29 - 8c: modify/delete or rename+modify/delete
ok 6 - "soft" reset is ok
ok 2 - no 'git reset --no-soft'
ok 17 - moving to existing tracked target with trailing slash
ok 8 - after first commit but omit untracked files and branch
ok 7 - hard reset works with GIT_WORK_TREE
ok 25 - status ignores submodule in excluded directory
ok 3 - no 'git reset --no-mixed'
# passed all 25 test(s)
1..25
ok 18 - clean up
*** t7105-reset-patch.sh ***
ok 4 - no 'git reset --no-hard'
ok 26 - --max-cruft-size sets appropriate repack options
ok 8 - setup bare
ok 9 - "hard" reset is not allowed in bare
ok 5 - no 'git reset --no-merge'
ok 9 - after first commit, stage existing changes
ok 10 - "merge" reset is not allowed in bare
ok 11 - "keep" reset is not allowed in bare
ok 19 - adding another file
ok 6 - no 'git reset --no-keep'
ok 6 - removing the broken entry works
ok 12 - "mixed" reset is not allowed in bare
# passed all 6 test(s)
1..6
ok 20 - moving whole subdirectory
ok 6 - git_test_func: removed submodule leaves submodule containing a .git directory alone
ok 10 - rename causes 2 path lines
*** t7106-reset-unborn-branch.sh ***
ok 11 - status when conflicts with add and rm advice (deleted by them)
ok 7 - reset --hard message
ok 21 - commiting the change
ok 13 - "soft" reset is allowed in bare
# passed all 13 test(s)
1..13
ok 83 - listing many message lines of a non-signed tag should succeed
ok 22 - checking the commit
ok 11 - rename causes 2 path lines (-z)
*** t7107-reset-pathspec-file.sh ***
ok 8 - reset --hard message (ISO8859-1 logoutputencoding)
ok 23 - succeed when source is a prefix of destination
ok 9 - rewrite, renaming a specific file
ok 24 - moving whole subdirectory into subdirectory
ok 84 - annotations for blobs are empty
ok 10 - test that the file was renamed
ok 1 - setup
ok 25 - commiting the change
ok 2 - reset --hard should restore unmerged ones
ok 12 - make second commit, confirm clean and new HEAD oid
not ok 51 - git_pull_noff: replace submodule with a file must fail # TODO known breakage
ok 26 - checking the commit
ok 13 - confirm ignored files are not printed
ok 3 - reset --hard did not corrupt index or cache-tree
ok 27 - do not move directory over existing directory
ok 9 - giving a non existing revision should fail
# passed all 3 test(s)
1..3
*** t7110-reset-merge.sh ***
ok 28 - rename directory to non-existing directory
ok 14 - ignored files are printed with --ignored
ok 29 - move into "."
ok 30 - 8d: rename/delete...or not?
ok 10 - reset --soft with unmerged index should fail
ok 12 - prepare for conflicts
ok 85 - git tag --format with ahead-behind
ok 86 # skip trying to verify an annotated non-signed tag should fail (missing GPG)
ok 87 # skip trying to verify a file-annotated non-signed tag should fail (missing GPG)
ok 88 # skip trying to verify two annotated non-signed tags should fail (missing GPG)
ok 15 - create and commit permanent ignore file
ok 89 # skip creating a signed tag with -m message should succeed (missing GPG)
ok 13 - status when conflicts with add and rm advice (both deleted)
ok 90 # skip sign with a given key id (missing GPG)
ok 91 # skip sign with an unknown id (1) (missing GPG)
ok 92 # skip sign with an unknown id (2) (missing GPG)
ok 27 - gc.maxCruftSize sets appropriate repack options
ok 93 # skip -u implies signed tag (missing GPG)
ok 94 # skip creating a signed tag with -F messagefile should succeed (missing GPG)
ok 95 # skip creating a signed tag with -F - should succeed (missing GPG)
ok 96 # skip -s implies annotated tag (missing GPG)
ok 30 - Michael Cassar's test case
ok 97 # skip git tag -s implied if configured with tag.forcesignannotated (missing GPG)
ok 11 - giving paths with options different than --mixed should fail
ok 98 # skip lightweight with no message when configured with tag.forcesignannotated (missing GPG)
ok 99 # skip git tag -a disable configured tag.forcesignannotated (missing GPG)
ok 100 # skip git tag --sign enable GPG sign (missing GPG)
ok 16 - verify --intent-to-add output
ok 101 # skip git tag configured tag.gpgsign enables GPG sign (missing GPG)
ok 102 # skip git tag --no-sign configured tag.gpgsign skip GPG sign (missing GPG)
ok 1 - setup
ok 103 # skip trying to create a signed tag with non-existing -F file should fail (missing GPG)
ok 104 # skip verifying a signed tag should succeed (missing GPG)
ok 105 # skip verifying two signed tags in one command should succeed (missing GPG)
ok 106 # skip verifying many signed and non-signed tags should fail (missing GPG)
ok 107 # skip verifying a forged tag should fail (missing GPG)
ok 108 # skip verifying a proper tag with --format pass and format accordingly (missing GPG)
ok 109 # skip verifying a forged tag with --format should fail silently (missing GPG)
ok 2 - reset
ok 110 # skip creating a signed tag with an empty -m message should succeed (missing GPG)
ok 111 # skip creating a signed tag with an empty -F messagefile should succeed (missing GPG)
ok 112 # skip extra blanks in the message for a signed tag should be removed (missing GPG)
ok 113 # skip creating a signed tag with a blank -m message should succeed (missing GPG)
ok 114 # skip creating a signed tag with blank -F file with spaces should succeed (missing GPG)
ok 115 # skip creating a signed tag with spaces and no newline should succeed (missing GPG)
ok 3 - reset HEAD
ok 31 - Sergey Vlasov's test case
ok 116 # skip signed tag with embedded PGP message (missing GPG)
ok 117 # skip creating a signed tag with a -F file with #comments should succeed (missing GPG)
ok 118 # skip creating a signed tag with #commented -m message should succeed (missing GPG)
ok 119 # skip creating a signed tag with #commented -F messagefile should succeed (missing GPG)
ok 120 # skip creating a signed tag with a #comment and no newline should succeed (missing GPG)
ok 12 - giving unrecognized options should fail
ok 121 # skip listing the one-line message of a signed tag should succeed (missing GPG)
ok 14 - status when conflicts with only rm advice (both deleted)
ok 122 # skip listing the zero-lines message of a signed tag should succeed (missing GPG)
ok 1 - setup
ok 1 - setup
ok 123 # skip listing many message lines of a signed tag should succeed (missing GPG)
ok 124 # skip creating a signed tag pointing to a tree should succeed (missing GPG)
ok 4 - reset $file
ok 125 # skip creating a signed tag pointing to a blob should succeed (missing GPG)
ok 126 # skip creating a signed tag pointing to another tag should succeed (missing GPG)
ok 127 # skip creating a signed tag with rfc1991 (missing RFC1991,GPG of GPG,RFC1991)
ok 128 # skip reediting a signed tag body omits signature (missing RFC1991,GPG of GPG,RFC1991)
ok 129 # skip verifying rfc1991 signature (missing RFC1991,GPG of GPG,RFC1991)
ok 28 - --expire-to sets repack --expire-to
ok 15 - status --branch with detached HEAD
ok 32 - absolute pathname
ok 130 # skip list tag with rfc1991 signature (missing RFC1991,GPG of GPG,RFC1991)
ok 2 - --pathspec-from-file from stdin
ok 131 # skip verifying rfc1991 signature without --rfc1991 (missing RFC1991,GPG of GPG,RFC1991)
ok 132 # skip list tag with rfc1991 signature without --rfc1991 (missing RFC1991,GPG of GPG,RFC1991)
ok 133 # skip reediting a signed tag body omits signature (missing RFC1991,GPG of GPG,RFC1991)
ok 5 - reset -p
ok 134 # skip git tag -s fails if gpg is misconfigured (bad key) (missing GPG)
ok 135 # skip git tag -s fails if gpg is misconfigured (bad signature format) (missing GPG)
ok 136 # skip git verifies tag is valid with double signature (missing GPG)
ok 137 # skip git tag -s fails if gpgsm is misconfigured (bad key) (missing GPGSM)
ok 6 - reset --soft is a no-op
ok 138 # skip git tag -s fails if gpgsm is misconfigured (bad signature format) (missing GPGSM)
ok 139 # skip verify signed tag fails when public key is not present (missing GPG)
ok 16 - status --porcelain=v1 --branch with detached HEAD
ok 3 - --pathspec-from-file from file
ok 2 - saying "n" does nothing
ok 33 - absolute pathname outside should fail
ok 17 - status --porcelain=bogus
ok 140 - git tag -a fails if tag annotation is empty
ok 7 - git_test_func: replace submodule with a directory must fail
# passed all 17 test(s)
1..17
ok 141 - message in editor has initial comment
ok 7 - reset --hard
ok 142 - message in editor has initial comment: first line
# passed all 7 test(s)
1..7
ok 143 - message in editor has initial comment: remainder
ok 4 - NUL delimiters
*** t7111-reset-table.sh ***
*** t7112-reset-submodule.sh ***
ok 31 - 8e: Both sides rename, one side adds to original directory
ok 34 - git mv to move multiple sources into a directory
ok 1 - setup
ok 17 - verify AA (add-add) conflict
ok 144 - overwriting an annotated tag should use its previous body
ok 5 - LF delimiters
ok 29 - --expire-to with --prune=now sets repack --expire-to
ok 2 - reset --merge is ok with changes in file it does not touch
ok 145 - filename for the message is relative to cwd
ok 13 - trying to do reset --soft with pending merge should fail
ok 3 - git reset -p HEAD
ok 146 - filename for the message is relative to cwd
ok 35 - git mv should not change sha1 of moved cache entry
ok 3 - reset --merge is ok when switching back
ok 6 - no trailing delimiter
ok 147 - creating second commit and tag
ok 36 - git mv error on conflicted file
ok 148 - creating third commit without tag
ok 7 - CRLF delimiters
not ok 52 - git_pull_noff: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 4 - reset --keep is ok with changes in file it does not touch
ok 30 - --expire-to with --no-cruft sets repack -A
ok 4 - git reset -p @
ok 149 - checking that first commit is in all tags (hash)
ok 5 - reset --keep is ok when switching back
ok 150 - checking that first commit is in all tags (tag)
ok 8 - quotes
ok 37 - git mv should overwrite symlink to a file
ok 151 - checking that first commit is in all tags (relative)
ok 14 - trying to do reset --soft with pending checkout merge should fail
ok 152 - checking that first commit is not listed in any tag with --no-contains  (hash)
ok 5 - git reset -p 
ok 153 - checking that first commit is in all tags (tag)
ok 9 - quotes not compatible with --pathspec-file-nul
ok 6 - reset --merge discards changes added to index (1)
ok 154 - checking that first commit is in all tags (relative)
ok 38 - git mv should overwrite file with a symlink
ok 18 - verify UU (edit-edit) conflict
ok 31 - --expire-to with --no-cruft sets repack -a
ok 39 - check moved symlink
ok 155 - checking that second commit only has one tag
ok 156 - inverse of the last test, with --no-contains
ok 10 - only touches what was listed
ok 6 - git reset -p HEAD^
ok 157 - checking that third commit has no tags
ok 7 - reset --merge is ok again when switching back (1)
ok 32 - 9a: Inner renamed directory within outer renamed directory
ok 158 - conversely --no-contains on the third commit lists all tags
ok 1 - creating initial commits
ok 8 - reset --keep fails with changes in index in files it touches
ok 7 - git reset -p HEAD^^{tree}
ok 11 - error conditions
# passed all 11 test(s)
1..11
*** t7113-post-index-change-hook.sh ***
ok 2 - check: A B C D --soft A B D
ok 159 - creating simple branch
ok 9 - reset --merge discards changes added to index (2)
ok 160 - checking that branch head only has one tag
ok 8 - git_test_func: replace submodule containing a .git directory with a directory must fail
ok 161 - checking that branch head with --no-contains lists all but one tag
ok 8 - git reset -p HEAD^:dir/foo (blob fails)
ok 3 - check: A B C D --mixed A D D
ok 19 - verify upstream fields in branch header
ok 10 - reset --merge is ok again when switching back (2)
ok 162 - merging original branch into this branch
ok 163 - checking that original branch head has one tag now
ok 164 - checking that original branch head with --no-contains lists all but one tag now
ok 4 - check: A B C D --hard D D D
ok 9 - git reset -p aaaaaaaa (unknown fails)
ok 165 - checking that initial commit is in all tags
ok 11 - reset --keep keeps changes it does not touch
ok 166 - checking that --contains can be used in non-list mode
ok 5 - check: A B C D --merge XXXXX  
ok 32 - background auto gc does not run if gc.log is present and recent but does if it is old
ok 167 - checking that initial commit is in all tags with --no-contains
ok 12 - reset --keep keeps changes when switching back
ok 11 - rewrite, renaming a specific directory
ok 15 - resetting to HEAD with no changes should succeed and do nothing
ok 6 - check: A B C D --keep XXXXX  
ok 12 - test that the directory was renamed
ok 10 - git reset -p dir
ok 13 - reset --merge fails with changes in file it touches
ok 16 - --soft reset only should show changes in diff --cached
ok 7 - check: A B C C --soft A B C
ok 33 - 9b: Transitive rename with content merge
ok 11 - git reset -p -- foo (inside dir)
ok 14 - reset --keep fails with changes in file it touches
ok 1 - setup
ok 33 - background auto gc respects lock for all operations
ok 17 - changing files and redo the last commit should succeed
ok 20 - verify --[no-]ahead-behind with V2 format
ok 40 - setup submodule
ok 8 - check: A B C C --mixed A C C
ok 41 - git mv cannot move a submodule in a file
ok 12 - git reset -p HEAD^ -- dir
ok 13 - none of this moved HEAD
# passed all 13 test(s)
1..13
*** t7201-co.sh ***
ok 18 - --hard reset should change the files and undo commits permanently
ok 168 - mixing incompatibles modes and options is forbidden
ok 9 - check: A B C C --hard C C C
not ok 9 - git_test_func: replace submodule with a file must fail # TODO known breakage
ok 169 - mixing incompatible modes with --contains is forbidden
ok 10 - check: A B C C --merge XXXXX  
ok 2 - test status, add, commit, others trigger hook without flags set
ok 53 - git_pull_noff: modified submodule does not update submodule work tree
ok 170 - Doing 'git tag --list-like --contains <commit> <pattern> is permitted
ok 19 - redoing changes adding them without commit them should succeed
ok 42 - git mv moves a submodule with a .git directory and no .gitmodules
ok 171 - mixing incompatible modes with --with is forbidden
ok 15 - setup 3 different branches
ok 11 - check: A B C C --keep A C C
ok 34 - --detach overrides gc.autoDetach=false
ok 172 - Doing 'git tag --list-like --with <commit> <pattern> is permitted
ok 20 - --mixed reset to HEAD should unadd the files
ok 12 - check: B B C D --soft B B D
ok 173 - mixing incompatible modes with --no-contains is forbidden
ok 3 - test checkout and reset trigger the hook
ok 16 - "reset --merge HEAD^" is ok with pending merge
ok 174 - Doing 'git tag --list-like --no-contains <commit> <pattern> is permitted
ok 34 - 9c: Doubly transitive rename?
ok 13 - check: B B C D --mixed B D D
ok 175 - mixing incompatible modes with --without is forbidden
ok 17 - "reset --keep HEAD^" fails with pending merge
ok 4 - test reset --mixed and update-index triggers the hook
ok 21 - create and add submodule, submodule appears clean (A. S...)
ok 176 - Doing 'git tag --list-like --without <commit> <pattern> is permitted
# passed all 4 test(s)
1..4
ok 21 - redoing the last two commits should succeed
ok 14 - check: B B C D --hard D D D
*** t7300-clean.sh ***
ok 177 - mixing incompatible modes with --merged is forbidden
ok 18 - "reset --merge HEAD" is ok with pending merge
ok 22 - untracked changes in added submodule (AM S..U)
ok 178 - Doing 'git tag --list-like --merged <commit> <pattern> is permitted
ok 35 - --no-detach overrides gc.autoDetach=true
ok 15 - check: B B C D --merge D D D
# passed all 35 test(s)
1..35
ok 43 - git mv moves a submodule with a .git directory and .gitmodules
ok 179 - mixing incompatible modes with --no-merged is forbidden
ok 19 - "reset --keep HEAD" fails with pending merge
ok 16 - check: B B C D --keep XXXXX  
*** t7301-clean-interactive.sh ***
ok 23 - staged changes in added submodule (AM S.M.)
ok 180 - Doing 'git tag --list-like --no-merged <commit> <pattern> is permitted
ok 181 - mixing incompatible modes with --points-at is forbidden
not ok 10 - git_test_func: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 1 - setup
ok 17 - check: B B C C --soft B B C
ok 24 - staged and unstaged changes in added (AM S.M.)
ok 182 - Doing 'git tag --list-like --points-at <commit> <pattern> is permitted
ok 20 - --merge is ok with added/deleted merge
ok 22 - --hard reset to HEAD should clear a failed merge
ok 2 - checkout from non-existing branch
ok 183 - --points-at can be used in non-list mode
ok 3 - checkout with dirty tree without -m
ok 184 - --points-at is a synonym for --points-at HEAD
ok 18 - check: B B C C --mixed B C C
ok 25 - staged and untracked changes in added submodule (AM S.MU)
ok 4 - checkout with unrelated dirty tree without -m
ok 185 - --points-at finds lightweight tags
ok 186 - --points-at finds annotated tags of commits
ok 21 - --keep fails with added/deleted merge
# passed all 21 test(s)
1..21
ok 35 - 9d: N-way transitive rename?
ok 19 - check: B B C C --hard C C C
*** t7400-submodule-basic.sh ***
ok 26 - commit within the submodule appears as new commit in super (AM SC..)
ok 187 - --points-at finds annotated tags of tags
ok 1 - setup
ok 5 - checkout -m with dirty tree
ok 188 - recursive tagging should give advice
ok 44 - git mv moves a submodule with gitfile
ok 20 - check: B B C C --merge C C C
ok 189 - multiple --points-at are OR-ed together
ok 2 - git clean with skip-worktree .gitignore
ok 3 - git clean
ok 1 - setup
ok 27 - stage submodule in super and commit
ok 6 - checkout -m with dirty tree, renamed
ok 2 - git clean -i (c: clean hotkey)
ok 4 - git clean src/
ok 190 - lexical sort
ok 23 - --hard reset to ORIG_HEAD should clear a fast-forward merge
ok 21 - check: B B C C --keep B C C
ok 5 - git clean src/ src/
ok 3 - git clean -i (cl: clean prefix)
ok 191 - version sort
ok 6 - git clean with prefix
ok 4 - git clean -i (quit)
ok 192 - reverse version sort
ok 28 - make unstaged changes in existing submodule (.M S.M.)
ok 7 - git clean with relative prefix
# passed all 28 test(s)
1..28
ok 5 - git clean -i (Ctrl+D)
ok 193 - reverse lexical sort
ok 6 - git clean -id (filter all)
ok 8 - git clean with absolute path
ok 22 - check: B C C D --soft B C D
ok 7 - checkout -m with merge conflict
ok 1 - setup
ok 7 - git clean -id (filter patterns)
ok 9 - git clean with out of work tree relative path
ok 8 - git clean -id (filter patterns 2)
ok 10 - git clean with out of work tree absolute path
ok 194 - configured lexical sort
ok 9 - git clean -id (select - all)
ok 11 - git clean -d with prefix and path
ok 54 - git_pull_noff: modified submodule does not update submodule work tree to invalid commit
*** t7401-submodule-summary.sh ***
ok 10 - git clean -id (select - none)
ok 23 - check: B C C D --mixed B D D
ok 8 - format of merge conflict from checkout -m
ok 195 - option override configured sort
ok 11 - git clean -id (select - number)
ok 12 - git clean symbolic link
ok 1 - setup - enable local submodules
ok 2 - ref_newer:miss
ok 13 - git clean with wildcard
ok 12 - git clean -id (select - number 2)
ok 24 - test --mixed <paths>
ok 196 - --no-sort cancels config sort keys
ok 14 - git clean -n
ok 13 - git clean -id (select - number 3)
ok 45 - mv does not complain when no .gitmodules file is found
ok 24 - check: B C C D --hard D D D
ok 15 - git clean -d
ok 197 - --no-sort cancels command line sort keys
ok 2 - submodule usage: -h
ok 9 - checkout --merge --conflict=diff3 <branch>
ok 14 - git clean -id (select - filenames)
ok 25 - check: B C C D --merge XXXXX  
ok 16 - git clean -d src/ examples/
ok 15 - git clean -id (select - range)
ok 198 - --no-sort without subsequent --sort prints expected tags
ok 17 - git clean -x
ok 3 - ref_newer:hit
ok 199 - invalid sort parameter on command line
ok 25 - test resetting the index at give paths
ok 26 - check: B C C D --keep XXXXX  
ok 18 - git clean -d -x
ok 16 - git clean -id (select - range 2)
ok 36 - 9e: N-to-1 whammo
ok 13 - populate --state-branch
ok 200 - invalid sort parameter in configuratoin
ok 17 - git clean -id (inverse select)
ok 19 - git clean -d -x with ignored tracked directory
ok 18 - git clean -id (ask)
ok 10 - switch to another branch while carrying a deletion
ok 20 - git clean -X
ok 26 - resetting an unmodified path is a no-op
ok 27 - check: B C C C --soft B C C
ok 201 - version sort handles empty value for versionsort.{prereleaseSuffix,suffix}
ok 21 - git clean -d -X
ok 3 - submodule usage: --recursive
ok 19 - git clean -id (ask - Ctrl+D)
ok 22 - git clean -d -X with ignored tracked directory
ok 4 - in_merge_bases:hit
ok 23 - clean.requireForce defaults to true
ok 20 - git clean -id with prefix and path (filter)
ok 24 - clean.requireForce
ok 28 - check: B C C C --mixed B C C
ok 21 - git clean -id with prefix and path (select by name)
ok 202 - version sort with prerelease reordering
ok 25 - clean.requireForce and -n
ok 22 - git clean -id with prefix and path (ask)
ok 26 - clean.requireForce and -f
ok 11 - checkout to detach HEAD (with advice declined)
ok 27 - --mixed refreshes the index
ok 11 - git_test_func: modified submodule does not update submodule work tree
ok 27 - clean.requireForce and --interactive
ok 29 - check: B C C C --hard C C C
ok 203 - reverse version sort with prerelease reordering
Initialized empty Git repository in /tmp/src/git-2.49.0/t/trash directory.t7401-submodule-summary/sm1/.git/
ok 28 - core.excludesfile
ok 23 # skip git clean -i paints the header in HEADER color (missing TTY)
ok 5 - in_merge_bases:miss
# passed all 23 test(s)
1..23
*** t7402-submodule-rebase.sh ***
ok 30 - check: B C C C --merge B C C
ok 28 - --mixed --[no-]refresh sets refresh behavior
ok 204 - version sort with prerelease reordering and common leading character
ok 12 - checkout to detach HEAD
ok 46 - mv will error out on a modified .gitmodules file unless staged
ok 29 - removal failure
ok 6 - in_merge_bases_many:hit
ok 205 - version sort with prerelease reordering, multiple suffixes and common leading character
ok 31 - check: B C C C --keep B C C
ok 4 - submodule usage: status --
ok 29 - --mixed preserves skip-worktree
ok 13 - checkout to detach HEAD with branchname^
ok 37 - 9f: Renamed directory that only contained immediate subdirs
ok 14 - checkout to detach HEAD with :/message
ok 206 - version sort with prerelease reordering, multiple suffixes match the same tag
ok 30 - resetting specific path that is unmerged
ok 7 - in_merge_bases_many:miss
ok 30 - nested git work tree
ok 15 - checkout to detach HEAD with HEAD^0
ok 31 - disambiguation (1)
ok 32 - setting up branches to test with unmerged entries
ok 1 - added submodule
ok 207 - version sort with prerelease reordering, multiple suffixes match starting at the same position
ok 31 - should clean things that almost look like git but are not
ok 14 - using --state-branch to skip already rewritten commits
ok 8 - in_merge_bases_many:miss-heuristic
ok 32 - disambiguation (2)
ok 33 - check: X U B C --soft XXXXX  
ok 16 - checkout with ambiguous tag/branch names
ok 47 - mv issues a warning when section is not found in .gitmodules
ok 33 - disambiguation (3)
ok 9 - is_descendant_of:hit
ok 2 - added submodule (subdirectory)
ok 208 - version sort with general suffix reordering
ok 34 - check: X U B C --mixed X C C
ok 55 - git_pull_noff: modified submodule does not update submodule work tree from invalid commit
ok 5 - submodule usage: status --quiet
ok 34 - disambiguation (4)
ok 17 - checkout with ambiguous tag/branch names
not ok 38 - 9g: Renamed directory that only contained immediate subdirs, immediate subdirs renamed # TODO known breakage
ok 209 - versionsort.suffix overrides versionsort.prereleaseSuffix
ok 35 - reset with paths accepts tree
ok 10 - is_descendant_of:miss
ok 210 - version sort with very long prerelease suffix
ok 18 - switch branches while in subdirectory
ok 35 - check: X U B C --hard C C C
ok 3 - added submodule (subdirectory only)
ok 36 - reset -N keeps removed files as intent-to-add
ok 1 - setup
ok 19 - checkout specific path while in subdirectory
ok 36 - check: X U B C --merge C C C
ok 11 - get_merge_bases_many
ok 48 - mv --dry-run does not touch the submodule or .gitmodules
ok 37 - reset --mixed sets up work tree
ok 4 - added submodule (subdirectory with explicit path)
ok 20 - checkout w/--track sets up tracking
ok 37 - check: X U B C --keep XXXXX  
ok 38 - reset handles --end-of-options
# passed all 38 test(s)
1..38
ok 12 - git_test_func: modified submodule does not update submodule work tree to invalid commit
*** t7403-submodule-sync.sh ***
ok 2 - rebase with a dirty submodule
ok 12 - reduce_heads
ok 38 - check: X U B B --soft XXXXX  
ok 21 - checkout w/autosetupmerge=always sets up tracking
ok 6 - submodule usage: status --cached
ok 56 - git_pull_noff: added submodule doesn't remove untracked unignored file with same name
ok 57 - setup
ok 15 - rewrite one branch, keeping a side branch
ok 39 - 9h: Avoid dir rename on merely modified path
ok 3 - interactive rebase with a dirty submodule
ok 22 - checkout w/--track from non-branch HEAD fails
ok 16 - common ancestor is still common (unchanged)
ok 39 - check: X U B B --mixed X B B
ok 13 - can_all_from_reach:hit
ok 7 - submodule deinit works on empty repository
ok 4 - rebase with dirty file and submodule fails
ok 23 - checkout w/--track from tag fails
ok 1 - git reset --keep --recurse-submodules: added submodule is checked out
ok 5 - modified submodule(forward)
ok 8 - setup - initial commit
ok 32 - should not clean submodules
ok 40 - check: X U B B --hard B B B
ok 33 - should avoid cleaning possible submodules
ok 14 - can_all_from_reach:miss
ok 49 - checking out a commit before submodule moved needs manual updates
ok 24 - detach a symbolic link HEAD
ok 34 - nested (empty) git should be kept
ok 41 - check: X U B B --merge B B B
ok 6 - modified submodule(forward), --files
ok 9 - submodule init aborts on missing .gitmodules file
ok 5 - stash with a dirty submodule
ok 15 - can_all_from_reach_with_flag: tags case
ok 42 - check: X U B B --keep XXXXX  
# passed all 42 test(s)
1..42
ok 40 - 10a: Overwrite untracked with normal rename/delete
*** t7406-submodule-update.sh ***
ok 35 - nested bare repositories should be cleaned
ok 50 - mv -k does not accidentally destroy submodules
not ok 36 - nested (empty) bare repositories should be cleaned even when in .git # TODO known breakage
ok 51 - moving a submodule in nested directories
ok 10 - submodule update aborts on missing .gitmodules file
ok 25 - checkout with --track fakes a sensible -b <name>
not ok 37 - nested (non-empty) bare repositories should be cleaned even when in .git # TODO known breakage
ok 26 - checkout with --track, but without -b, fails with too short tracked name
ok 7 - no ignore=all setting has any effect
ok 2 - git reset --keep --recurse-submodules: added submodule is checked out in empty dir
ok 16 - commit_contains:hit
ok 27 - checkout an unmerged path should fail
ok 6 - rebasing submodule that should conflict
# passed all 6 test(s)
1..6
*** t7407-submodule-foreach.sh ***
ok 38 - giving path in nested git work tree will NOT remove it
ok 13 - git_test_func: modified submodule does not update submodule work tree from invalid commit
ok 11 - submodule update aborts on missing gitmodules url
ok 28 - checkout with an unmerged path can be ignored
ok 58 - pull --recurse-submodule setup
ok 41 - 10b: Overwrite untracked with dir rename + delete
ok 39 - giving path to nested .git will not remove it
ok 8 - modified submodule(backward)
ok 29 - checkout unmerged stage
ok 17 - filter subdirectory only
ok 17 - commit_contains:miss
ok 12 - add aborts on repository with no commits
ok 30 - checkout --ours is incompatible with switching
ok 40 - giving path to nested .git/ will NOT remove contents
ok 18 - subdirectory filter result looks okay
ok 31 - checkout path with --merge from tree-ish is a no-no
ok 14 - git_test_func: added submodule doesn't remove untracked unignored file with same name
ok 18 - rev-list: basic topo-order
ok 32 - checkout with --merge
ok 19 - more setup
ok 3 - git reset --keep --recurse-submodules: replace tracked file with submodule checks out submodule
ok 13 - status should ignore inner git repo when not added
ok 9 - modified submodule(backward and forward)
ok 19 - rev-list: first-parent topo-order
ok 41 - force removal of nested git work tree
ok 42 - 10c1: Overwrite untracked with dir rename/rename(1to2)
ok 33 - checkout -m works after (mistaken) resolution
ok 14 - setup - repository in init subdirectory
ok 42 - git clean -e
ok 43 - git clean -d with an unreadable empty directory
ok 20 - rev-list: range topo-order
ok 15 - setup - commit with gitlink
ok 16 - setup - hide init subdirectory
ok 44 - git clean -d respects pathspecs (dir is prefix of pathspec)
ok 34 - checkout -m works after (mistaken) resolution to remove
ok 17 - setup - repository to add submodules to
ok 45 - git clean -d respects pathspecs (pathspec is prefix of dir)
ok 10 - --summary-limit
ok 46 - git clean -d skips untracked dirs containing ignored files
ok 21 - rev-list: range topo-order
ok 47 - git clean -d skips nested repo containing ignored files
ok 35 - checkout with --merge, in diff3 -m style
ok 48 - git clean handles being told what to clean
ok 22 - rev-list: first-parent range topo-order
ok 49 - git clean handles being told what to clean, with -d
ok 50 - git clean works if a glob is passed without -d
ok 51 - git clean works if a glob is passed with -d
ok 4 - git reset --keep --recurse-submodules: replace directory with submodule
ok 52 # skip handle clean & core.longpaths = false nicely (missing MINGW)
ok 36 - checkout --conflict=merge, overriding config
ok 11 - typechanged submodule(submodule->blob), --cached
ok 59 - recursive pull updates working tree
ok 53 - clean untracked paths by pathspec
ok 23 - rev-list: ancestry-path topo-order
ok 43 - 10c2: Overwrite untracked with dir rename/rename(1to2), other direction
ok 54 - avoid traversing into ignored directories
ok 37 - checkout --conflict=diff3
ok 55 - traverse into directories that may have ignored entries
# still have 2 known breakage(s)
# passed all remaining 53 test(s)
1..55
ok 12 - typechanged submodule(submodule->blob), --files
ok 15 - git_test_func: added submodule creates empty directory
ok 24 - rev-list: symmetric difference topo-order
*** t7408-submodule-reference.sh ***
ok 38 - checkout --conflict=diff3 --no-conflict does not merge
ok 18 - submodule add
ok 39 - checkout --conflict=diff3 --no-merge does not merge
ok 52 - moving nested submodules
ok 25 - get_reachable_subset:all
ok 13 - typechanged submodule(submodule->blob)
Initialized empty Git repository in /tmp/src/git-2.49.0/t/trash directory.t7401-submodule-summary/sm1/.git/
not ok 53 - nonsense mv triggers assertion failure and partially updated index # TODO known breakage
# still have 1 known breakage(s)
# passed all remaining 52 test(s)
1..53
ok 40 - checkout --no-merge --conflict=diff3 does merge
ok 26 - get_reachable_subset:some
ok 41 - checkout --merge --conflict=diff3 --no-conflict does merge
*** t7409-submodule-detached-work-tree.sh ***
ok 42 - checkout with invalid conflict style
ok 19 - submodule add (absolute path)
ok 44 - 10d: Delete untracked with dir rename/rename(2to1)
ok 5 - git reset --keep --recurse-submodules: nested submodules are checked out
ok 1 - setup
ok 27 - get_reachable_subset:none
ok 43 - failing checkout -b should not break working tree
ok 20 - setup parent and one repository
ok 14 - nonexistent commit
ok 44 - switch out of non-branch
ok 2 - preparing first repository
ok 28 - for-each-ref ahead-behind:linear
ok 3 - preparing second repository
ok 15 - typechanged submodule(blob->submodule)
ok 60 - submodule.recurse option triggers recursive pull
ok 1 - setup
ok 4 - preparing superproject
ok 21 - redirected submodule add does not show progress
ok 29 - for-each-ref ahead-behind:all
ok 45 - 10e: Does git complain about untracked file that is not really in the way?
ok 16 - git_test_func: added submodule leaves existing empty directory alone
ok 16 - deleted submodule
ok 45 - custom merge driver with checkout -m
ok 1 - setup
ok 30 - for-each-ref ahead-behind:some
ok 2 - change submodule
ok 1 - setup a submodule tree
ok 17 - create second submodule
ok 22 - redirected submodule add --progress does show progress
ok 46 - tracking info copied with autoSetupMerge=inherit
ok 46 - 11a: Avoid losing dirty contents with simple rename
ok 5 - submodule add --reference uses alternates
# passed all 46 test(s)
1..46
ok 31 - for-each-ref ahead-behind:some, multibase
*** t7411-submodule-config.sh ***
ok 18 - multiple submodules
ok 3 - change submodule url
ok 23 - submodule add to .gitignored path fails
ok 1 - setup a submodule tree
ok 6 - git reset --keep --recurse-submodules: removed submodule removes submodules working tree
ok 32 - for-each-ref ahead-behind:none
ok 19 - path filter
ok 33 - for-each-ref merged:linear
ok 24 - submodule add to .gitignored path with --force
ok 47 - 11b: Avoid losing dirty file involved in directory rename
ok 20 - use index-filter to move into a subdirectory
ok 1 - setup
ok 20 - given commit
ok 6 - submodule add --reference with --dissociate does not use alternates
ok 7 - that reference gets used with add
ok 34 - for-each-ref merged:all
ok 17 - git_test_func: replace tracked file with submodule creates empty directory
ok 25 - submodule add to path with tracked content fails
ok 21 - --for-status
ok 35 - for-each-ref ahead-behind:some
ok 4 - "git submodule sync" should update submodule URLs
ok 2 - submodule on detached working tree
ok 2 - test basic "submodule foreach" usage
ok 22 - fail when using --files together with --cached
ok 21 - stops when msg filter fails
ok 36 - for-each-ref merged:some, multibase
ok 48 - 11c: Avoid losing not-uptodate with rename + D/F conflict
ok 3 - test "submodule foreach" from subdirectory
ok 23 - should not fail in an empty repo
# passed all 23 test(s)
1..23
*** t7412-submodule-absorbgitdirs.sh ***
ok 37 - for-each-ref merged:none
ok 7 - git reset --keep --recurse-submodules: removed submodule absorbs submodules .git directory
ok 8 - updating superproject keeps alternates
ok 2 - submodule config cache setup
ok 5 - "git submodule sync --recursive" should update all submodule URLs
ok 38 - get_branch_base_for_tip: none reach
ok 6 - reset submodule URLs
ok 3 - configuration parsing with error
ok 4 - test parsing and lookup of submodule config by path
ok 2 - update --remote falls back to using HEAD
ok 5 - test parsing and lookup of submodule config by name
ok 26 - submodule add to reconfigure existing submodule with --force
ok 39 - get_branch_base_for_tip: equal to tip
ok 49 - 11d: Avoid losing not-uptodate with rename + D/F conflict
ok 40 - get_branch_base_for_tip: all reach tip
ok 6 - error in history of one submodule config lets continue, stderr message contains blob ref
ok 18 - git_test_func: replace directory with submodule
ok 27 - submodule add relays add --dry-run stderr
ok 7 - using different treeishs works
ok 61 -  --[no-]recurse-submodule and submodule.recurse
ok 3 - submodule update detaching the HEAD 
ok 211 - --contains and --no-contains work in a deep repo
ok 7 - "git submodule sync" should update submodule URLs - subdirectory
ok 212 - --format should list tags as per format given
ok 41 - for-each-ref is-base: none reach
ok 213 - --format --omit-empty works
ok 214 - git tag -l with --format="%(rest)" must fail
ok 215 - set up color tests
ok 8 - error in history in fetchrecursesubmodule lets continue
ok 216 - %(color) omitted without tty
ok 9 - reading submodules config from the working tree
ok 9 - updating superproject with --dissociate does not keep alternates
ok 3 - submodule on detached working pointed by core.worktree
ok 8 - git reset --keep --recurse-submodules: replace submodule with a file
# passed all 3 test(s)
1..3
ok 10 - unsetting submodules config from the working tree
ok 1 - setup a real submodule
ok 217 # skip %(color) present with tty (missing TTY)
ok 11 - writing submodules config
*** t7413-submodule-is-active.sh ***
ok 218 - --color overrides auto-color
ok 50 - 11e: Avoid deleting not-uptodate with dir rename/rename(1to2)/add
ok 42 - for-each-ref is-base: all reach
ok 12 - overwriting unstaged submodules config
ok 219 - color.ui=always overrides auto-color
ok 13 - writeable .gitmodules when it is in the working tree
ok 220 - setup --merged test tags
ok 62 - fetch.recurseSubmodules option triggers recursive fetch (but not recursive update)
ok 4 - submodule update from subdirectory
ok 14 - writeable .gitmodules when it is nowhere in the repository
ok 43 - for-each-ref is-base: equal to tip
ok 8 - "git submodule sync --recursive" should update all submodule URLs - subdirectory
ok 15 - non-writeable .gitmodules when it is in the index but not in the working tree
ok 2 - absorb the git dir
ok 221 - --merged can be used in non-list mode
ok 28 - submodule add --branch
ok 16 - non-writeable .gitmodules when it is in the current branch but not in the index
ok 19 - git_test_func: removed submodule leaves submodule directory and its contents in place
ok 44 - for-each-ref is-base:multiple
ok 63 - fetch.recurseSubmodules takes precedence over submodule.recurse
ok 17 - reading submodules config from the index when .gitmodules is not in the working tree
ok 51 - 11f: Avoid deleting not-uptodate with dir rename/rename(2to1)
ok 18 - reading submodules config from the current branch when .gitmodules is not in the index
ok 222 - --merged is compatible with --no-merged
ok 9 - "git submodule sync" should update known submodule URLs
ok 10 - submodules use alternates when cloning a superproject
not ok 9 - git reset --keep --recurse-submodules: replace submodule with a file must fail with untracked files # TODO known breakage
ok 223 - --merged shows merged tags
ok 45 - for-each-ref is-base: --sort
# passed all 45 test(s)
1..45
ok 29 - submodule add with ./ in path
ok 224 - --no-merged show unmerged tags
*** t7414-submodule-mistakes.sh ***
ok 52 - 12a: Moving one directory hierarchy into another
ok 19 - reading nested submodules config
ok 22 - author information is preserved
ok 20 - reading nested submodules config when .gitmodules is not in the working tree
ok 5 - submodule update --init --recursive from subdirectory
ok 10 - "git submodule sync" should not vivify uninteresting submodule
# passed all 20 test(s)
1..20
*** t7416-submodule-dash-url.sh ***
ok 3 - absorbing does not fail for deinitialized submodules
ok 225 - --no-merged can be used in non-list mode
ok 20 - git_test_func: removed submodule leaves submodule containing a .git directory alone
ok 11 - "git submodule sync" handles origin URL of the form foo
ok 4 - setup nested submodules
ok 226 - ambiguous branch/tags not marked
ok 11 - missing submodule alternate fails clone and submodule update
ok 1 - setup
ok 2 - is-active works with urls
ok 53 - 12b1: Moving two directory hierarchies into each other
ok 30 - submodule add with /././ in path
ok 12 - "git submodule sync" handles origin URL of the form foo/bar
ok 1 - create embedded repository
ok 2 - git-add on embedded repository warns
ok 3 - is-active works with submodule.<name>.active config
ok 1 - setup
ok 3 - --no-warn-embedded-repo suppresses warning
ok 4 - is-active handles submodule.active config missing a value
ok 4 - setup nested submodule
ok 64 - pull --rebase --recurse-submodules (remote superproject submodule changes, local submodule changes)
ok 5 - is-active works with basic submodule.active config
ok 4 - no warning when updating entry
ok 227 - --contains combined with --no-contains
ok 13 - "git submodule sync --recursive" propagates changes in origin
ok 6 - is-active correctly works with paths that are not submodules
ok 6 - submodule update --init from and of subdirectory
ok 7 - is-active works with exclusions in submodule.active config
ok 228 - Does --[no-]contains stop at commits? Yes!
ok 229 - If tag is created then tag message file is unlinked
ok 14 - "git submodule sync" handles origin URL of the form ./foo
ok 21 - git_test_func: replace submodule with a directory must fail
ok 8 - is-active with submodule.active and submodule.<name>.active
ok 5 - absorb the git dir in a nested submodule
ok 54 - 12b2: Moving two directory hierarchies into each other
ok 2 - create submodule with protected dash in url
ok 230 - If tag cannot be created then tag message file is not unlinked
# passed all 230 test(s)
1..230
*** t7417-submodule-path-url.sh ***
ok 31 - submodule add with // in path
ok 10 - git reset --keep --recurse-submodules: worktrees of nested submodules are removed
ok 15 - "git submodule sync" handles origin URL of the form ./foo/bar
ok 5 - submodule add does not warn
# passed all 5 test(s)
1..5
ok 12 - ignoring missing submodule alternates passes clone and submodule update
ok 7 - submodule update does not fetch already present commits
*** t7418-submodule-sparse-gitmodules.sh ***
ok 6 - re-setup nested submodule
ok 16 - "git submodule sync" handles origin URL of the form ../foo
ok 3 - clone can recurse submodule
ok 8 - submodule update should fail due to local changes
ok 1 - setup
ok 55 - 12c1: Moving one directory hierarchy into another w/ content merge
ok 17 - "git submodule sync" handles origin URL of the form ../foo/bar
ok 65 - pull --rebase --recurse-submodules fails if both sides record submodule changes
ok 7 - absorb the git dir in a nested submodule
ok 4 - fsck accepts protected dash
ok 1 - setup
ok 32 - submodule add with /.. in path
ok 9 - is-active, submodule.active and submodule add
# passed all 9 test(s)
1..9
ok 5 - remove ./ protection from .gitmodules url
*** t7419-submodule-set-branch.sh ***
ok 9 - submodule update should throw away changes with --force 
ok 22 - git_test_func: replace submodule containing a .git directory with a directory must fail
ok 2 - create submodule with dash in path
ok 10 - submodule update --force forcibly checks out submodules
ok 18 - "git submodule sync" handles origin URL of the form ../foo/bar with deeply nested submodule
ok 6 - clone rejects unprotected dash
# passed all 18 test(s)
1..18
ok 5 - use "submodule foreach" to checkout 2nd level submodule
ok 56 - 12c2: Moving one directory hierarchy into another w/ content merge
ok 1 - setup
ok 7 - fsck rejects unprotected dash
ok 3 - clone rejects unprotected dash
ok 2 - sparse checkout setup which hides .gitmodules
ok 23 - remove a certain author's commits
ok 11 - git reset --keep --recurse-submodules: modified submodule updates submodule work tree
ok 3 - reading gitmodules config file when it is not checked out
*** t7420-submodule-set-url.sh ***
ok 4 - not writing gitmodules config file when it is not checked out
ok 33 - submodule add with ./, /.. and // in path
ok 4 - fsck rejects unprotected dash
ok 5 # skip submodule paths disallows trailing spaces (missing MINGW)
# passed all 5 test(s)
1..5
*** t7421-submodule-summary-add.sh ***
ok 6 - usage: foreach -- --not-an-option
ok 11 - submodule update --remote should fetch upstream changes
ok 5 - initialising submodule when the gitmodules config is not checked out
not ok 23 - git_test_func: replace submodule with a file must fail # TODO known breakage
ok 13 - preparing second superproject with a nested submodule plus partial clone
ok 8 - absorb the git dir outside of primary worktree
ok 1 - setup
ok 57 - 12d: Rename/merge subdir into the root, variant 1
ok 34 - submodule add with \\ in path
ok 24 - barf on invalid name
ok 6 - updating submodule when the gitmodules config is not checked out
ok 9 - setup a gitlink with missing .gitmodules entry
ok 1 - setup
ok 8 - trailing backslash is handled correctly
ok 2 - submodule config cache setup
ok 3 - ensure submodule branch is unset
ok 12 - git reset --keep --recurse-submodules: updating to a missing submodule commit fails
ok 9 - fsck rejects missing URL scheme
ok 10 - absorbing the git dir fails for incomplete submodules
ok 2 - summary test environment setup
ok 66 - pull --rebase --recurse-submodules (no submodule changes, no fork-point)
ok 35 - submodule add in subdirectory
ok 58 - 12e: Rename/merge subdir into the root, variant 2
not ok 24 - git_test_func: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 25 - "map" works in commit filter
ok 36 - submodule add in subdirectory with relative path should fail
ok 37 - setup - add an example entry to .gitmodules
ok 10 - fsck rejects relative URL resolving to missing scheme
ok 2 - submodule config cache setup
ok 12 - submodule update --remote should fetch upstream changes with .
ok 38 - status should fail for unmapped paths
ok 39 - setup - map path in .gitmodules
ok 11 - setup a submodule with multiple worktrees
ok 4 - test submodule set-branch --branch
ok 14 - nested submodule alternate in works and is actually used
ok 11 - fsck rejects empty URL scheme
ok 40 - status should only print one line
ok 12 - absorbing fails for a submodule with multiple worktrees
# passed all 12 test(s)
1..12
*** t7422-submodule-output.sh ***
ok 3 - submodule summary output for initialized submodule
ok 13 - local config should override .gitmodules branch
ok 7 - use "foreach --recursive" to checkout all submodules
ok 12 - fsck rejects relative URL resolving to empty scheme
ok 26 - Name needing quotes
ok 5 - test submodule set-branch --default
ok 13 - git reset --keep --recurse-submodules: submodule branch is not changed, detach HEAD instead
ok 67 - branch has no merge base with remote-tracking counterpart
ok 14 - submodule update --rebase staying on main
ok 13 - fsck rejects empty hostname
ok 8 - test messages from "foreach --recursive"
ok 25 - git_test_func: modified submodule does not update submodule work tree
ok 15 - missing nested submodule alternate fails clone and submodule update
ok 9 - test messages from "foreach --recursive" from subdirectory
ok 14 - fsck rejects relative url that produced empty hostname
ok 59 - 12f: Trivial directory resolve, caching, all kinds of fun
ok 15 - submodule update --merge staying on main
ok 14 - git reset --keep --recurse-submodules: added submodule doesn't remove untracked file with same name
ok 7 - re-updating submodule when the gitmodules config is not checked out
ok 3 - test submodule set-url
# passed all 3 test(s)
1..3
ok 6 - test submodule set-branch -b
*** t7423-submodule-symlinks.sh ***
ok 15 - fsck permits embedded newline with unrecognized scheme
ok 10 - test "submodule foreach --recursive" from subdirectory
ok 16 - submodule update - rebase in .git/config
ok 8 - not adding submodules when the gitmodules config is not checked out
ok 16 - fsck rejects embedded newline in url
ok 9 - init submodule still works even after the previous add failed
ok 4 - submodule summary output for deinitialized submodule
# passed all 9 test(s)
1..9
ok 27 - Subdirectory filter with disappearing trees
ok 15 - git reset --keep --recurse-submodules: added submodule removes an untracked ignored file
ok 11 - test "foreach --quiet --recursive"
ok 60 - 12g: Testcase with two kinds of "relevant" renames
*** t7424-submodule-mixed-ref-formats.sh ***
ok 17 - submodule update - checkout in .git/config but --rebase given
ok 7 - test submodule set-branch -d
ok 17 - fsck rejects embedded newline in relative url
ok 5 - submodule summary output for submodules with changed paths
# passed all 5 test(s)
1..5
*** t7450-bad-git-dotfiles.sh ***
ok 26 - git_test_func: modified submodule does not update submodule work tree to invalid commit
ok 16 - missing nested submodule alternate in --reference-if-able mode
# passed all 16 test(s)
1..16
ok 68 - fetch submodule remote of different name from superproject
# still have 8 known breakage(s)
# passed all remaining 60 test(s)
1..68
not ok 61 - 12h: renaming a file within a renamed directory # TODO known breakage
*** t7500-commit-template-squash-signoff.sh ***
ok 18 - submodule update - merge in .git/config
ok 18 - fsck rejects embedded newline in git url
# passed all 18 test(s)
1..18
*** t7501-commit-basic-functionality.sh ***
ok 1 - setup
ok 1 - prepare
*** t7502-commit-porcelain.sh ***
ok 8 - test submodule set-branch --branch with named submodule
ok 1 - setup
not ok 16 - git reset --keep --recurse-submodules: replace submodule with a directory # TODO known breakage
ok 2 - git submodule update must not create submodule behind symlink
ok 2 - check names
ok 28 - Tag name filtering retains tag message
ok 19 - submodule update - checkout in .git/config but --merge given
ok 3 # skip git submodule update must not create submodule behind symlink on case insensitive fs (missing CASE_INSENSITIVE_FS of SYMLINKS,CASE_INSENSITIVE_FS)
ok 3 - check urls
ok 62 - 12i: Directory rename causes rename-to-self
ok 4 - create innocent subrepo
ok 1 - a basic commit in an empty tree should succeed
ok 2 - add existing repository with different ref storage format
ok 2 - nonexistent template file should return error
ok 1 - initial status
ok 4 - git restore --recurse-submodules must not be confused by a symlink
ok 3 - nonexistent template file in config should return error
ok 2 - fail initial amend
ok 4 - unedited template should not commit
ok 3 - setup: initial commit
ok 5 - unedited template with comments should not commit
ok 5 - submodule add refuses invalid names
ok 6 - a Signed-off-by line by itself should not commit
ok 4 - -m and -F do not mix
ok 7 - adding comments to a template should not commit
ok 20 - submodule update - checkout in .git/config
ok 1 - output summary format
ok 5 - -m and -C do not mix
ok 6 - paths and -a do not mix
ok 5 - git restore --recurse-submodules must not migrate git dir of symlinked repo
ok 8 - adding real content to a template should commit
ok 27 - git_test_func: modified submodule does not update submodule work tree from invalid commit
ok 2 - output summary format: root-commit
ok 7 - can use paths with --interactive
ok 9 - -t option should be short for --template
ok 9 - test submodule set-branch --default with named submodule
# passed all 9 test(s)
1..9
ok 41 - status from subdirectory should have the same SHA1
ok 42 - setup - fetch commit name from submodule
ok 63 - 12j: Directory rename to root causes rename-to-self
ok 6 - git checkout -f --recurse-submodules must not migrate git dir of symlinked repo when removing submodule
ok 3 - output summary format for commit with an empty diff
# passed all 6 test(s)
1..6
*** t7503-pre-commit-and-pre-merge-commit-hooks.sh ***
*** t7504-commit-msg-hook.sh ***
ok 10 - config-specified template should commit
ok 8 - removed files and relative paths
ok 12 - use "update --recursive" to checkout all submodules
ok 9 - using invalid commit with -C
ok 21 - submodule update - command in .git/config
ok 3 - add submodules with different ref storage format
ok 43 - status should initially be "missing"
ok 10 - nothing to commit
ok 11 - explicit commit message should override template
ok 11 - --dry-run fails with nothing to commit
ok 12 - --short fails with nothing to commit
ok 6 - add evil submodule
ok 13 - --porcelain fails with nothing to commit
ok 12 - commit message from file should override template
ok 14 - --long fails with nothing to commit
ok 28 - git_test_func: added submodule doesn't remove untracked unignored file with same name
ok 13 - commit message from template with whitespace issue
ok 15 - fail to commit untracked file (even with --include/--only)
ok 44 - init should register submodule url in .git/config
ok 29 - Tag name filtering strips gpg signature
ok 16 - setup: non-initial commit
ok 30 # skip Filtering retains message of gpg signed commit (missing GPG)
not ok 17 - git reset --keep --recurse-submodules: replace submodule containing a .git directory with a directory must absorb the git dir # TODO known breakage
ok 17 - --dry-run with stuff to commit returns ok
ok 14 - using alternate GIT_INDEX_FILE (1)
ok 18 - --short with stuff to commit returns ok
ok 19 - --porcelain with stuff to commit returns ok
ok 4 - output summary format for merges
ok 64 - 12k: Directory rename with sibling causes rename-to-self
ok 20 - --long with stuff to commit returns ok
ok 22 - submodule update - command in .gitmodules is rejected
ok 15 - using alternate GIT_INDEX_FILE (2)
ok 45 - status should still be "missing" after initializing
ok 1 - with no hook
ok 21 - exclude additional staged changes when given pathspec
ok 16 - --signoff
ok 1 - root commit
ok 1 - setup
ok 7 - add other submodule
ok 17 - commit message from file (1)
ok 2 - with no hook (editor)
ok 5 - the basics
ok 46 - init should fail with unknown submodule
ok 22 - exclude additional staged changes when given pathspec
ok 3 - --no-verify with no hook
ok 18 - commit message from file (2)
ok 6 - partial
ok 2 - setup conflicting branches
ok 4 - --no-verify with no hook (editor)
ok 19 - commit message from stdin
ok 7 - partial modification in a subdirectory
ok 5 - setup: commit-msg hook that always succeeds
ok 47 - update should fail with unknown submodule
ok 13 - test "status --recursive"
ok 3 - with no hook
ok 20 - commit -F overrides -t
ok 23 - exclude additional staged changes when given pathspec
ok 6 - with succeeding hook
ok 8 - partial removal
ok 21 - Commit without message is allowed with --allow-empty-message
ok 24 - -i/--include includes staged changes
ok 7 - with succeeding hook (editor)
ok 2 - git submodule 
ok 48 - status should fail with unknown submodule
ok 4 - with no hook (merge)
ok 22 - Commit without message is no-no without --allow-empty-message
ok 9 - sign off
ok 25 - --include and --only do not mix
ok 65 - 12l (B into A): Rename into each other + add/add conflict
ok 23 - fsck detects command in .gitmodules
ok 8 - --no-verify with succeeding hook
ok 26 - commit message from non-existing file
ok 27 - empty commit message
ok 23 - Commit a message with --allow-empty-message
ok 5 - --no-verify with no hook
ok 8 - clone evil superproject
ok 9 - --no-verify with succeeding hook (editor)
ok 10 - commit --trailer with "="
ok 10 - setup: commit-msg hook that always fails
ok 24 - commit -C empty respects --allow-empty-message
ok 28 - template "emptyness" check does not kick in with -F
ok 9 - fsck detects evil superproject
ok 49 - sync should fail with unknown submodule
ok 11 - with failing hook
ok 18 - git reset --keep --recurse-submodules: replace submodule with a file works ignores ignored files in submodule
ok 4 - recursive clone propagates ref storage format
ok 6 - --no-verify with no hook (merge)
ok 29 - template "emptyness" check
ok 29 - git_test_func: added submodule creates empty directory
ok 12 - with failing hook (editor)
ok 24 - submodule update - command in .git/config catches failure
ok 30 - setup: commit message from file
ok 31 - Tag name filtering allows slashes in tag names
ok 11 - commit --trailer with -c and "replace" as ifexists
ok 13 - --no-verify with failing hook
ok 7 - with succeeding hook
ok 3 - git submodule status
ok 25 - commit --fixup provides correct one-line commit message
ok 31 - amend commit
ok 14 - -n followed by --verify with failing hook
ok 14 - ensure "status --cached --recursive" preserves the --cached flag
ok 50 - update should fail when path is used by a file
ok 10 - transfer.fsckObjects detects evil superproject (unpack)
ok 15 - --no-verify with failing hook (editor)
ok 12 - commit --trailer with -c and "add" as ifexists
ok 32 - amend --only ignores staged contents
ok 8 - with succeeding hook (merge)
ok 25 - submodule update - command in .git/config catches failure -- subdirectory
ok 26 - commit --fixup -m"something" -m"extra"
ok 33 - allow-empty --only ignores staged contents
ok 66 - 12l (A into B): Rename into each other + add/add conflict
ok 34 - set up editor
ok 51 - update should fail when path is used by a nonempty directory
ok 11 - transfer.fsckObjects detects evil superproject (index)
ok 13 - commit --trailer with -c and "donothing" as ifexists
ok 9 - automatic merge fails; both hooks are available
ok 35 - amend without launching editor
ok 16 - merge fails with failing hook
ok 14 - commit --trailer with -c and "addIfDifferent" as ifexists
ok 10 - --no-verify with succeeding hook
ok 27 - commit --fixup --edit
ok 36 - --amend --edit
ok 15 - commit --trailer with -c and "addIfDifferentNeighbor" as ifexists
ok 17 - merge bypasses failing hook with --no-verify
ok 12 - create oddly ordered pack
ok 11 - --no-verify with succeeding hook (merge)
ok 4 - git submodule status --recursive
ok 18 - setup: commit-msg hook made non-executable
ok 52 - update should work when path is an empty dir
ok 37 - --amend --edit of empty message
ok 15 - test "status --recursive" from sub directory
ok 13 - transfer.fsckObjects handles odd pack (unpack)
ok 32 - setup --prune-empty comparisons
ok 19 - with non-executable hook
ok 67 - 12m: Change parent of renamed-dir to symlink on other side
ok 26 - submodule update - command run for initial population of submodule
ok 12 - with failing hook
ok 28 - commit --fixup=amend: creates amend! commit
ok 16 - commit --trailer with -c and "end" as where
ok 14 - transfer.fsckObjects handles odd pack (index)
ok 38 - --amend to set message to empty
ok 20 - with non-executable hook (editor)
ok 15 - index-pack --strict works for non-repo pack
ok 5 - git submodule --quiet
ok 13 - --no-verify with failing hook
ok 30 - git_test_func: added submodule leaves existing empty directory alone
ok 21 - --no-verify with non-executable hook
ok 53 - status should be "up-to-date" after update
ok 39 - --amend to set empty message needs --allow-empty-message
ok 5 - clone submodules with different ref storage format
ok 17 - commit --trailer with -c and "start" as where
ok 16 - set up repo with symlinked gitmodules (vanilla)
ok 19 - git -c submodule.recurse=true reset --keep: modified submodule updates submodule work tree
ok 22 - --no-verify with non-executable hook (editor)
ok 23 - setup: commit-msg hook that edits the commit message
ok 17 - fsck detects symlinked gitmodules (vanilla)
ok 14 - with failing hook (merge)
ok 18 - refuse to load symlinked gitmodules into index (vanilla)
ok 6 - git submodule --quiet status
ok 24 - hook edits commit message
ok 40 - -m --edit
ok 18 - commit --trailer with -c and "after" as where
ok 19 - set up repo with symlinked gitmodules (ntfs)
ok 41 - -m and -F do not mix
ok 54 - status "up-to-date" from subdirectory
ok 68 - 13a(conflict): messages for newly added files
ok 42 - using message from other commit
ok 29 - --fixup=amend: --only ignores staged changes
ok 20 - fsck detects symlinked gitmodules (ntfs)
ok 15 - --no-verify with failing hook (merge)
ok 7 - git submodule status --quiet
ok 25 - hook edits commit message (editor)
ok 21 - refuse to load symlinked gitmodules into index (ntfs)
ok 43 - editing message from other commit
ok 19 - commit --trailer with -c and "before" as where
ok 44 - message from stdin
ok 26 - hook doesn't edit commit message
ok 22 - set up repo with symlinked gitmodules (hfs)
ok 55 - status "up-to-date" from subdirectory with path
ok 16 - with non-executable hook
ok 45 - overriding author from command line
ok 23 - fsck detects symlinked gitmodules (hfs)
ok 46 - interactive add
ok 27 - hook doesn't edit commit message (editor)
ok 24 - refuse to load symlinked gitmodules into index (hfs)
ok 20 - commit --trailer with -c and "donothing" as ifmissing
ok 17 - --no-verify with non-executable hook
ok 25 - set up repo with symlinked gitattributes (vanilla)
ok 47 - commit --interactive doesn't change index if editor aborts
ok 27 - recursive submodule update - command in .git/config catches failure -- subdirectory
ok 26 - fsck detects symlinked gitattributes (vanilla)
ok 8 - git submodule --cached
ok 30 - --fixup=reword: ignores staged changes
ok 27 - set up repo with symlinked gitattributes (ntfs)
ok 21 - commit --trailer with -c and "add" as ifmissing
ok 56 - status should be "modified" after submodule commit
ok 69 - 13a(info): messages for newly added files
ok 48 - editor not invoked if -F is given
ok 18 - with non-executable hook (merge)
ok 28 - hook called in git-merge picks up commit message
ok 28 - fsck detects symlinked gitattributes (ntfs)
ok 22 - commit --trailer with -c ack.key 
ok 31 - --fixup=reword: error out with -m option
ok 49 - partial commit that involves removal (1)
ok 29 - set up repo with symlinked gitattributes (hfs)
ok 6 - status with mixed submodule ref storages
ok 31 - git_test_func: replace tracked file with submodule creates empty directory
ok 19 - --no-verify with non-executable hook (merge)
ok 30 - fsck detects symlinked gitattributes (hfs)
ok 28 - submodule init does not copy command into .git/config
ok 50 - partial commit that involves removal (2)
ok 23 - commit --trailer with -c and ":=#" as separators
ok 9 - git submodule --cached status
ok 51 - partial commit that involves removal (3)
ok 31 - set up repo with symlinked gitignore (vanilla)
ok 32 - --fixup=amend: error out with -m option
not ok 29 - merge --continue remembers --no-verify # TODO known breakage
ok 20 - with hook requiring GIT_PREFIX
ok 32 - fsck detects symlinked gitignore (vanilla)
ok 52 - amend commit to fix author
ok 29 - submodule init picks up rebase
ok 33 - set up repo with symlinked gitignore (ntfs)
ok 21 - with failing hook requiring GIT_PREFIX
ok 30 - hook is called for reword during `rebase -i`
ok 24 - commit --trailer with -c and command
ok 70 - 13b(conflict): messages for transitive rename with conflicted content
# still have 1 known breakage(s)
# passed all remaining 29 test(s)
1..30
ok 34 - fsck detects symlinked gitignore (ntfs)
ok 53 - amend commit to fix date
*** t7505-prepare-commit-msg-hook.sh ***
ok 25 - commit --trailer not confused by --- separator
ok 35 - set up repo with symlinked gitignore (hfs)
ok 30 - submodule init picks up merge
ok 57 - "submodule --cached" command forms should be identical
ok 16 - use "git clone --recursive" to checkout all submodules
ok 36 - fsck detects symlinked gitignore (hfs)
ok 10 - git submodule status --cached
ok 54 - amend commit to add signoff
ok 33 - consecutive amend! commits remove amend! line from commit msg body
ok 26 - commit --trailer with --verbose
ok 22 - check the author in hook
# passed all 22 test(s)
1..22
ok 37 - set up repo with symlinked mailmap (vanilla)
*** t7506-status-submodule.sh ***
ok 27 - multiple -m
ok 38 - fsck detects symlinked mailmap (vanilla)
ok 55 - amend does not add signoff if it already exists
ok 58 - the --cached sha1 should be rev1
ok 28 - verbose
ok 11 - git submodule --cached --quiet
ok 39 - set up repo with symlinked mailmap (ntfs)
ok 59 - git diff should report the SHA1 of the new submodule commit
ok 56 - commit mentions forced date in output
ok 34 - deny to create amend! commit if its commit msg body is empty
ok 57 - commit complains about completely bogus dates
ok 29 - verbose respects diff config
ok 30 - prepare file with comment line and trailing newlines
ok 40 - fsck detects symlinked mailmap (ntfs)
ok 58 - commit --date allows approxidate
ok 71 - 13b(info): messages for transitive rename with conflicted content
ok 31 - cleanup commit messages (verbatim option,-t)
ok 41 - set up repo with symlinked mailmap (hfs)
ok 12 - git submodule --cached --quiet status
ok 42 - fsck detects symlinked mailmap (hfs)
ok 32 - cleanup commit messages (verbatim option,-F)
ok 59 - sign off (1)
ok 20 - git reset --keep --recurse-submodules: modified submodule updates submodule recursively
ok 33 - cleanup commit messages (verbatim option,-m)
ok 35 - amend! commit allows empty commit msg body with --allow-empty-message
ok 36 - --fixup=reword: incompatible with --all
ok 13 - git submodule --cached status --quiet
ok 60 - sign off (2)
ok 34 - cleanup commit messages (whitespace option,-F)
ok 37 - --fixup=reword: incompatible with --include
ok 31 - submodule update --merge  - ignores --merge  for new submodules
ok 60 - update should checkout rev1
ok 32 - git_test_func: replace directory with submodule
ok 38 - --fixup=reword: incompatible with --only
ok 43 - fsck detects non-blob .gitmodules
ok 39 - --fixup=reword: incompatible with --interactive
ok 35 - cleanup commit messages (scissors option,-F,-e)
ok 40 - --fixup=reword: incompatible with --patch
ok 61 - signoff gap
ok 36 - cleanup commit messages (scissors option,-F,-e, scissors on first line)
ok 14 - git submodule --quiet status --cached
ok 44 - fsck detects corrupt .gitmodules
ok 45 # skip prevent git~1 squatting on Windows (missing WINDOWS)
ok 37 - cleanup commit messages (strip option,-F)
ok 72 - 13c(conflict): messages for rename/rename(1to1) via transitive rename
ok 62 - signoff gap 2
ok 61 - status should be "up-to-date" after update
ok 1 - setup
ok 41 - --fixup=reword: give error with pathsec
ok 38 - cleanup commit messages (strip option,-F,-e)
ok 2 - status clean
ok 39 - cleanup commit messages (strip option,-F,-e): output
ok 42 - --fixup=reword: -F give error message
ok 62 - checkout superproject with subproject already present
ok 40 - cleanup commit message (fail on invalid cleanup mode option)
ok 41 - cleanup commit message (fail on invalid cleanup mode configuration)
ok 3 - commit --dry-run -a clean
ok 15 - git submodule status --cached --quiet
ok 4 - status with modified file in submodule
ok 42 - cleanup commit message (no config and no option uses default)
ok 63 - signoff respects trailer config
ok 33 - Prune empty commits
ok 5 - status with modified file in submodule (porcelain)
ok 64 - signoff not confused by ---
ok 43 - commit --squash works with -F
ok 43 - cleanup commit message (option overrides default)
ok 21 - git reset --hard --recurse-submodules: added submodule is checked out
ok 63 - apply submodule diff
ok 46 - setup submodules with nested git dirs
ok 6 - status with modified file in submodule (short)
ok 65 - multiple -m
ok 44 - cleanup commit message (config overrides default)
ok 7 - status with added file in submodule
ok 32 - submodule update --rebase - ignores --rebase for new submodules
ok 44 - commit --squash works with -m
ok 8 - status with added file in submodule (porcelain)
ok 45 - cleanup commit message (option overrides config)
ok 66 - amend commit to fix author
ok 73 - 13c(info): messages for rename/rename(1to1) via transitive rename
ok 46 - cleanup commit message (default, -m)
ok 9 - status with added file in submodule (short)
ok 67 - git commit <file> with dirty index
ok 33 - git_test_func: removed submodule leaves submodule directory and its contents in place
ok 47 - cleanup commit message (whitespace option, -m)
ok 68 - same tree (single parent)
ok 10 - status with untracked file in submodule
ok 47 - git dirs of sibling submodules must not be nested
ok 45 - commit --squash works with -C
ok 17 - test "update --recursive" with a flag with spaces
ok 11 - status -uno with untracked file in submodule
ok 69 - same tree (single parent) --allow-empty
ok 7 - recursive pull with mixed formats
# passed all 7 test(s)
1..7
ok 48 - cleanup commit message (whitespace config, -m)
ok 12 - status with untracked file in submodule (porcelain)
*** t7507-commit-verbose.sh ***
ok 64 - update --init
ok 16 - git submodule status --cached --recursive
ok 49 - message shows author when it is not equal to committer
ok 13 - status with untracked file in submodule (short)
ok 50 - message shows date when it is explicitly set
ok 14 - status with added and untracked file in submodule
ok 51 - message does not have multiple scissors lines
ok 46 - commit --squash works with -c
ok 22 - git reset --hard --recurse-submodules: added submodule is checked out in empty dir
ok 70 - same tree (merge and amend merge)
ok 74 - 13d(conflict): messages for rename/rename(1to1) via dual transitive rename
ok 48 - submodule git dir nesting detection must work with parallel cloning
ok 15 - status with added and untracked file in submodule (porcelain)
ok 33 - submodule update ignores update=merge config for new submodules
ok 16 - status with modified file in modified submodule
ok 47 - commit --squash works with -C for same commit
ok 17 - status with modified file in modified submodule (porcelain)
ok 71 - amend using the message from another commit
ok 1 - set up commits for rebasing
ok 65 - update --init from subdirectory
ok 18 - status with added file in modified submodule
ok 2 - with no hook
ok 1 - setup
ok 66 - do not add files from a submodule
ok 3 - setup fake editor for interactive editing
ok 4 - setup prepare-commit-msg hook
ok 2 - initial commit shows verbose diff
ok 19 - status with added file in modified submodule (porcelain)
ok 3 - second commit
ok 48 - commit --squash works with -c for same commit
ok 20 - status with untracked file in modified submodule
ok 17 - git submodule --cached status --recursive
ok 72 - amend using the message from a commit named with tag
ok 5 - with hook (-m)
ok 21 - status with untracked file in modified submodule (porcelain)
ok 4 - verbose diff is stripped out
ok 75 - 13d(info): messages for rename/rename(1to1) via dual transitive rename
ok 34 - git_test_func: removed submodule leaves submodule containing a .git directory alone
ok 22 - status with added and untracked file in modified submodule
ok 6 - with hook (-m editor)
ok 23 - git reset --hard --recurse-submodules: replace tracked file with submodule checks out submodule
ok 67 - gracefully add/reset submodule with a trailing slash
ok 5 - verbose diff is stripped out (mnemonicprefix)
ok 68 - ls-files gracefully handles trailing slash
ok 49 - commit --squash works with editor
ok 23 - status with added and untracked file in modified submodule (porcelain)
ok 6 - diff in message is retained without -v
ok 73 - amend can copy notes
ok 69 - moving to a commit without submodule does not leave empty dir
ok 34 - submodule update ignores update=rebase config for new submodules
ok 7 - with hook (-t)
ok 24 - setup .git file for sub
ok 7 - diff in message is retained with -v
ok 18 - use "update --recursive nested1" to checkout all submodules rooted in nested1
ok 50 - invalid message options when using --fixup
ok 74 - commit a file whose name is a dash
ok 8 - with hook (-F)
ok 25 - status with added file in modified submodule with .git file
ok 49 - checkout -f --recurse-submodules must not use a nested gitdir
# passed all 49 test(s)
1..49
ok 75 - --only works on to-be-born branch
ok 51 - new line found before status message in commit template
ok 70 - submodule <invalid-subcommand> fails
ok 35 - submodule init picks up update=none
ok 9 - with hook (-F editor)
ok 52 - setup empty commit with unstaged rename and copy
ok 10 - with hook (-C)
ok 53 - check commit with unstaged rename and copy
ok 26 - status with a lot of untracked files in the submodule
ok 19 - command passed to foreach retains notion of stdin
ok 11 - with hook (editor)
ok 54 - commit without staging files fails and displays hints
ok 76 - --dry-run with conflicts fixed from a merge
# passed all 54 test(s)
1..54
ok 27 - rm submodule contents
ok 24 - git reset --hard --recurse-submodules: replace directory with submodule
*** t7508-status.sh ***
ok 77 - --dry-run --short
ok 28 - status clean (empty submodule dir)
# passed all 77 test(s)
1..77
ok 8 - submodule log is stripped out too with -v
ok 29 - status -a clean (empty submodule dir)
*** t7509-commit-authorship.sh ***
ok 9 - verbose diff is stripped out with set core.commentChar
ok 12 - with hook (--amend)
ok 76 - 13e: directory rename detection in recursive case
*** t7510-signed-commit.sh ***
# still have 2 known breakage(s)
# passed all remaining 74 test(s)
1..76
ok 35 - git_test_func: replace submodule with a directory must fail
ok 10 - verbose diff is stripped with multi-byte comment char
ok 11 - status does not verbose without --verbose
ok 12 - setup -v -v
ok 13 - with hook (-c)
ok 13 - commit.verbose=true and --verbose omitted
ok 36 - submodule update - update=none in .git/config
ok 14 - commit.verbose=1 and --verbose omitted
ok 15 - commit.verbose=false and --verbose omitted
ok 71 - add submodules without specifying an explicit path
ok 14 - with hook (merge)
ok 20 - command passed to foreach --recursive retains notion of stdin
ok 1 - status -h in broken repository
ok 16 - commit.verbose=-2 and --verbose omitted
ok 1 # skip create signed commits (missing GPG)
ok 2 # skip verify and show signatures (missing GPG)
ok 3 # skip verify-commit exits failure on unknown signature (missing GPG)
ok 2 - commit -h in broken repository
ok 4 # skip verify-commit exits success on untrusted signature (missing GPG)
ok 5 # skip verify-commit exits success with matching minTrustLevel (missing GPG)
ok 6 # skip verify-commit exits success with low minTrustLevel (missing GPG)
ok 17 - commit.verbose=-1 and --verbose omitted
ok 7 # skip verify-commit exits failure with high minTrustLevel (missing GPG)
ok 8 # skip verify signatures with --raw (missing GPG)
ok 9 # skip proper header is used for hash algorithm (missing GPG)
ok 10 # skip show signed commit with signature (missing GPG)
ok 11 # skip detect fudged signature (missing GPG)
ok 12 # skip detect fudged signature with NUL (missing GPG)
ok 13 # skip amending already signed commit (missing GPG)
ok 72 - add should fail when path is used by a file
ok 25 - git reset --hard --recurse-submodules: nested submodules are checked out
ok 14 # skip bare signature (missing GPG2)
ok 15 # skip show good signature with custom format (missing GPG)
ok 16 # skip show bad signature with custom format (missing GPG)
ok 18 - commit.verbose=0 and --verbose omitted
ok 34 - prune empty collapsed merges
ok 17 # skip show untrusted signature with custom format (missing GPG)
ok 18 # skip show untrusted signature with undefined trust level (missing GPG)
ok 19 # skip show untrusted signature with ultimate trust level (missing GPG)
ok 1 - -C option copies authorship and message
ok 20 # skip show unknown signature with custom format (missing GPG)
ok 21 # skip show lack of signature with custom format (missing GPG)
ok 22 # skip log.showsignature behaves like --show-signature (missing GPG)
ok 23 # skip check config gpg.format values (missing GPG)
ok 24 # skip detect fudged commit with double signature (missing GPG)
ok 25 # skip show double signature with custom format (missing GPG)
ok 15 - with hook and editor (merge)
ok 26 # skip verify-commit verifies multiply signed commits (missing GPG)
ok 3 - create upstream branch
ok 19 - commit.verbose=2 and --verbose omitted
ok 2 - -C option copies only the message with --reset-author
ok 21 - multi-argument command passed to foreach is not shell-evaluated twice
ok 73 - add should fail when path is used by an existing directory
ok 37 - submodule update - update=none in .git/config but --checkout given
ok 4 - setup
ok 20 - commit.verbose=3 and --verbose omitted
ok 5 - status (1)
ok 3 - -c option copies authorship and message
ok 27 - custom `gpg.program`
# passed all 27 test(s)
1..27
ok 6 - status --column
*** t7511-status-index.sh ***
ok 4 - -c option copies only the message with --reset-author
ok 21 - commit.verbose=true and --verbose
ok 7 - status --column status.displayCommentPrefix=false
ok 8 - status with status.displayCommentPrefix=true
ok 36 - git_test_func: replace submodule containing a .git directory with a directory must fail
ok 22 - commit.verbose=true and --no-verbose
ok 9 - status with status.displayCommentPrefix=false
ok 10 - status -v
ok 5 - --amend option copies authorship
ok 23 - commit.verbose=true and -v -v
ok 11 - status -v -v
ok 12 - setup fake editor
ok 22 - option-like arguments passed to foreach commands are not lost
ok 6 - --amend option with empty author
ok 24 - commit.verbose=false and --verbose
ok 13 - commit ignores status.displayCommentPrefix=false in COMMIT_EDITMSG
ok 25 - commit.verbose=false and --no-verbose
ok 74 - use superproject as upstream when path is relative and no url is set there
ok 14 - status (advice.statusHints false)
ok 30 - status with merge conflict in .gitmodules
ok 7 - --amend option with missing author
ok 15 - status -s
ok 26 - commit.verbose=false and -v -v
ok 1 - status, filename length 1
ok 2 - status, filename length 2
ok 8 - --reset-author makes the commit ours even with --amend option
ok 31 - diff with merge conflict in .gitmodules
ok 16 - status with gitignore
ok 27 - commit.verbose=-2 and --verbose
ok 3 - status, filename length 3
*** t7512-status-help.sh ***
ok 9 - --reset-author and --author are mutually exclusive
ok 75 - set up for relative path tests
ok 10 - --reset-author should be rejected without -c/-C/--amend
ok 32 - diff --submodule with merge conflict in .gitmodules
ok 4 - status, filename length 4
ok 28 - commit.verbose=-2 and --no-verbose
ok 38 - submodule update --init skips submodule with update=none
ok 17 - status with gitignore (nothing untracked)
ok 26 - git reset --hard --recurse-submodules: removed submodule removes submodules working tree
ok 5 - status, filename length 5
ok 18 - status -s -b
ok 29 - commit.verbose=-2 and -v -v
ok 6 - status, filename length 6
ok 19 - status -s -z -b
ok 20 - setup dir3
ok 76 - ../subrepo works with URL - ssh://hostname/repo
ok 11 - commit respects CHERRY_PICK_HEAD and MERGE_MSG
ok 7 - status, filename length 7
not ok 37 - git_test_func: replace submodule with a file must fail # TODO known breakage
ok 30 - commit.verbose=-1 and --verbose
ok 21 - status -uno
ok 8 - status, filename length 8
ok 12 - --reset-author with CHERRY_PICK_HEAD
ok 23 - option-like arguments passed to foreach recurse correctly
# passed all 12 test(s)
1..12
ok 9 - status, filename length 9
# passed all 23 test(s)
1..23
ok 22 - status (status.showUntrackedFiles no)
ok 31 - commit.verbose=-1 and --no-verbose
*** t7513-interpret-trailers.sh ***
ok 10 - status, filename length 10
ok 18 - git submodule status --recursive propagates SIGPIPE
# passed all 18 test(s)
1..18
ok 23 - status (status.showUntrackedFiles false)
ok 77 - ../subrepo works with port-qualified URL - ssh://hostname:22/repo
ok 11 - status, filename length 11
ok 32 - commit.verbose=-1 and -v -v
ok 24 - status (status.showUntrackedFiles 0)
ok 12 - status, filename length 12
ok 33 - commit.verbose=0 and --verbose
ok 25 - status -uno (advice.statusHints false)
ok 13 - status, filename length 13
*** t7514-commit-patch.sh ***
ok 26 - status -s -uno
ok 14 - status, filename length 14
ok 27 - status -s (status.showUntrackedFiles no)
ok 34 - commit.verbose=0 and --no-verbose
ok 78 - ../subrepo path works with local path - //somewhere else/repo
ok 15 - status, filename length 15
ok 28 - status -unormal
ok 16 - status, filename length 16
ok 35 - commit.verbose=0 and -v -v
*** t7515-status-symlinks.sh ***
ok 17 - status, filename length 17
ok 29 - status (status.showUntrackedFiles normal)
ok 1 - prepare for conflicts
ok 36 - commit.verbose=1 and --verbose
ok 18 - status, filename length 18
ok 1 - setup
ok 39 - submodule update with pathspec warns against uninitialized ones
ok 30 - status (status.showUntrackedFiles true)
ok 2 - status when conflicts unresolved
ok 79 - ../subrepo works with file URL - file:///tmp/repo
ok 19 - status, filename length 19
ok 37 - commit.verbose=1 and --no-verbose
ok 31 - status (status.showUntrackedFiles 1)
ok 32 - status -s -unormal
ok 20 - status, filename length 20
ok 2 - with cmd
ok 3 - status when conflicts resolved before commit
ok 33 - status -s (status.showUntrackedFiles normal)
ok 38 - commit.verbose=1 and -v -v
ok 21 - status, filename length 21
not ok 38 - git_test_func: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 34 - status -uall
ok 3 - with cmd and $1
ok 80 - ../subrepo works with helper URL- helper:://hostname/repo
ok 22 - status, filename length 22
ok 39 - commit.verbose=2 and --verbose
ok 1 - setup (initial)
ok 27 - git reset --hard --recurse-submodules: removed submodule absorbs submodules .git directory
ok 35 - status (status.showUntrackedFiles all)
ok 36 - teardown dir3
ok 16 - with hook (rebase -i)
ok 35 - prune empty works even without index/tree filters
ok 23 - status, filename length 23
ok 37 - status -s -uall
ok 4 - with cmd and $1 with sh -c
ok 40 - commit.verbose=2 and --no-verbose
ok 24 - status, filename length 24
ok 2 - edit hunk "commit -p -m message"
# passed all 24 test(s)
1..24
*** t7516-commit-races.sh ***
ok 38 - status -s (status.showUntrackedFiles all)
ok 17 - with hook (cherry-pick)
ok 5 - with cmd and $1 with shell script
ok 4 - prepare for rebase conflicts
ok 39 - status with relative paths
ok 81 - ../subrepo works with scp-style URL - user@host:repo
ok 41 - commit.verbose=2 and -v -v
ok 6 - without config
ok 1 - setup
ok 40 - status -s with relative paths
ok 3 - edit hunk "commit --dry-run -p -m message"
ok 7 - without config in another order
# passed all 3 test(s)
1..3
ok 41 - status --porcelain ignores relative paths setting
ok 8 - --trim-empty without config
*** t7517-per-repo-email.sh ***
ok 2 - symlink to a directory
ok 9 - with config option on the command line
ok 42 - commit.verbose=3 and --verbose
ok 42 - setup unique colors
ok 10 - with only a title in the message
ok 18 - with hook and editor (cherry-pick)
ok 11 - with a bodiless message that lacks a trailing newline after the subject
ok 19 - setup: commit-msg hook that always fails
ok 5 - status when rebase --apply in progress before resolving conflicts
ok 43 # skip status with color.ui (missing TTY)
ok 12 - with a bodied message that lacks a trailing newline after the body
ok 43 - commit.verbose=3 and --no-verbose
ok 44 # skip status with color.status (missing TTY)
ok 45 # skip status -s with color.ui (missing TTY)
ok 46 # skip status -s with color.status (missing TTY)
ok 82 - ../subrepo works with scp-style URL - user@host:path/to/repo
ok 13 - with a message that lacks a trailing newline after the trailers
ok 40 - submodule update without pathspec updates only initialized ones
ok 47 # skip status -s -b with color.status (missing TTY)
ok 48 # skip status --porcelain ignores color.ui (missing TTY)
ok 49 # skip status --porcelain ignores color.status (missing TTY)
ok 3 - symlink replacing a directory
ok 20 - with failing hook
# passed all 3 test(s)
1..3
ok 14 - with multiline title in the message
ok 44 - commit.verbose=3 and -v -v
*** t7518-ident-corner-cases.sh ***
ok 15 - with non-trailer lines mixed with Signed-off-by
ok 50 - status --porcelain respects -b
ok 16 - with non-trailer lines mixed with cherry picked from
ok 45 - status ignores commit.verbose=true
# passed all 45 test(s)
1..45
ok 21 - with failing hook (--no-verify)
ok 51 - status without relative paths
*** t7519-status-fsmonitor.sh ***
ok 17 - with non-trailer lines mixed with a configured trailer
ok 33 - setup superproject with untracked file in nested submodule
ok 83 - ../subrepo works with relative local path - foo
ok 52 - status -s without relative paths
ok 6 - status when rebase --apply in progress before rebase --continue
ok 18 - with non-trailer lines mixed with a non-configured trailer
ok 1 - race to create orphan commit
ok 19 - with all non-configured trailers
ok 34 - status with untracked file in nested submodule (porcelain)
ok 53 - status -s without relative paths
ok 20 - with non-trailer lines only
ok 22 - with failing hook (merge)
ok 28 - git reset --hard --recurse-submodules: replace submodule with a file
ok 54 - dry-run of partial commit excluding new file in index
ok 21 - line with leading whitespace is not trailer
ok 84 - ../subrepo works with relative local path - foo/bar
ok 1 - setup a likely user.useConfigOnly use case
ok 55 - status refreshes the index
ok 22 - multiline field treated as one trailer for 25% check
ok 23 - with failing hook (cherry-pick)
ok 2 - fails committing if clone email is not set
# passed all 23 test(s)
1..23
ok 35 - status with untracked file in nested submodule (porcelain=2)
ok 3 - fails committing if clone email is not set, but EMAIL set
ok 2 - race to create non-orphan commit
# passed all 2 test(s)
1..2
ok 23 - multiline field treated as atomic for placement
*** t7520-ignored-hook-warning.sh ***
ok 4 - succeeds committing if clone email is set
*** t7521-ignored-mode.sh ***
ok 36 - status with untracked file in nested submodule (short)
ok 7 - prepare for rebase_i_conflicts
ok 37 - setup superproject with modified file in nested submodule
ok 24 - multiline field treated as atomic for replacement
ok 85 - ../subrepo works with relative local path - ./foo
ok 56 - status shows detached HEAD properly after checking out non-local upstream branch
ok 1 - incompatible bare repo
ok 39 - git_test_func: modified submodule does not update submodule work tree
ok 2 # skip run fsmonitor-daemon in bare repo (missing FSMONITOR_DAEMON)
ok 3 # skip run fsmonitor-daemon in virtual repo (missing FSMONITOR_DAEMON,MINGW of MINGW,FSMONITOR_DAEMON)
ok 38 - status with added file in nested submodule (porcelain)
ok 25 - multiline field treated as atomic for difference check
ok 57 - setup status submodule summary
ok 8 - status during rebase -i when conflicts unresolved
ok 4 - setup
ok 86 - ../subrepo works with relative local path - ./foo/bar
ok 5 - fsmonitor extension is off by default
ok 58 - status submodule summary is disabled by default
ok 39 - status with added file in nested submodule (porcelain=2)
ok 6 - update-index --fsmonitor" adds the fsmonitor extension
ok 59 - status --untracked-files=all does not show submodule
ok 26 - multiline field treated as atomic for neighbor check
ok 7 - update-index --no-fsmonitor" removes the fsmonitor extension
ok 60 - status -s submodule summary is disabled by default
ok 40 - status with added file in nested submodule (short)
# passed all 40 test(s)
1..40
ok 1 - setup
ok 61 - status -s --untracked-files=all does not show submodule
ok 9 - status during rebase -i after resolving conflicts
ok 27 - with config setup
ok 2 - no warning if hook is not ignored
*** t7524-commit-summary.sh ***
ok 87 - ../subrepo works with relative local path - ../foo
ok 3 - warning if hook is ignored
ok 8 - update-index --fsmonitor-valid" sets the fsmonitor valid bit
ok 1 - setup initial commit and ignore file
not ok 29 - git reset --hard --recurse-submodules: replace submodule with a file must fail with untracked files # TODO known breakage
ok 28 - with config setup and ":=" as separators
ok 4 - no warning if advice.ignoredHook set to false
ok 2 - Verify behavior of status on directories with ignored files
ok 9 - update-index --no-fsmonitor-valid" clears the fsmonitor valid bit
ok 29 - with config setup and "%" as separators
ok 5 - no warning if unset advice.ignoredHook and hook removed
# passed all 5 test(s)
1..5
ok 88 - ../subrepo works with relative local path - ../foo/bar
ok 30 - with "%" as separators and a message with trailers
ok 10 - all files returned by integration script get flagged as invalid
*** t7525-status-rename.sh ***
ok 36 - --prune-empty is able to prune root commit
ok 3 - Verify status behavior on directory with tracked & ignored files
ok 31 - with config setup and ":=#" as separators
ok 32 - with commit basic message
ok 4 - Verify status behavior on directory with untracked and ignored files
ok 33 - with basic patch
ok 11 - newly added files are marked valid
ok 41 - submodule update continues after checkout error
ok 62 - status submodule summary
ok 5 - Verify status matching ignored files on ignored directory
ok 12 - all unmodified files get marked valid
ok 34 - with commit complex message as argument
ok 10 - status when rebasing -i in edit mode
ok 1 - setup
ok 6 - Verify status behavior on ignored directory containing tracked file
ok 35 - with 2 files arguments
ok 13 - *only* files returned by the integration script get flagged as invalid
ok 7 - Verify matching ignored files with --untracked-files=normal
ok 36 - with message that has comments (#)
ok 37 - with message that has comments (;)
ok 8 - Verify matching ignored files with --untracked-files=normal
ok 2 - commit summary ignores rewrites
ok 38 - with message that has an old style conflict block
# passed all 2 test(s)
1..2
*** t7526-commit-pathspec-file.sh ***
ok 89 - ../bar/a/b/c works with relative local path - ../foo/bar.git
ok 1 - setup
ok 9 - Verify status behavior on ignored directory containing tracked file
ok 2 - status no-options
ok 63 - status submodule summary with status.displayCommentPrefix=false
ok 3 - status --no-renames
ok 39 - with commit complex message and trailer args
ok 40 - git_test_func: modified submodule does not update submodule work tree to invalid commit
ok 10 - Verify behavior of status with --ignored=no
ok 4 - status.renames inherits from diff.renames false
ok 14 - refresh_index() invalidates fsmonitor cache
ok 5 - status.renames inherits from diff.renames true
ok 15 - setup preloadIndex to false
ok 11 - Verify behavior of status with --ignored=traditional and --untracked-files=all
ok 6 - status.renames overrides diff.renames false
ok 37 - --prune-empty is able to prune entire branch
ok 7 - status.renames overrides from diff.renames true
ok 12 - Verify behavior of status with --ignored=traditional and --untracked-files=normal
# passed all 12 test(s)
1..12
ok 40 - with complex patch, args and --trim-empty
ok 8 - status status.renames=false
*** t7527-builtin-fsmonitor.sh ***
ok 9 - status status.renames=true
ok 41 - in-place editing with basic patch
ok 10 - commit honors status.renames=false
ok 42 - in-place editing with additional trailer
ok 11 - status when splitting a commit
ok 11 - commit honors status.renames=true
ok 43 - in-place editing on stdin disallowed
ok 44 - in-place editing on non-existing file
ok 12 - status config overridden
ok 13 - status score=100%
ok 45 - in-place editing doesn't clobber original file on error
ok 14 - status score=01%
ok 64 - commit with submodule summary ignores status.displayCommentPrefix
ok 1 - setup
ok 15 - copies not overridden by find-renames
ok 65 - status -s submodule summary
# passed all 15 test(s)
1..15
*** t7528-signed-commit-ssh.sh ***
ok 46 - using "where = before"
ok 2 - --pathspec-from-file from stdin
ok 30 - git reset --hard --recurse-submodules: worktrees of nested submodules are removed
ok 3 - --pathspec-from-file from file
ok 47 - overriding configuration with "--where after"
1..0 # SKIP fsmonitor--daemon is not supported on this platform
*** t7600-merge.sh ***
ok 4 - NUL delimiters
ok 5 - LF delimiters
ok 12 - status after editing the last commit with --amend during a rebase -i
ok 48 - using "--where after" with "--no-where"
ok 6 - no trailing delimiter
ok 1 # skip create signed commits (missing GPGSSH)
ok 49 - using "--where after" with "--no-where" defaults to configuration
ok 2 # skip sign commits using literal public keys with ssh-agent (missing GPGSSH)
ok 7 - CRLF delimiters
ok 3 # skip create signed commits with keys having defined lifetimes (missing GPGSSH_VERIFYTIME,GPGSSH of GPGSSH,GPGSSH_VERIFYTIME)
ok 4 # skip verify and show signatures (missing GPGSSH)
ok 5 # skip verify-commit exits failure on untrusted signature (missing GPGSSH)
ok 6 # skip verify-commit exits failure on expired signature key (missing GPGSSH_VERIFYTIME,GPGSSH of GPGSSH,GPGSSH_VERIFYTIME)
ok 7 # skip verify-commit exits failure on not yet valid signature key (missing GPGSSH_VERIFYTIME,GPGSSH of GPGSSH,GPGSSH_VERIFYTIME)
ok 8 # skip verify-commit succeeds with commit date and key validity matching (missing GPGSSH_VERIFYTIME,GPGSSH of GPGSSH,GPGSSH_VERIFYTIME)
ok 9 # skip verify-commit exits failure with commit date outside of key validity (missing GPGSSH_VERIFYTIME,GPGSSH of GPGSSH,GPGSSH_VERIFYTIME)
ok 10 # skip verify-commit exits success with matching minTrustLevel (missing GPGSSH)
ok 11 # skip verify-commit exits success with low minTrustLevel (missing GPGSSH)
ok 12 # skip verify-commit exits failure with high minTrustLevel (missing GPGSSH)
ok 41 - git_test_func: modified submodule does not update submodule work tree from invalid commit
ok 13 # skip verify signatures with --raw (missing GPGSSH)
ok 14 # skip proper header is used for hash algorithm (missing GPGSSH)
ok 8 - quotes
ok 15 # skip show signed commit with signature (missing GPGSSH)
ok 16 # skip detect fudged signature (missing GPGSSH)
ok 50 - using "--no-where" defaults to hardcoded default if nothing configured
ok 17 # skip detect fudged signature with NUL (missing GPGSSH)
ok 18 # skip amending already signed commit (missing GPGSSH)
ok 19 # skip show good signature with custom format (missing GPGSSH)
ok 20 # skip show bad signature with custom format (missing GPGSSH)
ok 9 - quotes not compatible with --pathspec-file-nul
ok 21 # skip show untrusted signature with custom format (missing GPGSSH)
ok 22 # skip show untrusted signature with undefined trust level (missing GPGSSH)
ok 23 # skip show untrusted signature with ultimate trust level (missing GPGSSH)
ok 24 # skip show lack of signature with custom format (missing GPGSSH)
ok 25 # skip log.showsignature behaves like --show-signature (missing GPGSSH)
ok 26 # skip check config gpg.format values (missing GPGSSH)
ok 27 # skip detect fudged commit with double signature (TODO) (missing GPGSSH)
ok 28 # skip show double signature with custom format (TODO) (missing GPGSSH)
ok 29 # skip verify-commit verifies multiply signed commits (TODO) (missing GPGSSH)
ok 13 - prepare for several edits
# passed all 29 test(s)
1..29
ok 10 - only touches what was listed
*** t7601-merge-pull-config.sh ***
ok 66 - status submodule summary (clean submodule): commit
ok 51 - using "where = after"
ok 67 - status -s submodule summary (clean submodule)
ok 38 - --remap-to-ancestor with filename filters
ok 11 - error conditions
ok 68 - status -z implies porcelain
# passed all 11 test(s)
1..11
*** t7602-merge-octopus-many.sh ***
ok 14 - status: (continue first edit) second edit
ok 52 - using "where = end"
ok 42 - git_test_func: added submodule doesn't remove untracked unignored file with same name
ok 31 - git reset --hard --recurse-submodules: modified submodule updates submodule work tree
ok 42 - submodule update continues after recursive checkout error
ok 53 - using "where = start"
ok 90 - moving the superproject does not break submodules
ok 1 - setup
ok 15 - status: (continue first edit) second edit and split
ok 69 - commit --dry-run submodule summary (--amend)
ok 2 - test option parsing
ok 54 - using "where = before" for a token in the middle of the message
ok 3 - merge -h with invalid index
ok 4 - reject non-strategy with a git-merge-foo name
ok 70 - status succeeds in a read-only repository
ok 1 - setup
ok 16 - status: (continue first edit) second edit and amend
ok 55 - using "where = before" and --trim-empty
ok 5 - merge c0 with c1
ok 2 - pull.rebase not set, ff possible
ok 6 - merge c0 with c1 with --ff-only
ok 3 - pull.rebase not set and pull.ff=true
ok 56 - the default is "ifExists = addIfDifferentNeighbor"
ok 32 - git reset --hard --recurse-submodules: updating to a missing submodule commit fails
ok 17 - status: (amend first edit) second edit
ok 43 - git_test_func: added submodule creates empty directory
ok 7 - merge from unborn branch
ok 71 - --ignore-submodules=untracked suppresses submodules with untracked content
ok 39 - automatic remapping to ancestor with filename filters
ok 4 - pull.rebase not set and pull.ff=false
ok 57 - default "ifExists" is now "addIfDifferent"
ok 8 - merge c1 with c2
ok 5 - pull.rebase not set and pull.ff=only
ok 9 - merge c1 with c2 when index.lock exists
ok 18 - status: (amend first edit) second edit and split
ok 58 - using "ifExists = addIfDifferent" with "where = end"
ok 6 - pull.rebase not set and --rebase given
ok 10 - merge --squash c3 with c7
ok 43 - submodule update exit immediately in case of merge conflict
ok 7 - pull.rebase not set and --no-rebase given
ok 11 - merge --squash --autostash conflict does not attempt to apply autostash
ok 59 - using "ifExists = addIfDifferent" with "where = before"
ok 8 - pull.rebase not set and --ff given
ok 19 - status: (amend first edit) second edit and amend
ok 40 - setup submodule
ok 12 - merge c3 with c7 with commit.cleanup = scissors
ok 91 - moving the submodule does not break the superproject
ok 72 - .gitmodules ignore=untracked suppresses submodules with untracked content
ok 9 - pull.rebase not set and --no-ff given
ok 60 - using "ifExists = addIfDifferentNeighbor" with "where = end"
ok 44 - git_test_func: added submodule leaves existing empty directory alone
ok 13 - merge c3 with c7 with --squash commit.cleanup = scissors
ok 10 - pull.rebase not set and --ff-only given
ok 33 - git reset --hard --recurse-submodules: submodule branch is not changed, detach HEAD instead
ok 20 - status: (split first edit) second edit
ok 11 - pull.rebase not set (not-fast-forward)
ok 61 - using "ifExists = addIfDifferentNeighbor"  with "where = after"
ok 73 - .git/config ignore=untracked suppresses submodules with untracked content
ok 92 - submodule add --name allows to replace a submodule with another at the same path
ok 12 - pull.rebase not set and pull.ff=true (not-fast-forward)
ok 62 - using "ifExists = addIfDifferentNeighbor" and --trim-empty
ok 21 - status: (split first edit) second edit and split
ok 13 - pull.rebase not set and pull.ff=false (not-fast-forward)
ok 44 - submodule update exit immediately after recursive rebase error
ok 34 - git reset --hard --recurse-submodules: added submodule does remove untracked unignored file with same name when forced
ok 63 - using "ifExists = add" with "where = end"
ok 14 - pull.rebase not set and pull.ff=only (not-fast-forward)
ok 74 - --ignore-submodules=dirty suppresses submodules with untracked content
ok 41 - rewrite submodule with another content
ok 14 - merge c1 with c2 and c3
ok 64 - using "ifExists = add" with "where = after"
ok 22 - status: (split first edit) second edit and amend
ok 15 - pull.rebase not set and --rebase given (not-fast-forward)
ok 45 - git_test_func: replace tracked file with submodule creates empty directory
ok 15 - merges with --ff-only
ok 45 - add different submodules to the same path
ok 16 - pull.rebase not set and --no-rebase given (not-fast-forward)
ok 23 - prepare am_session
ok 16 - merges with merge.ff=only
ok 65 - overriding configuration with "--if-exists replace"
ok 17 - pull.rebase not set and --ff given (not-fast-forward)
ok 66 - using "--if-exists replace" with "--no-if-exists" defaults to configuration
ok 67 - using "--no-if-exists" defaults to hardcoded default if nothing configured
ok 17 - merge c0 with c1 (no-commit)
ok 24 - status in an am session: file already exists
ok 68 - using "--no-if-exists" defaults to hardcoded default if nothing configured (no addition)
ok 18 - pull.rebase not set and --no-ff given (not-fast-forward)
ok 46 - submodule add places git-dir in superprojects git-dir
ok 18 - merge c1 with c2 (no-commit)
ok 1 - setup
ok 19 - pull.rebase not set and --ff-only given (not-fast-forward)
ok 25 - status in an am session: file does not exist
ok 75 - .gitmodules ignore=dirty suppresses submodules with untracked content
ok 35 - git reset --hard --recurse-submodules: replace submodule with a directory
ok 69 - using "ifExists = replace"
ok 20 - --ff-only overrides --rebase
ok 26 - status in an am session: empty patch
ok 21 - --ff-only overrides --rebase even if first
ok 22 - --ff-only overrides --no-rebase
ok 93 - recursive relative submodules stay relative
ok 46 - git_test_func: replace directory with submodule
ok 42 - replace submodule revision
ok 70 - using "ifExists = replace" with "where = after"
ok 23 - pull.ff=only overrides pull.rebase=true
ok 76 - .git/config ignore=dirty suppresses submodules with untracked content
ok 24 - pull.ff=only overrides pull.rebase=false
ok 47 - submodule update places git-dir in superprojects git-dir
ok 27 - status when bisecting
ok 71 - using "ifExists = doNothing"
ok 19 - merge c1 with c2 and c3 (no-commit)
ok 25 - --rebase overrides --no-ff
ok 20 - merge c0 with c1 (squash)
ok 77 - --ignore-submodules=dirty suppresses submodules with modified content
ok 43 - filter commit message without trailing newline
ok 28 - status when bisecting while rebasing
ok 94 - submodule add with an existing name fails unless forced
ok 21 - merge c0 with c1 (squash, ff-only)
ok 36 - git reset --hard --recurse-submodules: replace submodule containing a .git directory with a directory must fail
ok 26 - --rebase overrides --ff
ok 1 - core.untrackedCache is unset
ok 22 - merge c1 with c2 (squash)
ok 72 - the default is "ifMissing = add"
ok 48 - submodule add places git-dir in superprojects git-dir recursive
ok 23 - unsuccessful merge of c1 with c2 (squash, ff-only)
ok 2 - setup
ok 3 - untracked cache is empty
ok 27 - --rebase fast-forwards when possible
ok 47 - git_test_func: removed submodule leaves submodule directory and its contents in place
ok 78 - .gitmodules ignore=dirty suppresses submodules with modified content
ok 95 - set up a second submodule
ok 4 - status first time (empty cache)
ok 5 - untracked cache after first status
ok 73 - overriding configuration with "--if-missing doNothing"
ok 29 - status when rebase --apply conflicts with statushints disabled
ok 28 - pull.rebase=true overrides pull.ff=false
ok 6 - status second time (fully populated cache)
ok 7 - untracked cache after second status
ok 44 - tree-filter deals with object name vs pathname ambiguity
ok 74 - when default "ifMissing" is "doNothing"
ok 29 - pull.rebase=true overrides pull.ff=true
ok 8 - untracked cache is bypassed with -uall
ok 9 - untracked cache remains after bypass
ok 96 - submodule deinit works on repository without submodules
ok 79 - .git/config ignore=dirty suppresses submodules with modified content
ok 30 - prepare for cherry-pick conflicts
ok 37 - git reset --hard --recurse-submodules: replace submodule with a file ignoring ignored files
ok 30 - --ff-only takes precedence over pull.rebase=true
ok 10 - if -uall is configured, untracked cache gets populated by default
ok 31 - status when cherry-picking before resolving conflicts
ok 11 - if -uall was configured, untracked cache is populated
ok 31 - --ff-only takes precedence over pull.rebase=false
ok 24 - merge c1 with c2 and c3 (squash)
ok 97 - submodule deinit should remove the whole submodule section from .git/config
ok 98 - submodule deinit should unset core.worktree
ok 75 - using "ifMissing = add" with "where = end"
ok 32 - status when cherry-picking after resolving conflicts
ok 12 - if -uall is configured, untracked cache is used by default
ok 32 - --no-rebase takes precedence over pull.ff=only
ok 25 - merge c1 with c2 (no-commit in config)
ok 80 - --ignore-submodules=untracked doesn't suppress submodules with modified content
ok 48 - git_test_func: removed submodule leaves submodule containing a .git directory alone
ok 33 - status when cherry-picking multiple commits
ok 13 - if -uall is configured, untracked cache is bypassed with -unormal
ok 14 - repopulate untracked cache for -unormal
ok 33 - --rebase takes precedence over pull.ff=only
ok 26 - merge c1 with c2 (log in config)
ok 38 - git reset --hard --recurse-submodules: modified submodule does update submodule work tree from invalid commit
ok 76 - using "ifMissing = add" with "where = before"
ok 34 - status when cherry-picking after committing conflict resolution
ok 15 - modify in root directory, one dir invalidation
ok 35 - status shows cherry-pick with invalid oid
ok 16 - verify untracked cache dump
ok 36 - status does not show error if .git/sequencer is a file
ok 34 - --rebase overrides pull.ff=true
ok 17 - new .gitignore invalidates recursively
ok 45 - rewrite repository including refs that point at non-commit object
ok 81 - .gitmodules ignore=untracked doesn't suppress submodules with modified content
ok 27 - merge c1 with c2 (log in config gets overridden)
ok 18 - verify untracked cache dump
ok 77 - using "ifMissing = doNothing"
ok 37 - status showing detached at and from a tag
ok 78 - using "--no-if-missing" defaults to configuration
ok 79 - using "--no-if-missing" defaults to hardcoded default if nothing configured
ok 35 - --rebase overrides pull.ff=false
ok 19 - new info/exclude invalidates everything
ok 28 - merge c1 with c2 (squash in config)
ok 99 - submodule deinit from subdirectory
ok 20 - verify untracked cache dump
ok 21 - move two from tracked to untracked
ok 49 - git_test_func: replace submodule with a directory must fail
ok 36 - --rebase overrides pull.ff unset
ok 22 - status after the move
ok 38 - status while reverting commit (conflicts)
ok 29 - override config option -n with --summary
ok 23 - verify untracked cache dump
ok 39 - status while reverting commit (conflicts resolved)
ok 80 - default "where" is now "after"
ok 24 - move two from untracked to tracked
ok 82 - .git/config ignore=untracked doesn't suppress submodules with modified content
ok 40 - status after reverting commit
ok 37 - --no-rebase works with --no-ff
ok 46 - filter-branch handles ref deletion
ok 39 - git reset --hard --recurse-submodules: updating submodules fixes .git links
ok 25 - status after the move
ok 30 - override config option -n with --stat
ok 26 - verify untracked cache dump
ok 41 - status while reverting after committing conflict resolution
ok 49 - submodule update places git-dir in superprojects git-dir recursive
ok 27 - set up for sparse checkout testing
ok 38 - --no-rebase works with --ff
ok 81 - with simple command
ok 31 - override config option --stat
ok 28 - status after commit
ok 50 - submodule add properly re-creates deeper level submodules
ok 29 - untracked cache correct after commit
ok 39 - --no-rebase does ff if pull.ff unset
ok 42 - prepare for different number of commits rebased
ok 30 - set up sparse checkout
ok 82 - with command using committer information
ok 83 - --ignore-submodules=untracked doesn't suppress submodule summary
ok 31 - create/modify files, some of which are gitignored
ok 32 - merge c1 with c2 (override --no-commit)
ok 40 - --no-rebase heeds pull.ff=true
ok 32 - test sparse status with untracked cache
ok 43 - status: one command done nothing remaining
ok 33 - untracked cache correct after status
ok 50 - git_test_func: replace submodule containing a .git directory with a directory must fail
ok 47 - filter-branch handles ref rewrite
ok 83 - with command using author information
ok 34 - test sparse status again with untracked cache
ok 41 - --no-rebase heeds pull.ff=false
ok 35 - set up for test of subdir and sparse checkouts
ok 33 - merge c1 with c2 (override --squash)
ok 2 - merge c1 with c2, c3, c4, ... c29
ok 84 - setup a commit
ok 40 - git reset --hard --recurse-submodules: changed submodule worktree is reset
ok 44 - status: two commands done with some white lines in done file
ok 36 - test sparse status with untracked cache and subdir
ok 100 - submodule deinit . deinits all initialized submodules
ok 84 - .gitmodules ignore=untracked doesn't suppress submodule summary
ok 34 - merge c0 with c1 (no-ff)
ok 37 - verify untracked cache dump (sparse/subdirs)
ok 42 - pull.rebase=true and --no-ff
ok 38 - test sparse status again with untracked cache and subdir
ok 45 - status: two remaining commands with some white lines in todo file
ok 35 - merge c0 with c1 (merge.ff=false)
ok 3 - merge output uses pretty names
ok 43 - pull.rebase=true and --ff
ok 85 - cmd takes precedence over command
ok 46 - status: handle not-yet-started rebase -i gracefully
ok 39 - move entry in subdir from untracked to cached
# passed all 46 test(s)
1..46
ok 4 - merge reduces irrelevant remote heads
*** t7603-merge-reduce-heads.sh ***
not ok 51 - git_test_func: replace submodule with a file must fail # TODO known breakage
ok 36 - combine branch.main.mergeoptions with merge.ff
ok 48 - filter-branch handles ancestor rewrite
# passed all 48 test(s)
1..48
ok 44 - pull.rebase=false and --no-ff
*** t7604-merge-custom-message.sh ***
ok 40 - move entry in subdir from cached to untracked
ok 51 - submodule update properly revives a moved submodule
ok 41 - --no-untracked-cache removes the cache
ok 37 - tolerate unknown values for merge.ff
ok 42 - git status does not change anything
ok 85 - .git/config ignore=untracked doesn't suppress submodule summary
ok 38 - combining --squash and --no-ff is refused
ok 43 - setting core.untrackedCache to true and using git status creates the cache
ok 45 - pull.rebase=false and --ff, ff possible
ok 86 - with command using $ARG
ok 39 - combining --squash and --commit is refused
ok 44 - using --no-untracked-cache does not fail when core.untrackedCache is true
ok 5 - merge fast-forward output uses pretty names
# passed all 5 test(s)
1..5
ok 40 - option --ff-only overwrites --no-ff
ok 45 - setting core.untrackedCache to false and using git status removes the cache
*** t7605-merge-resolve.sh ***
ok 46 - using --untracked-cache does not fail when core.untrackedCache is false
ok 46 - pull.rebase=false and --ff, ff not possible
ok 41 - option --no-ff overrides merge.ff=only config
ok 41 - git_test_func: added submodule creates empty directory
ok 47 - Multiple heads warns about inability to fast forward
ok 47 - setting core.untrackedCache to keep
ok 42 - merge c0 with c1 (ff overrides no-ff)
ok 87 - with failing command using $ARG
ok 86 - --ignore-submodules=dirty doesn't suppress submodule summary
ok 48 - test ident field is working
ok 52 - submodule update can handle symbolic links in pwd
ok 48 - Multiple can never be fast forwarded
ok 88 - with empty tokens
ok 1 - setup
not ok 52 - git_test_func: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 49 - Cannot rebase with multiple heads
ok 89 - with command but no key
ok 49 - untracked cache survives a checkout
ok 2 - merge c2 with a custom message
ok 1 - setup
ok 50 - merge c1 with c2
ok 50 - untracked cache survives a commit
ok 101 - submodule deinit --all deinits all initialized submodules
ok 51 - teardown worktree
ok 90 - with no command and no key
ok 3 - merge --log appends to custom message
ok 4 - prepare file with comment line and trailing newlines
ok 43 - merge log message
ok 91 - with cut line
ok 87 - .gitmodules ignore=dirty doesn't suppress submodule summary
ok 5 - cleanup commit messages (verbatim option)
ok 1 - setup
ok 51 - fast-forward pull succeeds with "true" in pull.ff
ok 52 - setup worktree for symlink test
ok 92 - only trailers
ok 6 - cleanup commit messages (whitespace option)
ok 44 - merge c1 with c0, c2, c0, and c1
ok 93 - only-trailers omits non-trailer in middle of block
ok 94 - only input
ok 2 - merge c1 to c2
ok 95 - unfold
ok 7 - cleanup merge messages (scissors option)
ok 52 - pull.ff=true overrides merge.ff=false
ok 96 - handling of --- lines in input
ok 97 - suppress --- handling
ok 98 - suppressing --- does not disable cut-line handling
ok 99 - handling of --- lines in conjunction with cut-lines
ok 42 - git_test_func: added submodule leaves existing empty directory alone
ok 45 - merge c1 with c0, c2, c0, and c1
# passed all 99 test(s)
1..99
ok 8 - cleanup commit messages (strip option)
*** t7606-merge-custom.sh ***
# passed all 8 test(s)
1..8
ok 3 - merge c1 to c2, again
*** t7607-merge-state.sh ***
ok 53 - submodule update clone shallow submodule
ok 2 - merge c1 with c2, c3, c4, c5
ok 102 - submodule deinit deinits a submodule when its work tree is missing or empty
ok 53 - fast-forward pull creates merge with "false" in pull.ff
ok 88 - .git/config ignore=dirty doesn't suppress submodule summary
ok 46 - merge c1 with c1 and c2
ok 47 - merge fast-forward in a dirty tree
ok 54 - pull prevents non-fast-forward with "only" in pull.ff
ok 48 - in-index merge
ok 53 - git_test_func: modified submodule does not update submodule work tree
ok 4 - merge c2 to c3 (fails)
ok 55 - already-up-to-date pull succeeds with unspecified pull.ff
# passed all 4 test(s)
ok 1 - set up custom strategy
1..4
*** t7608-merge-messages.sh ***
ok 49 - refresh the index before merging
ok 56 - already-up-to-date pull succeeds with "only" in pull.ff
ok 89 - status (core.commentchar with submodule summary)
ok 50 - merge with --autostash
ok 2 - setup
ok 57 - already-up-to-date pull/rebase succeeds with "only" in pull.ff
ok 3 - pull c2, c3, c4, c5 into c1
ok 43 - git_test_func: replace tracked file with submodule creates empty directory
ok 58 - merge c1 with c2 (ours in pull.twohead)
ok 59 - merge c1 with c2 and c3 (recursive in pull.octopus)
ok 51 - merge with merge.autoStash
ok 3 - merge c2 with a custom strategy
ok 103 - submodule deinit fails when the submodule contains modifications unless forced
ok 90 - status (core.commentchar with two chars with submodule summary)
ok 91 - --ignore-submodules=all suppresses submodule summary
ok 52 - fast-forward merge with --autostash
ok 1 - merge local branch
ok 1 - Ensure we restore original state if no merge strategy handles it
# passed all 1 test(s)
1..1
*** t7609-mergetool--lib.sh ***
ok 53 - failed fast-forward merge with --autostash
ok 4 - trivial merge with custom strategy
# passed all 4 test(s)
1..4
*** t7610-mergetool.sh ***
ok 54 - submodule update clone shallow submodule outside of depth
ok 60 - merge c1 with c2 and c3 (recursive and octopus in pull.octopus)
ok 4 - setup
ok 54 - git_test_func: modified submodule does not update submodule work tree to invalid commit
ok 92 - .gitmodules ignore=all suppresses unstaged submodule summary
ok 55 - submodule update --recursive drops module name before recursing
ok 2 - merge octopus branches
ok 44 - git_test_func: replace directory with submodule
ok 61 - setup conflicted merge
ok 5 - merge E and I
ok 6 - verify merge result
ok 93 - .git/config ignore=all suppresses unstaged submodule summary
ok 104 - submodule deinit fails when the submodule contains untracked files unless forced
ok 3 - merge tag
ok 7 - add conflicts
ok 54 - octopus merge with --autostash
ok 56 - submodule update can be run in parallel
ok 4 - ambiguous tag
ok 55 - failed merge (exit 2) with --autostash
ok 94 - setup of test environment
ok 95 - "status.short=true" same as "-s"
ok 55 - git_test_func: modified submodule does not update submodule work tree from invalid commit
ok 45 - git_test_func: removed submodule leaves submodule directory and its contents in place
ok 56 - conflicted merge with --autostash, --abort restores stash
ok 8 - merge E2 and I2, causing a conflict and resolve it
ok 5 - remote-tracking branch
# passed all 5 test(s)
1..5
*** t7611-merge-abort.sh ***
ok 9 - verify merge result
ok 10 - fast-forward to redundant refs
ok 105 - submodule deinit fails when the submodule HEAD does not match unless forced
ok 11 - verify merge result
ok 56 - git_test_func: added submodule doesn't remove untracked unignored file with same name
ok 12 - merge up-to-date redundant refs
# still have 8 known breakage(s)
# passed all remaining 48 test(s)
1..56
ok 13 - verify merge result
ok 57 - completed merge (git commit) with --no-commit and --autostash
# passed all 13 test(s)
1..13
ok 62 - merge picks up the best result
ok 96 - "status.short=true" weaker than "--no-short"
*** t7612-merge-verify-signatures.sh ***
*** t7614-merge-signoff.sh ***
ok 57 - git clone passes the parallel jobs config on to submodules
ok 58 - completed merge (git merge --continue) with --no-commit and --autostash
ok 97 - "status.short=false" same as "--no-short"
ok 1 - setup
ok 98 - "status.short=false" weaker than "-s"
ok 2 - fails without MERGE_HEAD (unstarted merge)
ok 3 - fails without MERGE_HEAD (unstarted merge): .git/MERGE_HEAD sanity
ok 1 # skip create signed commits (missing GPG)
ok 2 # skip merge unsigned commit with verification (missing GPG)
ok 3 # skip merge unsigned commit with merge.verifySignatures=true (missing GPG)
ok 46 - git_test_func: removed submodule leaves submodule containing a .git directory alone
ok 4 # skip merge commit with bad signature with verification (missing GPG)
ok 5 # skip merge commit with bad signature with merge.verifySignatures=true (missing GPG)
ok 6 # skip merge commit with untrusted signature with verification (missing GPG)
ok 7 # skip merge commit with untrusted signature with verification and high minTrustLevel (missing GPG)
ok 8 # skip merge commit with untrusted signature with verification and low minTrustLevel (missing GPG)
ok 9 # skip merge commit with untrusted signature with merge.verifySignatures=true (missing GPG)
ok 10 # skip merge commit with untrusted signature with merge.verifySignatures=true and minTrustLevel (missing GPG)
ok 99 - "status.branch=true" same as "-b"
ok 11 # skip merge signed commit with verification (missing GPG)
ok 12 # skip merge signed commit with merge.verifySignatures=true (missing GPG)
ok 13 # skip merge commit with bad signature without verification (missing GPG)
ok 14 # skip merge commit with bad signature with merge.verifySignatures=false (missing GPG)
ok 15 # skip merge commit with bad signature with merge.verifySignatures=true and --no-verify-signatures (missing GPG)
ok 59 - aborted merge (merge --abort) with --no-commit and --autostash
ok 16 # skip merge unsigned commit into unborn branch (missing GPG)
# passed all 16 test(s)
1..16
ok 4 - fails without MERGE_HEAD (completed merge)
*** t7615-diff-algo-with-mergy-operations.sh ***
ok 5 - fails without MERGE_HEAD (completed merge): .git/MERGE_HEAD sanity
ok 6 - Forget previous merge
ok 100 - "status.branch=true" different from "--no-branch"
ok 101 - "status.branch=true" weaker than "--no-branch"
ok 1 - setup
ok 58 - submodule update --quiet passes quietness to merge/rebase
ok 102 - "status.branch=true" weaker than "--porcelain"
ok 7 - Abort after --no-commit
ok 103 - "status.branch=false" same as "--no-branch"
ok 60 - aborted merge (reset --hard) with --no-commit and --autostash
ok 104 - "status.branch=false" weaker than "-b"
ok 105 - Restore default test environment
ok 8 - Abort after conflicts
ok 2 - git merge --signoff adds a sign-off line
ok 1 - setup
ok 61 - quit merge with --no-commit and --autostash
ok 9 - Clean merge with dirty index fails
ok 3 - git merge does not add a sign-off line
ok 63 - merge picks up the best result (from config)
ok 64 - merge errors out on invalid strategy
ok 10 - Conflicting merge with dirty index fails
ok 47 - git_test_func: replace submodule with a directory must fail
ok 1 - setup
ok 65 - merge errors out on invalid strategy
ok 106 - git commit will commit a staged but ignored submodule
# passed all 65 test(s)
1..65
ok 11 - Reset index (but preserve worktree changes)
ok 4 - git merge --no-signoff flag cancels --signoff flag
*** t7700-repack.sh ***
# passed all 4 test(s)
1..4
ok 2 - merge c2 to c1 with recursive merge strategy fails with the current default myers diff algorithm
ok 62 - merge with conflicted --autostash changes
*** t7701-repack-unpack-unreachable.sh ***
ok 3 - merge c2 to c1 with recursive merge strategy succeeds with -Xdiff-algorithm=histogram
ok 12 - Abort clean merge with non-conflicting dirty worktree
ok 4 - merge c2 to c1 with recursive merge strategy succeeds with diff.algorithm = histogram
ok 5 - cherry-pick c2 to c1 with recursive merge strategy fails with the current default myers diff algorithm
ok 13 - Abort conflicting merge with non-conflicting dirty worktree
ok 14 - Reset worktree changes
ok 6 - cherry-pick c2 to c1 with recursive merge strategy succeeds with -Xdiff-algorithm=histogram
ok 107 - git commit --dry-run will show a staged but ignored submodule
ok 7 - cherry-pick c2 to c1 with recursive merge strategy succeeds with diff.algorithm = histogram
# passed all 7 test(s)
1..7
*** t7702-repack-cyclic-alternate.sh ***
ok 15 - Fail clean merge with conflicting dirty worktree
ok 108 - git commit -m will commit a staged but ignored submodule
ok 63 - merge early part of c2
ok 106 - submodule deinit is silent when used on an uninitialized submodule
ok 16 - Fail conflicting merge with conflicting dirty worktree
ok 17 - Reset worktree changes
ok 1 - objects in packs marked .keep are not repacked
ok 64 - merge --no-ff --no-commit && commit
ok 2 - writing bitmaps via command-line can duplicate .keep objects
ok 65 - amending no-ff merge commit
ok 48 - git_test_func: replace submodule containing a .git directory with a directory must fail
ok 18 - Fail clean merge with matching dirty worktree
ok 3 - writing bitmaps via config can duplicate .keep objects
ok 66 - merge --no-ff --edit
ok 1 - setup
ok 19 - Fail conflicting merge with matching dirty worktree
ok 1 - -A with -d option leaves unreachable objects unpacked
# passed all 19 test(s)
1..19
ok 4 - loose objects in alternate ODB are not repacked
*** t7703-repack-geometric.sh ***
ok 2 - re-packing repository with itself as alternate
# passed all 2 test(s)
1..2
*** t7704-repack-cruft.sh ***
ok 2 - -A without -d option leaves unreachable objects packed
ok 59 - submodule update --quiet passes quietness to fetch with a shallow clone
ok 5 - --local keeps packs when alternate is objectdir 
ok 3 - unpacked objects receive timestamp of pack file
ok 109 - show stash info with "--show-stash"
ok 60 - submodule update --filter requires --init
ok 67 - merge annotated/signed tag w/o tracking
ok 107 - submodule deinit absorbs .git directory if .git is a directory
ok 6 - --local disables writing bitmaps when connected to alternate ODB
ok 4 - do not bother loosening old objects
not ok 49 - git_test_func: replace submodule with a file must fail # TODO known breakage
ok 1 - --geometric with no packs
ok 7 - packed obs in alt ODB are repacked even when local repo is packless
ok 110 - no stash info with "--show-stash --no-show-stash"
ok 2 - --geometric with one pack
ok 68 - merge annotated/signed tag w/ tracking
ok 69 # skip merge --ff-only tag (missing GPG)
ok 70 # skip merge --no-edit tag should skip editor (missing GPG)
ok 5 - gc.recentObjectsHook
ok 8 - packed obs in alt ODB are repacked when local repo has packs
ok 1 - --expire-to stores pruned objects (now)
ok 61 - submodule update --filter sets partial clone settings
ok 3 - --geometric with an intact progression
ok 111 - "status.showStash=false" weaker than "--show-stash"
ok 9 - packed obs in alternate ODB kept pack are repacked
ok 71 - set up mod-256 conflict scenario
ok 108 - submodule with UTF-8 name
ok 10 - packed unreachable obs in alternate ODB are not loosened
not ok 50 - git_test_func: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 72 - merge detects mod-256 conflicts (recursive)
ok 11 - local packed unreachable obs that exist in alternate ODB are not loosened
ok 6 - keep packed objects found only in index
ok 112 - "status.showStash=true" weaker than "--no-show-stash"
ok 4 - --geometric with loose objects
ok 12 - objects made unreachable by grafts only are kept
ok 109 - submodule add clone shallow submodule
ok 7 - repack -k keeps unreachable packed objects
ok 2 - --expire-to stores pruned objects (5.minutes.ago)
ok 8 - repack -k packs unreachable loose objects
ok 73 - merge detects mod-256 conflicts (resolve)
ok 113 - no additional info if no stash entries
ok 53 - "status" after symlink replacement should be clean with UC=true
ok 9 - repack -k packs unreachable loose objects without existing packfiles
# passed all 9 test(s)
1..9
ok 5 - --geometric with small-pack rollup
*** t7800-difftool.sh ***
ok 74 - merge nothing into void
ok 75 - merge can be completed with --continue
ok 114 - "No commits yet" should be noted in status output
ok 6 - --geometric with small- and large-pack rollup
ok 2 - custom mergetool
ok 76 - killed merge can be completed with --continue
ok 1 - basic usage requires no repo
ok 51 - git_test_func: modified submodule does not update submodule work tree
ok 62 - setup clean recursive superproject
ok 13 - repack --keep-pack
ok 2 - setup
ok 7 - --geometric ignores kept packs
ok 77 - merge --quit
ok 115 - "No commits yet" should not be noted in status output
ok 78 - merge suggests matching remote refname
ok 79 - suggested names are not ambiguous
# passed all 79 test(s)
1..79
*** t7810-grep.sh ***
ok 3 - custom commands
ok 110 - setup superproject with submodules
ok 8 - --geometric ignores --keep-pack packs
ok 3 - --max-cruft-size creates new packs when above threshold
ok 14 - repacking fails when missing .pack actually means missing objects
ok 116 - "Initial commit" should be noted in commit template
ok 15 - bitmaps are created by default in bare repos
ok 4 - custom tool commands override built-ins
ok 16 - incremental repack does not complain
ok 17 - bitmaps can be disabled on bare repos
ok 5 - difftool ignores bad --tool values
ok 18 - no bitmaps created if .keep files present
ok 9 - --geometric chooses largest MIDX preferred pack
ok 52 - git_test_func: modified submodule does not update submodule work tree to invalid commit
ok 1 - setup
ok 2 - grep should not segfault with a bad input
ok 3 - invalid expression: grep --and -e A
ok 117 - "Initial commit" should not be noted in commit template
ok 4 - grep -w HEAD
ok 6 - difftool forwards arguments to diff
ok 63 - submodule update should skip unmerged submodules
ok 5 - grep -w HEAD (with --column)
ok 6 - grep -w HEAD (with --column, extended OR)
ok 7 - difftool without options ignores exit code
ok 7 - grep -w HEAD (with --column, --invert-match)
ok 8 - grep HEAD (with --column, --invert-match, extended OR)
ok 9 - grep HEAD (with --column, --invert-match, extended AND)
ok 8 - difftool without options forwards exit code with --trust-exit-code
ok 10 - grep HEAD (with --column, double-negation)
ok 11 - grep -w HEAD (with --column, -C)
ok 64 - submodule update --recursive skip submodules with strategy=none
ok 12 - grep -w HEAD (with --line-number, --column)
ok 13 - grep -w HEAD (with non-extended patterns, --column)
ok 65 - commit with staged submodule change
ok 9 - difftool without options forwards exit code with --trust-exit-code for built-ins
ok 14 - grep -w HEAD
ok 111 - submodule update --init with a specification
ok 15 - grep -w HEAD
ok 1 - mergetool --tool=vimdiff creates the expected layout
ok 66 - commit with staged submodule change with ignoreSubmodules dirty
# passed all 1 test(s)
1..1
*** t7811-grep-open.sh ***
ok 16 - grep -w HEAD (w)
ok 17 - grep -w HEAD (x)
ok 10 - difftool without options honors difftool.trustExitCode = true
ok 18 - grep -w HEAD (y-1)
ok 19 - auto-bitmaps do not complain if unavailable
ok 67 - commit with staged submodule change with ignoreSubmodules all
ok 19 - grep -w HEAD (y-2)
ok 68 # skip submodule paths must not follow symlinks (missing CASE_INSENSITIVE_FS of CASE_INSENSITIVE_FS,SYMLINKS)
# passed all 68 test(s)
1..68
ok 20 - grep -w HEAD (z)
ok 53 - git_test_func: modified submodule does not update submodule work tree from invalid commit
ok 118 - --no-optional-locks prevents index update
ok 21 - grep HEAD (with --column, --only-matching)
ok 4 - --max-cruft-size combines existing packs when below threshold
ok 11 - difftool without options honors difftool.trustExitCode = false
ok 22 - grep HEAD (t-1)
ok 23 - grep HEAD (t-2)
ok 24 - grep HEAD (t-3)
ok 25 - grep -c HEAD (no /dev/null)
ok 20 - repacking with a filter works
ok 1 - determine default pager
ok 12 - difftool without options ignores exit code with --no-trust-exit-code
ok 21 - --filter fails with --write-bitmap-index
ok 26 - grep --max-depth -1 HEAD
ok 54 - git_test_func: added submodule doesn't remove untracked unignored file with same name
ok 13 - difftool without options stops on error with --trust-exit-code
*** t7812-grep-icase-non-ascii.sh ***
ok 27 - grep --max-depth 0 HEAD
ok 10 - --geometric with pack.packSizeLimit
ok 28 - grep --max-depth 0 -- '*' HEAD
ok 29 - grep --max-depth 1 HEAD
ok 14 - difftool without options honors exit status if command not found
ok 2 - setup
ok 3 - git grep -O
ok 30 - grep --max-depth 0 -- t HEAD
ok 4 - git grep -O --cached
ok 5 - git grep -O --no-index
ok 6 - setup: fake "less"
ok 15 - difftool --dir-diff ignores exit code
ok 31 - grep --max-depth 0 -- . t HEAD
ok 7 - git grep -O jumps to line in less
ok 1 # skip setup (missing GETTEXT_LOCALE)
ok 32 - grep --max-depth 0 -- t . HEAD
ok 2 # skip setup REGEX_LOCALE prerequisite (missing GETTEXT_LOCALE)
ok 8 - modified file
ok 119 - racy timestamps will be fixed for clean worktree
ok 3 # skip grep literal string, no -F (missing REGEX_LOCALE)
ok 4 # skip grep pcre utf-8 icase (missing GETTEXT_LOCALE of GETTEXT_LOCALE,PCRE)
ok 112 - submodule update --init with submodule.active set
ok 5 # skip grep pcre utf-8 string with "+" (missing GETTEXT_LOCALE of GETTEXT_LOCALE,PCRE)
ok 33 - grep HEAD with '-c grep.extendedRegexp=false' interpreted as BRE
ok 6 # skip grep literal string, with -F (missing REGEX_LOCALE)
ok 16 - difftool --dir-diff forwards exit code with --trust-exit-code
ok 7 # skip grep string with regex, with -F (missing REGEX_LOCALE)
ok 22 - repacking with two filters works
ok 8 # skip pickaxe -i on non-ascii (missing REGEX_LOCALE)
ok 9 # skip PCRE v2: setup invalid UTF-8 data (missing GETTEXT_LOCALE of GETTEXT_LOCALE,LIBPCRE2)
ok 10 # skip PCRE v2: grep ASCII from invalid UTF-8 data (missing GETTEXT_LOCALE of GETTEXT_LOCALE,LIBPCRE2)
ok 11 - --geometric --write-midx with packfiles in main and alternate ODB
ok 11 # skip PCRE v2: grep ASCII from invalid UTF-8 data (PCRE2 bug #2642) (missing GETTEXT_LOCALE of GETTEXT_LOCALE,LIBPCRE2)
ok 12 # skip PCRE v2: grep non-ASCII from invalid UTF-8 data (missing GETTEXT_LOCALE of GETTEXT_LOCALE,LIBPCRE2)
ok 13 # skip PCRE v2: grep non-ASCII from invalid UTF-8 data (PCRE2 bug #2642) (missing GETTEXT_LOCALE of GETTEXT_LOCALE,LIBPCRE2)
ok 34 - grep HEAD with '-c grep.extendedRegexp=true' interpreted as ERE
ok 14 # skip PCRE v2: grep non-ASCII from invalid UTF-8 data with -i (missing GETTEXT_LOCALE of GETTEXT_LOCALE,LIBPCRE2)
ok 15 # skip PCRE v2: grep non-ASCII from invalid UTF-8 data with -i (missing GETTEXT_LOCALE of GETTEXT_LOCALE,LIBPCRE2,PCRE2_MATCH_INVALID_UTF)
ok 35 - grep HEAD with '-c grep.patternType=basic' interpreted as BRE
ok 16 # skip PCRE v2: grep non-ASCII from invalid UTF-8 data with -i (PCRE2 bug #2642) (missing GETTEXT_LOCALE of GETTEXT_LOCALE,LIBPCRE2,PCRE2_MATCH_INVALID_UTF)
ok 17 # skip PCRE v2: grep non-literal ASCII from UTF-8 (missing GETTEXT_LOCALE of GETTEXT_LOCALE,LIBPCRE2)
ok 18 # skip PCRE v2: grep avoid endless loop bug (missing GETTEXT_LOCALE of GETTEXT_LOCALE,LIBPCRE2)
ok 36 - grep HEAD with '-c grep.patternType=extended' interpreted as ERE
# passed all 18 test(s)
1..18
ok 9 - copes with color settings
*** t7813-grep-icase-iso.sh ***
ok 37 - grep HEAD with '-c grep.patternType=fixed' interpreted as FIX
ok 17 - difftool --dir-diff forwards exit code with --trust-exit-code for built-ins
ok 10 - run from subdir
ok 38 - grep HEAD with grep.patterntype=perl
# passed all 10 test(s)
1..10
*** t7814-grep-recurse-submodules.sh ***
ok 39 # skip grep HEAD with grep.patterntype=perl errors without PCRE (missing !PCRE of !FAIL_PREREQS,!PCRE)
ok 40 - grep HEAD with '-c grep.patternType=default -c grep.extendedRegexp=true' interpreted as ERE
ok 12 - --geometric --with-midx with no local objects
ok 41 - grep HEAD with '-c grep.extendedRegexp=true -c grep.patternType=default' interpreted as ERE
ok 42 - grep HEAD with '-c grep.patternType=extended -c grep.extendedRegexp=false' interpreted as ERE
ok 18 - difftool --dir-diff honors difftool.trustExitCode = true
ok 3 - gui mergetool
ok 43 - grep HEAD with '-c grep.patternType=basic -c grep.extendedRegexp=true' interpreted as BRE
ok 44 - grep HEAD with '-c grep.extendedRegexp=false -c grep.patternType=extended' interpreted as ERE
ok 55 - git_test_func: added submodule creates empty directory
ok 45 - grep HEAD with '-c grep.extendedRegexp=true -c grep.patternType=basic' interpreted as BRE
ok 46 - grep HEAD with '-c grep.extendedRegexp=true -c grep.extendedRegexp=false' interpreted as BRE
ok 19 - difftool --dir-diff honors difftool.trustExitCode = false
ok 23 - --filter works with .keep packs
ok 47 - grep HEAD with '-c grep.extendedRegexp=true -c grep.patternType=basic -c grep.extendedRegexp=false' interpreted as BRE
ok 1 # skip setup (missing GETTEXT_ISO_LOCALE)
ok 2 # skip grep pcre string (missing GETTEXT_ISO_LOCALE of GETTEXT_ISO_LOCALE,PCRE)
ok 48 - grep HEAD with '-c grep.extendedRegexp=true -c grep.patternType=extended -c grep.extendedRegexp=false' interpreted as ERE
# passed all 2 test(s)
1..2
ok 13 - --geometric with same pack in main and alternate ODB
*** t7815-grep-binary.sh ***
ok 49 - grep HEAD with '-c grep.patternType=fixed -c grep.extendedRegexp=true -c grep.patternType=default' interpreted as ERE
ok 50 - grep HEAD with '-c grep.extendedRegexp=false -c grep.patternType=default -c grep.extendedRegexp=true' interpreted as ERE
ok 20 - difftool --dir-diff ignores exit code with --no-trust-exit-code
ok 51 - grep HEAD with '-c grep.extendedRegexp=false -c grep.extendedRegexp=true -c grep.patternType=default' interpreted as ERE
ok 52 - grep HEAD with '-c grep.patternType=default -c grep.extendedRegexp=true -c grep.patternType=basic' interpreted as BRE
ok 53 - grep HEAD with '-c grep.patternType=extended -c grep.patternType=default' interpreted as BRE
ok 120 - racy timestamps will be fixed for dirty worktree
ok 21 - difftool --dir-diff stops on error with --trust-exit-code
ok 54 - grep HEAD with '-c grep.patternType=extended -c grep.patternType=default -c grep.patternType=fixed' interpreted as FIX
ok 55 - grep --count HEAD
ok 56 - grep --count -h HEAD
ok 121 - setup slow status advice
ok 113 - submodule update and setting submodule.<name>.active
ok 57 - grep HEAD searches past invalid lines on UTF-8 locale
ok 22 - difftool --dir-diff honors exit status if command not found
ok 122 - slow status advice when core.untrackedCache and fsmonitor are unset
ok 58 - grep HEAD should quote unusual pathnames
ok 123 - slow status advice when core.untrackedCache true, but not fsmonitor
ok 24 - --filter works with --pack-kept-objects and .keep packs
ok 59 - grep HEAD in subdir should quote unusual relative pathnames
ok 1 - setup directory structure and submodule
ok 124 - slow status advice when core.untrackedCache true, and fsmonitor
ok 2 - grep correctly finds patterns in a submodule
ok 125 # skip status does not re-read unchanged 4 or 8 GiB file (missing EXPENSIVE)
ok 60 - grep -z HEAD with unusual pathnames
# passed all 125 test(s)
1..125
ok 1 - setup
ok 14 - --geometric -l with non-intact geometric sequence across ODBs
ok 2 - git grep ina a
ok 61 - grep -z HEAD in subdir with unusual relative pathnames
*** t7816-grep-binary-pattern.sh ***
ok 3 - grep finds patterns in a submodule via config
ok 3 - git grep -ah ina a
ok 62 - grep -w in working tree
ok 4 - git grep -I ina a
ok 4 - grep --no-recurse-submodules overrides config
ok 63 - grep -w in working tree (with --column)
ok 5 - git grep -c ina a
ok 64 - grep -w in working tree (with --column, extended OR)
ok 5 - grep and basic pathspecs
ok 6 - git grep -l ina a
ok 23 - difftool honors --gui
ok 65 - grep -w in working tree (with --column, --invert-match)
ok 7 - git grep -L bar a
ok 56 - git_test_func: added submodule leaves existing empty directory alone
ok 8 - git grep -q ina a
ok 66 - grep in working tree (with --column, --invert-match, extended OR)
ok 9 - git grep -F ile a
ok 67 - grep in working tree (with --column, --invert-match, extended AND)
ok 10 - git grep -Fi iLE a
ok 25 - --filter-to stores filtered out objects
ok 11 - git grep ile a
ok 68 - grep in working tree (with --column, double-negation)
not ok 12 - git grep .fi a # TODO known breakage
ok 69 - grep -w in working tree (with --column, -C)
ok 15 - --geometric -l disables writing bitmaps with non-local packfiles
# passed all 15 test(s)
1..15
*** t7817-grep-sparse-checkout.sh ***
ok 70 - grep -w in working tree (with --line-number, --column)
ok 13 - grep respects binary diff attribute
ok 71 - grep -w in working tree (with non-extended patterns, --column)
ok 5 - --max-cruft-size combines smaller packs first
ok 14 - grep --cached respects binary diff attribute
ok 72 - grep -w in working tree
ok 1 - setup
ok 73 - grep -w in working tree
ok 24 - difftool with guiDefault auto selects gui tool when there is DISPLAY
ok 74 - grep -w in working tree (w)
ok 15 - grep --cached respects binary diff attribute (2)
ok 2 - error, PCRE v2 only: LC_ALL='C' git grep -f f -F 'y<NUL>f' a
ok 6 - grep and nested submodules
ok 75 - grep -w in working tree (x)
ok 76 - grep -w in working tree (y-1)
ok 7 - grep and multiple patterns
ok 3 - error, PCRE v2 only: LC_ALL='C' git grep -f f -F 'y<NUL>f' a
ok 77 - grep -w in working tree (y-2)
ok 4 # skip error, PCRE v2 only: LC_ALL='' git grep -f f -F 'y<NUL>f' a (missing GETTEXT_LOCALE of LIBPCRE2,GETTEXT_LOCALE)
ok 78 - grep -w in working tree (z)
ok 16 - grep revision respects binary diff attribute
ok 8 - grep and multiple patterns
ok 79 - grep in working tree (with --column, --only-matching)
ok 5 - error, PCRE v2 only: LC_ALL='C' git grep -f f -F 'y<NUL>x' a
ok 6 - setup --max-cruft-size with freshened objects
ok 9 - basic grep tree
ok 80 - grep in working tree (t-1)
ok 6 - error, PCRE v2 only: LC_ALL='C' git grep -f f -F 'y<NUL>x' a
ok 81 - grep in working tree (t-2)
ok 7 # skip error, PCRE v2 only: LC_ALL='' git grep -f f -F 'y<NUL>x' a (missing GETTEXT_LOCALE of LIBPCRE2,GETTEXT_LOCALE)
ok 10 - grep tree HEAD^
ok 17 - grep respects not-binary diff attribute
ok 82 - grep in working tree (t-3)
ok 18 - setup textconv filters
ok 11 - grep tree HEAD^^
ok 83 - grep -c in working tree (no /dev/null)
ok 8 - error, PCRE v2 only: LC_ALL='C' git grep -f f -Fi 'Y<NUL>f' a
ok 7 - --max-cruft-size with freshened objects (loose)
ok 19 - grep does not honor textconv
ok 25 - difftool with guiDefault auto selects regular tool when no DISPLAY
ok 9 - error, PCRE v2 only: LC_ALL='C' git grep -f f -Fi 'Y<NUL>f' a
ok 10 # skip error, PCRE v2 only: LC_ALL='' git grep -f f -Fi 'Y<NUL>f' a (missing GETTEXT_LOCALE of LIBPCRE2,GETTEXT_LOCALE)
ok 20 - grep --textconv honors textconv
ok 84 - grep --max-depth -1 in working tree
ok 12 - grep tree and pathspecs
ok 21 - grep --no-textconv does not honor textconv
ok 11 - error, PCRE v2 only: LC_ALL='C' git grep -f f -Fi 'Y<NUL>x' a
ok 13 - grep tree and pathspecs
ok 85 - grep --max-depth 0 in working tree
ok 22 - grep --textconv blob honors textconv
ok 14 - grep tree and more pathspecs
# still have 1 known breakage(s)
# passed all remaining 21 test(s)
1..22
ok 12 - error, PCRE v2 only: LC_ALL='C' git grep -f f -Fi 'Y<NUL>x' a
*** t7900-maintenance.sh ***
ok 13 # skip error, PCRE v2 only: LC_ALL='' git grep -f f -Fi 'Y<NUL>x' a (missing GETTEXT_LOCALE of LIBPCRE2,GETTEXT_LOCALE)
ok 8 - --max-cruft-size with freshened objects (packed)
ok 15 - grep tree and more pathspecs
ok 86 - grep --max-depth 0 -- '*' in working tree
ok 14 - error, PCRE v2 only: LC_ALL='C' git grep -f f  'y<NUL>f' a
ok 114 - clone active submodule without submodule url set
ok 57 - git_test_func: replace tracked file with submodule creates empty directory
ok 87 - grep --max-depth 1 in working tree
ok 15 - error, PCRE v2 only: LC_ALL='C' git grep -f f  'y<NUL>f' a
ok 16 # skip LC_ALL='' git grep -P -f f  'y<NUL>f' a (missing GETTEXT_LOCALE of LIBPCRE2,GETTEXT_LOCALE)
ok 88 - grep --max-depth 0 -- t in working tree
ok 17 - error, PCRE v2 only: LC_ALL='C' git grep -f f  'y<NUL>x' a
ok 89 - grep --max-depth 0 -- . t in working tree
ok 18 - error, PCRE v2 only: LC_ALL='C' git grep -f f  'y<NUL>x' a
ok 19 # skip LC_ALL='' git grep -P -f f  'y<NUL>x' a (missing GETTEXT_LOCALE of LIBPCRE2,GETTEXT_LOCALE)
ok 90 - grep --max-depth 0 -- t . in working tree
ok 20 - error, PCRE v2 only: LC_ALL='C' git grep -f f  'æ<NUL>ð' a
ok 91 - grep in working tree with '-c grep.extendedRegexp=false' interpreted as BRE
ok 92 - grep in working tree with '-c grep.extendedRegexp=true' interpreted as ERE
ok 21 - error, PCRE v2 only: LC_ALL='C' git grep -f f  'æ<NUL>ð' a
ok 22 # skip LC_ALL='' git grep -P -f f  'æ<NUL>ð' a (missing GETTEXT_LOCALE of LIBPCRE2,GETTEXT_LOCALE)
ok 26 - difftool with guiDefault true selects gui tool
ok 93 - grep in working tree with '-c grep.patternType=basic' interpreted as BRE
ok 94 - grep in working tree with '-c grep.patternType=extended' interpreted as ERE
ok 23 - error, PCRE v2 only: LC_ALL='C' git grep -f f -F 'e<NUL>m[*]c' a
ok 95 - grep in working tree with '-c grep.patternType=fixed' interpreted as FIX
ok 24 - error, PCRE v2 only: LC_ALL='C' git grep -f f -F 'e<NUL>m[*]c' a
ok 25 # skip error, PCRE v2 only: LC_ALL='' git grep -f f -F 'e<NUL>m[*]c' a (missing GETTEXT_LOCALE of LIBPCRE2,GETTEXT_LOCALE)
ok 1 - help text
ok 1 - setup
ok 96 - grep in working tree with grep.patterntype=perl
ok 97 # skip grep in working tree with grep.patterntype=perl errors without PCRE (missing !PCRE of !FAIL_PREREQS,!PCRE)
ok 2 - working tree grep honors sparse checkout
ok 98 - grep in working tree with '-c grep.patternType=default -c grep.extendedRegexp=true' interpreted as ERE
ok 26 - error, PCRE v2 only: LC_ALL='C' git grep -f f -Fi 'E<NUL>M[*]C' a
ok 99 - grep in working tree with '-c grep.extendedRegexp=true -c grep.patternType=default' interpreted as ERE
ok 27 - error, PCRE v2 only: LC_ALL='C' git grep -f f -Fi 'E<NUL>M[*]C' a
ok 115 - update submodules without url set in .gitconfig
ok 28 # skip error, PCRE v2 only: LC_ALL='' git grep -f f -Fi 'E<NUL>M[*]C' a (missing GETTEXT_LOCALE of LIBPCRE2,GETTEXT_LOCALE)
ok 16 - grep recurse submodule colon in name
ok 100 - grep in working tree with '-c grep.patternType=extended -c grep.extendedRegexp=false' interpreted as ERE
ok 101 - grep in working tree with '-c grep.patternType=basic -c grep.extendedRegexp=true' interpreted as BRE
ok 29 - error, PCRE v2 only: LC_ALL='C' git grep -f f -F 'y<NUL>[f]' a
ok 102 - grep in working tree with '-c grep.extendedRegexp=false -c grep.patternType=extended' interpreted as ERE
ok 27 - difftool --no-gui trumps config guiDefault
ok 30 - error, PCRE v2 only: LC_ALL='C' git grep -f f -F 'y<NUL>[f]' a
ok 31 # skip error, PCRE v2 only: LC_ALL='' git grep -f f -F 'y<NUL>[f]' a (missing GETTEXT_LOCALE of LIBPCRE2,GETTEXT_LOCALE)
ok 103 - grep in working tree with '-c grep.extendedRegexp=true -c grep.patternType=basic' interpreted as BRE
ok 104 - grep in working tree with '-c grep.extendedRegexp=true -c grep.extendedRegexp=false' interpreted as BRE
ok 105 - grep in working tree with '-c grep.extendedRegexp=true -c grep.patternType=basic -c grep.extendedRegexp=false' interpreted as BRE
ok 32 - error, PCRE v2 only: LC_ALL='C' git grep -f f -F '[y]<NUL>f' a
ok 106 - grep in working tree with '-c grep.extendedRegexp=true -c grep.patternType=extended -c grep.extendedRegexp=false' interpreted as ERE
ok 2 - run [--auto|--quiet]
ok 107 - grep in working tree with '-c grep.patternType=fixed -c grep.extendedRegexp=true -c grep.patternType=default' interpreted as ERE
ok 33 - error, PCRE v2 only: LC_ALL='C' git grep -f f -F '[y]<NUL>f' a
ok 34 # skip error, PCRE v2 only: LC_ALL='' git grep -f f -F '[y]<NUL>f' a (missing GETTEXT_LOCALE of LIBPCRE2,GETTEXT_LOCALE)
ok 108 - grep in working tree with '-c grep.extendedRegexp=false -c grep.patternType=default -c grep.extendedRegexp=true' interpreted as ERE
ok 109 - grep in working tree with '-c grep.extendedRegexp=false -c grep.extendedRegexp=true -c grep.patternType=default' interpreted as ERE
ok 35 - error, PCRE v2 only: LC_ALL='C' git grep -f f -Fi 'Y<NUL>[F]' a
ok 110 - grep in working tree with '-c grep.patternType=default -c grep.extendedRegexp=true -c grep.patternType=basic' interpreted as BRE
ok 58 - git_test_func: replace directory with submodule
ok 36 - error, PCRE v2 only: LC_ALL='C' git grep -f f -Fi 'Y<NUL>[F]' a
ok 3 - maintenance.auto config option
ok 111 - grep in working tree with '-c grep.patternType=extended -c grep.patternType=default' interpreted as BRE
ok 37 # skip error, PCRE v2 only: LC_ALL='' git grep -f f -Fi 'Y<NUL>[F]' a (missing GETTEXT_LOCALE of LIBPCRE2,GETTEXT_LOCALE)
ok 26 - --filter works with --max-pack-size
ok 112 - grep in working tree with '-c grep.patternType=extended -c grep.patternType=default -c grep.patternType=fixed' interpreted as FIX
ok 28 - difftool --gui last setting wins
ok 38 - error, PCRE v2 only: LC_ALL='C' git grep -f f -Fi '[Y]<NUL>F' a
ok 113 - grep --count in working tree
ok 4 - maintenance.autoDetach=true config option
ok 3 - grep searches unmerged file despite not matching sparsity patterns
ok 27 - setup for --write-midx tests
ok 114 - grep --count -h in working tree
ok 39 - error, PCRE v2 only: LC_ALL='C' git grep -f f -Fi '[Y]<NUL>F' a
ok 40 # skip error, PCRE v2 only: LC_ALL='' git grep -f f -Fi '[Y]<NUL>F' a (missing GETTEXT_LOCALE of LIBPCRE2,GETTEXT_LOCALE)
ok 4 - grep --cached searches entries with the SKIP_WORKTREE bit
ok 115 - grep in working tree searches past invalid lines on UTF-8 locale
ok 116 - clone --recurse-submodules with a pathspec works
ok 116 - grep in working tree should quote unusual pathnames
ok 5 - maintenance.autoDetach=false config option
ok 41 - error, PCRE v2 only: LC_ALL='C' git grep -f f -F 'æ<NUL>[ð]' a
ok 5 - grep --recurse-submodules honors sparse checkout in submodule
ok 117 - grep in working tree in subdir should quote unusual relative pathnames
ok 28 - --write-midx unchanged
ok 42 - error, PCRE v2 only: LC_ALL='C' git grep -f f -F 'æ<NUL>[ð]' a
ok 6 - grep --recurse-submodules --cached searches entries with the SKIP_WORKTREE bit
ok 43 # skip error, PCRE v2 only: LC_ALL='' git grep -f f -F 'æ<NUL>[ð]' a (missing GETTEXT_LOCALE of LIBPCRE2,GETTEXT_LOCALE)
ok 118 - grep -z in working tree with unusual pathnames
ok 6 - gc.autoDetach=true config option
ok 29 - difftool --gui works without configured diff.guitool
ok 44 - error, PCRE v2 only: LC_ALL='C' git grep -f f -F '[æ]<NUL>ð' a
ok 119 - grep -z in working tree in subdir with unusual relative pathnames
ok 7 - working tree grep does not search the index with CE_VALID and SKIP_WORKTREE
ok 120 # skip grep exactly one char in single-char multibyte file (missing MB_REGEX)
ok 121 # skip grep two chars in single-char multibyte file (missing MB_REGEX)
ok 17 - grep history with moved submoules
ok 54 - "status" after symlink replacement should be clean with UC=false
ok 122 - grep -l -C
ok 7 - gc.autoDetach=false config option
ok 45 - error, PCRE v2 only: LC_ALL='C' git grep -f f -F '[æ]<NUL>ð' a
ok 46 # skip error, PCRE v2 only: LC_ALL='' git grep -f f -F '[æ]<NUL>ð' a (missing GETTEXT_LOCALE of LIBPCRE2,GETTEXT_LOCALE)
ok 29 - --write-midx with a new pack
ok 8 - grep --cached searches index entries with both CE_VALID and SKIP_WORKTREE
# passed all 8 test(s)
1..8
ok 123 - grep -c -C
ok 47 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i '[æ]<NUL>ð' a
*** t8001-annotate.sh ***
ok 124 - grep -L -C
ok 30 - --write-midx with -b
ok 4 - gui mergetool without merge.guitool set falls back to merge.tool
ok 8 - maintenance.autoDetach overrides gc.autoDetach
ok 125 - grep --files-without-match --quiet
ok 48 - LC_ALL='C' git grep -P -f f -i '[æ]<NUL>ð' a
ok 126 - grep --max-count 0 (must exit with non-zero)
ok 49 # skip LC_ALL='' git grep -P -f f -i '[æ]<NUL>ð' a (missing GETTEXT_LOCALE of LIBPCRE2,GETTEXT_LOCALE)
ok 30 - GIT_DIFF_TOOL variable
ok 55 - setup worktree for non-symlink test
ok 127 - grep --max-count 3
ok 9 - register uses XDG_CONFIG_HOME config if it exists
ok 50 - error, PCRE v2 only: LC_ALL='C' git grep -f f -Fi 'Æ<NUL>[Ð]' a
ok 128 - grep --max-count -1 (no limit)
ok 10 - register does not need XDG_CONFIG_HOME config to exist
ok 129 - grep --max-count 1 --context 2
ok 51 - error, PCRE v2 only: LC_ALL='C' git grep -f f -Fi 'Æ<NUL>[Ð]' a
ok 11 - unregister uses XDG_CONFIG_HOME config if it exists
ok 52 # skip error, PCRE v2 only: LC_ALL='' git grep -f f -Fi 'Æ<NUL>[Ð]' a (missing GETTEXT_LOCALE of LIBPCRE2,GETTEXT_LOCALE)
ok 130 - grep --max-count 1 --show-function
ok 31 - --write-midx with -d
ok 12 - unregister does not need XDG_CONFIG_HOME config to exist
ok 131 - grep --max-count 2 --show-function
ok 53 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i 'Æ<NUL>[Ð]' a
ok 59 - git_test_func: removed submodule leaves submodule directory and its contents in place
ok 132 - grep --max-count 1 --count
ok 54 - LC_ALL='C' git grep -P -f f -i 'Æ<NUL>[Ð]' a
ok 133 - grep --max-count 1 (multiple files)
ok 13 - maintenance.<task>.enabled
ok 55 # skip LC_ALL='' git grep -P -f f -i 'Æ<NUL>[Ð]' a (missing GETTEXT_LOCALE of LIBPCRE2,GETTEXT_LOCALE)
ok 134 - grep --max-count 1 --context 1 (multiple files)
ok 56 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i '[Æ]<NUL>Ð' a
ok 1 - setup A lines
ok 135 - grep -e A --and -e B
ok 2 - blame 1 author
ok 117 - clone with multiple --recurse-submodules options
ok 136 - grep ( -e A --or -e B ) --and -e B
ok 57 - LC_ALL='C' git grep -P -f f -i '[Æ]<NUL>Ð' a
ok 31 - GIT_DIFF_TOOL overrides
ok 58 # skip LC_ALL='' git grep -P -f f -i '[Æ]<NUL>Ð' a (missing GETTEXT_LOCALE of LIBPCRE2,GETTEXT_LOCALE)
ok 3 - blame working copy
ok 137 - grep -e A --and --not -e B
ok 4 - blame with --contents
ok 18 - grep using relative path
ok 59 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i '[Æ]<NUL>ð' a
ok 138 - grep should ignore GREP_OPTIONS
ok 139 - grep -f, non-existent file
ok 60 - LC_ALL='C' git grep -P -f f -i '[Æ]<NUL>ð' a
ok 5 - blame with --contents in a bare repo
ok 61 # skip LC_ALL='' git grep -P -f f -i '[Æ]<NUL>ð' a (missing GETTEXT_LOCALE of LIBPCRE2,GETTEXT_LOCALE)
ok 140 - grep -f, one pattern
ok 6 - blame with --contents changed
ok 62 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i 'Æ<NUL>Ð' a
ok 141 - grep -f, multiple patterns
ok 32 - cleans up MIDX when appropriate
ok 142 - grep, multiple patterns
ok 63 - LC_ALL='C' git grep -P -f f -i 'Æ<NUL>Ð' a
ok 32 - GIT_DIFFTOOL_NO_PROMPT variable
ok 64 # skip LC_ALL='' git grep -P -f f -i 'Æ<NUL>Ð' a (missing GETTEXT_LOCALE of LIBPCRE2,GETTEXT_LOCALE)
ok 7 - blame in a bare repo without starting commit
ok 143 - grep -f, ignore empty lines
ok 65 - error, PCRE v2 only: LC_ALL='C' git grep -f f  'y<NUL>[f]' a
ok 144 - grep -f, ignore empty lines, read patterns from stdin
ok 8 - blame by tag objects
ok 66 - error, PCRE v2 only: LC_ALL='C' git grep -f f  'y<NUL>[f]' a
ok 67 # skip LC_ALL='' git grep -P -f f  'y<NUL>[f]' a (missing GETTEXT_LOCALE of LIBPCRE2,GETTEXT_LOCALE)
ok 9 - setup B lines
ok 145 - grep -f, use cwd relative file
ok 14 - run --task=<task>
ok 10 - blame 2 authors
ok 68 - error, PCRE v2 only: LC_ALL='C' git grep -f f  '[y]<NUL>f' a
ok 15 - core.commitGraph=false prevents write process
ok 146 - grep -q, silently report matches
ok 11 - blame with --contents and revision
ok 69 - error, PCRE v2 only: LC_ALL='C' git grep -f f  '[y]<NUL>f' a
ok 147 - grep -C1 hunk mark between files
ok 70 # skip LC_ALL='' git grep -P -f f  '[y]<NUL>f' a (missing GETTEXT_LOCALE of LIBPCRE2,GETTEXT_LOCALE)
ok 12 - setup B1 lines (branch1)
ok 33 - GIT_DIFFTOOL_PROMPT variable
ok 71 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i 'Y<NUL>[F]' a
ok 13 - blame 2 authors + 1 branch1 author
ok 72 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i 'Y<NUL>[F]' a
ok 9 - --max-cruft-size with pruning
ok 73 # skip LC_ALL='' git grep -P -f f -i 'Y<NUL>[F]' a (missing GETTEXT_LOCALE of LIBPCRE2,GETTEXT_LOCALE)
ok 14 - setup B2 lines (branch2)
ok 15 - blame 2 authors + 1 branch2 author
ok 60 - git_test_func: removed submodule leaves submodule containing a .git directory alone
ok 74 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i '[Y]<NUL>f' a
ok 148 - log grep setup
ok 75 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i '[Y]<NUL>f' a
ok 149 - log grep (1)
ok 16 - merge branch1 & branch2
ok 76 # skip LC_ALL='' git grep -P -f f -i '[Y]<NUL>f' a (missing GETTEXT_LOCALE of LIBPCRE2,GETTEXT_LOCALE)
ok 16 - commit-graph auto condition
ok 150 - log grep (2)
ok 17 - run --task=bogus
ok 17 - blame 2 authors + 2 merged-in authors
ok 34 - difftool.prompt config variable is false
ok 151 - log grep (3)
ok 18 - run --task duplicate
ok 77 - error, PCRE v2 only: LC_ALL='C' git grep -f f  'æ<NUL>[ð]' a
ok 19 - run --task=prefetch with no remotes
ok 152 - log grep (4)
ok 18 - blame --first-parent blames merge for branch1
ok 153 - log grep (5)
ok 78 - error, PCRE v2 only: LC_ALL='C' git grep -f f  'æ<NUL>[ð]' a
ok 154 - log grep (6)
ok 19 - blame ancestor
ok 79 # skip LC_ALL='' git grep -P -f f  'æ<NUL>[ð]' a (missing GETTEXT_LOCALE of LIBPCRE2,GETTEXT_LOCALE)
ok 155 - log grep (7)
ok 20 - blame great-ancestor
ok 19 - grep from a subdir
ok 156 - log grep (8)
ok 20 - --recurse-submodules and --untracked are incompatible
ok 21 - setup evil merge
ok 80 - error, PCRE v2 only: LC_ALL='C' git grep -f f  '[æ]<NUL>ð' a
ok 157 - log grep (9)
ok 158 - log grep (9)
ok 22 - blame evil merge
ok 159 - log --grep-reflog can only be used under -g
ok 21 - grep --recurse-submodules --no-index ignores --recurse-submodules
ok 81 - error, PCRE v2 only: LC_ALL='C' git grep -f f  '[æ]<NUL>ð' a
ok 160 - log with multiple --grep uses union
ok 82 # skip LC_ALL='' git grep -P -f f  '[æ]<NUL>ð' a (missing GETTEXT_LOCALE of LIBPCRE2,GETTEXT_LOCALE)
ok 161 - log --all-match with multiple --grep uses intersection
ok 162 - log with multiple --author uses union
ok 83 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i 'Æ<NUL>[Ð]' a
ok 10 - --max-cruft-size ignores non-local packs
ok 163 - log --all-match with multiple --author still uses union
ok 164 - log --grep --author uses intersection
ok 84 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i 'Æ<NUL>[Ð]' a
ok 165 - log --grep --grep --author takes union of greps and intersects with author
ok 35 - difftool merge.prompt = false
ok 85 # skip LC_ALL='' git grep -P -f f -i 'Æ<NUL>[Ð]' a (missing GETTEXT_LOCALE of LIBPCRE2,GETTEXT_LOCALE)
ok 166 - log ---all-match -grep --author --author still takes union of authors and intersects with grep
ok 167 - log --grep --author --author takes union of authors and intersects with grep
ok 33 - --write-midx with preferred bitmap tips
ok 86 - error, PCRE v2 only: LC_ALL='C' git grep -f f  'e<NUL>m.*c<NUL>' a
ok 168 - log --all-match --grep --grep --author takes intersection
ok 169 - log --author does not search in timestamp
ok 87 - error, PCRE v2 only: LC_ALL='C' git grep -f f  'e<NUL>m.*c<NUL>' a
ok 170 - log --committer does not search in timestamp
ok 88 # skip LC_ALL='' git grep -P -f f  'e<NUL>m.*c<NUL>' a (missing GETTEXT_LOCALE of LIBPCRE2,GETTEXT_LOCALE)
ok 89 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i 'E<NUL>M.*c<NUL>' a
ok 171 - grep with CE_VALID file
ok 22 - grep --recurse-submodules should pass the pattern type along
ok 90 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i 'E<NUL>M.*c<NUL>' a
ok 172 - grep -p with userdiff
ok 91 # skip LC_ALL='' git grep -P -f f -i 'E<NUL>M.*c<NUL>' a (missing GETTEXT_LOCALE of LIBPCRE2,GETTEXT_LOCALE)
ok 36 - difftool.prompt can overridden with -y
ok 23 - grep --recurse-submodules with submodules without .gitmodules in the working tree
ok 173 - grep -p
ok 92 - error, PCRE v2 only: LC_ALL='C' git grep -f f  'e<NUL>m[*]c' a
ok 174 - grep -p -B5
ok 11 - reachable packs are preferred over cruft ones
ok 61 - git_test_func: replace submodule with a directory must fail
ok 93 - error, PCRE v2 only: LC_ALL='C' git grep -f f  'e<NUL>m[*]c' a
ok 175 - grep -W
# passed all 11 test(s)
1..11
ok 94 # skip LC_ALL='' git grep -P -f f  'e<NUL>m[*]c' a (missing GETTEXT_LOCALE of LIBPCRE2,GETTEXT_LOCALE)
ok 176 - grep -W shows no trailing empty lines
ok 95 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i 'E<NUL>M[*]C' a
ok 177 - grep -W with userdiff
ok 178 -  includes preceding comment
ok 179 -  includes function line
ok 96 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i 'E<NUL>M[*]C' a
ok 180 -  includes matching line
ok 181 -  includes last line of the function
ok 97 # skip LC_ALL='' git grep -P -f f -i 'E<NUL>M[*]C' a (missing GETTEXT_LOCALE of LIBPCRE2,GETTEXT_LOCALE)
*** t8002-blame.sh ***
ok 37 - difftool.prompt can overridden with --prompt
ok 34 - --write-midx -b packs non-kept objects
ok 98 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i 'NOMATCH<NUL>ð' a
ok 182 - grep --threads=0 & -c grep.threads=0
ok 99 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i 'NOMATCH<NUL>ð' a
ok 183 - grep --threads=1 & -c grep.threads=1
ok 100 # skip LC_ALL='' git grep -P -f f -i 'NOMATCH<NUL>ð' a (missing GETTEXT_LOCALE of LIBPCRE2,GETTEXT_LOCALE)
ok 184 - grep --threads=2 & -c grep.threads=2
ok 101 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i '[Æ]<NUL>NOMATCH' a
ok 185 - grep --threads=3 & -c grep.threads=3
ok 102 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i '[Æ]<NUL>NOMATCH' a
ok 103 # skip LC_ALL='' git grep -P -f f -i '[Æ]<NUL>NOMATCH' a (missing GETTEXT_LOCALE of LIBPCRE2,GETTEXT_LOCALE)
ok 24 - grep --recurse-submodules without --cached considers worktree modifications
ok 20 - prefetch multiple remotes
ok 186 - grep --threads=4 & -c grep.threads=4
ok 104 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i '[æ]<NUL>NOMATCH' a
ok 187 - grep --threads=5 & -c grep.threads=5
ok 105 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i '[æ]<NUL>NOMATCH' a
ok 35 - --write-midx removes stale pack-based bitmaps
ok 106 # skip LC_ALL='' git grep -P -f f -i '[æ]<NUL>NOMATCH' a (missing GETTEXT_LOCALE of LIBPCRE2,GETTEXT_LOCALE)
ok 188 - grep --threads=6 & -c grep.threads=6
ok 107 - error, PCRE v2 only: LC_ALL='C' git grep -f f -F 'y<NUL>[f]' a
ok 118 - clone and subsequent updates correctly auto-initialize submodules
ok 189 - grep --threads=7 & -c grep.threads=7
ok 38 - difftool last flag wins
ok 108 - error, PCRE v2 only: LC_ALL='C' git grep -f f -F 'y<NUL>[f]' a
ok 109 # skip error, PCRE v2 only: LC_ALL='' git grep -f f -F 'y<NUL>[f]' a (missing GETTEXT_LOCALE of LIBPCRE2,GETTEXT_LOCALE)
ok 1 - setup A lines
ok 190 - grep --threads=8 & -c grep.threads=8
ok 2 - blame 1 author
ok 110 - error, PCRE v2 only: LC_ALL='C' git grep -f f -Fi 'Y<NUL>[F]' a
ok 21 - loose-objects task
ok 191 - grep --threads=9 & -c grep.threads=9
ok 3 - blame working copy
ok 111 - error, PCRE v2 only: LC_ALL='C' git grep -f f -Fi 'Y<NUL>[F]' a
ok 112 # skip error, PCRE v2 only: LC_ALL='' git grep -f f -Fi 'Y<NUL>[F]' a (missing GETTEXT_LOCALE of LIBPCRE2,GETTEXT_LOCALE)
ok 4 - blame with --contents
ok 192 - grep --threads=10 & -c grep.threads=10
ok 193 # skip grep --threads=N or pack.threads=N warns when no pthreads (missing !PTHREADS of !PTHREADS,!FAIL_PREREQS)
ok 113 - error, PCRE v2 only: LC_ALL='C' git grep -f f  'y<NUL>NOMATCH' a
ok 194 - grep from a subdirectory to search wider area (1)
ok 36 - --write-midx with --pack-kept-objects
ok 5 - blame with --contents in a bare repo
ok 62 - git_test_func: replace submodule containing a .git directory with a directory must fail
ok 195 - grep from a subdirectory to search wider area (2)
ok 114 - error, PCRE v2 only: LC_ALL='C' git grep -f f  'y<NUL>NOMATCH' a
ok 115 # skip LC_ALL='' git grep -P -f f  'y<NUL>NOMATCH' a (missing GETTEXT_LOCALE of LIBPCRE2,GETTEXT_LOCALE)
ok 6 - blame with --contents changed
ok 196 - grep -Fi
ok 25 - grep --recurse-submodules with --cached ignores worktree modifications
ok 37 # skip --quiet disables progress (missing TTY)
ok 116 - error, PCRE v2 only: LC_ALL='C' git grep -f f  '<NUL>NOMATCH' a
ok 38 - clean up .tmp-* packs on error
ok 22 - maintenance.loose-objects.auto
ok 117 - error, PCRE v2 only: LC_ALL='C' git grep -f f  '<NUL>NOMATCH' a
ok 7 - blame in a bare repo without starting commit
ok 118 # skip LC_ALL='' git grep -P -f f  '<NUL>NOMATCH' a (missing GETTEXT_LOCALE of LIBPCRE2,GETTEXT_LOCALE)
ok 39 - repack -ad cleans up old .tmp-* packs
ok 119 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i 'Y<NUL>NOMATCH' a
ok 197 - outside of git repository
ok 8 - blame by tag objects
ok 40 - --name-hash-version option passes through to pack-objects
ok 120 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i 'Y<NUL>NOMATCH' a
ok 9 - setup B lines
ok 121 # skip LC_ALL='' git grep -P -f f -i 'Y<NUL>NOMATCH' a (missing GETTEXT_LOCALE of LIBPCRE2,GETTEXT_LOCALE)
ok 10 - blame 2 authors
ok 41 - setup for update-server-info
ok 122 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i '<NUL>NOMATCH' a
ok 11 - blame with --contents and revision
ok 42 - updates server info by default
ok 123 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i '<NUL>NOMATCH' a
ok 43 - -n skips updating server info
ok 124 # skip LC_ALL='' git grep -P -f f -i '<NUL>NOMATCH' a (missing GETTEXT_LOCALE of LIBPCRE2,GETTEXT_LOCALE)
ok 198 - outside of git repository with fallbackToNoIndex
ok 44 - repack.updateServerInfo=true updates server info
ok 12 - setup B1 lines (branch1)
ok 125 - error, PCRE v2 only: LC_ALL='C' git grep -f f -F 'æ<NUL>[ð]' a
ok 13 - blame 2 authors + 1 branch1 author
ok 45 - repack.updateServerInfo=false skips updating server info
ok 52 # skip message shows committer when it is automatic (missing AUTOIDENT)
ok 199 - no repository with path outside $cwd
ok 46 - -n overrides repack.updateServerInfo=true
ok 126 - error, PCRE v2 only: LC_ALL='C' git grep -f f -F 'æ<NUL>[ð]' a
# passed all 46 test(s)
1..46
ok 127 # skip error, PCRE v2 only: LC_ALL='' git grep -f f -F 'æ<NUL>[ð]' a (missing GETTEXT_LOCALE of LIBPCRE2,GETTEXT_LOCALE)
ok 14 - setup B2 lines (branch2)
not ok 26 - grep --textconv: superproject .gitattributes does not affect submodules # TODO known breakage
ok 128 - error, PCRE v2 only: LC_ALL='C' git grep -f f -Fi 'Æ<NUL>[Ð]' a
ok 15 - blame 2 authors + 1 branch2 author
*** t8003-blame-corner-cases.sh ***
ok 129 - error, PCRE v2 only: LC_ALL='C' git grep -f f -Fi 'Æ<NUL>[Ð]' a
not ok 63 - git_test_func: replace submodule with a file must fail # TODO known breakage
ok 130 # skip error, PCRE v2 only: LC_ALL='' git grep -f f -Fi 'Æ<NUL>[Ð]' a (missing GETTEXT_LOCALE of LIBPCRE2,GETTEXT_LOCALE)
ok 16 - merge branch1 & branch2
ok 17 - blame 2 authors + 2 merged-in authors
ok 131 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i 'Æ<NUL>[Ð]' a
ok 200 - inside git repository but with --no-index
ok 18 - blame --first-parent blames merge for branch1
ok 23 - incremental-repack task
ok 132 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i 'Æ<NUL>[Ð]' a
ok 24 # skip incremental-repack 2g limit (missing EXPENSIVE)
ok 133 # skip LC_ALL='' git grep -P -f f -i 'Æ<NUL>[Ð]' a (missing GETTEXT_LOCALE of LIBPCRE2,GETTEXT_LOCALE)
ok 19 - blame ancestor
ok 5 - mergetool crlf
ok 23 - blame huge graft
ok 20 - blame great-ancestor
ok 134 - error, PCRE v2 only: LC_ALL='C' git grep -f f  'y<NUL>NÓMATCH' a
ok 24 - setup incomplete line
ok 201 - grep --no-index descends into repos, but not .git
ok 21 - setup evil merge
ok 135 - error, PCRE v2 only: LC_ALL='C' git grep -f f  'y<NUL>NÓMATCH' a
ok 202 - setup double-dash tests
ok 136 # skip LC_ALL='' git grep -P -f f  'y<NUL>NÓMATCH' a (missing GETTEXT_LOCALE of LIBPCRE2,GETTEXT_LOCALE)
ok 25 - blame incomplete line
ok 119 - init properly sets the config
ok 22 - blame evil merge
ok 203 - grep -- pattern
ok 137 - error, PCRE v2 only: LC_ALL='C' git grep -f f  '<NUL>NÓMATCH' a
ok 26 - setup edits
ok 204 - grep -- pattern -- pathspec
ok 138 - error, PCRE v2 only: LC_ALL='C' git grep -f f  '<NUL>NÓMATCH' a
ok 27 - blame edits
ok 205 - grep -e pattern -- path
ok 139 # skip LC_ALL='' git grep -P -f f  '<NUL>NÓMATCH' a (missing GETTEXT_LOCALE of LIBPCRE2,GETTEXT_LOCALE)
ok 28 - setup obfuscated email
ok 206 - grep -e -- -- path
ok 140 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i 'Y<NUL>NÓMATCH' a
ok 29 - blame obfuscated email
ok 207 - dashdash disambiguates rev as rev
ok 141 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i 'Y<NUL>NÓMATCH' a
not ok 27 - grep --textconv: superproject .gitattributes (from index) does not affect submodules # TODO known breakage
ok 142 # skip LC_ALL='' git grep -P -f f -i 'Y<NUL>NÓMATCH' a (missing GETTEXT_LOCALE of LIBPCRE2,GETTEXT_LOCALE)
ok 208 - dashdash disambiguates pathspec as pathspec
ok 30 - blame -L 1 (all)
ok 209 - report bogus arg without dashdash
ok 210 - report bogus rev with dashdash
ok 39 - difftool + mergetool config variables
ok 143 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i '<NUL>NÓMATCH' a
ok 31 - blame -L , (all)
ok 211 - allow non-existent path with dashdash
ok 144 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i '<NUL>NÓMATCH' a
ok 32 - blame -L X (X to end)
ok 145 # skip LC_ALL='' git grep -P -f f -i '<NUL>NÓMATCH' a (missing GETTEXT_LOCALE of LIBPCRE2,GETTEXT_LOCALE)
# passed all 145 test(s)
1..145
*** t8004-blame-with-conflicts.sh ***
ok 33 - blame -L X, (X to end)
ok 212 - grep --no-index pattern -- path
not ok 64 - git_test_func: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 213 - grep --no-index complains of revs
ok 25 - maintenance.incremental-repack.auto
ok 1 - setup
ok 34 - blame -L ,Y (up to Y)
ok 2 - straight copy without -C
ok 214 - grep --no-index prefers paths to revs
ok 40 - difftool.<tool>.path
ok 3 - straight move without -C
ok 215 - grep --no-index does not "diagnose" revs
ok 4 - straight copy with -C
ok 35 - blame -L X,X
ok 5 - straight move with -C
ok 41 - difftool --extcmd=cat
ok 216 - grep --perl-regexp pattern
ok 6 - straight copy with -C -C
ok 217 # skip grep --perl-regexp pattern errors without PCRE (missing !PCRE of !FAIL_PREREQS,!PCRE)
ok 36 - blame -L X,Y
ok 7 - straight move with -C -C
ok 8 - append without -C
ok 218 - grep -P pattern
ok 42 - difftool --extcmd cat
ok 9 - append with -C
ok 37 - blame -L Y,X (undocumented)
ok 6 - mergetool in subdir
ok 38 - blame -L -X
ok 10 - append with -C -C
ok 39 - blame -L 0
ok 219 - grep -P with (*NO_JIT) doesn't error out
ok 220 # skip grep -P pattern errors without PCRE (missing !PCRE of !FAIL_PREREQS,!PCRE)
ok 40 - blame -L ,0
ok 221 - grep pattern with grep.extendedRegexp=true
ok 11 - append with -C -C -C
ok 43 - difftool -x cat
ok 41 - blame -L ,+0
ok 42 - blame -L X,+0
ok 12 - blame wholesale copy
ok 222 - grep -P pattern with grep.extendedRegexp=true
ok 13 - blame wholesale copy and more
ok 223 - grep -P -v pattern
ok 44 - difftool --extcmd echo arg1
ok 43 - blame -L X,+1
ok 224 - grep -P -i pattern
not ok 28 - grep --textconv: superproject .git/info/attributes does not affect submodules # TODO known breakage
ok 44 - blame -L X,+N
ok 14 - blame wholesale copy and more in the index
ok 45 - blame -L ,-0
ok 45 - difftool --extcmd cat arg1
ok 46 - blame -L X,-0
ok 225 - grep -P -w pattern
ok 47 - blame -L X,-1
ok 46 - difftool --extcmd cat arg2
ok 226 - grep -P backreferences work (the PCRE NO_AUTO_CAPTURE flag is not set)
ok 227 - grep -G invalidpattern properly dies 
ok 228 - grep invalidpattern properly dies with grep.patternType=basic
ok 48 - blame -L X,-N
ok 229 - grep -E invalidpattern properly dies 
ok 230 - grep invalidpattern properly dies with grep.patternType=extended
ok 49 - blame -L /RE/ (RE to end)
ok 231 - grep -P invalidpattern properly dies 
ok 26 - maintenance.incremental-repack.auto (when config is unset)
ok 232 - grep invalidpattern properly dies with grep.patternType=perl
ok 50 - blame -L /RE/,/RE2/
ok 51 - blame -L X,/RE/
ok 233 - grep -G -E -F pattern
ok 47 - setup with 2 files different
ok 15 - blame during cherry-pick with file rename conflict
ok 234 - grep pattern with grep.patternType=basic, =extended, =fixed
ok 52 - blame -L /RE/,Y
ok 235 - grep -E -F -G pattern
ok 27 - pack-refs task
ok 53 - blame -L /RE/,+N
ok 236 - grep pattern with grep.patternType=extended, =fixed, =basic
ok 28 - --auto and --schedule incompatible
ok 29 - invalid --schedule value
ok 54 - blame -L /RE/,-N
ok 48 - say no to the first file
ok 237 - grep -F -G -E pattern
ok 120 - recursive clone respects -q
ok 16 - blame path that used to be a directory
ok 238 - grep pattern with grep.patternType=fixed, =basic, =extended
ok 55 - blame -L X (X == nlines)
ok 1 - setup first case
ok 239 - grep -G -F -P -E pattern
ok 56 - blame -L X (X == nlines + 1)
ok 17 - blame to a commit with no author name
ok 57 - blame -L X (X > nlines)
ok 240 - grep pattern with grep.patternType=fixed, =basic, =perl, =extended
ok 2 - blame runs on unconflicted file while other file has conflicts
ok 18 - blame -L with invalid start
ok 49 - say no to the second file
ok 3 - blame does not crash with conflicted file in stages 1,3
# passed all 3 test(s)
ok 241 - grep -G -F -E -P pattern
1..3
ok 19 - blame -L with invalid end
not ok 29 - grep --textconv correctly reads submodule .gitattributes # TODO known breakage
*** t8005-blame-i18n.sh ***
ok 58 - blame -L ,Y (Y == nlines)
ok 242 - grep pattern with grep.patternType=fixed, =basic, =extended, =perl
ok 20 - blame parses <end> part of -L
ok 21 - blame -Ln,-(n+1)
ok 243 - grep -P pattern with grep.patternType=fixed
ok 50 - ending prompt input with EOF
ok 59 - blame -L ,Y (Y == nlines + 1)
ok 65 - git_test_func: modified submodule does not update submodule work tree
ok 22 - indent of line numbers, nine lines
ok 244 - grep -F pattern with grep.patternType=basic
ok 60 - blame -L ,Y (Y > nlines)
ok 245 - grep -G pattern with grep.patternType=fixed
ok 23 - indent of line numbers, ten lines
ok 61 - blame -L multiple (disjoint)
ok 246 - grep -E pattern with grep.patternType=fixed
ok 24 - setup file with CRLF newlines
ok 25 - blame file with CRLF core.autocrlf true
ok 62 - blame -L multiple (disjoint: unordered)
ok 26 - blame file with CRLF attributes text
ok 63 - blame -L multiple (adjacent)
ok 64 - blame -L multiple (adjacent: unordered)
ok 65 - blame -L multiple (overlapping)
ok 27 - blame file with CRLF core.autocrlf=true
ok 247 - grep --color, separator
ok 66 - blame -L multiple (overlapping: unordered)
ok 248 - grep --break
ok 67 - blame -L multiple (superset/subset)
ok 249 - grep --break with context
not ok 30 - grep --textconv correctly reads submodule .gitattributes (from index) # TODO known breakage
ok 68 - blame -L multiple (superset/subset: unordered)
ok 250 - grep --heading
ok 121 - `submodule init` and `init.templateDir`
# passed all 121 test(s)
1..121
ok 69 - blame -L /RE/ (relative)
ok 1 - setup the repository
ok 28 - setup coalesce tests
ok 70 - blame -L /RE/ (relative: no preceding range)
ok 2 - blame respects i18n.commitencoding
ok 29 - blame coalesce
ok 71 - blame -L /RE/ (relative: adjacent)
ok 30 - blame does not coalesce non-adjacent result lines
# passed all 30 test(s)
1..30
ok 72 - blame -L /RE/ (relative: not found)
ok 3 - blame respects i18n.logoutputencoding
ok 73 - blame -L /RE/ (relative: end-of-file)
*** t8006-blame-textconv.sh ***
ok 4 - blame respects --encoding=UTF-8
ok 74 - blame -L ^/RE/ (absolute)
ok 251 - mimic ack-grep --group
ok 75 - blame -L ^/RE/ (absolute: no preceding range)
ok 5 - blame respects --encoding=none
ok 30 - --schedule inheritance weekly -> daily -> hourly
ok 252 - grep -E "^ "
# passed all 5 test(s)
1..5
ok 76 - blame -L ^/RE/ (absolute: not found)
*** t8007-cat-file-textconv.sh ***
ok 23 - blame huge graft
ok 253 - grep -P "^ "
ok 77 - blame -L ^/RE/ (absolute: end-of-file)
ok 24 - setup incomplete line
ok 25 - blame incomplete line
ok 26 - setup edits
ok 27 - blame edits
not ok 31 - grep --textconv correctly reads submodule .git/info/attributes # TODO known breakage
ok 28 - setup obfuscated email
*** t8008-blame-formats.sh ***
ok 78 - setup -L :regex
ok 66 - git_test_func: modified submodule does not update submodule work tree to invalid commit
ok 29 - blame obfuscated email
ok 79 - blame -L :literal
ok 254 - grep --color -e A -e B with context
ok 80 - blame -L :regex
ok 30 - blame -L 1 (all)
ok 81 - blame -L :nomatch
ok 31 - blame -L , (all)
ok 82 - blame -L :RE (relative)
ok 83 - blame -L :RE (relative: no preceding range)
ok 32 - blame -L X (X to end)
ok 84 - blame -L :RE (relative: not found)
ok 85 - blame -L :RE (relative: end-of-file)
ok 33 - blame -L X, (X to end)
ok 1 - setup 
ok 86 - blame -L ^:RE (absolute)
ok 34 - blame -L ,Y (up to Y)
ok 2 - no filter specified
ok 87 - blame -L ^:RE (absolute: no preceding range)
ok 3 - setup textconv filters
ok 35 - blame -L X,X
ok 88 - blame -L ^:RE (absolute: not found)
ok 4 - blame with --no-textconv
ok 255 - grep --color -e A --and -e B with context
ok 36 - blame -L X,Y
ok 1 - setup 
ok 89 - blame -L ^:RE (absolute: end-of-file)
ok 2 - usage: <bad rev>
ok 37 - blame -L Y,X (undocumented)
ok 38 - blame -L -X
ok 3 - usage: <bad rev>:<bad path>
ok 5 - basic blame on last commit
ok 39 - blame -L 0
ok 4 - usage: <rev>:<bad path>
ok 40 - blame -L ,0
ok 41 - blame -L ,+0
ok 5 - usage: <rev> with no <path>
ok 42 - blame -L X,+0
ok 6 - usage: <bad rev>:<good (in HEAD) path>
not ok 32 - grep saves textconv cache in the appropriate repository # TODO known breakage
ok 43 - blame -L X,+1
ok 1 - setup
ok 7 - no filter specified
ok 6 - blame --textconv going through revisions
ok 8 - setup textconv filters
ok 44 - blame -L X,+N
ok 2 - normal blame output
ok 9 - cat-file without --textconv
ok 45 - blame -L ,-0
ok 46 - blame -L X,-0
ok 3 - blame --porcelain output
ok 10 - cat-file without --textconv on previous commit
ok 256 - grep --color -e A --and --not -e B with context
ok 90 - blame -L :funcname with userdiff driver
ok 7 - blame --textconv with local changes
ok 4 - blame --line-porcelain output
ok 47 - blame -L X,-1
ok 11 - cat-file --textconv on last commit
ok 8 - setup +cachetextconv
ok 48 - blame -L X,-N
ok 12 - cat-file --textconv on previous commit
ok 5 - --porcelain detects first non-blank line as subject
# passed all 5 test(s)
1..5
ok 13 - cat-file without --textconv (symlink)
*** t8009-blame-vs-topicbranches.sh ***
ok 14 - cat-file --textconv on index (symlink)
ok 49 - blame -L /RE/ (RE to end)
ok 91 - setup incremental
ok 15 - cat-file --textconv on HEAD (symlink)
# passed all 15 test(s)
1..15
ok 92 - blame empty
*** t8010-cat-file-filters.sh ***
ok 50 - blame -L /RE/,/RE2/
ok 93 - blame -L 0 empty
ok 94 - blame -L 1 empty
ok 95 - blame -L 2 empty
ok 51 - blame -L X,/RE/
ok 67 - git_test_func: modified submodule does not update submodule work tree from invalid commit
ok 257 - grep --color -e A --and -e B -p with context
ok 96 - blame half
ok 97 - blame -L 0 half
ok 52 - blame -L /RE/,Y
ok 9 - blame --textconv works with textconvcache
ok 10 - setup -cachetextconv
ok 56 - "status" after file replacement should be clean with UC=true
ok 98 - blame -L 1 half
ok 53 - blame -L /RE/,+N
ok 11 - make a new commit
ok 99 - blame -L 2 half
ok 100 - blame -L 3 half
ok 54 - blame -L /RE/,-N
ok 31 - maintenance.strategy inheritance
ok 101 - blame full
ok 258 - grep can find things only in the work tree
ok 102 - blame -L 0 full
ok 55 - blame -L X (X == nlines)
ok 12 - blame from previous revision
ok 56 - blame -L X (X == nlines + 1)
ok 103 - blame -L 1 full
ok 104 - blame -L 2 full
ok 57 - blame -L X (X > nlines)
ok 13 - blame with --no-textconv (on symlink)
ok 105 - blame -L 3 full
ok 106 - blame -L
ok 107 - blame -L X,+
ok 14 - blame --textconv (on symlink)
ok 58 - blame -L ,Y (Y == nlines)
ok 108 - blame -L X,-
ok 259 - grep can find things only in the work tree (i-t-a)
ok 109 - blame -L X (non-numeric X)
ok 110 - blame -L X,Y (non-numeric Y)
ok 59 - blame -L ,Y (Y == nlines + 1)
ok 111 - blame -L X,+N (non-numeric N)
ok 15 - make another new commit
ok 68 - git_test_func: added submodule doesn't remove untracked unignored file with same name
ok 112 - blame -L X,-N (non-numeric N)
ok 113 - blame -L ,^/RE/
ok 60 - blame -L ,Y (Y > nlines)
ok 114 - blame progress on a full file
ok 1 - setup 
ok 61 - blame -L multiple (disjoint)
ok 260 - grep does not search work tree with assume unchanged
ok 2 - no filters with `git show`
ok 115 - blame progress on a single range
ok 3 - no filters with cat-file
ok 4 - cat-file --filters converts to worktree version
ok 62 - blame -L multiple (disjoint: unordered)
ok 116 - blame progress on multiple ranges
ok 5 - cat-file --filters --path=<path> works
ok 32 - register and unregister
ok 117 - annotate old revision
# passed all 117 test(s)
1..117
ok 16 - blame on last commit (-C -C, symlink)
ok 63 - blame -L multiple (adjacent)
# passed all 16 test(s)
1..16
ok 261 - grep can find things only in the index
ok 33 - register with no value for maintenance.repo
*** t8011-blame-split-file.sh ***
ok 7 - mergetool on file in parent dir
ok 6 - cat-file --textconv --path=<path> works
ok 64 - blame -L multiple (adjacent: unordered)
*** t8012-blame-colors.sh ***
ok 7 - --path=<path> complains without --textconv/--filters
ok 65 - blame -L multiple (overlapping)
ok 262 - grep does not report i-t-a with -L --cached
ok 8 - --textconv/--filters complain without path
ok 34 - unregister with no value for maintenance.repo
ok 66 - blame -L multiple (overlapping: unordered)
ok 9 - cat-file --textconv --batch works
ok 67 - blame -L multiple (superset/subset)
# passed all 9 test(s)
1..9
ok 263 - grep does not report i-t-a and assume unchanged with -L
# passed all 263 test(s)
1..263
*** t8013-blame-ignore-revs.sh ***
ok 35 - register and unregister with regex metacharacters
*** t8014-blame-ignore-fuzzy.sh ***
ok 68 - blame -L multiple (superset/subset: unordered)
ok 1 - setup
ok 69 - blame -L /RE/ (relative)
ok 36 - start without GIT_TEST_MAINT_SCHEDULER
ok 2 - blame --reverse --first-parent finds A1
# passed all 2 test(s)
1..2
ok 70 - blame -L /RE/ (relative: no preceding range)
ok 37 - start --scheduler=<scheduler>
*** t9001-send-email.sh ***
ok 71 - blame -L /RE/ (relative: adjacent)
ok 72 - blame -L /RE/ (relative: not found)
ok 73 - blame -L /RE/ (relative: end-of-file)
ok 38 - start from empty cron table
ok 33 - grep partially-cloned submodule
ok 74 - blame -L ^/RE/ (absolute)
ok 39 - stop from existing schedule
ok 1 - setup A lines
ok 75 - blame -L ^/RE/ (absolute: no preceding range)
ok 76 - blame -L ^/RE/ (absolute: not found)
ok 2 - blame 1 author
ok 40 - start preserves existing schedule
ok 41 - magic markers are correct
ok 77 - blame -L ^/RE/ (absolute: end-of-file)
ok 69 - git_test_func: added submodule creates empty directory
ok 3 - blame working copy
ok 42 - stop preserves surrounding schedule
ok 4 - blame with --contents
ok 1 - setup split file case
ok 2 - setup simulated porcelain
ok 5 - blame with --contents in a bare repo
ok 3 - generate --porcelain output
ok 6 - blame with --contents changed
ok 4 - porcelain output finds correct commits
ok 5 - porcelain output shows correct filenames
ok 78 - setup -L :regex
ok 1 - prepare reference tree
ok 79 - blame -L :literal
ok 51 - difftool --tool-help
ok 6 - porcelain output shows correct previous pointer
ok 7 - blame in a bare repo without starting commit
ok 7 - generate --line-porcelain output
ok 80 - blame -L :regex
ok 2 - Setup helper tool
ok 81 - blame -L :nomatch
ok 8 - line-porcelain output finds correct commits
ok 1 - setup
ok 2 - validate --ignore-rev
ok 3 - Extract patches
ok 9 - line-porcelain output shows correct filenames
ok 43 - start and stop macOS maintenance
ok 82 - blame -L :RE (relative)
ok 3 - validate --ignore-revs-file
ok 52 - setup change in subdirectory
ok 8 - blame by tag objects
ok 83 - blame -L :RE (relative: no preceding range)
ok 10 - line-porcelain output shows correct previous pointer
ok 84 - blame -L :RE (relative: not found)
ok 9 - setup B lines
# passed all 10 test(s)
1..10
ok 85 - blame -L :RE (relative: end-of-file)
*** t9002-column.sh ***
ok 4 - ignore_rev_changing_lines (X)
ok 10 - blame 2 authors
ok 86 - blame -L ^:RE (absolute)
ok 1 - empty name and missing email
ok 11 - blame with --contents and revision
ok 44 - use launchctl list to prevent extra work
ok 5 - ignore_rev_changing_lines (XT)
ok 2 - commit rejects all-crud name
ok 5 - succeeds cloning if global email is not set
ok 87 - blame -L ^:RE (absolute: no preceding range)
ok 88 - blame -L ^:RE (absolute: not found)
ok 12 - setup B1 lines (branch1)
ok 53 - difftool -d with growing paths
ok 3 - commit does not strip trailing dot
ok 89 - blame -L ^:RE (absolute: end-of-file)
ok 34 - check scope of core.useReplaceRefs
ok 13 - blame 2 authors + 1 branch1 author
# still have 7 known breakage(s)
# passed all remaining 27 test(s)
1..34
ok 4 - empty configured name does not auto-detect
ok 6 - ignore_rev_adding_unblamable_lines
ok 5 - empty configured name does not auto-detect for committer
# passed all 5 test(s)
1..5
ok 54 - difftool -d --no-symlinks
*** t9003-help-autocorrect.sh ***
ok 45 - start and stop Windows maintenance
ok 14 - setup B2 lines (branch2)
*** t9100-git-svn-basic.sh ***
ok 15 - blame 2 authors + 1 branch2 author
ok 6 - set up rebase scenarios
ok 7 - ignore_revs_from_files
ok 55 - difftool -d --symlinks
ok 16 - merge branch1 & branch2
ok 90 - blame -L :funcname with userdiff driver
ok 8 - ignore_revs_from_configs_and_files
ok 17 - blame 2 authors + 2 merged-in authors
ok 46 - start and stop Linux/systemd maintenance
ok 56 - difftool --dir-diff --no-symlinks
ok 70 - git_test_func: added submodule leaves existing empty directory alone
ok 1 - setup
ok 9 - override_ignore_revs_file
ok 2 - never
ok 4 - No confirm with --suppress-cc
ok 18 - blame --first-parent blames merge for branch1
ok 57 - difftool --dir-diff --symlinks
ok 3 - always
ok 19 - blame ancestor
ok 91 - setup incremental
ok 4 - --nl
ok 10 - bad_files_and_revs
ok 20 - blame great-ancestor
ok 5 - 80 columns
ok 92 - blame empty
ok 93 - blame -L 0 empty
ok 21 - setup evil merge
ok 6 - COLUMNS = 1
ok 94 - blame -L 1 empty
ok 11 - mark_unblamable_lines
ok 58 - difftool --dir-diff avoids repeated slashes in TMPDIR --no-symlinks
ok 7 - width = 1
ok 95 - blame -L 2 empty
ok 22 - blame evil merge
ok 8 - 20 columns
ok 8 - mergetool skips autoresolved
ok 96 - blame half
ok 59 - difftool --dir-diff avoids repeated slashes in TMPDIR --symlinks
ok 9 - 20 columns, nodense
ok 97 - blame -L 0 half
ok 10 - 20 columns, dense
ok 98 - blame -L 1 half
ok 11 - 20 columns, padding 2
ok 99 - blame -L 2 half
ok 100 - blame -L 3 half
ok 12 - 20 columns, indented
ok 60 - difftool --dir-diff ignores --prompt --no-symlinks
1..0 # SKIP skipping git svn tests, svn not found
ok 12 - mark_ignored_lines
ok 13 - 20 columns, row first
*** t9101-git-svn-props.sh ***
ok 101 - blame full
ok 14 - 20 columns, row first, nodense
ok 61 - difftool --dir-diff ignores --prompt --symlinks
ok 102 - blame -L 0 full
ok 13 - mark_unblamable_lines_intermediate
ok 15 - 20 columns, row first, dense
ok 1 - setup
ok 103 - blame -L 1 full
ok 16 - padding must be non-negative
# passed all 16 test(s)
1..16
ok 104 - blame -L 2 full
*** t9102-git-svn-deep-rmdir.sh ***
ok 105 - blame -L 3 full
ok 106 - blame -L
ok 2 - autocorrect showing candidates
ok 62 - difftool --dir-diff branch from subdirectory --no-symlinks
ok 107 - blame -L X,+
ok 108 - blame -L X,-
ok 109 - blame -L X (non-numeric X)
ok 110 - blame -L X,Y (non-numeric Y)
ok 111 - blame -L X,+N (non-numeric N)
ok 3 - autocorrect showing candidates
ok 112 - blame -L X,-N (non-numeric N)
ok 63 - difftool --dir-diff branch from subdirectory --symlinks
ok 113 - blame -L ,^/RE/
ok 47 - start and stop when several schedulers are available
ok 114 - blame progress on a full file
ok 5 - No confirm with --confirm=never
ok 4 - autocorrect showing candidates
ok 14 - ignored_chunk_negative_parent_size
ok 115 - blame progress on a single range
ok 64 - difftool --dir-diff v1 from subdirectory --no-symlinks
ok 5 - autocorrect showing candidates
ok 116 - blame progress on multiple ranges
ok 117 - setup
ok 118 - blame untracked file in empty repo
ok 48 - register preserves existing strategy
1..0 # SKIP skipping git svn tests, svn not found
ok 65 - difftool --dir-diff v1 from subdirectory --symlinks
*** t9103-git-svn-tracked-directory-removed.sh ***
ok 6 - autocorrect showing candidates
ok 119 - blame --show-email
ok 49 - fails when running outside of a repository
ok 66 - difftool --dir-diff branch from subdirectory w/ pathspec --no-symlinks
ok 120 - setup showEmail tests
ok 7 - autocorrect running commands
1..0 # SKIP skipping git svn tests, svn not found
ok 121 - blame with no options and no config
*** t9104-git-svn-follow-parent.sh ***
ok 67 - difftool --dir-diff branch from subdirectory w/ pathspec --symlinks
ok 71 - git_test_func: replace tracked file with submodule creates empty directory
ok 50 - register and unregister bare repo
ok 8 - autocorrect running commands
ok 122 - blame with showemail options
ok 9 - autocorrect can be declined altogether
ok 68 - difftool --dir-diff v1 from subdirectory w/ pathspec --no-symlinks
ok 15 - ignore_merge
# passed all 15 test(s)
1..15
ok 51 - failed schedule prevents config change
ok 69 - difftool --dir-diff v1 from subdirectory w/ pathspec --symlinks
*** t9105-git-svn-commit-diff.sh ***
ok 123 - blame with showEmail config false
ok 10 - autocorrect works in work tree created from bare repo
# passed all 10 test(s)
1..10
*** t9106-git-svn-commit-diff-clobber.sh ***
ok 124 - blame with showEmail config true
ok 70 - difftool --dir-diff from subdirectory with GIT_DIR set --no-symlinks
1..0 # SKIP skipping git svn tests, svn not found
*** t9107-git-svn-migrate.sh ***
ok 71 - difftool --dir-diff from subdirectory with GIT_DIR set --symlinks
ok 6 - No confirm with sendemail.confirm=never
ok 125 - set up abbrev tests
1..0 # SKIP skipping git svn tests, svn not found
*** t9108-git-svn-glob.sh ***
ok 126 - blame --abbrev=<n> works
ok 72 - difftool --dir-diff when worktree file is missing --no-symlinks
ok 52 - --no-detach causes maintenance to not run in background
ok 73 - difftool --dir-diff when worktree file is missing --symlinks
ok 127 - blame -l aligns regular and boundary commits
1..0 # SKIP skipping git svn tests, svn not found
*** t9109-git-svn-multi-glob.sh ***
ok 128 - blame --abbrev with full length behaves like -l
1..0 # SKIP skipping git svn tests, svn not found
ok 129 - --no-abbrev works like --abbrev with full length
*** t9110-git-svn-use-svm-props.sh ***
ok 130 - blame --abbrev gets truncated
1..0 # SKIP skipping git svn tests, svn not found
*** t9111-git-svn-use-svnsync-props.sh ***
ok 131 - blame --abbrev gets truncated with boundary commit
ok 53 - --detach causes maintenance to run in background
ok 132 - blame --abbrev -b truncates the blank boundary
1..0 # SKIP skipping git svn tests, svn not found
ok 133 - blame with excessive --abbrev and -b culls to hash length
*** t9112-git-svn-md5less-file.sh ***
ok 134 - --exclude-promisor-objects does not BUG-crash
ok 7 - Send patches
ok 8 - setup expect
ok 72 - git_test_func: replace directory with submodule
ok 9 - Verify commandline
ok 74 - difftool --dir-diff with unmerged files --no-symlinks
ok 54 - repacking loose objects is quiet
1..0 # SKIP skipping git svn tests, svn not found
*** t9113-git-svn-dcommit-new-file.sh ***
ok 55 - maintenance aborts with existing lock file
ok 135 - blame with uncommitted edits in partial clone does not crash
# passed all 55 test(s)
1..55
# passed all 135 test(s)
1..135
1..0 # SKIP skipping git svn tests, svn not found
*** t9114-git-svn-dcommit-merge.sh ***
*** t9115-git-svn-dcommit-funky-renames.sh ***
1..0 # SKIP skipping git svn tests, svn not found
*** t9116-git-svn-log.sh ***
*** t9117-git-svn-init-clone.sh ***
1..0 # SKIP skipping git svn tests, svn not found
*** t9118-git-svn-funky-branch-names.sh ***
ok 75 - difftool --dir-diff with unmerged files --symlinks
1..0 # SKIP skipping git svn tests, svn not found
ok 23 - blame huge graft
*** t9119-git-svn-info.sh ***
ok 76 - difftool --dir-diff --symlinks without unstaged changes
ok 24 - setup incomplete line
1..0 # SKIP skipping git svn tests, svn not found
ok 9 - mergetool merges all from subdir (rerere disabled)
*** t9120-git-svn-clone-with-percent-escapes.sh ***
1..0 # SKIP skipping git svn tests, svn not found
ok 25 - blame incomplete line
*** t9121-git-svn-fetch-renamed-dir.sh ***
ok 73 - git_test_func: removed submodule leaves submodule directory and its contents in place
1..0 # SKIP skipping git svn tests, svn not found
ok 26 - setup edits
*** t9122-git-svn-author.sh ***
1..0 # SKIP skipping git svn tests, svn not found
*** t9123-git-svn-rebuild-with-rewriteroot.sh ***
ok 77 - difftool --dir-diff syncs worktree with unstaged change --no-symlinks
ok 10 - Send patches with --envelope-sender
ok 27 - blame edits
ok 11 - setup expect
ok 12 - Verify commandline
ok 28 - setup obfuscated email
ok 78 - difftool --dir-diff syncs worktree with unstaged change --symlinks
1..0 # SKIP skipping git svn tests, svn not found
*** t9124-git-svn-dcommit-auto-props.sh ***
ok 29 - blame obfuscated email
ok 30 - blame -L 1 (all)
ok 31 - blame -L , (all)
ok 79 - difftool --dir-diff syncs worktree without unstaged change --no-symlinks
ok 32 - blame -L X (X to end)
ok 33 - blame -L X, (X to end)
1..0 # SKIP skipping git svn tests, svn not found
*** t9125-git-svn-multi-glob-branch-names.sh ***
ok 80 - difftool --dir-diff syncs worktree without unstaged change --symlinks
ok 34 - blame -L ,Y (up to Y)
ok 81 - difftool --dir-diff with no diff --no-symlinks
1..0 # SKIP skipping git svn tests, svn not found
*** t9126-git-svn-follow-deleted-readded-directory.sh ***
ok 82 - difftool --dir-diff with no diff --symlinks
1..0 # SKIP skipping git svn tests, svn not found
ok 35 - blame -L X,X
1..0 # SKIP skipping git svn tests, svn not found
*** t9127-git-svn-partial-rebuild.sh ***
1..0 # SKIP skipping git svn tests, svn not found
*** t9128-git-svn-cmd-branch.sh ***
*** t9129-git-svn-i18n-commitencoding.sh ***
ok 36 - blame -L X,Y
ok 37 - blame -L Y,X (undocumented)
ok 38 - blame -L -X
ok 83 - difftool --no-symlinks does not overwrite working tree file 
ok 39 - blame -L 0
ok 40 - blame -L ,0
1..0 # SKIP skipping git svn tests, svn not found
ok 41 - blame -L ,+0
*** t9130-git-svn-authors-file.sh ***
ok 42 - blame -L X,+0
ok 84 - difftool --no-symlinks detects conflict 
ok 43 - blame -L X,+1
ok 13 - Send patches with --envelope-sender=auto
ok 14 - setup expect
ok 44 - blame -L X,+N
ok 15 - Verify commandline
ok 16 - setup expect for cc trailer
ok 45 - blame -L ,-0
ok 46 - blame -L X,-0
1..0 # SKIP skipping git svn tests, svn not found
ok 47 - blame -L X,-1
*** t9131-git-svn-empty-symlink.sh ***
ok 74 - git_test_func: removed submodule leaves submodule containing a .git directory alone
ok 48 - blame -L X,-N
1..0 # SKIP skipping git svn tests, svn not found
1..0 # SKIP skipping git svn tests, svn not found
*** t9132-git-svn-broken-symlink.sh ***
*** t9133-git-svn-nested-git-repo.sh ***
ok 49 - blame -L /RE/ (RE to end)
1..0 # SKIP skipping git svn tests, svn not found
1..0 # SKIP skipping git svn tests, svn not found
*** t9134-git-svn-ignore-paths.sh ***
*** t9135-git-svn-moved-branch-empty-file.sh ***
ok 50 - blame -L /RE/,/RE2/
ok 51 - blame -L X,/RE/
ok 52 - blame -L /RE/,Y
1..0 # SKIP skipping git svn tests, svn not found
*** t9136-git-svn-recreated-branch-empty-file.sh ***
ok 1 - setup
ok 53 - blame -L /RE/,+N
ok 54 - blame -L /RE/,-N
ok 2 - Regression test for partially overlapping search ranges
ok 55 - blame -L X (X == nlines)
ok 3 - Combine 3 lines into 2
ok 56 - blame -L X (X == nlines + 1)
ok 85 - difftool properly honors gitlink and core.worktree
ok 57 - blame -L X (X > nlines)
1..0 # SKIP skipping git svn tests, svn not found
*** t9137-git-svn-dcommit-clobber-series.sh ***
ok 4 - Add curly brackets
1..0 # SKIP skipping git svn tests, svn not found
ok 58 - blame -L ,Y (Y == nlines)
ok 5 - Combine many lines and change case
*** t9138-git-svn-authors-prog.sh ***
1..0 # SKIP skipping git svn tests, svn not found
1..0 # SKIP skipping git svn tests, svn not found
1..0 # SKIP skipping git svn tests, svn not found
*** t9139-git-svn-non-utf8-commitencoding.sh ***
*** t9140-git-svn-reset.sh ***
*** t9141-git-svn-multiple-branches.sh ***
ok 59 - blame -L ,Y (Y == nlines + 1)
ok 6 - Rename and combine lines
ok 60 - blame -L ,Y (Y > nlines)
ok 7 - Same line twice
ok 61 - blame -L multiple (disjoint)
1..0 # SKIP skipping git svn tests, svn not found
not ok 75 - git_test_func: replace submodule with a directory must fail # TODO known breakage
*** t9142-git-svn-shallow-clone.sh ***
ok 8 - Enforce line order
ok 62 - blame -L multiple (disjoint: unordered)
ok 9 - Expand lines and rename variables
ok 86 - difftool --dir-diff symlinked directories
ok 63 - blame -L multiple (adjacent)
ok 10 - Two close matches versus one less close match
ok 64 - blame -L multiple (adjacent: unordered)
1..0 # SKIP skipping git svn tests, svn not found
ok 11 - Piggy in the middle
ok 17 - cc trailer with various syntax
*** t9143-git-svn-gc.sh ***
ok 18 - setup fake get_maintainer.pl script for cc trailer
ok 65 - blame -L multiple (overlapping)
ok 12 - No trailing newline
1..0 # SKIP skipping git svn tests, svn not found
*** t9144-git-svn-old-rev_map.sh ***
ok 13 - Reorder includes
1..0 # SKIP skipping git svn tests, svn not found
1..0 # SKIP skipping git svn tests, svn not found
1..0 # SKIP skipping git svn tests, svn not found
ok 66 - blame -L multiple (overlapping: unordered)
*** t9145-git-svn-master-branch.sh ***
*** t9146-git-svn-empty-dirs.sh ***
*** t9147-git-svn-include-paths.sh ***
ok 67 - blame -L multiple (superset/subset)
ok 68 - blame -L multiple (superset/subset: unordered)
ok 69 - blame -L /RE/ (relative)
1..0 # SKIP skipping git svn tests, svn not found
*** t9148-git-svn-propset.sh ***
ok 70 - blame -L /RE/ (relative: no preceding range)
ok 71 - blame -L /RE/ (relative: adjacent)
ok 14 - Diff chunks with no suspects
ok 72 - blame -L /RE/ (relative: not found)
ok 73 - blame -L /RE/ (relative: end-of-file)
1..0 # SKIP skipping git svn tests, svn not found
ok 74 - blame -L ^/RE/ (absolute)
*** t9150-svk-mergetickets.sh ***
ok 75 - blame -L ^/RE/ (absolute: no preceding range)
ok 76 - blame -L ^/RE/ (absolute: not found)
1..0 # SKIP skipping git svn tests, svn not found
not ok 76 - git_test_func: replace submodule containing a .git directory with a directory must fail # TODO known breakage
*** t9151-svn-mergeinfo.sh ***
1..0 # SKIP skipping git svn tests, svn not found
1..0 # SKIP skipping git svn tests, svn not found
*** t9152-svn-empty-dirs-after-gc.sh ***
ok 77 - blame -L ^/RE/ (absolute: end-of-file)
1..0 # SKIP skipping git svn tests, svn not found
*** t9153-git-svn-rewrite-uuid.sh ***
*** t9154-git-svn-fancy-glob.sh ***
ok 10 - mergetool merges all from subdir (rerere enabled)
ok 15 - position matching
ok 87 - difftool --dir-diff handles modified symlinks
ok 78 - setup -L :regex
1..0 # SKIP skipping git svn tests, svn not found
*** t9155-git-svn-fetch-deleted-tag.sh ***
ok 19 - cc trailer with get_maintainer.pl output
ok 20 - setup expect
ok 79 - blame -L :literal
ok 57 - "status" after file replacement should be clean with UC=false
ok 80 - blame -L :regex
ok 81 - blame -L :nomatch
ok 58 - empty repo (no index) and core.untrackedCache
# passed all 58 test(s)
1..58
1..0 # SKIP skipping git svn tests, svn not found
*** t9156-git-svn-fetch-deleted-tag-2.sh ***
ok 82 - blame -L :RE (relative)
*** t9157-git-svn-fetch-merge.sh ***
ok 83 - blame -L :RE (relative: no preceding range)
ok 84 - blame -L :RE (relative: not found)
1..0 # SKIP skipping git svn tests, svn not found
1..0 # SKIP skipping git svn tests, svn not found
ok 85 - blame -L :RE (relative: end-of-file)
*** t9158-git-svn-mergeinfo.sh ***
*** t9159-git-svn-no-parent-mergeinfo.sh ***
1..0 # SKIP skipping git svn tests, svn not found
1..0 # SKIP skipping git svn tests, svn not found
*** t9160-git-svn-preserve-empty-dirs.sh ***
*** t9161-git-svn-mergeinfo-push.sh ***
ok 16 - preserve order
# passed all 16 test(s)
1..16
ok 86 - blame -L ^:RE (absolute)
ok 87 - blame -L ^:RE (absolute: no preceding range)
*** t9162-git-svn-dcommit-interactive.sh ***
ok 88 - blame -L ^:RE (absolute: not found)
ok 89 - blame -L ^:RE (absolute: end-of-file)
not ok 77 - git_test_func: replace submodule with a file must fail # TODO known breakage
1..0 # SKIP skipping git svn tests, svn not found
*** t9163-git-svn-reset-clears-caches.sh ***
1..0 # SKIP skipping git svn tests, svn not found
*** t9164-git-svn-dcommit-concurrent.sh ***
1..0 # SKIP skipping git svn tests, svn not found
*** t9165-git-svn-fetch-merge-branch-of-branch.sh ***
ok 90 - blame -L :funcname with userdiff driver
1..0 # SKIP skipping git svn tests, svn not found
*** t9166-git-svn-fetch-merge-branch-of-branch2.sh ***
1..0 # SKIP skipping git svn tests, svn not found
1..0 # SKIP skipping git svn tests, svn not found
*** t9167-git-svn-cmd-branch-subproject.sh ***
*** t9168-git-svn-partially-globbed-names.sh ***
1..0 # SKIP skipping git svn tests, svn not found
*** t9169-git-svn-dcommit-crlf.sh ***
ok 91 - setup incremental
1..0 # SKIP skipping git svn tests, svn not found
*** t9200-git-cvsexportcommit.sh ***
ok 88 - difftool --dir-diff writes symlinks as raw text
ok 92 - blame empty
ok 93 - blame -L 0 empty
ok 94 - blame -L 1 empty
ok 95 - blame -L 2 empty
ok 89 - add -N and difftool -d
1..0 # SKIP skipping git svn tests, svn not found
*** t9210-scalar.sh ***
ok 96 - blame half
ok 97 - blame -L 0 half
ok 98 - blame -L 1 half
ok 99 - blame -L 2 half
ok 100 - blame -L 3 half
1..0 # SKIP skipping git svn tests, svn not found
ok 101 - blame full
1..0 # SKIP skipping git svn tests, svn not found
ok 21 - self name is suppressed
*** t9211-scalar-clone.sh ***
ok 102 - blame -L 0 full
*** t9300-fast-import.sh ***
1..0 # SKIP skipping git svn tests, svn not found
ok 103 - blame -L 1 full
*** t9301-fast-import-notes.sh ***
1..0 # SKIP skipping git svn tests, svn not found
ok 104 - blame -L 2 full
*** t9302-fast-import-unpack-limit.sh ***
1..0 # SKIP skipping git svn tests, svn not found
*** t9303-fast-import-compression.sh ***
ok 105 - blame -L 3 full
ok 106 - blame -L
not ok 78 - git_test_func: replace submodule containing a .git directory with a file must fail # TODO known breakage
1..0 # SKIP skipping git svn tests, svn not found
ok 107 - blame -L X,+
*** t9304-fast-import-marks.sh ***
ok 108 - blame -L X,-
ok 109 - blame -L X (non-numeric X)
ok 110 - blame -L X,Y (non-numeric Y)
1..0 # SKIP skipping git cvsexportcommit tests, cvs not found
*** t9350-fast-export.sh ***
ok 111 - blame -L X,+N (non-numeric N)
ok 112 - blame -L X,-N (non-numeric N)
ok 113 - blame -L ,^/RE/
ok 90 - difftool --cached with unmerged files
ok 114 - blame progress on a full file
ok 1 - scalar shows a usage
ok 115 - blame progress on a single range
ok 116 - blame progress on multiple ranges
ok 91 - outside worktree
ok 1 - empty stream succeeds
ok 117 - colored blame colors contiguous lines
ok 2 - truncated stream complains
ok 3 - A: create pack from stdin
ok 4 - A: verify pack
ok 118 - color by age consistently colors old code
ok 5 - A: verify commit
ok 92 - difftool --gui, --tool and --extcmd are mutually exclusive
ok 1 - set up main branch
ok 6 - A: verify tree
ok 1 - create loose objects on import
ok 7 - A: verify file2
ok 1 - setup dump of basic history
ok 8 - A: verify file3
ok 9 - A: verify file4
ok 119 - blame color by age: new code is different
# passed all 119 test(s)
1..119
ok 10 - A: verify tag/series-A
ok 2 - bigger packs are preserved
ok 2 - add notes with simple M command
ok 11 - A: verify tag/series-A-blob
ok 12 - A: verify tag deletion is successful
*** t9351-fast-export-anonymize.sh ***
ok 1 - fast-import (packed) with -c core.compression=0
ok 3 - add notes with simple N command
ok 1 - set up repository to clone
ok 13 - A: verify marks output
ok 4 - update existing notes with N command
ok 14 - A: verify marks import
ok 2 - fast-import (packed) with -c core.compression=9
ok 93 - difftool --rotate-to
ok 1 - setup
ok 22 - self name with dot is suppressed
ok 5 - add concatenation notes with M command
ok 15 - A: tag blob by sha1
ok 16 - A: verify marks import does not crash
ok 6 - verify that deleteall also removes notes
ok 79 - git_test_func: modified submodule does not update submodule work tree
ok 17 - A: verify pack
ok 3 - fast-import (packed) with -c core.compression=0 -c pack.compression=0
ok 7 - verify that later N commands override earlier M commands
ok 2 - fast-export | fast-import
ok 94 - difftool --skip-to
ok 2 - scalar invoked on enlistment root
ok 18 - A: verify diff
ok 95 - difftool --rotate/skip-to error condition
# passed all 95 test(s)
1..95
ok 3 - fast-export ^muss^{commit} muss
ok 4 - fast-export --mark-tags ^muss^{commit} muss
*** t9400-git-cvsserver-server.sh ***
ok 4 - fast-import (packed) with -c core.compression=9 -c pack.compression=0
ok 2 - creates content in enlistment root
ok 11 - mergetool skips resolved paths when rerere is active
ok 5 - fast-export main~2..main
ok 19 - A: export marks with large values
ok 5 - fast-import (packed) with -c core.compression=0 -c pack.compression=9
ok 20 - B: fail on invalid blob sha1
ok 6 - fast-export --reference-excluded-parents main~2..main
ok 7 - fast-export --show-original-ids
ok 6 - fast-import (packed) with -c core.compression=9 -c pack.compression=9
ok 8 - fast-export --show-original-ids | git fast-import
ok 16 - setup untracked cache to false
ok 1 - setup simple repo
ok 2 - export anonymized stream
ok 21 - B: accept branch name "TEMP_TAG"
ok 3 - stream omits path names
ok 2 - setup large marks file
1..0 # SKIP skipping git-cvsserver tests, cvs not found
ok 4 - stream contains user-specified names
*** t9401-git-cvsserver-crlf.sh ***
ok 23 - non-ascii self name is suppressed
ok 5 - stream omits gitlink oids
ok 6 - stream retains other as refname
ok 7 - stream omits other refnames
ok 7 - fast-import (packed) with -c pack.compression=0
ok 3 - import with large marks file
ok 8 - stream omits identities
ok 9 - stream omits tag message
ok 9 - reencoding iso-8859-7
ok 17 - compare status with and without fsmonitor
ok 3 - with spaces
ok 10 - import stream to new repository
ok 8 - fast-import (packed) with -c pack.compression=9
ok 22 - B: accept empty committer
ok 11 - result has two branches
ok 23 - B: reject invalid timezone
ok 10 - aborting on iso-8859-7
ok 12 - repo has original shape and timestamps
ok 18 - status doesn't detect unreported modifications
ok 19 - setup untracked cache to true
ok 13 - root tree has original shape
ok 24 - B: accept invalid timezone with raw-permissive
ok 14 - paths in subdir ended up in one tree
ok 15 - identical gitlinks got identical oid
ok 16 - all tags point to branch tip
ok 3 - scalar invoked on enlistment src repo
ok 4 - setup dump with submodule
ok 11 - preserving iso-8859-7
ok 5 - setup submodule mapping with large id
ok 17 - idents are shared
ok 80 - git_test_func: modified submodule does not update submodule work tree to invalid commit
# passed all 17 test(s)
1..17
1..0 # SKIP skipping git-cvsserver tests, cvs not found
ok 9 - fast-import (loose) with -c core.compression=0
*** t9402-git-cvsserver-refs.sh ***
ok 20 - compare status with and without fsmonitor
*** t9500-gitweb-standalone-no-errors.sh ***
ok 25 - B: accept and fixup committer with no name
ok 6 - import with submodule mapping
ok 26 - B: fail on invalid committer (1)
ok 27 - B: fail on invalid committer (2)
ok 7 - paths adjusted for relative subdir
ok 28 - B: fail on invalid committer (3)
ok 21 - status doesn't detect unreported modifications
ok 12 - encoding preserved if reencoding fails
ok 22 - setup preloadIndex to true
ok 29 - B: fail on invalid committer (4)
ok 23 - setup untracked cache to false
ok 30 - B: fail on invalid committer (5)
ok 8 - relative marks are not affected by subdir
ok 4 - partial clone if supported by server
# passed all 8 test(s)
1..8
ok 10 - fast-import (loose) with -c core.compression=9
ok 12 - conflicted stash sets up rerere
ok 31 - B: fail on invalid file path of ..
*** t9501-gitweb-standalone-http-status.sh ***
ok 32 - B: fail on invalid file path of .
ok 33 # skip B: fail on invalid file path of C: (missing WINDOWS)
ok 13 - import/export-marks
ok 34 - B: fail on invalid file path of .git
ok 35 - B: fail on invalid file path of .gitmodules
ok 14 - set up faked signed tag
ok 15 - signed-tags=abort
ok 24 - compare status with and without fsmonitor
1..0 # SKIP skipping git-cvsserver tests, cvs not found
*** t9502-gitweb-standalone-parse-output.sh ***
ok 16 - signed-tags=verbatim
ok 17 - signed-tags=strip
ok 24 - long non-ascii self name is suppressed
ok 36 - C: incremental import create pack from stdin
ok 18 - signed-tags=warn-strip
ok 11 - fast-import (loose) with -c core.compression=0 -c core.loosecompression=0
ok 25 - status doesn't detect unreported modifications
ok 26 - setup untracked cache to true
ok 37 - C: verify pack
1..0 # SKIP skipping gitweb tests, CGI & CGI::Util & CGI::Carp modules not available
*** t9600-cvsimport.sh ***
ok 38 - C: validate reuse existing blob
ok 39 - C: verify commit
ok 40 - C: validate rename result
ok 41 - D: inline data in commit
ok 5 - fall back on full clone if partial unsupported
ok 12 - fast-import (loose) with -c core.compression=9 -c core.loosecompression=0
ok 27 - compare status with and without fsmonitor
ok 4 - scalar invoked when enlistment root and repo are the same
ok 81 - git_test_func: modified submodule does not update submodule work tree from invalid commit
ok 42 - D: verify pack
ok 5 - scalar repo search respects GIT_CEILING_DIRECTORIES
1..0 # SKIP skipping gitweb tests, CGI & CGI::Util & CGI::Carp modules not available
*** t9601-cvsimport-vendor-branch.sh ***
ok 43 - D: validate new files added
ok 28 - status doesn't detect unreported modifications
ok 44 - D: verify file5
ok 19 - setup submodule
ok 6 - scalar enlistments need a worktree
ok 45 - D: verify file6
ok 46 - E: rfc2822 date, --date-format=raw
ok 7 # skip scalar register starts fsmon daemon (missing FSMONITOR_DAEMON)
1..0 # SKIP skipping gitweb tests, CGI & CGI::Util & CGI::Carp modules not available
ok 13 - mergetool takes partial path
ok 47 - E: rfc2822 date, --date-format=rfc2822
*** t9602-cvsimport-branches-tags.sh ***
1..0 # SKIP skipping cvsimport tests, cvs not found
*** t9603-cvsimport-patchsets.sh ***
ok 29 - splitting the index results in the same state
ok 13 - fast-import (loose) with -c core.compression=0 -c core.loosecompression=9
ok 82 - git_test_func: added submodule does remove untracked unignored file with same name when forced
ok 48 - E: verify pack
# still have 12 known breakage(s)
# passed all remaining 70 test(s)
1..82
ok 8 - scalar register warns when background maintenance fails
ok 6 - initializes sparse-checkout by default
ok 49 - E: verify commit
*** t9604-cvsimport-timestamps.sh ***
ok 50 - F: non-fast-forward update skips
ok 25 - sanitized self name is suppressed
1..0 # SKIP skipping cvsimport tests, cvs not found
*** t9700-perl-git.sh ***
ok 30 - ignore .git changes when invalidating UNTR
ok 14 - fast-import (loose) with -c core.compression=9 -c core.loosecompression=9
ok 51 - F: verify pack
1..0 # SKIP skipping cvsimport tests, cvs not found
*** t9800-git-p4-basic.sh ***
1..0 # SKIP skipping cvsimport tests, cvs not found
*** t9801-git-p4-branch.sh ***
ok 52 - F: verify other commit
ok 31 - discard_index() also discards fsmonitor info
ok 53 - G: non-fast-forward update forced
ok 9 - scalar unregister
ok 20 - submodule fast-export | fast-import
ok 7 - --full-clone does not create sparse-checkout
ok 15 - fast-import (loose) with -c core.loosecompression=0
1..0 # SKIP skipping cvsimport tests, cvs not found
ok 54 - G: verify pack
*** t9802-git-p4-filetype.sh ***
ok 55 - G: branch changed, but logged
ok 32 - status succeeds after staging/unstaging
ok 56 - H: deletall, add 1
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9803-git-p4-shell-metachars.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9804-git-p4-label.sh ***
ok 16 - fast-import (loose) with -c core.loosecompression=9
# passed all 16 test(s)
1..16
*** t9805-git-p4-skip-submit-edit.sh ***
ok 10 - set up repository to clone
ok 26 - Show all headers
ok 21 - setup copies
ok 57 - H: verify pack
ok 58 - H: validate old files removed, new files added
ok 8 - --single-branch clones HEAD only
ok 59 - H: verify file
ok 60 - I: export-pack-edges
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9806-git-p4-options.sh ***
ok 61 - I: verify edge list
ok 22 - fast-export -C -C | fast-import
ok 62 - J: reset existing branch creates empty commit
ok 63 - J: branch has 1 commit, empty tree
ok 64 - J: tag must fail on empty branch
ok 23 - fast-export | fast-import when main is tagged
ok 65 - K: reinit branch with from
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9807-git-p4-submit.sh ***
ok 66 - K: verify K^1 = branch^1
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9808-git-p4-chdir.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9809-git-p4-client-view.sh ***
ok 67 - L: verify internal tree sorting
ok 14 - mergetool delete/delete conflict
ok 24 - cope with tagger-less tags
ok 9 - --no-single-branch clones all branches
ok 68 - L: nested tree copy does not corrupt deltas
ok 27 - Prompting works
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9810-git-p4-rcs.sh ***
ok 25 - setup for limiting exports by PATH
ok 11 - scalar clone
ok 10 # skip progress with tty (missing TTY)
ok 33 - status succeeds with sparse index
ok 69 - M: rename file in same subdirectory
# passed all 33 test(s)
1..33
ok 26 - dropping tag of filtered out object
ok 27 - rewriting tag of filtered out object
ok 70 - M: rename file to new subdirectory
*** t9811-git-p4-label-import.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9812-git-p4-wildcards.sh ***
ok 71 - M: rename subdirectory to new subdirectory
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9813-git-p4-preserve-users.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9814-git-p4-rename.sh ***
ok 1 - set up test repository
ok 72 - M: rename root ("") to subdirectory
ok 2 - set up bare repository
ok 28 - rewrite tag predating pathspecs to nothing
ok 73 - M: rename root () to subdirectory
ok 15 - mergetool produces no errors when keepBackup is used
not ok 29 - no exact-ref revisions included # TODO known breakage
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9815-git-p4-submit-fail.sh ***
ok 74 - N: copy file in same subdirectory
ok 30 - path limiting with import-marks does not lose unmodified files
ok 31 - path limiting works
ok 75 - N: copy then modify subdirectory
1..0 # SKIP skipping git p4 tests; no p4 or p4d
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9816-git-p4-locked.sh ***
*** t9817-git-p4-exclude.sh ***
ok 76 - N: copy dirty subdirectory
1..0 # SKIP skipping git p4 tests; no p4 or p4d
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9818-git-p4-block.sh ***
*** t9819-git-p4-case-folding.sh ***
ok 11 - progress without tty
ok 12 - scalar clone --no-... opts
ok 77 - N: copy directory by id
ok 32 - avoid corrupt stream with non-existent mark
1..0 # SKIP skipping git p4 tests; no p4 or p4d
ok 78 - N: read and copy directory
*** t9820-git-p4-editor-handling.sh ***
ok 16 - mergetool honors tempfile config for deleted files
ok 33 - full-tree re-shows unmodified files
ok 79 - N: empty directory reads as missing
ok 34 - set-up a few more tags for tag export tests
1..0 # SKIP skipping git p4 tests; no p4 or p4d
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9821-git-p4-path-variations.sh ***
*** t9822-git-p4-path-encoding.sh ***
ok 80 - N: copy root ("") by tree hash
1..0 # SKIP skipping git p4 tests; no p4 or p4d
ok 35 - tree_tag
*** t9823-git-p4-mock-lfs.sh ***
ok 36 - tree_tag-obj
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9824-git-p4-git-lfs.sh ***
ok 12 - scalar clone warns when background maintenance fails
ok 37 - tag-obj_tag
ok 38 - tag-obj_tag-obj
ok 81 - N: copy root ("") by path
ok 39 - handling tags of blobs
ok 82 - N: copy root () by tree hash
ok 40 - handling nested tags
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9825-git-p4-handle-utf16-without-bom.sh ***
ok 83 - N: copy root () by path
ok 84 - N: delete directory by copying
ok 17 - mergetool keeps tempfiles when aborting delete/delete
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9826-git-p4-keep-empty-commits.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9827-git-p4-change-filetype.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9828-git-p4-map-user.sh ***
ok 41 - directory becomes symlink
1..0 # SKIP skipping git p4 tests; no p4 or p4d
ok 85 - N: modify copied tree
*** t9829-git-p4-jobs.sh ***
ok 86 - N: reject foo/ syntax
ok 87 - N: reject foo/ syntax in copy source
ok 88 - N: reject foo/ syntax in rename source
ok 89 - N: reject foo/ syntax in ls argument
ok 13 - scalar reconfigure
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9830-git-p4-symlink-dir.sh ***
ok 3 - use t9700/test.pl to test Git.pm
ok 90 - N: copy to root ("") by id and modify
# passed all 3 test(s)
1..3
*** t9831-git-p4-triggers.sh ***
ok 91 - N: extract subtree to the root ("")
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9832-unshelve.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9833-errors.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9834-git-p4-file-dir-bug.sh ***
ok 42 - fast-export quotes pathnames
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9835-git-p4-metadata-encoding-python2.sh ***
ok 92 - N: modify subtree, extract it to the root (""), and modify again
ok 13 - `scalar clone --no-src`
# passed all 13 test(s)
1..13
*** t9836-git-p4-metadata-encoding-python3.sh ***
ok 93 - N: copy to root () by id and modify
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9850-shell.sh ***
ok 94 - N: extract subtree to the root ()
ok 43 - test bidirectionality
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9901-git-web--browse.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9902-completion.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
ok 95 - N: modify subtree, extract it to the root (), and modify again
*** t9903-bash-prompt.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
ok 96 - O: comments are all skipped
ok 44 - avoid uninteresting refs
1..0 # SKIP skipping git p4 tests; no p4 or p4d
ok 97 - O: blank lines not necessary after data commands
ok 45 - refs are updated even if no commits need to be exported
ok 3 - lookups after checkpoint works
# passed all 3 test(s)
1..3
ok 46 - use refspec
1..0 # SKIP skipping git p4 tests; no p4 or p4d
ok 47 - delete ref because entire history excluded
ok 48 - delete refspec
ok 98 - O: repack before next test
ok 1 - shell allows upload-pack
ok 2 - shell forbids other commands
ok 3 - shell forbids interactive use by default
ok 4 - shell allows interactive command
ok 99 - O: blank lines not necessary after other commands
ok 100 - O: progress outputs as requested by input
ok 5 - shell complains of overlong commands
# passed all 5 test(s)
1..5
ok 1 - URL with an ampersand in it
ok 49 - when using -C, do not declare copy when source of copy is also modified
ok 2 - URL with a semi-colon in it
ok 1 - setup for __git_find_repo_path/__gitdir tests
ok 2 - __git_find_repo_path - from command line (through $__git_dir)
ok 3 - __git_find_repo_path - .git directory in cwd
ok 4 - __git_find_repo_path - .git directory in parent
ok 3 - URL with a hash in it
ok 5 - __git_find_repo_path - cwd is a .git directory
ok 6 - __git_find_repo_path - parent is a .git directory
ok 7 - __git_find_repo_path - $GIT_DIR set while .git directory in cwd
ok 8 - __git_find_repo_path - $GIT_DIR set while .git directory in parent
ok 8 - add lots of commits and notes
ok 101 - P: superproject & submodule mix
ok 4 - browser paths are properly quoted
ok 9 - __git_find_repo_path - from command line while "git -C"
ok 50 - merge commit gets exported with --import-marks
ok 1 - setup for prompt tests
ok 10 - __git_find_repo_path - relative dir from command line and "git -C"
ok 11 - __git_find_repo_path - $GIT_DIR set while "git -C"
ok 2 - prompt - branch name
ok 5 - browser command allows arbitrary shell code
# passed all 5 test(s)
1..5
ok 12 - __git_find_repo_path - relative dir in $GIT_DIR and "git -C"
ok 13 - __git_find_repo_path - "git -C" while .git directory in cwd
ok 14 - scalar reconfigure --all with includeIf.onbranch
ok 14 - __git_find_repo_path - "git -C" while cwd is a .git directory
ok 15 - __git_find_repo_path - "git -C" while .git directory in parent
ok 16 - __git_find_repo_path - non-existing path in "git -C"
ok 102 - P: verbatim SHA gitlinks
ok 3 - prompt - branch name - symlink symref
ok 17 - __git_find_repo_path - non-existing path in $__git_dir
ok 103 - P: fail on inline gitlink
ok 18 - __git_find_repo_path - non-existing $GIT_DIR
ok 104 - P: fail on blob mark in gitlink
ok 19 - __git_find_repo_path - gitfile in cwd
ok 4 - prompt - unborn branch
ok 105 - Q: commit notes
ok 20 - __git_find_repo_path - gitfile in parent
ok 106 - Q: verify pack
ok 21 - __git_find_repo_path - resulting path avoids symlinks
ok 5 - prompt - with newline in path
ok 107 - Q: verify first commit
ok 22 - __git_find_repo_path - not a git repository
ok 108 - Q: verify second commit
ok 23 - __gitdir - finds repo
ok 109 - Q: verify third commit
ok 24 - __gitdir - returns error when cannot find repo
ok 25 - __gitdir - repo as argument
ok 110 - Q: verify first notes commit
ok 26 - __gitdir - remote as argument
ok 27 - __git_dequote - plain unquoted word
ok 111 - Q: verify first notes tree
ok 28 - __git_dequote - backslash escaped
ok 29 - __git_dequote - single quoted
ok 112 - Q: verify first note for first commit
ok 30 - __git_dequote - double quoted
ok 31 - __git_dequote - open single quote
ok 32 - __git_dequote - open double quote
ok 113 - Q: verify first note for second commit
ok 51 - fast-export --first-parent outputs all revisions output by revision walk
ok 6 - prompt - detached head
ok 114 - Q: verify first note for third commit
ok 33 - __gitcomp_direct - puts everything into COMPREPLY as-is
ok 34 - __gitcomp - trailing space - options
ok 115 - Q: verify second notes commit
ok 35 - __gitcomp - trailing space - config keys
ok 116 - Q: verify second notes tree
ok 52 - fast-export handles --end-of-options
ok 36 - __gitcomp - option parameter
# still have 1 known breakage(s)
# passed all remaining 51 test(s)
1..52
ok 117 - Q: verify second note for first commit
ok 7 - prompt - describe detached head - contains
ok 37 - __gitcomp - prefix
ok 118 - Q: verify first note for second commit
ok 38 - __gitcomp - suffix
ok 119 - Q: verify first note for third commit
ok 39 - __gitcomp - ignore optional negative options
ok 40 - __gitcomp - ignore/narrow optional negative options
ok 9 - verify that lots of notes trigger a fanout scheme
ok 120 - Q: verify third notes commit
ok 41 - __gitcomp - ignore/narrow optional negative options
ok 121 - Q: verify third notes tree
ok 42 - __gitcomp - expand all negative options
ok 122 - Q: verify third note for first commit
ok 43 - __gitcomp - expand/narrow all negative options
ok 8 - prompt - describe detached head - branch
ok 44 - __gitcomp - equal skip
ok 123 - Q: verify fourth notes commit
ok 45 - __gitcomp - doesnt fail because of invalid variable name
ok 46 - __gitcomp_nl - trailing space
ok 124 - Q: verify fourth notes tree
ok 125 - Q: verify second note for second commit
ok 47 - __gitcomp_nl - prefix
ok 126 - Q: deny note on empty branch
ok 48 - __gitcomp_nl - suffix
ok 127 - R: abort on unsupported feature
ok 49 - __gitcomp_nl - no suffix
ok 50 - __gitcomp_nl - doesnt fail because of invalid variable name
ok 128 - R: supported feature is accepted
ok 9 - prompt - describe detached head - describe
ok 129 - R: abort on receiving feature after data command
ok 130 - R: import-marks features forbidden by default
ok 131 - R: only one import-marks feature allowed per stream
ok 132 - R: export-marks feature forbidden by default
ok 51 - __git_remotes - list remotes from $GIT_DIR/remotes and from config file
ok 133 - R: export-marks feature results in a marks file being created
ok 134 - R: export-marks options can be overridden by commandline options
ok 10 - prompt - describe detached head - default
ok 135 - R: catch typo in marks file name
ok 11 - prompt - inside .git directory
ok 52 - __git_is_configured_remote
ok 136 - R: import and output marks can be the same file
ok 12 - prompt - deep inside .git directory
ok 137 - R: --import-marks=foo --output-marks=foo to create foo fails
ok 138 - R: --import-marks-if-exists
ok 13 - prompt - inside bare repository
ok 139 - R: feature import-marks-if-exists
ok 140 - R: import to output marks works without any content
ok 141 - R: import marks prefers commandline marks file over the stream
ok 142 - R: multiple --import-marks= should be honoured
ok 53 - setup for ref completion
ok 143 - R: feature relative-marks should be honoured
ok 144 - R: feature no-relative-marks should be honoured
ok 145 - R: feature ls supported
ok 54 - __git_refs - simple
ok 14 - prompt - interactive rebase
ok 146 - R: feature cat-blob supported
ok 147 - R: cat-blob-fd must be a nonnegative integer
ok 55 - __git_refs - full refs
ok 148 - R: print old blob
ok 56 - __git_refs - repo given on the command line
ok 15 - scalar reconfigure --all with detached HEADs
ok 149 - R: in-stream cat-blob-fd not respected
ok 57 - __git_refs - remote on local file system
ok 150 - R: print mark for new blob
ok 15 - prompt - rebase merge
ok 10 - verify that importing a notes tree respects the fanout scheme
ok 151 - R: print new blob
ok 58 - __git_refs - remote on local file system - full refs
ok 11 - verify that non-notes are untouched by a fanout change
ok 152 - R: print new blob by sha1
ok 59 - __git_refs - configured remote
ok 153 - setup: big file
ok 60 - __git_refs - configured remote - full refs
ok 12 - change a few existing notes
ok 154 - R: print two blobs to stdout
ok 16 - prompt - rebase am
ok 61 - __git_refs - configured remote - repo given on the command line
ok 62 - __git_refs - configured remote - full refs - repo given on the command line
ok 155 - R: copy using cat-file
ok 17 - prompt - merge
ok 63 - __git_refs - configured remote - remote name matches a directory
ok 156 - R: print blob mid-commit
ok 64 - __git_refs - URL remote
ok 157 - R: print staged blob within commit
ok 158 - R: quiet option results in no stats being output
ok 159 - R: feature done means terminating "done" is mandatory
ok 65 - __git_refs - URL remote - full refs
ok 160 - R: terminating "done" with trailing gibberish is ok
ok 18 - prompt - cherry-pick
ok 66 - __git_refs - non-existing remote
ok 161 - R: terminating "done" within commit
ok 162 - R: die on unknown option
ok 163 - R: unknown commandline options are rejected
ok 67 - __git_refs - non-existing remote - full refs
ok 164 - R: die on invalid option argument
ok 165 - R: ignore non-git options
ok 68 - __git_refs - non-existing URL remote
ok 166 - R: corrupt lines do not mess marks file
ok 19 - prompt - revert
ok 69 - __git_refs - non-existing URL remote - full refs
ok 70 - __git_refs - not in a git repository
ok 20 - prompt - bisect
ok 21 - prompt - dirty status indicator - clean
ok 71 - __git_refs - unique remote branches for git checkout DWIMery
ok 13 - verify that changing notes respect existing fanout
ok 72 - __git_refs - after --opt=
ok 16 - `reconfigure -a` removes stale config entries
ok 17 - scalar delete without enlistment shows a usage
ok 73 - __git_refs - after --opt= - full refs
ok 74 - __git refs - excluding refs
ok 22 - prompt - dirty status indicator - dirty worktree
ok 18 - scalar delete with enlistment
ok 75 - __git refs - excluding full refs
ok 23 - prompt - dirty status indicator - dirty index
ok 76 - setup for filtering matching refs
ok 77 - __git_refs - do not filter refs unless told so
ok 78 - __git_refs - only matching refs
ok 19 - scalar supports -c/-C
ok 79 - __git_refs - only matching refs - full refs
ok 20 - `scalar [...] <dir>` errors out when dir is missing
ok 24 - prompt - dirty status indicator - dirty index and worktree
ok 80 - __git_refs - only matching refs - remote on local file system
ok 81 - __git_refs - only matching refs - configured remote
ok 82 - __git_refs - only matching refs - remote - full refs
ok 25 - prompt - dirty status indicator - orphan branch - clean
ok 26 - prompt - dirty status indicator - orphan branch - dirty index
ok 83 - __git_refs - only matching refs - checkout DWIMery
ok 84 - teardown after filtering matching refs
ok 85 - __git_refs - for-each-ref format specifiers in prefix
ok 167 - R: blob bigger than threshold
ok 27 - prompt - dirty status indicator - orphan branch - dirty index and worktree
ok 86 - __git_complete_refs - simple
ok 87 - __git_complete_refs - matching
ok 168 - R: verify created pack
ok 28 - prompt - dirty status indicator - shell variable unset with config disabled
ok 88 - __git_complete_refs - remote
ok 21 - scalar diagnose
# passed all 21 test(s)
1..21
ok 89 - __git_complete_refs - track
ok 29 - prompt - dirty status indicator - shell variable unset with config enabled
ok 169 - R: verify written objects
ok 170 - R: blob appears only once
ok 90 - __git_complete_refs - current word
ok 171 - S: initialize for S tests
ok 172 - S: filemodify with garbage after mark must fail
ok 91 - __git_complete_refs - prefix
ok 173 - S: filemodify with garbage after inline must fail
ok 30 - prompt - dirty status indicator - shell variable set with config disabled
ok 92 - __git_complete_refs - suffix
ok 174 - S: filemodify with garbage after sha1 must fail
ok 175 - S: notemodify with garbage after mark dataref must fail
ok 176 - S: notemodify with garbage after inline dataref must fail
ok 93 - __git_complete_fetch_refspecs - simple
ok 177 - S: notemodify with garbage after sha1 dataref must fail
ok 178 - S: notemodify with garbage after mark commit-ish must fail
ok 31 - prompt - dirty status indicator - shell variable set with config enabled
ok 94 - __git_complete_fetch_refspecs - matching
ok 179 - S: from with garbage after mark must fail
ok 180 - S: merge with garbage after mark must fail
ok 181 - S: tag with garbage after mark must fail
ok 32 - prompt - dirty status indicator - not shown inside .git directory
ok 182 - S: cat-blob with garbage after mark must fail
ok 95 - __git_complete_fetch_refspecs - prefix
ok 183 - S: ls with garbage after mark must fail
ok 184 - S: ls with garbage after sha1 must fail
ok 33 - prompt - stash status indicator - no stash
ok 96 - __git_complete_fetch_refspecs - fully qualified
ok 97 - __git_complete_fetch_refspecs - fully qualified & prefix
ok 34 - prompt - stash status indicator - stash
ok 185 - S: paths at EOL with quoted spaces must work
ok 98 - __git_complete_worktree_paths
ok 99 - __git_complete_worktree_paths - not a git repository
ok 35 - prompt - stash status indicator - not shown inside .git directory
ok 186 - S: paths at EOL with unquoted spaces must work
ok 100 - __git_complete_worktree_paths with -C
ok 36 - prompt - untracked files status indicator - no untracked files
ok 37 - prompt - untracked files status indicator - untracked files
ok 101 - git switch - with no options, complete local branches and unique remote branch names for DWIM logic
ok 187 - S: paths at EOL with octal escapes must work
ok 102 - git bisect - when not bisecting, complete only replay and start subcommands
ok 38 - prompt - untracked files status indicator - empty untracked dir
ok 103 - git bisect - complete options to start subcommand
ok 188 - S: paths before space with quoted spaces must work
ok 39 - prompt - untracked files status indicator - non-empty untracked dir
ok 189 - S: paths before space with no unquoted spaces must work
ok 40 - prompt - untracked files status indicator - untracked files outside cwd
ok 104 - setup for git-bisect tests requiring a repo
ok 41 - prompt - untracked files status indicator - shell variable unset with config disabled
ok 190 - S: paths before space with octal escapes must work
ok 105 - git bisect - start subcommand arguments before double-dash are completed as revs
ok 191 - S: filemodify with unclosed " in path must fail
ok 192 - S: filemodify with invalid escape in quoted path must fail
ok 106 - git bisect - start subcommand arguments after double-dash are not completed
ok 193 - S: filemodify with escaped NUL in quoted path must fail
ok 42 - prompt - untracked files status indicator - shell variable unset with config enabled
ok 194 - S: filemodify with garbage after quoted path must fail
ok 107 - setup for git-bisect tests requiring ongoing bisection
ok 195 - S: filemodify with space after quoted path must fail
ok 196 - S: filedelete with unclosed " in path must fail
ok 197 - S: filedelete with invalid escape in quoted path must fail
ok 43 - prompt - untracked files status indicator - shell variable set with config disabled
ok 108 - git-bisect - when bisecting all subcommands are candidates
ok 198 - S: filedelete with escaped NUL in quoted path must fail
ok 199 - S: filedelete with garbage after quoted path must fail
ok 200 - S: filedelete with space after quoted path must fail
ok 201 - S: filecopy with unclosed " in source must fail
ok 109 - git-bisect - options to terms subcommand are candidates
ok 202 - S: filecopy with invalid escape in quoted source must fail
ok 44 - prompt - untracked files status indicator - shell variable set with config enabled
ok 203 - S: filecopy with escaped NUL in quoted source must fail
ok 204 - S: filecopy with missing space after quoted source must fail
ok 205 - S: filecopy with missing space after unquoted source must fail
ok 45 - prompt - untracked files status indicator - not shown inside .git directory
ok 206 - S: filecopy with unclosed " in dest must fail
ok 207 - S: filecopy with invalid escape in quoted dest must fail
ok 46 - prompt - format string starting with dash
ok 208 - S: filecopy with escaped NUL in quoted dest must fail
ok 209 - S: filecopy with garbage after quoted dest must fail
ok 47 - prompt - pc mode
ok 110 - git-bisect - git-log options to visualize subcommand are candidates
ok 210 - S: filecopy with space after quoted dest must fail
ok 211 - S: filerename with unclosed " in source must fail
ok 48 - prompt - bash color pc mode - branch name
ok 212 - S: filerename with invalid escape in quoted source must fail
ok 111 - git-bisect - view subcommand is not a candidate
ok 213 - S: filerename with escaped NUL in quoted source must fail
ok 214 - S: filerename with missing space after quoted source must fail
ok 215 - S: filerename with missing space after unquoted source must fail
ok 216 - S: filerename with unclosed " in dest must fail
ok 49 - prompt - bash color pc mode - detached head
ok 217 - S: filerename with invalid escape in quoted dest must fail
ok 218 - S: filerename with escaped NUL in quoted dest must fail
ok 219 - S: filerename with garbage after quoted dest must fail
ok 220 - S: filerename with space after quoted dest must fail
ok 112 - git-bisect - existing view subcommand is recognized and enables completion of git-log options
ok 221 - S: ls (in commit) with unclosed " in path must fail
ok 222 - S: ls (in commit) with invalid escape in quoted path must fail
ok 50 - prompt - bash color pc mode - dirty status indicator - dirty worktree
ok 223 - S: ls (in commit) with escaped NUL in quoted path must fail
ok 224 - S: ls (in commit) with garbage after quoted path must fail
ok 225 - S: ls (in commit) with space after quoted path must fail
ok 113 - git checkout - completes refs and unique remote branches for DWIM
ok 226 - S: ls (without dataref in commit) with unclosed " in path must fail
ok 51 - prompt - bash color pc mode - dirty status indicator - dirty index
ok 227 - S: ls (without dataref in commit) with invalid escape in quoted path must fail
ok 228 - S: ls (without dataref in commit) with escaped NUL in quoted path must fail
ok 229 - S: ls (without dataref in commit) with garbage after quoted path must fail
ok 230 - S: ls (without dataref in commit) with space after quoted path must fail
ok 114 - git switch - with --no-guess, complete only local branches
ok 14 - remove lots of notes
ok 231 - T: ls root ("") tree
ok 15 - verify that removing notes trigger fanout consolidation
ok 52 - prompt - bash color pc mode - dirty status indicator - dirty index and worktree
ok 115 - git switch - with GIT_COMPLETION_CHECKOUT_NO_GUESS=1, complete only local branches
ok 232 - T: ls root () tree
ok 16 - verify that non-notes are untouched by a fanout change
ok 233 - T: delete branch
ok 53 - prompt - bash color pc mode - dirty status indicator - before root commit
ok 234 - T: empty reset doesnt delete branch
ok 116 - git switch - --guess overrides GIT_COMPLETION_CHECKOUT_NO_GUESS=1, complete local branches and unique remote names for DWIM logic
ok 54 - prompt - bash color pc mode - inside .git directory
ok 235 - U: initialize for U tests
ok 236 - U: filedelete file succeeds
ok 117 - git switch - a later --guess overrides previous --no-guess, complete local and remote unique branches for DWIM
ok 237 - U: validate file delete result
ok 55 - prompt - bash color pc mode - stash status indicator
ok 238 - U: filedelete directory succeeds
ok 239 - U: validate directory delete result
ok 118 - git switch - a later --no-guess overrides previous --guess, complete only local branches
ok 240 - U: filedelete root ("") succeeds
ok 56 - prompt - bash color pc mode - untracked files status indicator
ok 241 - U: validate root ("") delete result
ok 57 - prompt - zsh color pc mode
ok 242 - U: filedelete root () succeeds
ok 119 - git checkout - with GIT_COMPLETION_NO_GUESS=1 only completes refs
ok 243 - U: validate root () delete result
ok 58 - prompt - hide if pwd ignored - env var unset, config disabled
ok 244 - V: checkpoint helper does not get stuck with extra output
ok 120 - git checkout - --guess overrides GIT_COMPLETION_NO_GUESS=1, complete refs and unique remote branches for DWIM
ok 245 - V: checkpoint updates refs after reset
ok 59 - prompt - hide if pwd ignored - env var unset, config disabled, pc mode
ok 121 - git checkout - with --no-guess, only completes refs
ok 60 - prompt - hide if pwd ignored - env var unset, config unset
ok 246 - V: checkpoint updates refs and marks after commit
ok 61 - prompt - hide if pwd ignored - env var unset, config unset, pc mode
ok 122 - git checkout - a later --guess overrides previous --no-guess, complete refs and unique remote branches for DWIM
ok 247 - V: checkpoint updates refs and marks after commit (no new objects)
ok 62 - prompt - hide if pwd ignored - env var set, config disabled
ok 248 - V: checkpoint updates tags after tag
ok 249 - W: get-mark & empty orphan commit with no newlines
ok 123 - git checkout - a later --no-guess overrides previous --guess, complete only refs
ok 250 - W: get-mark & empty orphan commit with one newline
ok 251 - W: get-mark & empty orphan commit with ugly second newline
ok 63 - prompt - hide if pwd ignored - env var set, config disabled, pc mode
ok 252 - W: get-mark & empty orphan commit with erroneous third newline
ok 64 - prompt - hide if pwd ignored - env var set, config unset
ok 253 - X: handling encoding
ok 124 - git checkout - with checkout.guess = false, only completes refs
ok 65 - prompt - hide if pwd ignored - env var set, config unset, pc mode
ok 66 - prompt - hide if pwd ignored - inside gitdir
ok 125 - git checkout - with checkout.guess = true, completes refs and unique remote branches for DWIM
ok 254 - X: replace ref that becomes useless is removed
ok 17 - add notes to 16 commits in each of 10 refs
ok 126 - git checkout - a later --guess overrides previous checkout.guess = false, complete refs and unique remote branches for DWIM
# passed all 17 test(s)
1..17
ok 255 - Y: setup
ok 67 - prompt - conflict indicator
# passed all 67 test(s)
1..67
ok 127 - git checkout - a later --no-guess overrides previous checkout.guess = true, complete only refs
ok 256 - Y: rewrite submodules
# passed all 256 test(s)
1..256
ok 128 - git switch - with --detach, complete all references
ok 129 - git checkout - with --detach, complete only references
ok 130 - setup sparse-checkout tests
ok 131 - sparse-checkout completes subcommands
ok 132 - cone mode sparse-checkout completes directory names
ok 133 - cone mode sparse-checkout completes directory names with spaces and accents
ok 18 - deleted vs modified submodule
ok 134 - cone mode sparse-checkout completes directory names with tabs
ok 135 - cone mode sparse-checkout completes directory names with backslashes
ok 136 - non-cone mode sparse-checkout gives rooted paths
ok 137 - git sparse-checkout set --cone completes directory names
ok 138 - git switch - with -d, complete all references
ok 139 - git checkout - with -d, complete only references
ok 140 - git switch - with --track, complete only remote branches
ok 141 - git checkout - with --track, complete only remote branches
ok 142 - git switch - with --no-track, complete only local branch names
ok 143 - git checkout - with --no-track, complete only local references
ok 144 - git switch - with -c, complete all references
ok 145 - git switch - with -C, complete all references
ok 146 - git switch - with -c and --track, complete all references
ok 147 - git switch - with -C and --track, complete all references
ok 148 - git switch - with -c and --no-track, complete all references
ok 149 - git switch - with -C and --no-track, complete all references
ok 150 - git checkout - with -b, complete all references
ok 151 - git checkout - with -B, complete all references
ok 152 - git checkout - with -b and --track, complete all references
ok 153 - git checkout - with -B and --track, complete all references
ok 154 - git checkout - with -b and --no-track, complete all references
ok 155 - git checkout - with -B and --no-track, complete all references
ok 156 - git switch - for -c, complete local branches and unique remote branches
ok 157 - git switch - for -C, complete local branches and unique remote branches
ok 158 - git switch - for -c with --no-guess, complete local branches only
ok 159 - git switch - for -C with --no-guess, complete local branches only
ok 160 - git switch - for -c with --no-track, complete local branches only
ok 161 - git switch - for -C with --no-track, complete local branches only
ok 162 - git checkout - for -b, complete local branches and unique remote branches
ok 163 - git checkout - for -B, complete local branches and unique remote branches
ok 164 - git checkout - for -b with --no-guess, complete local branches only
ok 165 - git checkout - for -B with --no-guess, complete local branches only
ok 166 - git checkout - for -b with --no-track, complete local branches only
ok 167 - git checkout - for -B with --no-track, complete local branches only
ok 168 - git switch - with --orphan completes local branch names and unique remote branch names
ok 169 - git switch - --orphan with branch already provided completes nothing else
ok 170 - git checkout - with --orphan completes local branch names and unique remote branch names
ok 171 - git checkout - --orphan with branch already provided completes local refs for a start-point
ok 172 - git restore completes modified files
ok 173 - teardown after ref completion
ok 174 - setup for path completion tests
ok 175 - __git_complete_index_file - simple
ok 176 - __git_complete_index_file - escaped characters on cmdline
ok 177 - __git_complete_index_file - quoted characters on cmdline
ok 178 - __git_complete_index_file - UTF-8 in ls-files output
ok 179 - __git_complete_index_file - C-style escapes in ls-files output
ok 180 - __git_complete_index_file - \nnn-escaped characters in ls-files output
ok 181 - __git_complete_index_file - removing repeated quoted path components
ok 182 - teardown after path completion tests
ok 183 - __git_find_on_cmdline - single match
ok 184 - __git_find_on_cmdline - multiple matches
ok 185 - __git_find_on_cmdline - no match
ok 186 - __git_find_on_cmdline - single match with index
ok 187 - __git_find_on_cmdline - multiple matches with index
ok 188 - __git_find_on_cmdline - no match with index
ok 189 - __git_find_on_cmdline - ignores matches before command with index
ok 190 - __git_get_config_variables
ok 191 - __git_pretty_aliases
ok 192 - basic
ok 193 - double dash "git" itself
ok 194 - double dash "git checkout"
ok 195 - general options
ok 196 - general options plus command
ok 197 - git --help completion
ok 198 - completion.commands removes multiple commands
ok 199 - setup for integration tests
ok 200 - checkout completes ref names
ok 201 - checkout does not match ref names of a different case
ok 202 - checkout matches case insensitively with GIT_COMPLETION_IGNORE_CASE
ok 203 - checkout completes pseudo refs
ok 204 - checkout completes pseudo refs case insensitively with GIT_COMPLETION_IGNORE_CASE
ok 205 - git -C <path> checkout uses the right repo
ok 206 - show completes all refs
ok 207 - <ref>: completes paths
ok 208 - complete tree filename with spaces
ok 209 - complete tree filename with metacharacters
ok 210 - symbolic-ref completes builtin options
ok 211 - symbolic-ref completes short ref names
ok 212 - symbolic-ref completes full ref names
ok 213 - send-email
ok 214 - complete files
ok 215 - simple alias
ok 216 - recursive alias
ok 217 - completion uses <cmd> completion for alias: !sh -c 'git <cmd> ...'
ok 218 - completion uses <cmd> completion for alias: !f () { VAR=val git <cmd> ... }
ok 19 - file vs modified submodule
ok 219 - completion used <cmd> completion for alias: !f() { : git <cmd> ; ... }
ok 220 - completion used <cmd> completion for alias: !f() { : <cmd> ; ... }
ok 221 - completion used <cmd> completion for alias: !f() { : <cmd>; ... }
ok 222 - completion without explicit _git_xxx function
not ok 223 - complete with tilde expansion # TODO known breakage
ok 224 - setup other remote for remote reference completion
ok 225 - __git_complete_remote_or_refspec - push -d other
not ok 226 - __git_complete_remote_or_refspec - push other -d # TODO known breakage
ok 227 - __git_complete_remote_or_refspec - push --delete other
not ok 228 - __git_complete_remote_or_refspec - push other --delete # TODO known breakage
ok 229 - git config subcommand
ok 230 - git config subcommand options
ok 231 - git config get
ok 53 - do not fire editor when committer is bogus
ok 232 - git config set - section
ok 54 - do not fire editor if -m <msg> was given
ok 233 - git config set - section include, includeIf
ok 55 - do not fire editor if -m "" was given
ok 234 - git config set - variable name
ok 235 - git config set - variable name include
ok 56 - do not fire editor in the presence of conflicts
ok 57 - a SIGTERM should break locks
ok 236 - setup for git config submodule tests
ok 58 - Hand committing of a redundant merge removes dups
ok 59 - A single-liner subject with a token plus colon is not a footer
ok 237 - git config set - variable name - submodule and __git_compute_first_level_config_vars_for_section
ok 60 - commit -s places sob on third line after two empty lines
ok 61 - commit
ok 238 - git config set - variable name - __git_compute_second_level_config_vars_for_section
ok 239 - git config set - value
ok 62 - commit --status
ok 240 - git -c - section
ok 63 - commit --no-status
ok 241 - git -c - variable name
ok 242 - git -c - value
ok 64 - commit with commit.status = yes
ok 20 - submodule in subdirectory
ok 243 - git clone --config= - section
ok 65 - commit with commit.status = no
ok 244 - git clone --config= - variable name
ok 245 - git clone --config= - value
ok 66 - commit --status with commit.status = yes
ok 67 - commit --no-status with commit.status = yes
ok 68 - commit --status with commit.status = no
ok 69 - commit --no-status with commit.status = no
ok 246 - git reflog show
ok 70 - commit
ok 247 - options with value
ok 71 - commit --status
ok 248 - sourcing the completion script clears cached commands
ok 72 - commit --no-status
ok 249 - sourcing the completion script clears cached merge strategies
ok 73 - commit with commit.status = yes
ok 250 - sourcing the completion script clears cached --options
ok 251 - option aliases are not shown by default
ok 74 - commit with commit.status = no
ok 252 - option aliases are shown with GIT_COMPLETION_SHOW_ALL
ok 75 - commit --status with commit.status = yes
ok 253 - plumbing commands are excluded without GIT_COMPLETION_SHOW_ALL_COMMANDS
ok 76 - commit --no-status with commit.status = yes
ok 77 - commit --status with commit.status = no
ok 254 - all commands are shown with GIT_COMPLETION_SHOW_ALL_COMMANDS (also main non-builtin)
ok 255 - __git_complete
ok 78 - commit --no-status with commit.status = no
ok 256 - __git_pseudoref_exists
ok 79 - commit --status with custom comment character
# still have 3 known breakage(s)
# passed all remaining 253 test(s)
1..256
ok 80 - switch core.commentchar
ok 81 - switch core.commentchar but out of options
# passed all 81 test(s)
1..81
ok 21 - directory vs modified submodule
ok 22 - file with no base
ok 23 - custom commands override built-ins
ok 24 - filenames seen by tools start with ./
ok 25 - temporary filenames are used with mergetool.writeToTemp
ok 26 - diff.orderFile configuration is honored
ok 27 - mergetool -Oorder-file is honored
ok 28 - mergetool --tool-help shows recognized tools
ok 29 - mergetool hideResolved
ok 30 - mergetool with guiDefault
ok 31 - mergetool with non-existent tool
# passed all 31 test(s)
1..31
ok 28 # skip implicit ident is allowed (missing AUTOIDENT of PERL,AUTOIDENT)
ok 7 - fast-forward rebase does not care about ident
ok 29 - broken implicit ident aborts send-email
ok 30 - setup cmd scripts
ok 31 - tocmd works
ok 32 - cccmd works
ok 33 - headercmd works
ok 34 - --no-header-cmd works
ok 35 - multiline fields are correctly unfolded
ok 36 - malform output reported on blank lines in command output
ok 37 - reject long lines
ok 38 - no patch was sent
ok 39 - Author From: in message body
ok 40 - Author From: not in message body
ok 41 - allow long lines with --no-validate
ok 42 - short lines with auto encoding are 8bit
ok 43 - long lines with auto encoding are quoted-printable
ok 44 - carriage returns with auto encoding are quoted-printable
ok 45 - --validate passes with encoding auto
ok 46 - --validate passes with encoding quoted-printable
ok 47 - --validate passes with encoding base64
ok 48 - --validate respects relative core.hooksPath path
ok 49 - --validate respects absolute core.hooksPath path
ok 50 - --validate hook supports multiple addresses in arguments
ok 51 - --validate hook supports header argument
ok 52 - clear message-id before parsing a new message
ok 53 - --transfer-encoding=7bit produces correct header
ok 54 - --transfer-encoding=8bit produces correct header
ok 55 - --transfer-encoding=quoted-printable produces correct header
ok 56 - --transfer-encoding=base64 produces correct header
ok 57 - Invalid In-Reply-To
ok 58 - Valid In-Reply-To when prompting
ok 59 - In-Reply-To without --chain-reply-to
ok 60 - In-Reply-To with --chain-reply-to
ok 61 - setup erroring fake editor
ok 62 - fake editor dies with error
ok 63 - setup fake editor
ok 64 - --compose works
ok 65 - first message is compose text
ok 66 - second message is patch
ok 67 - setup expect
ok 68 - sendemail.cc set
ok 69 - setup expect
ok 70 - sendemail.cc unset
ok 71 - setup expect
ok 72 - sendemail.cccmd
ok 73 - setup expect
ok 74 - --suppress-cc=all
ok 75 - setup expect
ok 76 - --suppress-cc=body
ok 77 - setup expect
ok 78 - --suppress-cc=body --suppress-cc=cccmd
ok 79 - setup expect
ok 80 - --suppress-cc=sob
ok 81 - setup expect
ok 82 - --suppress-cc=bodycc
ok 83 - setup expect
ok 84 - --suppress-cc=cc
ok 85 - --confirm=always
ok 86 - --confirm=auto
ok 87 - --confirm=cc
ok 88 - --confirm=compose
ok 89 - confirm by default (due to cc)
ok 90 - confirm by default (due to --compose)
ok 91 - confirm detects EOF (inform assumes y)
ok 92 - confirm detects EOF (auto causes failure)
ok 93 - confirm does not loop forever
ok 94 - utf8 Cc is rfc2047 encoded
ok 95 - --compose adds MIME for utf8 body
ok 96 - --compose respects user mime type
ok 97 - --compose adds MIME for utf8 subject
ok 98 - utf8 author is correctly passed on
ok 99 - utf8 sender is not duplicated
ok 100 - setup expect for cc list
ok 101 - cc list is sanitized
ok 102 - sendemail.composeencoding works
ok 103 - --compose-encoding works
ok 104 - --compose-encoding overrides sendemail.composeencoding
ok 105 - --compose-encoding adds correct MIME for subject
ok 106 - detects ambiguous reference/file conflict
ok 107 - feed two files
ok 108 - in-reply-to but no threading
ok 109 - no in-reply-to and no threading
ok 110 - threading but no chain-reply-to
ok 111 - override in-reply-to if no threading
ok 112 - sendemail.to works
ok 113 - setup sendemail.identity
ok 114 - sendemail.identity: reads the correct identity config
ok 115 - sendemail.identity: identity overrides sendemail.identity
ok 116 - sendemail.identity: --no-identity clears previous identity
ok 117 - sendemail.identity: bool identity variable existence overrides
ok 118 - sendemail.identity: bool variable fallback
ok 119 - sendemail.identity: bool variable without a value
ok 120 - --no-to overrides sendemail.to
ok 121 - sendemail.cc works
ok 122 - --no-cc overrides sendemail.cc
ok 123 - sendemail.bcc works
ok 124 - --no-bcc overrides sendemail.bcc
ok 125 - patches To headers are used by default
ok 126 - patches To headers are appended to
ok 127 - To headers from files reset each patch
ok 128 - setup expect
ok 129 - setup expect
ok 130 - ASCII subject is not RFC2047 quoted
ok 131 - setup expect
ok 132 - asks about and fixes 8bit encodings
ok 133 - sendemail.8bitEncoding works
ok 134 - sendemail.8bitEncoding in .git/config overrides --global .gitconfig
ok 135 - --8bit-encoding overrides sendemail.8bitEncoding
ok 136 - setup expect
ok 137 - setup expect
ok 138 - --8bit-encoding also treats subject
ok 139 - setup expect
ok 140 - --transfer-encoding overrides sendemail.transferEncoding
ok 141 - sendemail.transferEncoding via config
ok 142 - sendemail.transferEncoding via cli
ok 143 - setup expect
ok 144 - 8-bit and sendemail.transferencoding=quoted-printable
ok 145 - setup expect
ok 146 - 8-bit and sendemail.transferencoding=base64
ok 147 - setup expect
ok 148 - convert from quoted-printable to base64
ok 149 - setup expect
ok 150 - setup expect
ok 151 - CRLF and sendemail.transferencoding=quoted-printable
ok 152 - setup expect
ok 153 - CRLF and sendemail.transferencoding=base64
ok 154 - refusing to send cover letter template
ok 155 - --force sends cover letter template anyway
ok 156 - to-cover adds To to all mail
ok 157 - cc-cover adds Cc to all mail
ok 158 - tocover adds To to all mail
ok 159 - cccover adds Cc to all mail
ok 160 - escaped quotes in sendemail.aliasfiletype=mutt
ok 161 - sendemail.aliasfiletype=mailrc
ok 162 - sendemail.aliasesfile=~/.mailrc
ok 163 - --dump-aliases sendmail format
ok 164 - --dump-aliases mutt format
ok 165 - --dump-aliases mailrc format
ok 166 - --dump-aliases pine format
ok 167 - --dump-aliases gnus format
ok 168 - --dump-aliases must be used alone
ok 169 - --translate-aliases sendmail format
ok 170 - --translate-aliases mutt format
ok 171 - --translate-aliases mailrc format
ok 172 - --translate-aliases pine format
ok 173 - --translate-aliases gnus format
ok 174 - --translate-aliases passes valid addresses through
ok 175 - --translate-aliases passes unknown aliases through
ok 176 - aliases and sendemail.identity
ok 177 - sendemail.aliasfiletype=sendmail
ok 178 - sendmail aliases line folding
ok 179 - sendmail aliases tolerate bogus line folding
ok 180 - sendmail aliases empty
ok 181 - alias support in To header
ok 182 - alias support in Cc header
ok 183 - tocmd works with aliases
ok 184 - cccmd works with aliases
ok 185 - --[no-]xmailer without any configuration
ok 186 - --[no-]xmailer with sendemail.xmailer=true
ok 187 - --[no-]xmailer with sendemail.xmailer
ok 188 - --[no-]xmailer with sendemail.xmailer=false
ok 189 - --[no-]xmailer with sendemail.xmailer=
ok 190 - setup expected-list
ok 191 - use email list in --cc --to and --bcc
ok 192 - aliases work with email list
ok 193 - leading and trailing whitespaces are removed
ok 194 - mailmap support with --to
ok 195 - sendemail.mailmap configuration
ok 196 - sendemail.mailmap.file configuration
ok 197 - sendemail.mailmap identity overrides configuration
ok 198 - --no-mailmap overrides configuration
ok 199 - mailmap support in To header
ok 200 - mailmap support in Cc header
ok 201 - test using command name with --sendmail-cmd
ok 202 - test using arguments with --sendmail-cmd
ok 203 - test shell expression with --sendmail-cmd
ok 204 - set up in-reply-to/references patches
ok 205 - patch reply headers correct with --no-thread
ok 206 - cmdline in-reply-to used with --no-thread
ok 207 - invoke hook
ok 208 - --validate hook allows counting of messages
ok 209 - test that send-email works outside a repo
ok 210 - send-email relays -v 3 to format-patch
ok 211 - test that sendmail config is rejected
ok 212 - test that sendmail config rejection is specific
ok 213 - test forbidSendmailVariables behavior override
ok 214 - --compose handles lowercase headers
ok 215 - --compose handles to headers
# passed all 215 test(s)
1..215
ok 8 - non-fast-forward rebase refuses to write commits
ok 9 - fast-forward rebase does not care about ident (interactive)
ok 10 - non-fast-forward rebase refuses to write commits (interactive)
ok 11 - noop interactive rebase does not care about ident
ok 12 - author.name overrides user.name
ok 13 - author.email overrides user.email
ok 14 - committer.name overrides user.name
ok 15 - committer.email overrides user.email
ok 16 - author and committer environment variables override config settings
# passed all 16 test(s)
1..16
make aggregate-results
make[2]: Entering directory '/tmp/src/git-2.49.0/t'

missing prereq: !LONG_IS_64BIT !PCRE !PTHREADS AUTOIDENT BUILTIN_ADOC_CHECKOUT__WORKER BUILTIN_ADOC_MERGE_OURS BUILTIN_ADOC_MERGE_RECURSIVE BUILTIN_ADOC_MERGE_RECURSIVE_OURS BUILTIN_ADOC_MERGE_RECURSIVE_THEIRS BUILTIN_ADOC_MERGE_SUBTREE BUILTIN_ADOC_PICKAXE BUILTIN_ADOC_SUBMODULE__HELPER BUILTIN_ADOC_UPLOAD_ARCHIVE__WRITER CASE_INSENSITIVE_FS EXPENSIVE FSMONITOR_DAEMON GETTEXT GETTEXT_ISO_LOCALE GETTEXT_LOCALE GPG GPG2 GPGSM GPGSSH GPGSSH_VERIFYTIME GZIP JGIT MB_REGEX MINGW NATIVE_CRLF PERLJSON REGEX_LOCALE RFC1991 RUNTIME_PREFIX SETFACL SYMLINKS_WINDOWS TAR_NEEDS_PAX_FALLBACK TTY UNZIP_CONVERT UNZIP_ZIP64_SUPPORT UTF8_NFD_TO_NFC WINDOWS ZIPINFO

fixed   0
success 29417
failed  0
broken  264
total   30476
make[2]: Leaving directory '/tmp/src/git-2.49.0/t'
make clean
make[2]: Entering directory '/tmp/src/git-2.49.0/t'
rm -f -r 'chainlinttmp'
rm -f -r 'trash directory'.*
rm -f -r valgrind/bin
rm -f -r 'test-results'
rm -f -r mesontmp
rm -f .prove
make[2]: Leaving directory '/tmp/src/git-2.49.0/t'
make[1]: Leaving directory '/tmp/src/git-2.49.0/t'
make: Leaving directory '/tmp/src/git-2.49.0/t'
>>> git: Entering fakeroot...
install -d -m 755 '/tmp/pkg/git/usr/share/man/man3'
(cd perl/build/man/man3 && tar cf - .) | \
(cd '/tmp/pkg/git/usr/share/man/man3' && umask 022 && tar xof -)
install -d -m 755 '/tmp/pkg/git/usr/share/gitweb'
make -C Documentation install-man
install -m 755 gitweb/gitweb.cgi '/tmp/pkg/git/usr/share/gitweb'
install -d -m 755 '/tmp/pkg/git/usr/share/gitweb/static'
install -m 644 gitweb/static/gitweb.js gitweb/static/gitweb.css gitweb/static/git-logo.png gitweb/static/git-favicon.png \
	'/tmp/pkg/git/usr/share/gitweb/static'
    SUBDIR git-gui
make[1]: Entering directory '/tmp/src/git-2.49.0/Documentation'
    GEN asciidoc.conf
    SUBDIR gitk-git
    SUBDIR templates
install -d -m 755 /tmp/pkg/git/usr/share/man/man1
install -d -m 755 /tmp/pkg/git/usr/share/man/man5
install -d -m 755 /tmp/pkg/git/usr/share/man/man7
install -m 644 git-add.1 git-am.1 git-annotate.1 git-apply.1 git-archimport.1 git-archive.1 git-backfill.1 git-bisect.1 git-blame.1 git-branch.1 git-bugreport.1 git-bundle.1 git-cat-file.1 git-check-attr.1 git-check-ignore.1 git-check-mailmap.1 git-check-ref-format.1 git-checkout-index.1 git-checkout.1 git-cherry-pick.1 git-cherry.1 git-citool.1 git-clean.1 git-clone.1 git-column.1 git-commit-graph.1 git-commit-tree.1 git-commit.1 git-config.1 git-count-objects.1 git-credential-cache--daemon.1 git-credential-cache.1 git-credential-store.1 git-credential.1 git-cvsexportcommit.1 git-cvsimport.1 git-cvsserver.1 git-daemon.1 git-describe.1 git-diagnose.1 git-diff-files.1 git-diff-index.1 git-diff-tree.1 git-diff.1 git-difftool.1 git-fast-export.1 git-fast-import.1 git-fetch-pack.1 git-fetch.1 git-filter-branch.1 git-fmt-merge-msg.1 git-for-each-ref.1 git-for-each-repo.1 git-format-patch.1 git-fsck-objects.1 git-fsck.1 git-fsmonitor--daemon.1 git-gc.1 git-get-tar-commit-id.1 git-grep.1 git-gui.1 git-hash-object.1 git-help.1 git-hook.1 git-http-backend.1 git-http-fetch.1 git-http-push.1 git-imap-send.1 git-index-pack.1 git-init-db.1 git-init.1 git-instaweb.1 git-interpret-trailers.1 git-log.1 git-ls-files.1 git-ls-remote.1 git-ls-tree.1 git-mailinfo.1 git-mailsplit.1 git-maintenance.1 git-merge-base.1 git-merge-file.1 git-merge-index.1 git-merge-one-file.1 git-merge-tree.1 git-merge.1 git-mergetool--lib.1 git-mergetool.1 git-mktag.1 git-mktree.1 git-multi-pack-index.1 git-mv.1 git-name-rev.1 git-notes.1 git-p4.1 git-pack-objects.1 git-pack-redundant.1 git-pack-refs.1 git-patch-id.1 git-prune-packed.1 git-prune.1 git-pull.1 git-push.1 git-quiltimport.1 git-range-diff.1 git-read-tree.1 git-rebase.1 git-receive-pack.1 git-reflog.1 git-refs.1 git-remote-ext.1 git-remote-fd.1 git-remote.1 git-repack.1 git-replace.1 git-replay.1 git-request-pull.1 git-rerere.1 git-reset.1 git-restore.1 git-rev-list.1 git-rev-parse.1 git-revert.1 git-rm.1 git-send-email.1 git-send-pack.1 git-sh-i18n--envsubst.1 git-sh-i18n.1 git-sh-setup.1 git-shell.1 git-shortlog.1 git-show-branch.1 git-show-index.1 git-show-ref.1 git-show.1 git-sparse-checkout.1 git-stage.1 git-stash.1 git-status.1 git-stripspace.1 git-submodule.1 git-svn.1 git-switch.1 git-symbolic-ref.1 git-tag.1 git-unpack-file.1 git-unpack-objects.1 git-update-index.1 git-update-ref.1 git-update-server-info.1 git-upload-archive.1 git-upload-pack.1 git-var.1 git-verify-commit.1 git-verify-pack.1 git-verify-tag.1 git-version.1 git-web--browse.1 git-whatchanged.1 git-worktree.1 git-write-tree.1 git.1 gitk.1 gitweb.1 scalar.1 /tmp/pkg/git/usr/share/man/man1
install -d -m 755 '/tmp/pkg/git/usr/bin'
install -d -m 755 '/tmp/pkg/git/usr/libexec/git-core'
install   git-daemon git-http-backend git-imap-send git-sh-i18n--envsubst git-shell git-http-fetch git-http-push git-remote-http git-remote-https git-remote-ftp git-remote-ftps '/tmp/pkg/git/usr/libexec/git-core'
install -m 644 gitattributes.5 gitformat-bundle.5 gitformat-chunk.5 gitformat-commit-graph.5 gitformat-index.5 gitformat-pack.5 gitformat-signature.5 githooks.5 gitignore.5 gitmailmap.5 gitmodules.5 gitprotocol-capabilities.5 gitprotocol-common.5 gitprotocol-http.5 gitprotocol-pack.5 gitprotocol-v2.5 gitrepository-layout.5 gitweb.conf.5 /tmp/pkg/git/usr/share/man/man5
install -m 644 gitcli.7 gitcore-tutorial.7 gitcredentials.7 gitcvs-migration.7 gitdiffcore.7 giteveryday.7 gitfaq.7 gitglossary.7 gitpacking.7 gitnamespaces.7 gitremote-helpers.7 gitrevisions.7 gitsubmodules.7 gittutorial-2.7 gittutorial.7 gitworkflows.7 /tmp/pkg/git/usr/share/man/man7
make[1]: Leaving directory '/tmp/src/git-2.49.0/Documentation'
install git-difftool--helper git-filter-branch git-merge-octopus git-merge-one-file git-merge-resolve git-mergetool git-quiltimport git-request-pull git-submodule git-web--browse git-archimport git-cvsexportcommit git-cvsimport git-cvsserver git-send-email git-svn git-p4 git-instaweb '/tmp/pkg/git/usr/libexec/git-core'
install -m 644 git-mergetool--lib git-sh-i18n git-sh-setup '/tmp/pkg/git/usr/libexec/git-core'
install  git scalar git-receive-pack git-shell git-upload-archive git-upload-pack '/tmp/pkg/git/usr/bin'
install git-cvsserver '/tmp/pkg/git/usr/bin'
make -C templates DESTDIR='/tmp/pkg/git' install
make[1]: Entering directory '/tmp/src/git-2.49.0/templates'
install -d -m 755 '/tmp/pkg/git/usr/share/git-core/templates'
(cd blt && tar cf - .) | \
(cd '/tmp/pkg/git/usr/share/git-core/templates' && umask 022 && tar xof -)
make[1]: Leaving directory '/tmp/src/git-2.49.0/templates'
install -d -m 755 '/tmp/pkg/git/usr/libexec/git-core/mergetools'
install -m 644 mergetools/* '/tmp/pkg/git/usr/libexec/git-core/mergetools'
install -d -m 755 '/tmp/pkg/git/usr/share/perl5/vendor_perl'
(cd perl/build/lib && tar cf - .) | \
(cd '/tmp/pkg/git/usr/share/perl5/vendor_perl' && umask 022 && tar xof -)
make -C gitk-git install
make[1]: Entering directory '/tmp/src/git-2.49.0/gitk-git'
install -d -m 755 '/tmp/pkg/git/usr/bin'
install -m 755 gitk-wish '/tmp/pkg/git/usr/bin'/gitk
install -d -m 755 '/tmp/pkg/git/usr/share/gitk/lib/msgs'
install -m 644 po/bg.msg '/tmp/pkg/git/usr/share/gitk/lib/msgs' &&  install -m 644 po/ca.msg '/tmp/pkg/git/usr/share/gitk/lib/msgs' &&  install -m 644 po/de.msg '/tmp/pkg/git/usr/share/gitk/lib/msgs' &&  install -m 644 po/es.msg '/tmp/pkg/git/usr/share/gitk/lib/msgs' &&  install -m 644 po/fr.msg '/tmp/pkg/git/usr/share/gitk/lib/msgs' &&  install -m 644 po/hu.msg '/tmp/pkg/git/usr/share/gitk/lib/msgs' &&  install -m 644 po/it.msg '/tmp/pkg/git/usr/share/gitk/lib/msgs' &&  install -m 644 po/ja.msg '/tmp/pkg/git/usr/share/gitk/lib/msgs' &&  install -m 644 po/pt_br.msg '/tmp/pkg/git/usr/share/gitk/lib/msgs' &&  install -m 644 po/pt_pt.msg '/tmp/pkg/git/usr/share/gitk/lib/msgs' &&  install -m 644 po/ru.msg '/tmp/pkg/git/usr/share/gitk/lib/msgs' &&  install -m 644 po/sv.msg '/tmp/pkg/git/usr/share/gitk/lib/msgs' &&  install -m 644 po/vi.msg '/tmp/pkg/git/usr/share/gitk/lib/msgs' &&  install -m 644 po/zh_cn.msg '/tmp/pkg/git/usr/share/gitk/lib/msgs' && true
make[1]: Leaving directory '/tmp/src/git-2.49.0/gitk-git'
make -C git-gui gitexecdir='/usr/libexec/git-core' install
make[1]: Entering directory '/tmp/src/git-2.49.0/git-gui'
  DEST /tmp/pkg/git/usr/libexec/git-core
    INSTALL 755 git-gui
    INSTALL 755 git-gui--askpass
    LINK        git-citool -> git-gui
  DEST /tmp/pkg/git/usr/share/git-gui/lib
    INSTALL 644 tclIndex
    INSTALL 644 about.tcl
    INSTALL 644 blame.tcl
    INSTALL 644 branch.tcl
    INSTALL 644 branch_checkout.tcl
    INSTALL 644 branch_create.tcl
    INSTALL 644 branch_delete.tcl
    INSTALL 644 branch_rename.tcl
    INSTALL 644 browser.tcl
    INSTALL 644 checkout_op.tcl
    INSTALL 644 choose_font.tcl
    INSTALL 644 choose_repository.tcl
    INSTALL 644 choose_rev.tcl
    INSTALL 644 chord.tcl
    INSTALL 644 class.tcl
    INSTALL 644 commit.tcl
    INSTALL 644 console.tcl
    INSTALL 644 database.tcl
    INSTALL 644 date.tcl
    INSTALL 644 diff.tcl
    INSTALL 644 encoding.tcl
    INSTALL 644 error.tcl
    INSTALL 644 index.tcl
    INSTALL 644 line.tcl
    INSTALL 644 logo.tcl
    INSTALL 644 merge.tcl
    INSTALL 644 mergetool.tcl
    INSTALL 644 option.tcl
    INSTALL 644 remote.tcl
    INSTALL 644 remote_add.tcl
    INSTALL 644 remote_branch_delete.tcl
    INSTALL 644 search.tcl
    INSTALL 644 shortcut.tcl
    INSTALL 644 spellcheck.tcl
    INSTALL 644 sshkey.tcl
    INSTALL 644 status_bar.tcl
    INSTALL 644 themed.tcl
    INSTALL 644 tools.tcl
    INSTALL 644 tools_dlg.tcl
    INSTALL 644 transport.tcl
    INSTALL 644 win32.tcl
    INSTALL 644 git-gui.ico
    INSTALL 644 win32_shortcut.js
  DEST /tmp/pkg/git/usr/share/git-gui/lib/msgs
    INSTALL 644 bg.msg
    INSTALL 644 de.msg
    INSTALL 644 el.msg
    INSTALL 644 fr.msg
    INSTALL 644 hu.msg
    INSTALL 644 it.msg
    INSTALL 644 ja.msg
    INSTALL 644 nb.msg
    INSTALL 644 pt_br.msg
    INSTALL 644 pt_pt.msg
    INSTALL 644 ru.msg
    INSTALL 644 sv.msg
    INSTALL 644 vi.msg
    INSTALL 644 zh_cn.msg
make[1]: Leaving directory '/tmp/src/git-2.49.0/git-gui'
bindir=$(cd '/tmp/pkg/git/usr/bin' && pwd) && \
execdir=$(cd '/tmp/pkg/git/usr/libexec/git-core' && pwd) && \
destdir_from_execdir_SQ=$(echo 'libexec/git-core' | sed -e 's|[^/][^/]*|..|g') && \
{ test "$bindir/" = "$execdir/" || \
  for p in git scalar git-shell git-cvsserver; do \
	rm -f "$execdir/$p" && \
	test -n "1" && \
	ln -s "$destdir_from_execdir_SQ/bin/$p" "$execdir/$p" || \
	{ test -z "" && \
	  ln "$bindir/$p" "$execdir/$p" 2>/dev/null || \
	  cp "$bindir/$p" "$execdir/$p" || exit; } \
  done; \
} && \
for p in git-receive-pack git-upload-archive git-upload-pack; do \
	rm -f "$bindir/$p" && \
	test -n "1" && \
	ln -s "git" "$bindir/$p" || \
	{ test -z "" && \
	  ln "$bindir/git" "$bindir/$p" 2>/dev/null || \
	  ln -s "git" "$bindir/$p" 2>/dev/null || \
	  cp "$bindir/git" "$bindir/$p" || exit; }; \
done && \
for p in git-add git-am git-annotate git-apply git-archive git-backfill git-bisect git-blame git-branch git-bugreport git-bundle git-cat-file git-check-attr git-check-ignore git-check-mailmap git-check-ref-format git-checkout--worker git-checkout-index git-checkout git-clean git-clone git-column git-commit-graph git-commit-tree git-commit git-config git-count-objects git-credential-cache--daemon git-credential-cache git-credential-store git-credential git-describe git-diagnose git-diff-files git-diff-index git-diff-tree git-diff git-difftool git-fast-export git-fast-import git-fetch-pack git-fetch git-fmt-merge-msg git-for-each-ref git-for-each-repo git-fsck git-fsmonitor--daemon git-gc git-get-tar-commit-id git-grep git-hash-object git-help git-hook git-index-pack git-init-db git-interpret-trailers git-log git-ls-files git-ls-remote git-ls-tree git-mailinfo git-mailsplit git-merge-base git-merge-file git-merge-index git-merge-ours git-merge-recursive git-merge-tree git-merge git-mktag git-mktree git-multi-pack-index git-mv git-name-rev git-notes git-pack-objects git-pack-redundant git-pack-refs git-patch-id git-prune-packed git-prune git-pull git-push git-range-diff git-read-tree git-rebase git-receive-pack git-reflog git-refs git-remote-ext git-remote-fd git-remote git-repack git-replace git-replay git-rerere git-reset git-rev-list git-rev-parse git-revert git-rm git-send-pack git-shortlog git-show-branch git-show-index git-show-ref git-sparse-checkout git-stash git-stripspace git-submodule--helper git-symbolic-ref git-tag git-unpack-file git-unpack-objects git-update-index git-update-ref git-update-server-info git-upload-archive git-upload-pack git-var git-verify-commit git-verify-pack git-verify-tag git-worktree git-write-tree git-cherry git-cherry-pick git-format-patch git-fsck-objects git-init git-maintenance git-merge-subtree git-restore git-show git-stage git-status git-switch git-version git-whatchanged; do \
	rm -f "$execdir/$p" && \
	if test -z ""; \
	then \
		test -n "1" && \
		ln -s "$destdir_from_execdir_SQ/bin/git" "$execdir/$p" || \
		{ test -z "" && \
		  ln "$execdir/git" "$execdir/$p" 2>/dev/null || \
		  ln -s "git" "$execdir/$p" 2>/dev/null || \
		  cp "$execdir/git" "$execdir/$p" || exit; }; \
	fi \
done && \
remote_curl_aliases="git-remote-https git-remote-ftp git-remote-ftps" && \
for p in $remote_curl_aliases; do \
	rm -f "$execdir/$p" && \
	test -n "1" && \
	ln -s "git-remote-http" "$execdir/$p" || \
	{ test -z "" && \
	  ln "$execdir/git-remote-http" "$execdir/$p" 2>/dev/null || \
	  ln -s "git-remote-http" "$execdir/$p" 2>/dev/null || \
	  cp "$execdir/git-remote-http" "$execdir/$p" || exit; } \
done
make: Entering directory '/tmp/src/git-2.49.0/contrib/subtree'
install -d -m 755 /tmp/pkg/git/usr/libexec/git-core
install -m 755 git-subtree /tmp/pkg/git/usr/libexec/git-core
make: Leaving directory '/tmp/src/git-2.49.0/contrib/subtree'
>>> git-dbg*: Running split function dbg...
>>> git-dbg*: Preparing subpackage git-dbg...
>>> git-dbg*: Stripping binaries
>>> git-dbg*: Running postcheck for git-dbg
>>> git-bash-completion*: Running split function bashcomp...
'usr/share/bash-completion/completions' -> '/tmp/pkg/git-bash-completion/usr/share/bash-completion/completions'
>>> git-bash-completion*: Preparing subpackage git-bash-completion...
>>> git-bash-completion*: Running postcheck for git-bash-completion
>>> git-prompt*: Running split function prompt...
'usr/share/git-core/git-prompt.sh' -> '/tmp/pkg/git-prompt/usr/share/git-core/git-prompt.sh'
>>> git-prompt*: Preparing subpackage git-prompt...
>>> git-prompt*: Running postcheck for git-prompt
>>> perl-git-svn*: Running split function _perl_git_svn...
'usr/share/perl5/vendor_perl/Git/SVN' -> '/tmp/pkg/perl-git-svn/usr/share/perl5/vendor_perl/Git/SVN'
'usr/share/perl5/vendor_perl/Git/SVN.pm' -> '/tmp/pkg/perl-git-svn/usr/share/perl5/vendor_perl/Git/SVN.pm'
>>> perl-git-svn*: Preparing subpackage perl-git-svn...
>>> perl-git-svn*: Running postcheck for perl-git-svn
>>> perl-git*: Running split function _perl_git...
'usr/share/perl5/vendor_perl' -> '/tmp/pkg/perl-git/usr/share/perl5/vendor_perl'
>>> perl-git*: Preparing subpackage perl-git...
>>> perl-git*: Running postcheck for perl-git
>>> git-svn*: Running split function svn...
'usr/libexec/git-core/git-svn' -> '/tmp/pkg/git-svn/usr/libexec/git-core/git-svn'
>>> git-svn*: Preparing subpackage git-svn...
>>> git-svn*: Running postcheck for git-svn
>>> git-email*: Running split function email...
'usr/libexec/git-core/git-send-email' -> '/tmp/pkg/git-email/usr/libexec/git-core/git-send-email'
'usr/libexec/git-core/git-imap-send' -> '/tmp/pkg/git-email/usr/libexec/git-core/git-imap-send'
>>> git-email*: Preparing subpackage git-email...
>>> git-email*: Stripping binaries
>>> git-email*: Running postcheck for git-email
>>> git-fast-import*: Running split function _fast_import...
'usr/libexec/git-core/git-fast-import' -> '/tmp/pkg/git-fast-import/usr/libexec/git-core/git-fast-import'
>>> git-fast-import*: Preparing subpackage git-fast-import...
>>> git-fast-import*: Running postcheck for git-fast-import
>>> git-cvs*: Running split function cvs...
'usr/bin/git-cvsserver' -> '/tmp/pkg/git-cvs/usr/bin/git-cvsserver'
'usr/libexec/git-core/git-cvsexportcommit' -> '/tmp/pkg/git-cvs/usr/libexec/git-core/git-cvsexportcommit'
'usr/libexec/git-core/git-cvsimport' -> '/tmp/pkg/git-cvs/usr/libexec/git-core/git-cvsimport'
'usr/libexec/git-core/git-cvsserver' -> '/tmp/pkg/git-cvs/usr/libexec/git-core/git-cvsserver'
>>> git-cvs*: Preparing subpackage git-cvs...
>>> git-cvs*: Running postcheck for git-cvs
>>> git-daemon*: Running split function daemon...
'usr/libexec/git-core/git-daemon' -> '/tmp/pkg/git-daemon/usr/libexec/git-core/git-daemon'
'usr/libexec/git-core/git-http-backend' -> '/tmp/pkg/git-daemon/usr/libexec/git-core/git-http-backend'
'usr/libexec/git-core/git-shell' -> '/tmp/pkg/git-daemon/usr/libexec/git-core/git-shell'
'var/git' -> '/tmp/pkg/git-daemon/var/git'
>>> git-daemon*: Preparing subpackage git-daemon...
>>> git-daemon*: Stripping binaries
>>> git-daemon*: Running postcheck for git-daemon
>>> git-daemon-openrc*: Running split function daemon_openrc...
'etc/conf.d' -> '/tmp/pkg/git-daemon-openrc/etc/conf.d'
'etc/init.d' -> '/tmp/pkg/git-daemon-openrc/etc/init.d'
>>> git-daemon-openrc*: Preparing subpackage git-daemon-openrc...
>>> git-daemon-openrc*: Running postcheck for git-daemon-openrc
>>> git-scalar*: Running split function scalar...
'usr/bin/scalar' -> '/tmp/pkg/git-scalar/usr/bin/scalar'
'usr/libexec/git-core/scalar' -> '/tmp/pkg/git-scalar/usr/libexec/git-core/scalar'
>>> git-scalar*: Preparing subpackage git-scalar...
>>> git-scalar*: Stripping binaries
>>> git-scalar*: Running postcheck for git-scalar
>>> git-gitweb*: Running split function gitweb...
'usr/libexec/git-core/git-instaweb' -> '/tmp/pkg/git-gitweb/usr/libexec/git-core/git-instaweb'
'usr/share/gitweb' -> '/tmp/pkg/git-gitweb/usr/share/gitweb'
>>> git-gitweb*: Preparing subpackage git-gitweb...
>>> git-gitweb*: Running postcheck for git-gitweb
>>> git-subtree*: Running split function subtree...
'usr/libexec/git-core/git-subtree' -> '/tmp/pkg/git-subtree/usr/libexec/git-core/git-subtree'
>>> git-subtree*: Preparing subpackage git-subtree...
>>> git-subtree*: Running postcheck for git-subtree
>>> git-diff-highlight*: Running split function diff_highlight...
'usr/bin/diff-highlight' -> '/tmp/pkg/git-diff-highlight/usr/bin/diff-highlight'
>>> git-diff-highlight*: Preparing subpackage git-diff-highlight...
>>> git-diff-highlight*: Running postcheck for git-diff-highlight
>>> git-perl*: Running split function _git_perl...
'./usr/libexec/git-core/git-archimport' -> '/tmp/pkg/git-perl/./usr/libexec/git-core/git-archimport'
'./usr/share/git-core/templates/hooks/fsmonitor-watchman.sample' -> '/tmp/pkg/git-perl/./usr/share/git-core/templates/hooks/fsmonitor-watchman.sample'
>>> git-perl*: Preparing subpackage git-perl...
>>> git-perl*: Running postcheck for git-perl
>>> git-init-template*: Running split function _init_template...
>>> git-init-template*: Preparing subpackage git-init-template...
>>> git-init-template*: Running postcheck for git-init-template
>>> git-doc*: Running split function doc...
'usr/share/man' -> '/tmp/pkg/git-doc/usr/share/man'
>>> git-doc*: Preparing subpackage git-doc...
>>> git-doc*: Running postcheck for git-doc
>>> git-p4*: Running split function p4...
'usr/libexec/git-core/git-p4' -> '/tmp/pkg/git-p4/usr/libexec/git-core/git-p4'
'usr/libexec/git-core/mergetools/p4merge' -> '/tmp/pkg/git-p4/usr/libexec/git-core/mergetools/p4merge'
>>> git-p4*: Preparing subpackage git-p4...
>>> git-p4*: Running postcheck for git-p4
>>> git-gui*: Running split function gui...
'usr/share/git-gui' -> '/tmp/pkg/git-gui/usr/share/git-gui'
'usr/libexec/git-core/git-citool' -> '/tmp/pkg/git-gui/usr/libexec/git-core/git-citool'
'usr/libexec/git-core/git-gui' -> '/tmp/pkg/git-gui/usr/libexec/git-core/git-gui'
'usr/libexec/git-core/git-gui--askpass' -> '/tmp/pkg/git-gui/usr/libexec/git-core/git-gui--askpass'
>>> git-gui*: Preparing subpackage git-gui...
>>> git-gui*: Running postcheck for git-gui
>>> git-gitk*: Running split function gitk...
'usr/share/gitk' -> '/tmp/pkg/git-gitk/usr/share/gitk'
'usr/bin/gitk' -> '/tmp/pkg/git-gitk/usr/bin/gitk'
>>> git-gitk*: Preparing subpackage git-gitk...
>>> git-gitk*: Running postcheck for git-gitk
>>> git-subtree-doc*: Running split function subtree_doc...
make -C ../../ GIT-VERSION-FILE
make[1]: Entering directory '/tmp/src/git-2.49.0'
make[1]: 'GIT-VERSION-FILE' is up to date.
make[1]: Leaving directory '/tmp/src/git-2.49.0'
    GEN asciidoc.conf
asciidoc -b docbook -d manpage -f asciidoc.conf \
	 git-subtree.adoc
xmlto -m ../../Documentation/manpage-normal.xsl  man git-subtree.xml
install -d -m 755 /tmp/pkg/git-subtree-doc/usr/share/man/man1
install -m 644 git-subtree.1 /tmp/pkg/git-subtree-doc/usr/share/man/man1
>>> git-subtree-doc*: Preparing subpackage git-subtree-doc...
>>> git-subtree-doc*: Running postcheck for git-subtree-doc
>>> git-credential-libsecret*: Running split function credential_libsecret...
'usr/libexec/git-core/git-credential-libsecret' -> '/tmp/pkg/git-credential-libsecret/usr/libexec/git-core/git-credential-libsecret'
>>> git-credential-libsecret*: Preparing subpackage git-credential-libsecret...
>>> git-credential-libsecret*: Stripping binaries
>>> git-credential-libsecret*: Running postcheck for git-credential-libsecret
>>> git*: Running postcheck for git
>>> git*: Preparing package git...
>>> git*: Stripping binaries
>>> git-bash-completion*: Scanning shared objects
>>> git-credential-libsecret*: Scanning shared objects
>>> git-cvs*: Scanning shared objects
>>> git-daemon-openrc*: Scanning shared objects
>>> git-daemon*: Scanning shared objects
>>> git-dbg*: Scanning shared objects
>>> git-diff-highlight*: Scanning shared objects
>>> git-doc*: Scanning shared objects
>>> git-email*: Scanning shared objects
>>> git-fast-import*: Scanning shared objects
>>> git-gitk*: Scanning shared objects
>>> git-gitweb*: Scanning shared objects
>>> git-gui*: Scanning shared objects
>>> git-init-template*: Scanning shared objects
>>> git-p4*: Scanning shared objects
>>> git-perl*: Scanning shared objects
>>> git-prompt*: Scanning shared objects
>>> git-scalar*: Scanning shared objects
>>> git-subtree-doc*: Scanning shared objects
>>> git-subtree*: Scanning shared objects
>>> git-svn*: Scanning shared objects
>>> git*: Scanning shared objects
>>> perl-git-svn*: Scanning shared objects
>>> perl-git*: Scanning shared objects
>>> git-bash-completion*: Tracing dependencies...
>>> git-bash-completion*: Package size: 91.6 KB
>>> git-bash-completion*: Compressing data...
>>> git-bash-completion*: Create checksum...
>>> git-bash-completion*: Create git-bash-completion-2.49.0-r0.apk
>>> git-credential-libsecret*: Tracing dependencies...
	git=2.49.0-r0
	so:libc.musl-x86_64.so.1
	so:libglib-2.0.so.0
	so:libgobject-2.0.so.0
	so:libsecret-1.so.0
>>> git-credential-libsecret*: Package size: 17.9 KB
>>> git-credential-libsecret*: Compressing data...
>>> git-credential-libsecret*: Create checksum...
>>> git-credential-libsecret*: Create git-credential-libsecret-2.49.0-r0.apk
>>> git-cvs*: Tracing dependencies...
	perl
	perl-git=2.49.0-r0
	cvs
	perl-dbd-sqlite
>>> git-cvs*: Package size: 204.2 KB
>>> git-cvs*: Compressing data...
>>> git-cvs*: Create checksum...
>>> git-cvs*: Create git-cvs-2.49.0-r0.apk
>>> git-daemon-openrc*: Tracing dependencies...
	git-daemon=2.49.0-r0
>>> git-daemon-openrc*: Package size: 1.1 KB
>>> git-daemon-openrc*: Compressing data...
>>> git-daemon-openrc*: Create checksum...
>>> git-daemon-openrc*: Create git-daemon-openrc-2.49.0-r0.apk
>>> git-daemon*: Tracing dependencies...
	git=2.49.0-r0
	git=2.49.0-r0
	so:libc.musl-x86_64.so.1
	so:libpcre2-8.so.0
	so:libz.so.1
>>> git-daemon*: Package size: 1.2 MB
>>> git-daemon*: Compressing data...
>>> git-daemon*: Create checksum...
>>> git-daemon*: Create git-daemon-2.49.0-r0.apk
>>> git-dbg*: Tracing dependencies...
	!git-credential-libsecret<2.49.0-r0
	!git-credential-libsecret>2.49.0-r0
	!git-daemon<2.49.0-r0
	!git-daemon>2.49.0-r0
	!git-email<2.49.0-r0
	!git-email>2.49.0-r0
	!git-scalar<2.49.0-r0
	!git-scalar>2.49.0-r0
	!git<2.49.0-r0
	!git>2.49.0-r0
>>> git-dbg*: Package size: 49.0 MB
>>> git-dbg*: Compressing data...
>>> git-dbg*: Create checksum...
>>> git-dbg*: Create git-dbg-2.49.0-r0.apk
>>> git-diff-highlight*: Tracing dependencies...
	git=2.49.0-r0
	perl
>>> git-diff-highlight*: Package size: 7.1 KB
>>> git-diff-highlight*: Compressing data...
>>> git-diff-highlight*: Create checksum...
>>> git-diff-highlight*: Create git-diff-highlight-2.49.0-r0.apk
>>> git-doc*: Tracing dependencies...
>>> git-doc*: Package size: 1.1 MB
>>> git-doc*: Compressing data...
>>> git-doc*: Create checksum...
>>> git-doc*: Create git-doc-2.49.0-r0.apk
>>> git-email*: Tracing dependencies...
	perl
	perl-git=2.49.0-r0
	perl-net-smtp-ssl
	perl-authen-sasl
	so:libc.musl-x86_64.so.1
	so:libcrypto.so.3
	so:libcurl.so.4
	so:libpcre2-8.so.0
	so:libssl.so.3
	so:libz.so.1
>>> git-email*: Package size: 722.1 KB
>>> git-email*: Compressing data...
>>> git-email*: Create checksum...
>>> git-email*: Create git-email-2.49.0-r0.apk
>>> git-fast-import*: Tracing dependencies...
	git=2.49.0-r0
	git=2.49.0-r0
>>> git-fast-import*: Package size: 1.0 B
>>> git-fast-import*: Compressing data...
>>> git-fast-import*: Create checksum...
>>> git-fast-import*: Create git-fast-import-2.49.0-r0.apk
>>> git-gitk*: Tracing dependencies...
	git=2.49.0-r0
	tcl
	tk
>>> git-gitk*: Package size: 819.1 KB
>>> git-gitk*: Compressing data...
>>> git-gitk*: Create checksum...
>>> git-gitk*: Create git-gitk-2.49.0-r0.apk
>>> git-gitweb*: Tracing dependencies...
	git=2.49.0-r0
	perl
>>> git-gitweb*: Package size: 328.2 KB
>>> git-gitweb*: Compressing data...
>>> git-gitweb*: Create checksum...
>>> git-gitweb*: Create git-gitweb-2.49.0-r0.apk
>>> git-gui*: Tracing dependencies...
	git=2.49.0-r0
	tcl
	tk
>>> git-gui*: Package size: 1.4 MB
>>> git-gui*: Compressing data...
>>> git-gui*: Create checksum...
>>> git-gui*: Create git-gui-2.49.0-r0.apk
>>> git-init-template*: Tracing dependencies...
>>> git-init-template*: Package size: 20.9 KB
>>> git-init-template*: Compressing data...
>>> git-init-template*: Create checksum...
>>> git-init-template*: Create git-init-template-2.49.0-r0.apk
>>> git-p4*: Tracing dependencies...
	git=2.49.0-r0
	git-fast-import=2.49.0-r0
>>> git-p4*: Package size: 169.6 KB
>>> git-p4*: Compressing data...
>>> git-p4*: Create checksum...
>>> git-p4*: Create git-p4-2.49.0-r0.apk
>>> git-perl*: Tracing dependencies...
	git=2.49.0-r0
	perl-git=2.49.0-r0
	perl
>>> git-perl*: Package size: 40.8 KB
>>> git-perl*: Compressing data...
>>> git-perl*: Create checksum...
>>> git-perl*: Create git-perl-2.49.0-r0.apk
>>> git-prompt*: Tracing dependencies...
	git=2.49.0-r0
>>> git-prompt*: Package size: 20.8 KB
>>> git-prompt*: Compressing data...
>>> git-prompt*: Create checksum...
>>> git-prompt*: Create git-prompt-2.49.0-r0.apk
>>> git-scalar*: Tracing dependencies...
	git=2.49.0-r0
	so:libc.musl-x86_64.so.1
	so:libpcre2-8.so.0
	so:libz.so.1
>>> git-scalar*: Package size: 627.8 KB
>>> git-scalar*: Compressing data...
>>> git-scalar*: Create checksum...
>>> git-scalar*: Create git-scalar-2.49.0-r0.apk
>>> git-subtree-doc*: Tracing dependencies...
>>> git-subtree-doc*: Package size: 5.4 KB
>>> git-subtree-doc*: Compressing data...
>>> git-subtree-doc*: Create checksum...
>>> git-subtree-doc*: Create git-subtree-doc-2.49.0-r0.apk
>>> git-subtree*: Tracing dependencies...
	git=2.49.0-r0
>>> git-subtree*: Package size: 25.2 KB
>>> git-subtree*: Compressing data...
>>> git-subtree*: Create checksum...
>>> git-subtree*: Create git-subtree-2.49.0-r0.apk
>>> git-svn*: Tracing dependencies...
	perl
	perl-git-svn=2.49.0-r0
	perl-subversion
	perl-term-readkey
>>> git-svn*: Package size: 63.4 KB
>>> git-svn*: Compressing data...
>>> git-svn*: Create checksum...
>>> git-svn*: Create git-svn-2.49.0-r0.apk
>>> git*: Tracing dependencies...
	so:libc.musl-x86_64.so.1
	so:libcurl.so.4
	so:libexpat.so.1
	so:libpcre2-8.so.0
	so:libz.so.1
>>> git*: Package size: 6.4 MB
>>> git*: Compressing data...
>>> git*: Create checksum...
>>> git*: Create git-2.49.0-r0.apk
>>> perl-git-svn*: Tracing dependencies...
	git=2.49.0-r0
	perl-git=2.49.0-r0
>>> perl-git-svn*: Package size: 155.6 KB
>>> perl-git-svn*: Compressing data...
>>> perl-git-svn*: Create checksum...
>>> perl-git-svn*: Create perl-git-svn-2.49.0-r0.apk
>>> perl-git*: Tracing dependencies...
	git=2.49.0-r0
	perl-error
>>> perl-git*: Package size: 89.5 KB
>>> perl-git*: Compressing data...
>>> perl-git*: Create checksum...
>>> perl-git*: Create perl-git-2.49.0-r0.apk
>>> git: Updating the main/x86_64 repository index...
>>> git: Signing the index...
>>> git: Cleaning up srcdir
>>> git: Cleaning up build chroot
>>> git: Cleaning up pkgdir
