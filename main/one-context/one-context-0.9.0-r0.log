pigz: not found
>>> one-context: Building main/one-context 0.9.0-r0 (using abuild 3.14.1-r4) started Fri, 23 May 2025 03:19:28 +0000
>>> one-context: Validating /home/packager/aports/main/one-context/APKBUILD...
>>> one-context: Analyzing dependencies...
>>> one-context: Installing for build: build-base blkid partx sfdisk
(1/9) Installing libeconf (0.6.3-r0)
(2/9) Installing libblkid (2.40.4-r1)
(3/9) Installing blkid (2.40.4-r1)
(4/9) Installing libsmartcols (2.40.4-r1)
(5/9) Installing partx (2.40.4-r1)
(6/9) Installing libuuid (2.40.4-r1)
(7/9) Installing libfdisk (2.40.4-r1)
(8/9) Installing sfdisk (2.40.4-r1)
(9/9) Installing .makedepends-one-context (20250523.031932)
Executing busybox-1.37.0-r12.trigger
OK: 314 MiB in 123 packages
>>> one-context: Cleaning up srcdir
>>> one-context: Cleaning up pkgdir
>>> one-context: Cleaning up tmpdir
>>> one-context: Fetching https://github.com/jirutka/one-context/archive/v0.9.0/one-context-0.9.0.tar.gz
Connecting to github.com (140.82.121.3:443)
Connecting to codeload.github.com (140.82.121.9:443)
saving to '/var/cache/distfiles/one-context-0.9.0.tar.gz.part'
one-context-0.9.0.ta 100% |********************************| 10072  0:00:00 ETA
'/var/cache/distfiles/one-context-0.9.0.tar.gz.part' saved
>>> one-context: Fetching https://github.com/jirutka/one-context/archive/v0.9.0/one-context-0.9.0.tar.gz
>>> one-context: Checking sha512sums...
one-context-0.9.0.tar.gz: OK
>>> one-context: Unpacking /var/cache/distfiles/one-context-0.9.0.tar.gz...
(command.CommandList
  children:[
    (C (w <Lit_Chars set>) (w <Lit_Chars -eu>))
    (command.ShFunction
      name_tok:<Lit_Chars dev_size_mb>
      name:dev_size_mb
      body:(BraceGroup
        left:<Lit_LBrace "{">
        children:[
          (C (w <Lit_Chars local>) (w <Lit_VarLike "dev_path="> (DQ ($ 1))))
          (C
            (w <Lit_Chars local>)
            (w
              <Lit_VarLike "bytes=">
              (DQ
                (CommandSub
                  left_token:<Left_DollarParen "$(">
                  child:(C
                    (w <Lit_Chars blockdev>)
                    (w <Lit_Chars --getsize64>)
                    (w (DQ ($ dev_path)))
                  )
                  right:<Eof_RParen ")">
                )
              )
            )
          )
          (C
            (w <Lit_Chars expr>)
            (w ($ bytes))
            (w <Lit_Slash />)
            (w <Lit_Chars 1024>)
            (w <Lit_Slash />)
            (w <Lit_Chars 1024>)
          )
        ]
        right:<Lit_RBrace "}">
      )
    )
    (command.ShFunction
      name_tok:<Lit_Chars is_partition>
      name:is_partition
      body:(BraceGroup
        left:<Lit_LBrace "{">
        children:[
          (C (w <Lit_Chars local>) (w <Lit_VarLike "dev_path="> (DQ ($ 1))))
          (C
            (w <Lit_Chars test>)
            (w <Lit_Chars -e>)
            (w
              (DQ
                <Lit_Chars /sys/class/block/>
                (BracedVarSub
                  left:<Left_DollarBrace "${">
                  name_tok:<VSub_Name dev_path>
                  var_name:dev_path
                  suffix_op:(suffix_op.Unary
                    op:<VOp1_DPound "##">
                    arg_word:(w <Lit_Other "*"> <Lit_Slash />)
                  )
                  right:<Right_DollarBrace "}">
                )
                <Lit_Chars /partition>
              )
            )
          )
        ]
        right:<Lit_RBrace "}">
      )
    )
    (command.ShFunction
      name_tok:<Lit_Chars is_last_partition>
      name:is_last_partition
      body:(BraceGroup
        left:<Lit_LBrace "{">
        children:[
          (C (w <Lit_Chars local>) (w <Lit_VarLike "part_path="> (DQ ($ 1))))
          (C (w <Lit_Chars local>) (w <Lit_VarLike "disk_path="> (DQ ($ 2))))
          (C
            (w <Lit_Chars local>)
            (w
              <Lit_VarLike "part_uuid=">
              (DQ
                (CommandSub
                  left_token:<Left_DollarParen "$(">
                  child:(C
                    (w <Lit_Chars partx>)
                    (w <Lit_Chars -sg>)
                    (w <Lit_Chars -o>)
                    (w <Lit_Chars UUID>)
                    (w (DQ ($ part_path)))
                    (w (DQ ($ disk_path)))
                  )
                  right:<Eof_RParen ")">
                )
              )
            )
          )
          (C
            (w <Lit_Chars local>)
            (w
              <Lit_VarLike "last_uuid=">
              (DQ
                (CommandSub
                  left_token:<Left_DollarParen "$(">
                  child:(command.Pipeline
                    children:[
                      (C
                        (w <Lit_Chars partx>)
                        (w <Lit_Chars -sg>)
                        (w <Lit_Chars -o>)
                        (w <Lit_Chars UUID>)
                        (w (DQ ($ disk_path)))
                      )
                      (C
                        (w <Lit_Chars tail>)
                        (w <Lit_Chars -n>)
                        (w <Lit_Chars 1>)
                      )
                    ]
                    ops:[<Op_Pipe "|">]
                  )
                  right:<Eof_RParen ")">
                )
              )
            )
          )
          (C
            (w <Lit_LBracket "[">)
            (w (DQ ($ part_uuid)))
            (w <Lit_Equals "=">)
            (w (DQ ($ last_uuid)))
            (w <Lit_RBracket "]">)
          )
        ]
        right:<Lit_RBrace "}">
      )
    )
    (command.ShFunction
      name_tok:<Lit_Chars part_resize>
      name:part_resize
      body:(BraceGroup
        left:<Lit_LBrace "{">
        children:[
          (C (w <Lit_Chars local>) (w <Lit_VarLike "disk_path="> (DQ ($ 1))))
          (C (w <Lit_Chars local>) (w <Lit_VarLike "partno="> (DQ ($ 2))))
          (command.Pipeline
            children:[
              (C (w <Lit_Chars echo>) (w (SQ ", +")))
              (C
                (w <Lit_Chars sfdisk>)
                (w <Lit_Chars --no-reread>)
                (w <Lit_Chars --no-tell-kernel>)
                (w <Lit_Chars --color> <Lit_Equals "="> <Lit_Chars never>)
                (w <Lit_Chars --partno>)
                (w (DQ ($ partno)))
                (w (DQ ($ disk_path)))
              )
            ]
            ops:[<Op_Pipe "|">]
          )
          (C
            (w <Lit_Chars partx>)
            (w <Lit_Chars --update>)
            (w (DQ ($ disk_path)))
          )
        ]
        right:<Lit_RBrace "}">
      )
    )
    (command.ShFunction
      name_tok:<Lit_Chars part_resize_if_needed>
      name:part_resize_if_needed
      body:(BraceGroup
        left:<Lit_LBrace "{">
        children:[
          (C (w <Lit_Chars local>) (w <Lit_VarLike "part_path="> (DQ ($ 1))))
          (C
            (w <Lit_Chars local>)
            (w
              <Lit_VarLike "part_name=">
              (DQ
                (BracedVarSub
                  left:<Left_DollarBrace "${">
                  name_tok:<VSub_Name dev_path>
                  var_name:dev_path
                  suffix_op:(suffix_op.Unary
                    op:<VOp1_DPound "##">
                    arg_word:(w <Lit_Other "*"> <Lit_Slash />)
                  )
                  right:<Right_DollarBrace "}">
                )
              )
            )
          )
          (C
            (w <Lit_Chars local>)
            (w
              <Lit_VarLike "disk_path=">
              (DQ
                (CommandSub
                  left_token:<Left_DollarParen "$(">
                  child:(C
                    (w <Lit_Chars readlink>)
                    (w <Lit_Chars -f>)
                    (w
                      <Lit_Slash />
                      <Lit_Chars sys>
                      <Lit_Slash />
                      <Lit_Chars class>
                      <Lit_Slash />
                      <Lit_Chars block>
                      <Lit_Slash />
                      ($ part_name)
                      <Lit_Slash />
                      <Lit_Chars ..>
                    )
                  )
                  right:<Eof_RParen ")">
                )
              )
            )
          )
          (command.ShAssignment
            left:<Lit_VarLike "disk_path=">
            pairs:[
              (AssignPair
                left:...0x1bce
                lhs:(sh_lhs.Name left:...0x1bce name:disk_path)
                op:assign_op.Equal
                rhs:(w
                  (DQ
                    <Lit_Chars /dev/>
                    (BracedVarSub
                      left:<Left_DollarBrace "${">
                      name_tok:<VSub_Name disk_path>
                      var_name:disk_path
                      suffix_op:(suffix_op.Unary
                        op:<VOp1_DPound "##">
                        arg_word:(w <Lit_Other "*"> <Lit_Slash />)
                      )
                      right:<Right_DollarBrace "}">
                    )
                  )
                )
              )
            ]
          )
          (C
            (w <Lit_Chars local>)
            (w
              <Lit_VarLike "scheme=">
              (DQ
                (CommandSub
                  left_token:<Left_DollarParen "$(">
                  child:(C
                    (w <Lit_Chars partx>)
                    (w <Lit_Chars -sg>)
                    (w <Lit_Chars -o>)
                    (w <Lit_Chars SCHEME>)
                    (w (DQ ($ part_path)))
                    (w (DQ ($ disk_path)))
                  )
                  right:<Eof_RParen ")">
                )
              )
            )
          )
          (command.Case
            case_kw:<KW_Case case>
            to_match:(case_arg.Word w:(w (DQ ($ scheme))))
            arms_start:<KW_In in>
            arms:[
              (CaseArm
                left:<Lit_Chars dos>
                pattern:(pat.Words
                  words:[(w <Lit_Chars dos>) (w <Lit_Chars gpt>)]
                )
                middle:<Right_CasePat ")">
                action:[]
                right:<Op_DSemi ";;">
              )
              (CaseArm
                left:<Lit_Star "*">
                pattern:(pat.Words words:[(w <Lit_Star "*">)])
                middle:<Right_CasePat ")">
                action:[
                  (command.Sentence
                    child:(command.Redirect
                      child:(C
                        (w <Lit_Chars echo>)
                        (w
                          (DQ
                            <
                              Lit_Chars
                              "WARN: Found unsupported partition table on "
                            >
                            ($ disk_path)
                            <Lit_Chars ": ">
                            ($ scheme)
                          )
                        )
                      )
                      redirects:[
                        (Redir
                          op:<Redir_GreatAnd ">&">
                          loc:(redir_loc.Fd fd:1)
                          arg:(w <Lit_Chars 2>)
                        )
                      ]
                    )
                    terminator:<Op_Semi ";">
                  )
                  (command.ControlFlow
                    keyword:<ControlFlow_Return return>
                    arg_word:(w <Lit_Chars 0>)
                  )
                ]
                right:<Op_DSemi ";;">
              )
            ]
            arms_end:<KW_Esac esac>
          )
          (command.If
            if_kw:<KW_If if>
            arms:[
              (IfArm
                keyword:...0x2372
                cond:[
                  (command.Sentence
                    child:(command.Pipeline
                      negated:<KW_Bang "!">
                      children:[
                        (C
                          (w <Lit_Chars is_last_partition>)
                          (w (DQ ($ part_path)))
                          (w (DQ ($ disk_path)))
                        )
                      ]
                      ops:[]
                    )
                    terminator:<Op_Semi ";">
                  )
                ]
                then_kw:<KW_Then then>
                action:[
                  (command.ControlFlow
                    keyword:<ControlFlow_Return return>
                    arg_word:(w <Lit_Chars 0>)
                  )
                ]
                then_tok:...0x22e2
              )
            ]
            else_action:[]
            fi_kw:<KW_Fi fi>
          )
          (C
            (w <Lit_Chars local>)
            (w
              <Lit_VarLike "partno=">
              (DQ
                (CommandSub
                  left_token:<Left_DollarParen "$(">
                  child:(C
                    (w <Lit_Chars cat>)
                    (w
                      <Lit_Slash />
                      <Lit_Chars sys>
                      <Lit_Slash />
                      <Lit_Chars class>
                      <Lit_Slash />
                      <Lit_Chars block>
                      <Lit_Slash />
                      ($ part_name)
                      <Lit_Slash />
                      <Lit_Chars partition>
                    )
                  )
                  right:<Eof_RParen ")">
                )
              )
            )
          )
          (C
            (w <Lit_Chars local>)
            (w
              <Lit_VarLike "disk_size=">
              (DQ
                (CommandSub
                  left_token:<Left_DollarParen "$(">
                  child:(C
                    (w <Lit_Chars blockdev>)
                    (w <Lit_Chars --getsz>)
                    (w (DQ ($ disk_path)))
                  )
                  right:<Eof_RParen ")">
                )
              )
            )
          )
          (C
            (w <Lit_Chars local>)
            (w
              <Lit_VarLike "last_part_end=">
              (DQ
                (CommandSub
                  left_token:<Left_DollarParen "$(">
                  child:(C
                    (w <Lit_Chars partx>)
                    (w <Lit_Chars -sg>)
                    (w <Lit_Chars --sector-size>)
                    (w <Lit_Chars 512>)
                    (w <Lit_Chars -o>)
                    (w <Lit_Chars END>)
                    (w (DQ ($ part_path)))
                  )
                  right:<Eof_RParen ")">
                )
              )
            )
          )
          (command.If
            if_kw:<KW_If if>
            arms:[
              (IfArm
                keyword:...0x2a6a
                cond:[
                  (command.Sentence
                    child:(C
                      (w <Lit_LBracket "[">)
                      (w
                        (DQ
                          (word_part.ArithSub
                            left:<Left_DollarDParen "$((">
                            anode:(arith_expr.Binary
                              op:<Arith_Minus ->
                              left:(w ($ disk_size))
                              right:(w ($ last_part_end))
                            )
                            right:<Right_DollarDParen ")">
                          )
                        )
                      )
                      (w <Lit_Chars -lt>)
                      (w <Lit_Chars 8192>)
                      (w <Lit_RBracket "]">)
                    )
                    terminator:<Op_Semi ";">
                  )
                ]
                then_kw:<KW_Then then>
                action:[
                  (command.ControlFlow
                    keyword:<ControlFlow_Return return>
                    arg_word:(w <Lit_Chars 0>)
                  )
                ]
                then_tok:...0x29b6
              )
            ]
            else_action:[]
            fi_kw:<KW_Fi fi>
          )
          (command.Redirect
            child:(C
              (w <Lit_Chars echo>)
              (w
                (DQ
                  <Lit_Chars "Resizing partition no. ">
                  ($ partno)
                  <Lit_Chars " on disk ">
                  ($ disk_path)
                )
              )
            )
            redirects:[
              (Redir
                op:<Redir_GreatAnd ">&">
                loc:(redir_loc.Fd fd:1)
                arg:(w <Lit_Chars 2>)
              )
            ]
          )
          (C
            (w <Lit_Chars part_resize>)
            (w (DQ ($ disk_path)))
            (w (DQ ($ partno)))
          )
        ]
        right:<Lit_RBrace "}">
      )
    )
    (command.ShFunction
      name_tok:<Lit_Chars fs_size_mb>
      name:fs_size_mb
      body:(BraceGroup
        left:<Lit_LBrace "{">
        children:[
          (C (w <Lit_Chars local>) (w <Lit_VarLike "fs_type="> (DQ ($ 1))))
          (C (w <Lit_Chars local>) (w <Lit_VarLike "dev_path="> (DQ ($ 2))))
          (command.Case
            case_kw:<KW_Case case>
            to_match:(case_arg.Word w:(w (DQ ($ fs_type))))
            arms_start:<KW_In in>
            arms:[
              (CaseArm
                left:<Lit_Chars btrfs>
                pattern:(pat.Words words:[(w <Lit_Chars btrfs>)])
                middle:<Right_CasePat ")">
                action:[
                  (command.Pipeline
                    children:[
                      (C
                        (w <Lit_Chars btrfs>)
                        (w <Lit_Chars filesystem>)
                        (w <Lit_Chars show>)
                        (w <Lit_Chars --mbytes>)
                        (w (DQ ($ dev_path)))
                      )
                      (C
                        (w <Lit_Chars sed>)
                        (w <Lit_Chars -En>)
                        (w
                          (DQ
                            <Lit_Chars "s|.* size ([0-9]+).*path ">
                            ($ dev_path)
                            <Lit_Dollar "$">
                            <Lit_Chars "|">
                            <Lit_BadBackslash "\\">
                            <Lit_Chars "1|p">
                          )
                        )
                      )
                    ]
                    ops:[<Op_Pipe "|">]
                  )
                ]
                right:<Op_DSemi ";;">
              )
              (CaseArm
                left:<Lit_Chars ext>
                pattern:(pat.Words words:[(w <Lit_Chars ext> <Lit_Star "*">)])
                middle:<Right_CasePat ")">
                action:[
                  (command.Pipeline
                    children:[
                      (command.Redirect
                        child:(C
                          (w <Lit_Chars dumpe2fs>)
                          (w <Lit_Chars -h>)
                          (w (DQ ($ dev_path)))
                        )
                        redirects:[
                          (Redir
                            op:<Redir_Great "2>">
                            loc:(redir_loc.Fd fd:2)
                            arg:(w
                              <Lit_Slash />
                              <Lit_Chars dev>
                              <Lit_Slash />
                              <Lit_Chars "null">
                            )
                          )
                        ]
                      )
                      (C
                        (w <Lit_Chars sed>)
                        (w <Lit_Chars -En>)
                        (w (SQ "s/Block (count|size):\\s*([0-9]+)/\\2/p"))
                      )
                      (C (w <Lit_Chars xargs>))
                      (C
                        (w <Lit_Chars awk>)
                        (w (SQ "{ print int($1 * $2 / 1024 / 1024) }"))
                      )
                    ]
                    ops:[<Op_Pipe "|"> <Op_Pipe "|"> <Op_Pipe "|">]
                  )
                ]
                right:<Op_DSemi ";;">
              )
              (CaseArm
                left:<Lit_Star "*">
                pattern:(pat.Words words:[(w <Lit_Star "*">)])
                middle:<Right_CasePat ")">
                action:[
                  (command.ControlFlow
                    keyword:<ControlFlow_Return return>
                    arg_word:(w <Lit_Chars 1>)
                  )
                ]
                right:<Op_DSemi ";;">
              )
            ]
            arms_end:<KW_Esac esac>
          )
        ]
        right:<Lit_RBrace "}">
      )
    )
    (command.ShFunction
      name_tok:<Lit_Chars fs_mountpoint>
      name:fs_mountpoint
      body:(BraceGroup
        left:<Lit_LBrace "{">
        children:[
          (C (w <Lit_Chars local>) (w <Lit_VarLike "dev_path="> (DQ ($ 1))))
          (command.Pipeline
            children:[
              (C (w <Lit_Chars mount>))
              (C
                (w <Lit_Chars grep>)
                (w (DQ <Lit_Chars "^"> ($ dev_path) <Lit_Chars " ">))
              )
              (C
                (w <Lit_Chars cut>)
                (w <Lit_Chars -d> (SQ " "))
                (w <Lit_Chars -f3>)
              )
              (C (w <Lit_Chars head>) (w <Lit_Chars -n1>))
            ]
            ops:[<Op_Pipe "|"> <Op_Pipe "|"> <Op_Pipe "|">]
          )
        ]
        right:<Lit_RBrace "}">
      )
    )
    (command.ShFunction
      name_tok:<Lit_Chars fs_resize>
      name:fs_resize
      body:(BraceGroup
        left:<Lit_LBrace "{">
        children:[
          (C (w <Lit_Chars local>) (w <Lit_VarLike "fs_type="> (DQ ($ 1))))
          (C (w <Lit_Chars local>) (w <Lit_VarLike "dev_path="> (DQ ($ 2))))
          (command.Case
            case_kw:<KW_Case case>
            to_match:(case_arg.Word w:(w (DQ ($ fs_type))))
            arms_start:<KW_In in>
            arms:[
              (CaseArm
                left:<Lit_Chars btrfs>
                pattern:(pat.Words words:[(w <Lit_Chars btrfs>)])
                middle:<Right_CasePat ")">
                action:[
                  (C
                    (w <Lit_Chars btrfs>)
                    (w <Lit_Chars filesystem>)
                    (w <Lit_Chars resize>)
                    (w <Lit_Chars max>)
                    (w
                      (DQ
                        (CommandSub
                          left_token:<Left_DollarParen "$(">
                          child:(C
                            (w <Lit_Chars fs_mountpoint>)
                            (w (DQ ($ dev_path)))
                          )
                          right:<Eof_RParen ")">
                        )
                      )
                    )
                  )
                ]
                right:<Op_DSemi ";;">
              )
              (CaseArm
                left:<Lit_Chars ext>
                pattern:(pat.Words words:[(w <Lit_Chars ext> <Lit_Star "*">)])
                middle:<Right_CasePat ")">
                action:[(C (w <Lit_Chars resize2fs>) (w (DQ ($ dev_path))))]
                right:<Op_DSemi ";;">
              )
              (CaseArm
                left:<Lit_Star "*">
                pattern:(pat.Words words:[(w <Lit_Star "*">)])
                middle:<Right_CasePat ")">
                action:[
                  (command.ControlFlow
                    keyword:<ControlFlow_Return return>
                    arg_word:(w <Lit_Chars 1>)
                  )
                ]
                right:<Op_DSemi ";;">
              )
            ]
            arms_end:<KW_Esac esac>
          )
        ]
        right:<Lit_RBrace "}">
      )
    )
    (command.ShFunction
      name_tok:<Lit_Chars fs_resize_if_needed>
      name:fs_resize_if_needed
      body:(BraceGroup
        left:<Lit_LBrace "{">
        children:[
          (C (w <Lit_Chars local>) (w <Lit_VarLike "fs_type="> (DQ ($ 1))))
          (C (w <Lit_Chars local>) (w <Lit_VarLike "dev_path="> (DQ ($ 2))))
          (C
            (w <Lit_Chars local>)
            (w
              <Lit_VarLike "fs_size=">
              (DQ
                (CommandSub
                  left_token:<Left_DollarParen "$(">
                  child:(C
                    (w <Lit_Chars fs_size_mb>)
                    (w (DQ ($ fs_type)))
                    (w (DQ ($ dev_path)))
                  )
                  right:<Eof_RParen ")">
                )
              )
            )
          )
          (C
            (w <Lit_Chars local>)
            (w
              <Lit_VarLike "dev_size=">
              (DQ
                (CommandSub
                  left_token:<Left_DollarParen "$(">
                  child:(C (w <Lit_Chars dev_size_mb>) (w (DQ ($ dev_path))))
                  right:<Eof_RParen ")">
                )
              )
            )
          )
          (command.If
            if_kw:<KW_If if>
            arms:[
              (IfArm
                keyword:...0x30da
                cond:[
                  (command.Sentence
                    child:(command.AndOr
                      children:[
                        (C
                          (w <Lit_LBracket "[">)
                          (w <Lit_Chars -z>)
                          (w (DQ ($ fs_size)))
                          (w <Lit_RBracket "]">)
                        )
                        (C
                          (w <Lit_LBracket "[">)
                          (w <Lit_Chars -z>)
                          (w (DQ ($ dev_size)))
                          (w <Lit_RBracket "]">)
                        )
                      ]
                      ops:[<Op_DPipe "||">]
                    )
                    terminator:<Op_Semi ";">
                  )
                ]
                then_kw:<KW_Then then>
                action:[
                  (command.Redirect
                    child:(C
                      (w <Lit_Chars echo>)
                      (w
                        (DQ
                          <Lit_Chars "WARN: Failed to get size of ">
                          ($ fs_type)
                          <Lit_Chars " FS or device on ">
                          ($ dev_path)
                        )
                      )
                    )
                    redirects:[
                      (Redir
                        op:<Redir_GreatAnd ">&">
                        loc:(redir_loc.Fd fd:1)
                        arg:(w <Lit_Chars 2>)
                      )
                    ]
                  )
                ]
                then_tok:...0x2ffa
              )
              (IfArm
                keyword:<KW_Elif elif>
                cond:[
                  (command.Sentence
                    child:(C
                      (w <Lit_LBracket "[">)
                      (w ($ fs_size))
                      (w <Lit_Chars -lt>)
                      (w ($ dev_size))
                      (w <Lit_RBracket "]">)
                    )
                    terminator:<Op_Semi ";">
                  )
                ]
                then_kw:<KW_Then then>
                action:[
                  (command.Redirect
                    child:(C
                      (w <Lit_Chars echo>)
                      (w
                        (DQ
                          <Lit_Chars "Resizing ">
                          ($ fs_type)
                          <Lit_Chars " on ">
                          ($ dev_path)
                          <Lit_Chars " from ">
                          ($ fs_size)
                          <Lit_Chars " MiB to device size ">
                          ($ dev_size)
                          <Lit_Chars " MiB">
                        )
                      )
                    )
                    redirects:[
                      (Redir
                        op:<Redir_GreatAnd ">&">
                        loc:(redir_loc.Fd fd:1)
                        arg:(w <Lit_Chars 2>)
                      )
                    ]
                  )
                  (C
                    (w <Lit_Chars fs_resize>)
                    (w (DQ ($ fs_type)))
                    (w (DQ ($ dev_path)))
                  )
                ]
                then_tok:...0x3996
              )
            ]
            else_action:[]
            fi_kw:<KW_Fi fi>
          )
        ]
        right:<Lit_RBrace "}">
      )
    )
    (C
      (w <Lit_Chars .>)
      (w
        (DQ
          (CommandSub
            left_token:<Left_DollarParen "$(">
            child:(C
              (w <Lit_Chars dirname>)
              (w
                (DQ
                  (CommandSub
                    left_token:<Left_DollarParen "$(">
                    child:(C
                      (w <Lit_Chars readlink>)
                      (w <Lit_Chars -f>)
                      (w (DQ ($ 0)))
                    )
                    right:<Eof_RParen ")">
                  )
                )
              )
            )
            right:<Eof_RParen ")">
          )
          <Lit_Chars /utils.sh>
        )
      )
    )
    (command.If
      if_kw:<KW_If if>
      arms:[
        (IfArm
          keyword:...0x3706
          cond:[
            (command.Sentence
              child:(C
                (w <Lit_Chars yesno>)
                (w
                  (DQ
                    (BracedVarSub
                      left:<Left_DollarBrace "${">
                      name_tok:<VSub_Name GROWFS_DISABLE>
                      var_name:GROWFS_DISABLE
                      suffix_op:(suffix_op.Unary
                        op:<VTest_ColonHyphen ":-">
                        arg_word:(rhs_word.Empty)
                      )
                      right:<Right_DollarBrace "}">
                    )
                  )
                )
              )
              terminator:<Op_Semi ";">
            )
          ]
          then_kw:<KW_Then then>
          action:[
            (command.ControlFlow
              keyword:<ControlFlow_Exit exit>
              arg_word:(w <Lit_Chars 0>)
            )
          ]
          then_tok:...0x3696
        )
      ]
      else_action:[]
      fi_kw:<KW_Fi fi>
    )
    (command.Pipeline
      children:[
        (C (w <Lit_Chars mount>))
        (C
          (w <Lit_Chars cut>)
          (w <Lit_Chars -d> (SQ " "))
          (w <Lit_Chars -f1> <Lit_Comma ","> <Lit_Chars 5>)
        )
        (C (w <Lit_Chars sort>))
        (C (w <Lit_Chars uniq>))
        (command.WhileUntil
          keyword:<KW_While while>
          cond:[
            (command.Sentence
              child:(C
                (w <Lit_Chars read>)
                (w <Lit_Chars dev_path>)
                (w <Lit_Chars fs_type>)
              )
              terminator:<Op_Semi ";">
            )
          ]
          body:(command.DoGroup
            left:<KW_Do do>
            children:[
              (command.Case
                case_kw:<KW_Case case>
                to_match:(case_arg.Word w:(w (DQ ($ fs_type))))
                arms_start:<KW_In in>
                arms:[
                  (CaseArm
                    left:<Lit_Chars ext3>
                    pattern:(pat.Words
                      words:[
                        (w <Lit_Chars ext3>)  (w <Lit_Chars ext4>)
                        (w <Lit_Chars btrfs>)
                      ]
                    )
                    middle:<Right_CasePat ")">
                    action:[
                      (command.AndOr
                        children:[
                          (C (w <Lit_Chars is_partition>) (w (DQ ($ dev_path))))
                          (C
                            (w <Lit_Chars part_resize_if_needed>)
                            (w (DQ ($ dev_path)))
                          )
                        ]
                        ops:[<Op_DAmp "&&">]
                      )
                      (C
                        (w <Lit_Chars fs_resize_if_needed>)
                        (w (DQ ($ fs_type)))
                        (w (DQ ($ dev_path)))
                      )
                    ]
                    right:<Op_DSemi ";;">
                  )
                ]
                arms_end:<KW_Esac esac>
              )
            ]
            right:<KW_Done done>
          )
        )
      ]
      ops:[<Op_Pipe "|"> <Op_Pipe "|"> <Op_Pipe "|"> <Op_Pipe "|">]
    )
  ]
)
scripts/grow-fs                   PASS
(command.CommandList
  children:[
    (C (w <Lit_Chars set>) (w <Lit_Chars -eu>))
    (command.If
      if_kw:<KW_If if>
      arms:[
        (IfArm
          keyword:...0x11fa
          cond:[
            (command.Sentence
              child:(C
                (w <Lit_LBracket "[">)
                (w
                  (DQ
                    (BracedVarSub
                      left:<Left_DollarBrace "${">
                      name_tok:<VSub_Name SET_HOSTNAME>
                      var_name:SET_HOSTNAME
                      suffix_op:(suffix_op.Unary
                        op:<VTest_ColonHyphen ":-">
                        arg_word:(rhs_word.Empty)
                      )
                      right:<Right_DollarBrace "}">
                    )
                  )
                )
                (w <Lit_RBracket "]">)
              )
              terminator:<Op_Semi ";">
            )
          ]
          then_kw:<KW_Then then>
          action:[
            (command.Pipeline
              children:[
                (C
                  (w <Lit_Chars printf>)
                  (w (SQ "%s\\n"))
                  (w
                    (DQ
                      (BracedVarSub
                        left:<Left_DollarBrace "${">
                        name_tok:<VSub_Name SET_HOSTNAME>
                        var_name:SET_HOSTNAME
                        suffix_op:(suffix_op.Unary
                          op:<VOp1_DPercent "%%">
                          arg_word:(w <Lit_Chars .> <Lit_Other "*">)
                        )
                        right:<Right_DollarBrace "}">
                      )
                    )
                  )
                )
                (command.Redirect
                  child:(C
                    (w <Lit_Chars sed>)
                    (w (SQ "s/[^-a-zA-Z0-9]/-/g; s/^-*//g; s/-*$//g"))
                  )
                  redirects:[
                    (Redir
                      op:<Redir_Great ">">
                      loc:(redir_loc.Fd fd:1)
                      arg:(w
                        <Lit_Slash />
                        <Lit_Chars etc>
                        <Lit_Slash />
                        <Lit_Chars hostname>
                      )
                    )
                  ]
                )
              ]
              ops:[<Op_Pipe "|">]
            )
            (C
              (w <Lit_Chars hostname>)
              (w
                (DQ
                  (CommandSub
                    left_token:<Left_DollarParen "$(">
                    child:(C
                      (w <Lit_Chars cat>)
                      (w
                        <Lit_Slash />
                        <Lit_Chars etc>
                        <Lit_Slash />
                        <Lit_Chars hostname>
                      )
                    )
                    right:<Eof_RParen ")">
                  )
                )
              )
            )
          ]
          then_tok:...0x117e
        )
      ]
      else_action:[]
      fi_kw:<KW_Fi fi>
    )
  ]
)
scripts/hostname                  PASS
(command.CommandList
  children:[
    (C (w <Lit_Chars set>) (w <Lit_Chars -eu>))
    (C
      (w <Lit_Chars .>)
      (w
        (DQ
          (CommandSub
            left_token:<Left_DollarParen "$(">
            child:(C
              (w <Lit_Chars dirname>)
              (w
                (DQ
                  (CommandSub
                    left_token:<Left_DollarParen "$(">
                    child:(C
                      (w <Lit_Chars readlink>)
                      (w <Lit_Chars -f>)
                      (w (DQ ($ 0)))
                    )
                    right:<Eof_RParen ")">
                  )
                )
              )
            )
            right:<Eof_RParen ")">
          )
        )
        <Lit_Slash />
        <Lit_Chars utils.sh>
      )
    )
    (command.ShAssignment
      left:<Lit_VarLike "hostname=">
      pairs:[
        (AssignPair
          left:...0x10ca
          lhs:(sh_lhs.Name left:...0x10ca name:hostname)
          op:assign_op.Equal
          rhs:(w
            (DQ
              (CommandSub
                left_token:<Left_DollarParen "$(">
                child:(C (w <Lit_Chars hostname>) (w <Lit_Chars -s>))
                right:<Eof_RParen ")">
              )
            )
          )
        )
      ]
    )
    (command.ShAssignment
      left:<Lit_VarLike "fqdn=">
      pairs:[
        (AssignPair
          left:...0x1aa2
          lhs:(sh_lhs.Name left:...0x1aa2 name:fqdn)
          op:assign_op.Equal
          rhs:(w
            (DQ
              (CommandSub
                left_token:<Left_DollarParen "$(">
                child:(command.Pipeline
                  children:[
                    (C
                      (w <Lit_Chars printf>)
                      (w (SQ "%s\\n"))
                      (w
                        (DQ
                          (BracedVarSub
                            left:<Left_DollarBrace "${">
                            name_tok:<VSub_Name SET_FQDN>
                            var_name:SET_FQDN
                            suffix_op:(suffix_op.Unary
                              op:<VTest_ColonHyphen ":-">
                              arg_word:(w
                                (BracedVarSub
                                  left:<Left_DollarBrace "${">
                                  name_tok:<VSub_Name SET_HOSTNAME>
                                  var_name:SET_HOSTNAME
                                  suffix_op:(suffix_op.Unary
                                    op:<VTest_ColonHyphen ":-">
                                    arg_word:(w)
                                  )
                                  right:<Right_DollarBrace "}">
                                )
                              )
                            )
                            right:<Right_DollarBrace "}">
                          )
                        )
                      )
                    )
                    (C
                      (w <Lit_Chars sed>)
                      (w
                        (SQ "s/[^-a-zA-Z0-9\\.]/-/g; s/^[.-]*//g; s/[.-]*$//g")
                      )
                    )
                  ]
                  ops:[<Op_Pipe "|">]
                )
                right:<Eof_RParen ")">
              )
            )
          )
        )
      ]
    )
    (command.Case
      case_kw:<KW_Case case>
      to_match:(case_arg.Word w:(w (DQ ($ fqdn))))
      arms_start:<KW_In in>
      arms:[
        (CaseArm
          left:<Lit_Star "*">
          pattern:(pat.Words
            words:[(w <Lit_Star "*"> <Lit_Chars .> <Lit_Star "*">)]
          )
          middle:<Right_CasePat ")">
          action:[]
          right:<Op_DSemi ";;">
        )
        (CaseArm
          left:<Lit_Star "*">
          pattern:(pat.Words words:[(w <Lit_Star "*">)])
          middle:<Right_CasePat ")">
          action:[
            (command.ShAssignment
              left:<Lit_VarLike "fqdn=">
              pairs:[
                (AssignPair
                  left:...0x18b2
                  lhs:(sh_lhs.Name left:...0x18b2 name:fqdn)
                  op:assign_op.Equal
                  rhs:(w (DQ ($ hostname) <Lit_Chars .local>))
                )
              ]
            )
          ]
          right:<Op_DSemi ";;">
        )
      ]
      arms_end:<KW_Esac esac>
    )
    (command.Redirect
      child:(C
        (w <Lit_Chars update_config>)
        (w (SQ /etc/hosts))
        (w
          (DQ
            (CommandSub
              left_token:<Left_DollarParen "$(">
              child:(C
                (w <Lit_Chars readlink>)
                (w <Lit_Chars -f>)
                (w (DQ ($ 0)))
              )
              right:<Eof_RParen ")">
            )
          )
        )
      )
      redirects:[
        (Redir
          op:<Redir_DLessDash "<<-">
          loc:(redir_loc.Fd fd:0)
          arg:(redir_param.HereDoc
            here_begin:(w <Lit_Chars EOF>)
            here_end_tok:<Undefined_Tok "EOF\n">
            stdin_parts:[
              <Lit_Chars "127.0.0.1\t">
              (${ VSub_Name fqdn)
              <Lit_Chars " ">
              (${ VSub_Name hostname)
              <Lit_Chars " localhost\n">
              <Lit_Chars "::1\t\t">
              (${ VSub_Name fqdn)
              <Lit_Chars " ">
              (${ VSub_Name hostname)
              <Lit_Chars " localhost\n">
            ]
          )
        )
      ]
    )
  ]
)
scripts/hosts                     PASS
(command.CommandList
  children:[
    (C (w <Lit_Chars set>) (w <Lit_Chars -eu>))
    (C
      (w <Lit_Chars readonly>)
      (w <Lit_VarLike "DEFAULT_MASK="> (SQ 255.255.255.0))
    )
    (command.ShFunction
      name_tok:<Lit_Chars gen_gateway_from_ipv4>
      name:gen_gateway_from_ipv4
      body:(BraceGroup
        left:<Lit_LBrace "{">
        children:[
          (C (w <Lit_Chars local>) (w <Lit_VarLike "ip="> (DQ ($ 1))))
          (C
            (w <Lit_Chars echo>)
            (w
              (DQ
                (CommandSub
                  left_token:<Left_DollarParen "$(">
                  child:(command.Pipeline
                    children:[
                      (C (w <Lit_Chars echo>) (w ($ ip)))
                      (C
                        (w <Lit_Chars cut>)
                        (w <Lit_Chars -d.>)
                        (w <Lit_Chars -f1-3>)
                      )
                    ]
                    ops:[<Op_Pipe "|">]
                  )
                  right:<Eof_RParen ")">
                )
                <Lit_Chars .1>
              )
            )
          )
        ]
        right:<Lit_RBrace "}">
      )
    )
    (command.ShFunction
      name_tok:<Lit_Chars context_dev_by_mac>
      name:context_dev_by_mac
      body:(BraceGroup
        left:<Lit_LBrace "{">
        children:[
          (C (w <Lit_Chars local>) (w <Lit_VarLike "mac="> (DQ ($ 1))))
          (command.Pipeline
            children:[
              (C (w <Lit_Chars env>))
              (C
                (w <Lit_Chars sed>)
                (w <Lit_Chars -En>)
                (w
                  (DQ
                    <Lit_Chars "s/^(ETH[0-9]+)_MAC=">
                    ($ mac)
                    <Lit_Chars />
                    <Lit_BadBackslash "\\">
                    <Lit_Chars 1/p>
                  )
                )
              )
            ]
            ops:[<Op_Pipe "|">]
          )
        ]
        right:<Lit_RBrace "}">
      )
    )
    (command.ShFunction
      name_tok:<Lit_Chars getvals>
      name:getvals
      body:(BraceGroup
        left:<Lit_LBrace "{">
        children:[
          (C (w <Lit_Chars local>) (w <Lit_VarLike "regexp="> (DQ ($ 1))))
          (command.Sentence
            child:(C (w <Lit_Chars local>) (w <KW_Var var>))
            terminator:<Op_Semi ";">
          )
          (command.ForEach
            keyword:<KW_For for>
            iter_names:[var]
            iterable:(for_iter.Words
              words:[
                (w
                  (CommandSub
                    left_token:<Left_DollarParen "$(">
                    child:(command.Pipeline
                      children:[
                        (C (w <Lit_Chars env>))
                        (C
                          (w <Lit_Chars sed>)
                          (w <Lit_Chars -En>)
                          (w
                            (DQ
                              <Lit_Chars "s/^(">
                              ($ regexp)
                              <Lit_Chars ")=">
                              <Lit_BadBackslash "\\">
                              <Lit_Chars "S.*/">
                              <Lit_BadBackslash "\\">
                              <Lit_Chars 1/p>
                            )
                          )
                        )
                        (C (w <Lit_Chars sort>))
                      ]
                      ops:[<Op_Pipe "|"> <Op_Pipe "|">]
                    )
                    right:<Eof_RParen ")">
                  )
                )
              ]
            )
            semi_tok:<Op_Semi ";">
            body:(command.DoGroup
              left:<KW_Do do>
              children:[(C (w <Lit_Chars getval>) (w (DQ ($ var))))]
              right:<KW_Done done>
            )
          )
        ]
        right:<Lit_RBrace "}">
      )
    )
    (command.ShFunction
      name_tok:<Lit_Chars gen_iface_conf>
      name:gen_iface_conf
      body:(BraceGroup
        left:<Lit_LBrace "{">
        children:[
          (C (w <Lit_Chars local>) (w <Lit_VarLike "dev="> (DQ ($ 1))))
          (C (w <Lit_Chars local>) (w <Lit_VarLike "prefix="> (DQ ($ 2))))
          (C
            (w <Lit_Chars local>)
            (w
              <Lit_VarLike "ip4=">
              (DQ
                (CommandSub
                  left_token:<Left_DollarParen "$(">
                  child:(C
                    (w <Lit_Chars getval>)
                    (w (DQ ($ prefix)) <Lit_Chars _IP>)
                  )
                  right:<Eof_RParen ")">
                )
              )
            )
          )
          (C
            (w <Lit_Chars local>)
            (w
              <Lit_VarLike "ip6=">
              (DQ
                (CommandSub
                  left_token:<Left_DollarParen "$(">
                  child:(C
                    (w <Lit_Chars getval>)
                    (w (DQ ($ prefix)) <Lit_Chars _IP6>)
                    (w
                      (DQ
                        (CommandSub
                          left_token:<Left_DollarParen "$(">
                          child:(C
                            (w <Lit_Chars getval>)
                            (w (DQ ($ prefix)) <Lit_Chars _IPV6>)
                          )
                          right:<Eof_RParen ")">
                        )
                      )
                    )
                  )
                  right:<Eof_RParen ")">
                )
              )
            )
          )
          (C
            (w <Lit_Chars local>)
            (w
              <Lit_VarLike "gw6=">
              (DQ
                (CommandSub
                  left_token:<Left_DollarParen "$(">
                  child:(C
                    (w <Lit_Chars getval>)
                    (w (DQ ($ prefix)) <Lit_Chars _GATEWAY6>)
                  )
                  right:<Eof_RParen ")">
                )
              )
            )
          )
          (C (w <Lit_Chars echo>) (w (DQ <Lit_Chars "auto "> ($ dev))))
          (command.If
            if_kw:<KW_If if>
            arms:[
              (IfArm
                keyword:...0x1c42
                cond:[
                  (command.Sentence
                    child:(C
                      (w <Lit_LBracket "[">)
                      (w (DQ ($ ip4)))
                      (w <Lit_RBracket "]">)
                    )
                    terminator:<Op_Semi ";">
                  )
                ]
                then_kw:<KW_Then then>
                action:[
                  (C
                    (w <Lit_Chars local>)
                    (w
                      <Lit_VarLike "netmask4=">
                      (DQ
                        (CommandSub
                          left_token:<Left_DollarParen "$(">
                          child:(C
                            (w <Lit_Chars getval>)
                            (w (DQ ($ prefix)) <Lit_Chars _MASK>)
                            (w (DQ ($ DEFAULT_MASK)))
                          )
                          right:<Eof_RParen ")">
                        )
                      )
                    )
                  )
                  (C
                    (w <Lit_Chars local>)
                    (w
                      <Lit_VarLike "gw4=">
                      (DQ
                        (CommandSub
                          left_token:<Left_DollarParen "$(">
                          child:(C
                            (w <Lit_Chars getval>)
                            (w (DQ ($ prefix)) <Lit_Chars _GATEWAY>)
                          )
                          right:<Eof_RParen ")">
                        )
                      )
                    )
                  )
                  (command.If
                    if_kw:<KW_If if>
                    arms:[
                      (IfArm
                        keyword:...0x24e6
                        cond:[
                          (command.Sentence
                            child:(command.AndOr
                              children:[
                                (C
                                  (w <Lit_LBracket "[">)
                                  (w <Lit_Chars -z>)
                                  (w (DQ ($ gw4)))
                                  (w <Lit_RBracket "]">)
                                )
                                (C
                                  (w <Lit_LBracket "[">)
                                  (w (DQ ($ prefix)))
                                  (w <Lit_Equals "=">)
                                  (w (SQ ETH0))
                                  (w <Lit_RBracket "]">)
                                )
                              ]
                              ops:[<Op_DAmp "&&">]
                            )
                            terminator:<Op_Semi ";">
                          )
                        ]
                        then_kw:<KW_Then then>
                        action:[
                          (command.ShAssignment
                            left:<Lit_VarLike "gw4=">
                            pairs:[
                              (AssignPair
                                left:...0x23c6
                                lhs:(sh_lhs.Name left:...0x23c6 name:gw4)
                                op:assign_op.Equal
                                rhs:(w
                                  (DQ
                                    (CommandSub
                                      left_token:<Left_DollarParen "$(">
                                      child:(C
                                        (w <Lit_Chars gen_gateway_from_ipv4>)
                                        (w (DQ ($ ip4)))
                                      )
                                      right:<Eof_RParen ")">
                                    )
                                  )
                                )
                              )
                            ]
                          )
                        ]
                        then_tok:...0x23e2
                      )
                    ]
                    else_action:[]
                    fi_kw:<KW_Fi fi>
                  )
                  (command.Redirect
                    child:(C (w <Lit_Chars cat>))
                    redirects:[
                      (Redir
                        op:<Redir_DLessDash "<<-">
                        loc:(redir_loc.Fd fd:0)
                        arg:(redir_param.HereDoc
                          here_begin:(w <Lit_Chars EOF>)
                          here_end_tok:<Undefined_Tok "EOF\n">
                          stdin_parts:[
                            <Lit_Chars "iface ">
                            ($ dev)
                            <Lit_Chars " inet static\n">
                            <Lit_Chars "    address ">
                            ($ ip4)
                            <Lit_Chars "\n">
                            <Lit_Chars "    netmask ">
                            ($ netmask4)
                            <Lit_Chars "\n">
                          ]
                        )
                      )
                    ]
                  )
                  (command.AndOr
                    children:[
                      (C
                        (w <Lit_LBracket "[">)
                        (w <Lit_Chars -z>)
                        (w (DQ ($ gw4)))
                        (w <Lit_RBracket "]">)
                      )
                      (C
                        (w <Lit_Chars echo>)
                        (w (DQ <Lit_Chars "    gateway "> ($ gw4)))
                      )
                    ]
                    ops:[<Op_DPipe "||">]
                  )
                ]
                then_tok:...0x1bda
              )
            ]
            else_action:[]
            fi_kw:<KW_Fi fi>
          )
          (command.If
            if_kw:<KW_If if>
            arms:[
              (IfArm
                keyword:...0x213a
                cond:[
                  (command.Sentence
                    child:(command.AndOr
                      children:[
                        (C
                          (w <Lit_LBracket "[">)
                          (w (DQ ($ ip6)))
                          (w <Lit_RBracket "]">)
                        )
                        (C
                          (w <Lit_LBracket "[">)
                          (w (DQ ($ gw6)))
                          (w <Lit_RBracket "]">)
                        )
                      ]
                      ops:[<Op_DAmp "&&">]
                    )
                    terminator:<Op_Semi ";">
                  )
                ]
                then_kw:<KW_Then then>
                action:[
                  (command.AndOr
                    children:[
                      (C
                        (w <Lit_LBracket "[">)
                        (w <Lit_Chars -z>)
                        (w (DQ ($ ip4)))
                        (w <Lit_RBracket "]">)
                      )
                      (C (w <Lit_Chars printf>) (w (SQ "\\n")))
                    ]
                    ops:[<Op_DPipe "||">]
                  )
                  (command.Redirect
                    child:(C (w <Lit_Chars cat>))
                    redirects:[
                      (Redir
                        op:<Redir_DLessDash "<<-">
                        loc:(redir_loc.Fd fd:0)
                        arg:(redir_param.HereDoc
                          here_begin:(w <Lit_Chars EOF>)
                          here_end_tok:<Undefined_Tok "EOF\n">
                          stdin_parts:[
                            <Lit_Chars "iface ">
                            ($ dev)
                            <Lit_Chars " inet6 static\n">
                            <Lit_Chars "    address ">
                            (BracedVarSub
                              left:<Left_DollarBrace "${">
                              name_tok:<VSub_Name ip6>
                              var_name:ip6
                              suffix_op:(suffix_op.Unary
                                op:<VOp1_Percent "%">
                                arg_word:(w <Lit_Slash /> <Lit_Other "*">)
                              )
                              right:<Right_DollarBrace "}">
                            )
                            <Lit_Chars "\n">
                            <Lit_Chars "    netmask ">
                            (BracedVarSub
                              left:<Left_DollarBrace "${">
                              name_tok:<VSub_Name ip6>
                              var_name:ip6
                              suffix_op:(suffix_op.Unary
                                op:<VOp1_Pound "#">
                                arg_word:(w <Lit_Other "*"> <Lit_Slash />)
                              )
                              right:<Right_DollarBrace "}">
                            )
                            <Lit_Chars "\n">
                          ]
                        )
                      )
                    ]
                  )
                  (command.AndOr
                    children:[
                      (C
                        (w <Lit_LBracket "[">)
                        (w <Lit_Chars -z>)
                        (w (DQ ($ gw6)))
                        (w <Lit_RBracket "]">)
                      )
                      (C
                        (w <Lit_Chars echo>)
                        (w (DQ <Lit_Chars "    gateway "> ($ gw6)))
                      )
                    ]
                    ops:[<Op_DPipe "||">]
                  )
                  (C
                    (w <Lit_Chars echo>)
                    (w
                      (DQ
                        <
                          Lit_Chars
                          "    pre-up echo 0 > /proc/sys/net/ipv6/conf/"
                        >
                        ($ dev)
                        <Lit_Chars /accept_ra>
                      )
                    )
                  )
                ]
                then_tok:...0x2072
              )
            ]
            else_action:[]
            fi_kw:<KW_Fi fi>
          )
          (command.If
            if_kw:<KW_If if>
            arms:[
              (IfArm
                keyword:...0x27fe
                cond:[
                  (command.Sentence
                    child:(C
                      (w <Lit_LBracket "[">)
                      (w <Lit_Chars -z>)
                      (w
                        (DQ
                          (${ VSub_Name ip4)
                          (${ VSub_Name ip6)
                          (${ VSub_Name gw6)
                        )
                      )
                      (w <Lit_RBracket "]">)
                    )
                    terminator:<Op_Semi ";">
                  )
                ]
                then_kw:<KW_Then then>
                action:[
                  (C
                    (w <Lit_Chars echo>)
                    (w
                      (DQ <Lit_Chars "iface "> ($ dev) <Lit_Chars " inet dhcp">)
                    )
                  )
                ]
                then_tok:...0x276a
              )
            ]
            else_action:[]
            fi_kw:<KW_Fi fi>
          )
        ]
        right:<Lit_RBrace "}">
      )
    )
    (command.ShFunction
      name_tok:<Lit_Chars gen_network_conf>
      name:gen_network_conf
      body:(BraceGroup
        left:<Lit_LBrace "{">
        children:[
          (C
            (w <Lit_Chars local>)
            (w <Lit_Chars dev>)
            (w <Lit_Chars mac>)
            (w <Lit_Chars prefix>)
          )
          (command.ForEach
            keyword:<KW_For for>
            iter_names:[dev]
            iterable:(for_iter.Words
              words:[
                (w
                  (CommandSub
                    left_token:<Left_DollarParen "$(">
                    child:(C
                      (w <Lit_Chars ls>)
                      (w
                        <Lit_Slash />
                        <Lit_Chars sys>
                        <Lit_Slash />
                        <Lit_Chars class>
                        <Lit_Slash />
                        <Lit_Chars net>
                      )
                    )
                    right:<Eof_RParen ")">
                  )
                )
              ]
            )
            semi_tok:<Op_Semi ";">
            body:(command.DoGroup
              left:<KW_Do do>
              children:[
                (command.AndOr
                  children:[
                    (command.Redirect
                      child:(command.ShAssignment
                        left:<Lit_VarLike "mac=">
                        pairs:[
                          (AssignPair
                            left:...0x2fc2
                            lhs:(sh_lhs.Name left:...0x2fc2 name:mac)
                            op:assign_op.Equal
                            rhs:(w
                              (DQ
                                (CommandSub
                                  left_token:<Left_DollarParen "$(">
                                  child:(C
                                    (w <Lit_Chars cat>)
                                    (w
                                      <Lit_Slash />
                                      <Lit_Chars sys>
                                      <Lit_Slash />
                                      <Lit_Chars class>
                                      <Lit_Slash />
                                      <Lit_Chars net>
                                      <Lit_Slash />
                                      ($ dev)
                                      <Lit_Slash />
                                      <Lit_Chars address>
                                    )
                                  )
                                  right:<Eof_RParen ")">
                                )
                              )
                            )
                          )
                        ]
                      )
                      redirects:[
                        (Redir
                          op:<Redir_Great "2>">
                          loc:(redir_loc.Fd fd:2)
                          arg:(w
                            <Lit_Slash />
                            <Lit_Chars dev>
                            <Lit_Slash />
                            <Lit_Chars "null">
                          )
                        )
                      ]
                    )
                    (command.ControlFlow
                      keyword:<ControlFlow_Continue continue>
                    )
                  ]
                  ops:[<Op_DPipe "||">]
                )
                (command.ShAssignment
                  left:<Lit_VarLike "prefix=">
                  pairs:[
                    (AssignPair
                      left:...0x2eb6
                      lhs:(sh_lhs.Name left:...0x2eb6 name:prefix)
                      op:assign_op.Equal
                      rhs:(w
                        (DQ
                          (CommandSub
                            left_token:<Left_DollarParen "$(">
                            child:(C
                              (w <Lit_Chars context_dev_by_mac>)
                              (w (DQ ($ mac)))
                            )
                            right:<Eof_RParen ")">
                          )
                        )
                      )
                    )
                  ]
                )
                (command.If
                  if_kw:<KW_If if>
                  arms:[
                    (IfArm
                      keyword:...0x2dfe
                      cond:[
                        (command.Sentence
                          child:(C
                            (w <Lit_LBracket "[">)
                            (w (DQ ($ prefix)))
                            (w <Lit_RBracket "]">)
                          )
                          terminator:<Op_Semi ";">
                        )
                      ]
                      then_kw:<KW_Then then>
                      action:[
                        (C
                          (w <Lit_Chars gen_iface_conf>)
                          (w (DQ ($ dev)))
                          (w (DQ ($ prefix)))
                        )
                        (C (w <Lit_Chars echo>) (w (SQ "")))
                      ]
                      then_tok:...0x2d96
                    )
                  ]
                  else_action:[]
                  fi_kw:<KW_Fi fi>
                )
              ]
              right:<KW_Done done>
            )
          )
        ]
        right:<Lit_RBrace "}">
      )
    )
    (command.ShFunction
      name_tok:<Lit_Chars gen_resolv_conf>
      name:gen_resolv_conf
      body:(BraceGroup
        left:<Lit_LBrace "{">
        children:[
          (C
            (w <Lit_Chars local>)
            (w <Lit_Chars item>)
            (w <Lit_VarLike "search="> (SQ ""))
          )
          (command.ForEach
            keyword:<KW_For for>
            iter_names:[item]
            iterable:(for_iter.Words
              words:[
                (w
                  (BracedVarSub
                    left:<Left_DollarBrace "${">
                    name_tok:<VSub_Name SEARCH_DOMAIN>
                    var_name:SEARCH_DOMAIN
                    suffix_op:(suffix_op.Unary
                      op:<VTest_ColonHyphen ":-">
                      arg_word:(w)
                    )
                    right:<Right_DollarBrace "}">
                  )
                )
                (w
                  (CommandSub
                    left_token:<Left_DollarParen "$(">
                    child:(C
                      (w <Lit_Chars getvals>)
                      (w (SQ "ETH[0-9]+_SEARCH_DOMAIN"))
                    )
                    right:<Eof_RParen ")">
                  )
                )
              ]
            )
            semi_tok:<Op_Semi ";">
            body:(command.DoGroup
              left:<KW_Do do>
              children:[
                (command.ShAssignment
                  left:<Lit_VarLike "search=">
                  pairs:[
                    (AssignPair
                      left:...0x2aaa
                      lhs:(sh_lhs.Name left:...0x2aaa name:search)
                      op:assign_op.Equal
                      rhs:(w (DQ ($ search) <Lit_Chars " "> ($ item)))
                    )
                  ]
                )
              ]
              right:<KW_Done done>
            )
          )
          (command.AndOr
            children:[
              (C
                (w <Lit_LBracket "[">)
                (w <Lit_Chars -z>)
                (w (DQ ($ search)))
                (w <Lit_RBracket "]">)
              )
              (C (w <Lit_Chars echo>) (w (DQ <Lit_Chars "search "> ($ search))))
            ]
            ops:[<Op_DPipe "||">]
          )
          (command.ForEach
            keyword:<KW_For for>
            iter_names:[item]
            iterable:(for_iter.Words
              words:[
                (w
                  (BracedVarSub
                    left:<Left_DollarBrace "${">
                    name_tok:<VSub_Name DNS>
                    var_name:DNS
                    suffix_op:(suffix_op.Unary
                      op:<VTest_ColonHyphen ":-">
                      arg_word:(w)
                    )
                    right:<Right_DollarBrace "}">
                  )
                )
                (w
                  (CommandSub
                    left_token:<Left_DollarParen "$(">
                    child:(C (w <Lit_Chars getvals>) (w (SQ "ETH[0-9]+_DNS")))
                    right:<Eof_RParen ")">
                  )
                )
              ]
            )
            semi_tok:<Op_Semi ";">
            body:(command.DoGroup
              left:<KW_Do do>
              children:[
                (C
                  (w <Lit_Chars echo>)
                  (w (DQ <Lit_Chars "nameserver "> ($ item)))
                )
              ]
              right:<KW_Done done>
            )
          )
        ]
        right:<Lit_RBrace "}">
      )
    )
    (C
      (w <Lit_Chars .>)
      (w
        (DQ
          (CommandSub
            left_token:<Left_DollarParen "$(">
            child:(C
              (w <Lit_Chars dirname>)
              (w
                (DQ
                  (CommandSub
                    left_token:<Left_DollarParen "$(">
                    child:(C
                      (w <Lit_Chars readlink>)
                      (w <Lit_Chars -f>)
                      (w (DQ ($ 0)))
                    )
                    right:<Eof_RParen ")">
                  )
                )
              )
            )
            right:<Eof_RParen ")">
          )
          <Lit_Chars /utils.sh>
        )
      )
    )
    (command.If
      if_kw:<KW_If if>
      arms:[
        (IfArm
          keyword:...0x316a
          cond:[
            (command.Sentence
              child:(command.Pipeline
                negated:<KW_Bang "!">
                children:[
                  (C
                    (w <Lit_Chars yesno>)
                    (w
                      (DQ
                        (BracedVarSub
                          left:<Left_DollarBrace "${">
                          name_tok:<VSub_Name NETWORK>
                          var_name:NETWORK
                          suffix_op:(suffix_op.Unary
                            op:<VTest_ColonHyphen ":-">
                            arg_word:(rhs_word.Empty)
                          )
                          right:<Right_DollarBrace "}">
                        )
                      )
                    )
                  )
                ]
                ops:[]
              )
              terminator:<Op_Semi ";">
            )
          ]
          then_kw:<KW_Then then>
          action:[
            (command.ControlFlow
              keyword:<ControlFlow_Exit exit>
              arg_word:(w <Lit_Chars 0>)
            )
          ]
          then_tok:...0x30ee
        )
      ]
      else_action:[]
      fi_kw:<KW_Fi fi>
    )
    (C
      (w <Lit_Chars update_config>)
      (w (SQ /etc/network/interfaces))
      (w
        (DQ
          (CommandSub
            left_token:<Left_DollarParen "$(">
            child:(C (w <Lit_Chars readlink>) (w <Lit_Chars -f>) (w ($ 0)))
            right:<Eof_RParen ")">
          )
        )
      )
      (w
        (DQ
          (CommandSub
            left_token:<Left_DollarParen "$(">
            child:(C (w <Lit_Chars gen_network_conf>))
            right:<Eof_RParen ")">
          )
        )
      )
    )
    (command.ShAssignment
      left:<Lit_VarLike "resolv_conf=">
      pairs:[
        (AssignPair
          left:...0x39da
          lhs:(sh_lhs.Name left:...0x39da name:resolv_conf)
          op:assign_op.Equal
          rhs:(w
            (DQ
              (CommandSub
                left_token:<Left_DollarParen "$(">
                child:(C (w <Lit_Chars gen_resolv_conf>))
                right:<Eof_RParen ")">
              )
            )
          )
        )
      ]
    )
    (command.If
      if_kw:<KW_If if>
      arms:[
        (IfArm
          keyword:...0x393e
          cond:[
            (command.Sentence
              child:(C
                (w <Lit_LBracket "[">)
                (w (DQ ($ resolv_conf)))
                (w <Lit_RBracket "]">)
              )
              terminator:<Op_Semi ";">
            )
          ]
          then_kw:<KW_Then then>
          action:[
            (command.AndOr
              children:[
                (C
                  (w <Lit_LBracket "[">)
                  (w <Lit_Chars -L>)
                  (w
                    <Lit_Slash />
                    <Lit_Chars etc>
                    <Lit_Slash />
                    <Lit_Chars resolv.conf>
                  )
                  (w <Lit_RBracket "]">)
                )
                (C
                  (w <Lit_Chars rm>)
                  (w
                    <Lit_Slash />
                    <Lit_Chars etc>
                    <Lit_Slash />
                    <Lit_Chars resolv.conf>
                  )
                )
              ]
              ops:[<Op_DAmp "&&">]
            )
            (command.Redirect
              child:(C
                (w <Lit_Chars echo>)
                (w
                  (DQ
                    <Lit_Chars "# Generated by ">
                    (CommandSub
                      left_token:<Left_DollarParen "$(">
                      child:(C
                        (w <Lit_Chars readlink>)
                        (w <Lit_Chars -f>)
                        (w ($ 0))
                      )
                      right:<Eof_RParen ")">
                    )
                  )
                )
              )
              redirects:[
                (Redir
                  op:<Redir_Great ">">
                  loc:(redir_loc.Fd fd:1)
                  arg:(w
                    <Lit_Slash />
                    <Lit_Chars etc>
                    <Lit_Slash />
                    <Lit_Chars resolv.conf>
                  )
                )
              ]
            )
            (command.Redirect
              child:(C (w <Lit_Chars echo>) (w (DQ ($ resolv_conf))))
              redirects:[
                (Redir
                  op:<Redir_DGreat ">>">
                  loc:(redir_loc.Fd fd:1)
                  arg:(w
                    <Lit_Slash />
                    <Lit_Chars etc>
                    <Lit_Slash />
                    <Lit_Chars resolv.conf>
                  )
                )
              ]
            )
          ]
          then_tok:...0x38d2
        )
      ]
      else_action:[]
      fi_kw:<KW_Fi fi>
    )
    (C
      (w
        <Lit_Slash />
        <Lit_Chars etc>
        <Lit_Slash />
        <Lit_Chars init.d>
        <Lit_Slash />
        <Lit_Chars networking>
      )
      (w <Lit_Chars restart>)
    )
  ]
)
scripts/network                   PASS
(command.CommandList
  children:[
    (C (w <Lit_Chars set>) (w <Lit_Chars -eu>))
    (C
      (w <Lit_Chars readonly>)
      (w <Lit_VarLike "CONF_FILES="> (SQ "/etc/ntpd.conf /etc/ntp.conf"))
    )
    (command.If
      if_kw:<KW_If if>
      arms:[
        (IfArm
          keyword:...0x1176
          cond:[
            (command.Sentence
              child:(C
                (w <Lit_LBracket "[">)
                (w <Lit_Chars -z>)
                (w
                  (DQ
                    (BracedVarSub
                      left:<Left_DollarBrace "${">
                      name_tok:<VSub_Name NTP>
                      var_name:NTP
                      suffix_op:(suffix_op.Unary
                        op:<VTest_ColonHyphen ":-">
                        arg_word:(rhs_word.Empty)
                      )
                      right:<Right_DollarBrace "}">
                    )
                  )
                )
                (w <Lit_RBracket "]">)
              )
              terminator:<Op_Semi ";">
            )
          ]
          then_kw:<KW_Then then>
          action:[
            (command.ControlFlow
              keyword:<ControlFlow_Exit exit>
              arg_word:(w <Lit_Chars 0>)
            )
          ]
          then_tok:...0x10f2
        )
      ]
      else_action:[]
      fi_kw:<KW_Fi fi>
    )
    (C
      (w <Lit_Chars .>)
      (w
        (DQ
          (CommandSub
            left_token:<Left_DollarParen "$(">
            child:(C
              (w <Lit_Chars dirname>)
              (w
                (DQ
                  (CommandSub
                    left_token:<Left_DollarParen "$(">
                    child:(C
                      (w <Lit_Chars readlink>)
                      (w <Lit_Chars -f>)
                      (w (DQ ($ 0)))
                    )
                    right:<Eof_RParen ")">
                  )
                )
              )
            )
            right:<Eof_RParen ")">
          )
        )
        <Lit_Slash />
        <Lit_Chars utils.sh>
      )
    )
    (command.ShAssignment
      left:<Lit_VarLike "ntp_conf=">
      pairs:[
        (AssignPair
          left:...0x19f2
          lhs:(sh_lhs.Name left:...0x19f2 name:ntp_conf)
          op:assign_op.Equal
          rhs:(w
            (CommandSub
              left_token:<Left_DollarParen "$(">
              child:(command.Pipeline
                children:[
                  (C (w <Lit_Chars echo>) (w (DQ ($ NTP))))
                  (C
                    (w <Lit_Chars tr>)
                    (w <Lit_Chars -s>)
                    (w (SQ " \\t"))
                    (w (SQ "\\n\\n"))
                  )
                  (C
                    (w <Lit_Chars xargs>)
                    (w <Lit_Chars -I> <Lit_Other "%">)
                    (w <Lit_Chars printf>)
                    (w (SQ "server %\\n"))
                  )
                ]
                ops:[<Op_Pipe "|"> <Op_Pipe "|">]
              )
              right:<Eof_RParen ")">
            )
          )
        )
      ]
    )
    (command.ForEach
      keyword:<KW_For for>
      iter_names:[file]
      iterable:(for_iter.Words words:[(w ($ CONF_FILES))])
      semi_tok:<Op_Semi ";">
      body:(command.DoGroup
        left:<KW_Do do>
        children:[
          (command.If
            if_kw:<KW_If if>
            arms:[
              (IfArm
                keyword:...0x17ca
                cond:[
                  (command.Sentence
                    child:(C
                      (w <Lit_LBracket "[">)
                      (w <Lit_Chars -e>)
                      (w (DQ ($ file)))
                      (w <Lit_RBracket "]">)
                    )
                    terminator:<Op_Semi ";">
                  )
                ]
                then_kw:<KW_Then then>
                action:[
                  (C
                    (w <Lit_Chars update_config>)
                    (w (DQ ($ file)))
                    (w
                      (DQ
                        (CommandSub
                          left_token:<Left_DollarParen "$(">
                          child:(C
                            (w <Lit_Chars readlink>)
                            (w <Lit_Chars -f>)
                            (w (DQ ($ 0)))
                          )
                          right:<Eof_RParen ")">
                        )
                      )
                    )
                    (w (DQ ($ ntp_conf)))
                  )
                ]
                then_tok:...0x1756
              )
            ]
            else_action:[]
            fi_kw:<KW_Fi fi>
          )
        ]
        right:<KW_Done done>
      )
    )
  ]
)
scripts/ntp                       PASS
(command.CommandList
  children:[
    (C (w <Lit_Chars set>) (w <Lit_Chars -eu>))
    (command.If
      if_kw:<KW_If if>
      arms:[
        (IfArm
          keyword:...0x11fe
          cond:[
            (command.Sentence
              child:(C
                (w <Lit_LBracket "[">)
                (w <Lit_Chars -z>)
                (w
                  (DQ
                    (BracedVarSub
                      left:<Left_DollarBrace "${">
                      name_tok:<VSub_Name SSH_PUBLIC_KEY>
                      var_name:SSH_PUBLIC_KEY
                      suffix_op:(suffix_op.Unary
                        op:<VTest_ColonHyphen ":-">
                        arg_word:(rhs_word.Empty)
                      )
                      right:<Right_DollarBrace "}">
                    )
                  )
                )
                (w <Lit_RBracket "]">)
              )
              terminator:<Op_Semi ";">
            )
          ]
          then_kw:<KW_Then then>
          action:[
            (command.ControlFlow
              keyword:<ControlFlow_Exit exit>
              arg_word:(w <Lit_Chars 0>)
            )
          ]
          then_tok:...0x1176
        )
      ]
      else_action:[]
      fi_kw:<KW_Fi fi>
    )
    (command.If
      if_kw:<KW_If if>
      arms:[
        (IfArm
          keyword:...0x10fe
          cond:[
            (command.Sentence
              child:(command.Pipeline
                negated:<KW_Bang "!">
                children:[
                  (command.Redirect
                    child:(C
                      (w <Lit_Chars id>)
                      (w
                        (DQ
                          (BracedVarSub
                            left:<Left_DollarBrace "${">
                            name_tok:<VSub_Name USERNAME>
                            var_name:USERNAME
                            suffix_op:(suffix_op.Unary
                              op:<VTest_ColonHyphen ":-">
                              arg_word:(rhs_word.Empty)
                            )
                            right:<Right_DollarBrace "}">
                          )
                        )
                      )
                    )
                    redirects:[
                      (Redir
                        op:<Redir_Great ">">
                        loc:(redir_loc.Fd fd:1)
                        arg:(w
                          <Lit_Slash />
                          <Lit_Chars dev>
                          <Lit_Slash />
                          <Lit_Chars "null">
                        )
                      )
                      (Redir
                        op:<Redir_GreatAnd "2>&">
                        loc:(redir_loc.Fd fd:2)
                        arg:(w <Lit_Chars 1>)
                      )
                    ]
                  )
                ]
                ops:[]
              )
              terminator:<Op_Semi ";">
            )
          ]
          then_kw:<KW_Then then>
          action:[
            (command.ShAssignment
              left:<Lit_VarLike "USERNAME=">
              pairs:[
                (AssignPair
                  left:...0x1026
                  lhs:(sh_lhs.Name left:...0x1026 name:USERNAME)
                  op:assign_op.Equal
                  rhs:(w (SQ root))
                )
              ]
            )
          ]
          then_tok:...0x1046
        )
      ]
      else_action:[]
      fi_kw:<KW_Fi fi>
    )
    (command.ShAssignment
      left:<Lit_VarLike "user_home=">
      pairs:[
        (AssignPair
          left:...0x1a4a
          lhs:(sh_lhs.Name left:...0x1a4a name:user_home)
          op:assign_op.Equal
          rhs:(w
            (DQ
              (CommandSub
                left_token:<Left_DollarParen "$(">
                child:(command.Pipeline
                  children:[
                    (C
                      (w <Lit_Chars getent>)
                      (w <Lit_Chars passwd>)
                      (w (DQ ($ USERNAME)))
                    )
                    (C
                      (w <Lit_Chars cut>)
                      (w <Lit_Chars -d> <Lit_Colon ":">)
                      (w <Lit_Chars -f6>)
                    )
                  ]
                  ops:[<Op_Pipe "|">]
                )
                right:<Eof_RParen ")">
              )
            )
          )
        )
      ]
    )
    (command.ShAssignment
      left:<Lit_VarLike "auth_file=">
      pairs:[
        (AssignPair
          left:...0x193e
          lhs:(sh_lhs.Name left:...0x193e name:auth_file)
          op:assign_op.Equal
          rhs:(w
            (DQ
              (BracedVarSub
                left:<Left_DollarBrace "${">
                name_tok:<VSub_Name user_home>
                var_name:user_home
                suffix_op:(suffix_op.Unary
                  op:<VTest_ColonHyphen ":-">
                  arg_word:(w <Lit_Slash /> <Lit_Chars root>)
                )
                right:<Right_DollarBrace "}">
              )
              <Lit_Chars /.ssh/authorized_keys>
            )
          )
        )
      ]
    )
    (C
      (w <Lit_Chars install>)
      (w <Lit_Chars -m0700>)
      (w <Lit_Chars -o>)
      (w (DQ ($ USERNAME)))
      (w <Lit_Chars -d>)
      (w
        (DQ
          (CommandSub
            left_token:<Left_DollarParen "$(">
            child:(C (w <Lit_Chars dirname>) (w (DQ ($ auth_file))))
            right:<Eof_RParen ")">
          )
        )
      )
    )
    (C (w <Lit_Chars touch>) (w (DQ ($ auth_file))))
    (C (w <Lit_Chars chmod>) (w <Lit_Chars 0600>) (w (DQ ($ auth_file))))
    (C (w <Lit_Chars chown>) (w (DQ ($ USERNAME))) (w (DQ ($ auth_file))))
    (command.Pipeline
      children:[
        (C (w <Lit_Chars echo>) (w (DQ ($ SSH_PUBLIC_KEY))))
        (command.WhileUntil
          keyword:<KW_While while>
          cond:[
            (command.Sentence
              child:(C
                (w <Lit_Chars read>)
                (w <Lit_Chars -r>)
                (w <Lit_Chars pubkey>)
              )
              terminator:<Op_Semi ";">
            )
          ]
          body:(command.DoGroup
            left:<KW_Do do>
            children:[
              (command.If
                if_kw:<KW_If if>
                arms:[
                  (IfArm
                    keyword:...0x15e2
                    cond:[
                      (command.Sentence
                        child:(command.Pipeline
                          negated:<KW_Bang "!">
                          children:[
                            (C
                              (w <Lit_Chars grep>)
                              (w <Lit_Chars -Fq>)
                              (w (DQ ($ pubkey)))
                              (w (DQ ($ auth_file)))
                            )
                          ]
                          ops:[]
                        )
                        terminator:<Op_Semi ";">
                      )
                    ]
                    then_kw:<KW_Then then>
                    action:[
                      (command.Redirect
                        child:(C (w <Lit_Chars echo>) (w (DQ ($ pubkey))))
                        redirects:[
                          (Redir
                            op:<Redir_DGreat ">>">
                            loc:(redir_loc.Fd fd:1)
                            arg:(w (DQ ($ auth_file)))
                          )
                        ]
                      )
                    ]
                    then_tok:...0x1ff6
                  )
                ]
                else_action:[]
                fi_kw:<KW_Fi fi>
              )
            ]
            right:<KW_Done done>
          )
        )
      ]
      ops:[<Op_Pipe "|">]
    )
  ]
)
scripts/ssh-public-key            PASS
(command.CommandList
  children:[
    (C (w <Lit_Chars set>) (w <Lit_Chars -eu>))
    (C
      (w <Lit_Chars readonly>)
      (w <Lit_VarLike "SSMTP_CONF="> (SQ /etc/ssmtp/ssmtp.conf))
    )
    (command.If
      if_kw:<KW_If if>
      arms:[
        (IfArm
          keyword:...0x118a
          cond:[
            (command.Sentence
              child:(C
                (w <Lit_LBracket "[">)
                (w <KW_Bang "!">)
                (w <Lit_Chars -f>)
                (w (DQ ($ SSMTP_CONF)))
                (w <Lit_RBracket "]">)
              )
              terminator:<Op_Semi ";">
            )
          ]
          then_kw:<KW_Then then>
          action:[
            (command.ControlFlow
              keyword:<ControlFlow_Exit exit>
              arg_word:(w <Lit_Chars 0>)
            )
          ]
          then_tok:...0x1106
        )
      ]
      else_action:[]
      fi_kw:<KW_Fi fi>
    )
    (command.If
      if_kw:<KW_If if>
      arms:[
        (IfArm
          keyword:...0x108a
          cond:[
            (command.Sentence
              child:(C
                (w <Lit_LBracket "[">)
                (w
                  (DQ
                    (BracedVarSub
                      left:<Left_DollarBrace "${">
                      name_tok:<VSub_Name ROOT_EMAIL>
                      var_name:ROOT_EMAIL
                      suffix_op:(suffix_op.Unary
                        op:<VTest_ColonHyphen ":-">
                        arg_word:(rhs_word.Empty)
                      )
                      right:<Right_DollarBrace "}">
                    )
                  )
                )
                (w <Lit_RBracket "]">)
              )
              terminator:<Op_Semi ";">
            )
          ]
          then_kw:<KW_Then then>
          action:[
            (C
              (w <Lit_Chars sed>)
              (w <Lit_Chars -i>)
              (w
                (DQ
                  <Lit_Chars "s/^[# ]*Root=.*/Root=">
                  ($ ROOT_EMAIL)
                  <Lit_Chars /i>
                )
              )
              (w (DQ ($ SSMTP_CONF)))
            )
          ]
          then_tok:...0x100e
        )
      ]
      else_action:[]
      fi_kw:<KW_Fi fi>
    )
    (command.If
      if_kw:<KW_If if>
      arms:[
        (IfArm
          keyword:...0x19f2
          cond:[
            (command.Sentence
              child:(C
                (w <Lit_LBracket "[">)
                (w
                  (DQ
                    (BracedVarSub
                      left:<Left_DollarBrace "${">
                      name_tok:<VSub_Name SMTP>
                      var_name:SMTP
                      suffix_op:(suffix_op.Unary
                        op:<VTest_ColonHyphen ":-">
                        arg_word:(rhs_word.Empty)
                      )
                      right:<Right_DollarBrace "}">
                    )
                  )
                )
                (w <Lit_RBracket "]">)
              )
              terminator:<Op_Semi ";">
            )
          ]
          then_kw:<KW_Then then>
          action:[
            (C
              (w <Lit_Chars sed>)
              (w <Lit_Chars -i>)
              (w
                (DQ
                  <Lit_Chars "s/^[# ]*Mailhub=.*/Mailhub=">
                  ($ SMTP)
                  <Lit_Chars /i>
                )
              )
              (w (DQ ($ SSMTP_CONF)))
            )
          ]
          then_tok:...0x197a
        )
      ]
      else_action:[]
      fi_kw:<KW_Fi fi>
    )
  ]
)
scripts/ssmtp                     PASS
(command.CommandList
  children:[
    (C (w <Lit_Chars set>) (w <Lit_Chars -eu>))
    (command.AndOr
      children:[
        (C
          (w <Lit_LBracket "[">)
          (w
            (DQ
              (BracedVarSub
                left:<Left_DollarBrace "${">
                name_tok:<VSub_Name START_SCRIPT_BASE64>
                var_name:START_SCRIPT_BASE64
                suffix_op:(suffix_op.Unary
                  op:<VTest_ColonHyphen ":-">
                  arg_word:(rhs_word.Empty)
                )
                right:<Right_DollarBrace "}">
              )
            )
          )
          (w <Lit_RBracket "]">)
        )
        (C
          (w <Lit_LBracket "[">)
          (w
            (DQ
              (BracedVarSub
                left:<Left_DollarBrace "${">
                name_tok:<VSub_Name START_SCRIPT>
                var_name:START_SCRIPT
                suffix_op:(suffix_op.Unary
                  op:<VTest_ColonHyphen ":-">
                  arg_word:(rhs_word.Empty)
                )
                right:<Right_DollarBrace "}">
              )
            )
          )
          (w <Lit_RBracket "]">)
        )
        (command.ControlFlow
          keyword:<ControlFlow_Exit exit>
          arg_word:(w <Lit_Chars 0>)
        )
      ]
      ops:[<Op_DPipe "||"> <Op_DPipe "||">]
    )
    (command.ShAssignment
      left:<Lit_VarLike "tmpfile=">
      pairs:[
        (AssignPair
          left:...0x10e2
          lhs:(sh_lhs.Name left:...0x10e2 name:tmpfile)
          op:assign_op.Equal
          rhs:(w
            (DQ
              (CommandSub
                left_token:<Left_DollarParen "$(">
                child:(C (w <Lit_Chars mktemp>))
                right:<Eof_RParen ")">
              )
            )
          )
        )
      ]
    )
    (C
      (w <Lit_Chars trap>)
      (w (DQ <Lit_Chars "rm -f '"> ($ tmpfile) <Lit_Chars "'">))
      (w <Lit_Chars EXIT>)
      (w <Lit_Chars HUP>)
      (w <Lit_Chars INT>)
      (w <Lit_Chars TERM>)
    )
    (command.If
      if_kw:<KW_If if>
      arms:[
        (IfArm
          keyword:...0x1a6a
          cond:[
            (command.Sentence
              child:(C
                (w <Lit_LBracket "[">)
                (w
                  (DQ
                    (BracedVarSub
                      left:<Left_DollarBrace "${">
                      name_tok:<VSub_Name START_SCRIPT_BASE64>
                      var_name:START_SCRIPT_BASE64
                      suffix_op:(suffix_op.Unary
                        op:<VTest_ColonHyphen ":-">
                        arg_word:(rhs_word.Empty)
                      )
                      right:<Right_DollarBrace "}">
                    )
                  )
                )
                (w <Lit_RBracket "]">)
              )
              terminator:<Op_Semi ";">
            )
          ]
          then_kw:<KW_Then then>
          action:[
            (command.Pipeline
              children:[
                (C
                  (w <Lit_Chars printf>)
                  (w (SQ "%s\\n"))
                  (w (DQ ($ START_SCRIPT_BASE64)))
                )
                (command.Redirect
                  child:(C (w <Lit_Chars base64>) (w <Lit_Chars -d>))
                  redirects:[
                    (Redir
                      op:<Redir_Great ">">
                      loc:(redir_loc.Fd fd:1)
                      arg:(w (DQ ($ tmpfile)))
                    )
                  ]
                )
              ]
              ops:[<Op_Pipe "|">]
            )
          ]
          then_tok:...0x19ee
        )
        (IfArm
          keyword:<KW_Elif elif>
          cond:[
            (command.Sentence
              child:(C
                (w <Lit_LBracket "[">)
                (w
                  (DQ
                    (BracedVarSub
                      left:<Left_DollarBrace "${">
                      name_tok:<VSub_Name START_SCRIPT>
                      var_name:START_SCRIPT
                      suffix_op:(suffix_op.Unary
                        op:<VTest_ColonHyphen ":-">
                        arg_word:(rhs_word.Empty)
                      )
                      right:<Right_DollarBrace "}">
                    )
                  )
                )
                (w <Lit_RBracket "]">)
              )
              terminator:<Op_Semi ";">
            )
          ]
          then_kw:<KW_Then then>
          action:[
            (command.Redirect
              child:(C
                (w <Lit_Chars printf>)
                (w (SQ "%s\\n"))
                (w (DQ ($ START_SCRIPT)))
              )
              redirects:[
                (Redir
                  op:<Redir_Great ">">
                  loc:(redir_loc.Fd fd:1)
                  arg:(w (DQ ($ tmpfile)))
                )
              ]
            )
          ]
          then_tok:...0x187a
        )
      ]
      else_action:[]
      fi_kw:<KW_Fi fi>
    )
    (C (w <Lit_Chars cd>) (w (DQ ($ MOUNT_DIR))))
    (command.Redirect
      child:(C (w <Lit_Chars echo>) (w (SQ "Executing start script")))
      redirects:[
        (Redir
          op:<Redir_GreatAnd ">&">
          loc:(redir_loc.Fd fd:1)
          arg:(w <Lit_Chars 2>)
        )
      ]
    )
    (command.If
      if_kw:<KW_If if>
      arms:[
        (IfArm
          keyword:...0x16ce
          cond:[
            (command.Sentence
              child:(command.Pipeline
                children:[
                  (C
                    (w <Lit_Chars head>)
                    (w <Lit_Chars -n1>)
                    (w (DQ ($ tmpfile)))
                  )
                  (C
                    (w <Lit_Chars grep>)
                    (w <Lit_Chars -q>)
                    (w (SQ "^#!\\s*\\w\\+"))
                  )
                ]
                ops:[<Op_Pipe "|">]
              )
              terminator:<Op_Semi ";">
            )
          ]
          then_kw:<KW_Then then>
          action:[
            (C
              (w <Lit_Chars chmod>)
              (w <Lit_Other "+"> <Lit_Chars x>)
              (w (DQ ($ tmpfile)))
            )
            (C (w (DQ ($ tmpfile))))
          ]
          then_tok:...0x15fa
        )
      ]
      else_kw:<KW_Else else>
      else_action:[
        (C
          (w <Lit_Slash /> <Lit_Chars bin> <Lit_Slash /> <Lit_Chars sh>)
          (w (DQ ($ tmpfile)))
        )
      ]
      fi_kw:<KW_Fi fi>
    )
  ]
)
scripts/start-script              PASS
(command.CommandList
  children:[
    (C (w <Lit_Chars set>) (w <Lit_Chars -eu>))
    (C (w <Lit_Chars readonly>) (w <Lit_VarLike "ADMIN_GROUP="> (SQ wheel)))
    (C
      (w <Lit_Colon ":">)
      (w
        (BracedVarSub
          left:<Left_DollarBrace "${">
          name_tok:<VSub_Name USER_SHELL>
          var_name:USER_SHELL
          suffix_op:(suffix_op.Unary
            op:<VTest_ColonEquals ":=">
            arg_word:(w
              (BracedVarSub
                left:<Left_DollarBrace "${">
                name_tok:<VSub_Name USERNAME_SHELL>
                var_name:USERNAME_SHELL
                suffix_op:(suffix_op.Unary
                  op:<VTest_ColonHyphen ":-">
                  arg_word:(w (DQ <Lit_Chars /bin/sh>))
                )
                right:<Right_DollarBrace "}">
              )
            )
          )
          right:<Right_DollarBrace "}">
        )
      )
    )
    (command.If
      if_kw:<KW_If if>
      arms:[
        (IfArm
          keyword:...0x1102
          cond:[
            (command.Sentence
              child:(C
                (w <Lit_LBracket "[">)
                (w <Lit_Chars -z>)
                (w
                  (DQ
                    (BracedVarSub
                      left:<Left_DollarBrace "${">
                      name_tok:<VSub_Name USERNAME>
                      var_name:USERNAME
                      suffix_op:(suffix_op.Unary
                        op:<VTest_ColonHyphen ":-">
                        arg_word:(rhs_word.Empty)
                      )
                      right:<Right_DollarBrace "}">
                    )
                  )
                )
                (w <Lit_RBracket "]">)
              )
              terminator:<Op_Semi ";">
            )
          ]
          then_kw:<KW_Then then>
          action:[
            (command.ControlFlow
              keyword:<ControlFlow_Exit exit>
              arg_word:(w <Lit_Chars 0>)
            )
          ]
          then_tok:...0x107a
        )
      ]
      else_action:[]
      fi_kw:<KW_Fi fi>
    )
    (C
      (w <Lit_Chars .>)
      (w
        (DQ
          (CommandSub
            left_token:<Left_DollarParen "$(">
            child:(C
              (w <Lit_Chars dirname>)
              (w
                (DQ
                  (CommandSub
                    left_token:<Left_DollarParen "$(">
                    child:(C
                      (w <Lit_Chars readlink>)
                      (w <Lit_Chars -f>)
                      (w (DQ ($ 0)))
                    )
                    right:<Eof_RParen ")">
                  )
                )
              )
            )
            right:<Eof_RParen ")">
          )
        )
        <Lit_Slash />
        <Lit_Chars utils.sh>
      )
    )
    (command.If
      if_kw:<KW_If if>
      arms:[
        (IfArm
          keyword:...0x197e
          cond:[
            (command.Sentence
              child:(command.Pipeline
                negated:<KW_Bang "!">
                children:[
                  (command.Redirect
                    child:(C (w <Lit_Chars id>) (w (DQ ($ USERNAME))))
                    redirects:[
                      (Redir
                        op:<Redir_Great ">">
                        loc:(redir_loc.Fd fd:1)
                        arg:(w
                          <Lit_Slash />
                          <Lit_Chars dev>
                          <Lit_Slash />
                          <Lit_Chars "null">
                        )
                      )
                      (Redir
                        op:<Redir_GreatAnd "2>&">
                        loc:(redir_loc.Fd fd:2)
                        arg:(w <Lit_Chars 1>)
                      )
                    ]
                  )
                ]
                ops:[]
              )
              terminator:<Op_Semi ";">
            )
          ]
          then_kw:<KW_Then then>
          action:[
            (command.Redirect
              child:(C
                (w <Lit_Chars echo>)
                (w (DQ <Lit_Chars "Creating user "> ($ USERNAME)))
              )
              redirects:[
                (Redir
                  op:<Redir_GreatAnd ">&">
                  loc:(redir_loc.Fd fd:1)
                  arg:(w <Lit_Chars 2>)
                )
              ]
            )
            (command.If
              if_kw:<KW_If if>
              arms:[
                (IfArm
                  keyword:...0x184a
                  cond:[
                    (command.Sentence
                      child:(command.Redirect
                        child:(C
                          (w <Lit_Chars command>)
                          (w <Lit_Chars -v>)
                          (w <Lit_Chars useradd>)
                        )
                        redirects:[
                          (Redir
                            op:<Redir_Great ">">
                            loc:(redir_loc.Fd fd:1)
                            arg:(w
                              <Lit_Slash />
                              <Lit_Chars dev>
                              <Lit_Slash />
                              <Lit_Chars "null">
                            )
                          )
                        ]
                      )
                      terminator:<Op_Semi ";">
                    )
                  ]
                  then_kw:<KW_Then then>
                  action:[
                    (C
                      (w <Lit_Chars useradd>)
                      (w <Lit_Chars --create-home>)
                      (w <Lit_Chars --no-user-group>)
                      (w <Lit_Chars --shell>)
                      (w (DQ ($ USER_SHELL)))
                      (w
                        (BracedVarSub
                          left:<Left_DollarBrace "${">
                          name_tok:<VSub_Name USER_UID>
                          var_name:USER_UID
                          suffix_op:(suffix_op.Unary
                            op:<VTest_ColonPlus ":+">
                            arg_word:(w (DQ <Lit_Chars "-u "> ($ USER_UID)))
                          )
                          right:<Right_DollarBrace "}">
                        )
                      )
                      (w (DQ ($ USERNAME)))
                    )
                  ]
                  then_tok:...0x17ca
                )
              ]
              else_kw:<KW_Else else>
              else_action:[
                (C
                  (w <Lit_Chars adduser>)
                  (w <Lit_Chars -D>)
                  (w <Lit_Chars -G>)
                  (w <Lit_Chars users>)
                  (w <Lit_Chars -s>)
                  (w (DQ ($ USER_SHELL)))
                  (w
                    (BracedVarSub
                      left:<Left_DollarBrace "${">
                      name_tok:<VSub_Name USER_UID>
                      var_name:USER_UID
                      suffix_op:(suffix_op.Unary
                        op:<VTest_ColonPlus ":+">
                        arg_word:(w (DQ <Lit_Chars "-u "> ($ USER_UID)))
                      )
                      right:<Right_DollarBrace "}">
                    )
                  )
                  (w (DQ ($ USERNAME)))
                )
                (command.Redirect
                  child:(C
                    (w <Lit_Chars passwd>)
                    (w <Lit_Chars -u>)
                    (w (DQ ($ USERNAME)))
                  )
                  redirects:[
                    (Redir
                      op:<Redir_Great ">">
                      loc:(redir_loc.Fd fd:1)
                      arg:(w
                        <Lit_Slash />
                        <Lit_Chars dev>
                        <Lit_Slash />
                        <Lit_Chars "null">
                      )
                    )
                  ]
                )
              ]
              fi_kw:<KW_Fi fi>
            )
          ]
          then_tok:...0x18d6
        )
      ]
      else_action:[]
      fi_kw:<KW_Fi fi>
    )
    (command.If
      if_kw:<KW_If if>
      arms:[
        (IfArm
          keyword:...0x1f9a
          cond:[
            (command.Sentence
              child:(command.Pipeline
                negated:<KW_Bang "!">
                children:[
                  (command.Redirect
                    child:(C
                      (w <Lit_Chars id>)
                      (w <Lit_Chars -Gn>)
                      (w (DQ ($ USERNAME)))
                    )
                    redirects:[
                      (Redir
                        op:<Redir_Great "2>">
                        loc:(redir_loc.Fd fd:2)
                        arg:(w
                          <Lit_Slash />
                          <Lit_Chars dev>
                          <Lit_Slash />
                          <Lit_Chars "null">
                        )
                      )
                    ]
                  )
                  (C
                    (w <Lit_Chars grep>)
                    (w <Lit_Chars -Fq>)
                    (w ($ ADMIN_GROUP))
                  )
                ]
                ops:[<Op_Pipe "|">]
              )
              terminator:<Op_Semi ";">
            )
          ]
          then_kw:<KW_Then then>
          action:[
            (command.Redirect
              child:(C
                (w <Lit_Chars echo>)
                (w
                  (DQ
                    <Lit_Chars "Adding user ">
                    ($ USERNAME)
                    <Lit_Chars " to group ">
                    ($ ADMIN_GROUP)
                  )
                )
              )
              redirects:[
                (Redir
                  op:<Redir_GreatAnd ">&">
                  loc:(redir_loc.Fd fd:1)
                  arg:(w <Lit_Chars 2>)
                )
              ]
            )
            (command.If
              if_kw:<KW_If if>
              arms:[
                (IfArm
                  keyword:...0x1e1e
                  cond:[
                    (command.Sentence
                      child:(command.Redirect
                        child:(C
                          (w <Lit_Chars command>)
                          (w <Lit_Chars -v>)
                          (w <Lit_Chars usermod>)
                        )
                        redirects:[
                          (Redir
                            op:<Redir_Great ">">
                            loc:(redir_loc.Fd fd:1)
                            arg:(w
                              <Lit_Slash />
                              <Lit_Chars dev>
                              <Lit_Slash />
                              <Lit_Chars "null">
                            )
                          )
                        ]
                      )
                      terminator:<Op_Semi ";">
                    )
                  ]
                  then_kw:<KW_Then then>
                  action:[
                    (C
                      (w <Lit_Chars usermod>)
                      (w <Lit_Chars --append>)
                      (w <Lit_Chars --groups>)
                      (w ($ ADMIN_GROUP))
                      (w (DQ ($ USERNAME)))
                    )
                  ]
                  then_tok:...0x1d9e
                )
              ]
              else_kw:<KW_Else else>
              else_action:[
                (C
                  (w <Lit_Chars addgroup>)
                  (w (DQ ($ USERNAME)))
                  (w ($ ADMIN_GROUP))
                )
              ]
              fi_kw:<KW_Fi fi>
            )
          ]
          then_tok:...0x1eb2
        )
      ]
      else_action:[]
      fi_kw:<KW_Fi fi>
    )
    (command.If
      if_kw:<KW_If if>
      arms:[
        (IfArm
          keyword:...0x1c4e
          cond:[
            (command.Sentence
              child:(C
                (w <Lit_Chars yesno>)
                (w
                  (DQ
                    (BracedVarSub
                      left:<Left_DollarBrace "${">
                      name_tok:<VSub_Name USERNAME_SUDO>
                      var_name:USERNAME_SUDO
                      suffix_op:(suffix_op.Unary
                        op:<VTest_ColonHyphen ":-">
                        arg_word:(w <Lit_Chars YES>)
                      )
                      right:<Right_DollarBrace "}">
                    )
                  )
                )
              )
              terminator:<Op_Semi ";">
            )
          ]
          then_kw:<KW_Then then>
          action:[
            (command.If
              if_kw:<KW_If if>
              arms:[
                (IfArm
                  keyword:...0x1bba
                  cond:[
                    (command.Sentence
                      child:(command.Redirect
                        child:(C
                          (w <Lit_Chars command>)
                          (w <Lit_Chars -v>)
                          (w <Lit_Chars doas>)
                        )
                        redirects:[
                          (Redir
                            op:<Redir_Great ">">
                            loc:(redir_loc.Fd fd:1)
                            arg:(w
                              <Lit_Slash />
                              <Lit_Chars dev>
                              <Lit_Slash />
                              <Lit_Chars "null">
                            )
                          )
                        ]
                      )
                      terminator:<Op_Semi ";">
                    )
                  ]
                  then_kw:<KW_Then then>
                  action:[
                    (command.ShAssignment
                      left:<Lit_VarLike "cfgfile=">
                      pairs:[
                        (AssignPair
                          left:...0x1b22
                          lhs:(sh_lhs.Name left:...0x1b22 name:cfgfile)
                          op:assign_op.Equal
                          rhs:(w
                            (DQ
                              <Lit_Chars /etc/doas.d/>
                              ($ ADMIN_GROUP)
                              <Lit_Chars .conf>
                            )
                          )
                        )
                      ]
                    )
                    (command.ShAssignment
                      left:<Lit_VarLike "rule=">
                      pairs:[
                        (AssignPair
                          left:...0x1ac6
                          lhs:(sh_lhs.Name left:...0x1ac6 name:rule)
                          op:assign_op.Equal
                          rhs:(w
                            (DQ <Lit_Chars "permit nopass :"> ($ ADMIN_GROUP))
                          )
                        )
                      ]
                    )
                  ]
                  then_tok:...0x1b3e
                )
                (IfArm
                  keyword:<KW_Elif elif>
                  cond:[
                    (command.Sentence
                      child:(command.Redirect
                        child:(C
                          (w <Lit_Chars command>)
                          (w <Lit_Chars -v>)
                          (w <Lit_Chars sudo>)
                        )
                        redirects:[
                          (Redir
                            op:<Redir_Great ">">
                            loc:(redir_loc.Fd fd:1)
                            arg:(w
                              <Lit_Slash />
                              <Lit_Chars dev>
                              <Lit_Slash />
                              <Lit_Chars "null">
                            )
                          )
                        ]
                      )
                      terminator:<Op_Semi ";">
                    )
                  ]
                  then_kw:<KW_Then then>
                  action:[
                    (command.ShAssignment
                      left:<Lit_VarLike "cfgfile=">
                      pairs:[
                        (AssignPair
                          left:...0x247a
                          lhs:(sh_lhs.Name left:...0x247a name:cfgfile)
                          op:assign_op.Equal
                          rhs:(w
                            (DQ <Lit_Chars /etc/sudoers.d/> ($ ADMIN_GROUP))
                          )
                        )
                      ]
                    )
                    (command.ShAssignment
                      left:<Lit_VarLike "rule=">
                      pairs:[
                        (AssignPair
                          left:...0x2422
                          lhs:(sh_lhs.Name left:...0x2422 name:rule)
                          op:assign_op.Equal
                          rhs:(w
                            (DQ
                              <Lit_Chars "%">
                              ($ ADMIN_GROUP)
                              <Lit_Chars " ALL=(ALL) NOPASSWD: ALL">
                            )
                          )
                        )
                      ]
                    )
                  ]
                  then_tok:...0x2496
                )
              ]
              else_kw:<KW_Else else>
              else_action:[
                (command.Redirect
                  child:(C
                    (w <Lit_Chars echo>)
                    (w
                      (DQ
                        <
                          Lit_Chars
                          "WARNING: neither doas nor sudo is installed, doas/sudo rule for "
                        >
                        ($ ADMIN_GROUP)
                        <Lit_Chars " will not be added">
                      )
                    )
                  )
                  redirects:[
                    (Redir
                      op:<Redir_GreatAnd ">&">
                      loc:(redir_loc.Fd fd:1)
                      arg:(w <Lit_Chars 2>)
                    )
                  ]
                )
                (command.ControlFlow
                  keyword:<ControlFlow_Exit exit>
                  arg_word:(w <Lit_Chars 0>)
                )
              ]
              fi_kw:<KW_Fi fi>
            )
            (command.If
              if_kw:<KW_If if>
              arms:[
                (IfArm
                  keyword:...0x22e6
                  cond:[
                    (command.Sentence
                      child:(command.Pipeline
                        negated:<KW_Bang "!">
                        children:[
                          (C
                            (w <Lit_LBracket "[">)
                            (w <Lit_Chars -f>)
                            (w (DQ ($ cfgfile)))
                            (w <Lit_RBracket "]">)
                          )
                        ]
                        ops:[]
                      )
                      terminator:<Op_Semi ";">
                    )
                  ]
                  then_kw:<KW_Then then>
                  action:[
                    (command.Redirect
                      child:(C
                        (w <Lit_Chars echo>)
                        (w (DQ <Lit_Chars "Creating "> ($ cfgfile)))
                      )
                      redirects:[
                        (Redir
                          op:<Redir_GreatAnd ">&">
                          loc:(redir_loc.Fd fd:1)
                          arg:(w <Lit_Chars 2>)
                        )
                      ]
                    )
                    (command.Redirect
                      child:(C (w <Lit_Chars cat>))
                      redirects:[
                        (Redir
                          op:<Redir_Great ">">
                          loc:(redir_loc.Fd fd:1)
                          arg:(w (DQ ($ cfgfile)))
                        )
                        (Redir
                          op:<Redir_DLessDash "<<-">
                          loc:(redir_loc.Fd fd:0)
                          arg:(redir_param.HereDoc
                            here_begin:(w <Lit_Chars EOF>)
                            here_end_tok:<Undefined_Tok "EOF\n">
                            stdin_parts:[
                              <Lit_Chars "# Added by ">
                              (CommandSub
                                left_token:<Left_DollarParen "$(">
                                child:(C
                                  (w <Lit_Chars readlink>)
                                  (w <Lit_Chars -f>)
                                  (w (DQ ($ 0)))
                                )
                                right:<Eof_RParen ")">
                              )
                              <Lit_Chars "\n">
                              ($ rule)
                              <Lit_Chars "\n">
                            ]
                          )
                        )
                      ]
                    )
                    (C
                      (w <Lit_Chars chmod>)
                      (w <Lit_Chars 640>)
                      (w (DQ ($ cfgfile)))
                    )
                  ]
                  then_tok:...0x225e
                )
              ]
              else_action:[]
              fi_kw:<KW_Fi fi>
            )
          ]
          then_tok:...0x1bd6
        )
      ]
      else_action:[]
      fi_kw:<KW_Fi fi>
    )
  ]
)
scripts/sudo-user                 PASS
(command.CommandList
  children:[
    (C (w <Lit_Chars set>) (w <Lit_Chars -eu>))
    (command.If
      if_kw:<KW_If if>
      arms:[
        (IfArm
          keyword:...0x11fa
          cond:[
            (command.Sentence
              child:(C
                (w <Lit_LBracket "[">)
                (w <Lit_Chars -z>)
                (w
                  (DQ
                    (BracedVarSub
                      left:<Left_DollarBrace "${">
                      name_tok:<VSub_Name TIMEZONE>
                      var_name:TIMEZONE
                      suffix_op:(suffix_op.Unary
                        op:<VTest_ColonHyphen ":-">
                        arg_word:(rhs_word.Empty)
                      )
                      right:<Right_DollarBrace "}">
                    )
                  )
                )
                (w <Lit_RBracket "]">)
              )
              terminator:<Op_Semi ";">
            )
          ]
          then_kw:<KW_Then then>
          action:[
            (command.ControlFlow
              keyword:<ControlFlow_Exit exit>
              arg_word:(w <Lit_Chars 0>)
            )
          ]
          then_tok:...0x1172
        )
      ]
      else_action:[]
      fi_kw:<KW_Fi fi>
    )
    (command.AndOr
      children:[
        (command.ShAssignment
          left:<Lit_VarLike "timezone=">
          pairs:[
            (AssignPair
              left:...0x10fa
              lhs:(sh_lhs.Name left:...0x10fa name:timezone)
              op:assign_op.Equal
              rhs:(w
                (CommandSub
                  left_token:<Left_DollarParen "$(">
                  child:(C
                    (w <Lit_Chars readlink>)
                    (w
                      <Lit_Slash />
                      <Lit_Chars etc>
                      <Lit_Slash />
                      <Lit_Chars localtime>
                    )
                  )
                  right:<Eof_RParen ")">
                )
              )
            )
          ]
        )
        (C (w <Lit_Chars "true">))
      ]
      ops:[<Op_DPipe "||">]
    )
    (command.ShAssignment
      left:<Lit_VarLike "timezone=">
      pairs:[
        (AssignPair
          left:...0x101a
          lhs:(sh_lhs.Name left:...0x101a name:timezone)
          op:assign_op.Equal
          rhs:(w
            (BracedVarSub
              left:<Left_DollarBrace "${">
              name_tok:<VSub_Name timezone>
              var_name:timezone
              suffix_op:(suffix_op.Unary
                op:<VOp1_Pound "#">
                arg_word:(w
                  <Lit_Other "*">
                  <Lit_Slash />
                  <Lit_Chars zoneinfo>
                  <Lit_Slash />
                )
              )
              right:<Right_DollarBrace "}">
            )
          )
        )
      ]
    )
    (command.If
      if_kw:<KW_If if>
      arms:[
        (IfArm
          keyword:...0x1a52
          cond:[
            (command.Sentence
              child:(C
                (w <Lit_LBracket "[">)
                (w (DQ ($ timezone)))
                (w <Lit_Equals "=">)
                (w (DQ ($ TIMEZONE)))
                (w <Lit_RBracket "]">)
              )
              terminator:<Op_Semi ";">
            )
          ]
          then_kw:<KW_Then then>
          action:[
            (command.ControlFlow
              keyword:<ControlFlow_Exit exit>
              arg_word:(w <Lit_Chars 0>)
            )
          ]
          then_tok:...0x19be
        )
      ]
      else_action:[]
      fi_kw:<KW_Fi fi>
    )
    (C (w <Lit_Chars setup-timezone>) (w (DQ ($ TIMEZONE))))
  ]
)
scripts/timezone                  PASS
(command.CommandList
  children:[
    (C (w <Lit_Chars readonly>) (w <Lit_VarLike "VERSION="> (SQ 0.9.0)))
    (command.If
      if_kw:<KW_If if>
      arms:[
        (IfArm
          keyword:...0x11b2
          cond:[
            (command.Sentence
              child:(command.Subshell
                left:<Op_LParen "(">
                child:(command.Redirect
                  child:(C
                    (w <Lit_Chars set>)
                    (w <Lit_Chars -o>)
                    (w <Lit_Chars pipefail>)
                  )
                  redirects:[
                    (Redir
                      op:<Redir_Great "2>">
                      loc:(redir_loc.Fd fd:2)
                      arg:(w
                        <Lit_Slash />
                        <Lit_Chars dev>
                        <Lit_Slash />
                        <Lit_Chars "null">
                      )
                    )
                  ]
                )
                right:<Right_Subshell ")">
                is_last_cmd:F
              )
              terminator:<Op_Semi ";">
            )
          ]
          then_kw:<KW_Then then>
          action:[
            (C (w <Lit_Chars set>) (w <Lit_Chars -o>) (w <Lit_Chars pipefail>))
          ]
          then_tok:...0x110e
        )
      ]
      else_action:[]
      fi_kw:<KW_Fi fi>
    )
    (command.ShFunction
      name_tok:<Lit_Chars update_config>
      name:update_config
      body:(BraceGroup
        left:<Lit_LBrace "{">
        children:[
          (C (w <Lit_Chars local>) (w <Lit_VarLike "conf_file="> (DQ ($ 1))))
          (C (w <Lit_Chars local>) (w <Lit_VarLike "generated_by="> (DQ ($ 2))))
          (C
            (w <Lit_Chars local>)
            (w
              <Lit_VarLike "content=">
              (DQ
                (BracedVarSub
                  left:<Left_DollarBrace "${">
                  name_tok:<VSub_Number 3>
                  var_name:3
                  suffix_op:(suffix_op.Unary
                    op:<VTest_Hyphen ->
                    arg_word:(w
                      (DQ
                        (CommandSub
                          left_token:<Left_DollarParen "$(">
                          child:(C (w <Lit_Chars cat>) (w <Lit_Chars ->))
                          right:<Eof_RParen ")">
                        )
                      )
                    )
                  )
                  right:<Right_DollarBrace "}">
                )
              )
            )
          )
          (C
            (w <Lit_Chars local>)
            (w <Lit_VarLike "start_tag="> (SQ "# BEGIN generated"))
          )
          (C
            (w <Lit_Chars local>)
            (w <Lit_VarLike "end_tag="> (SQ "# END generated"))
          )
          (command.AndOr
            children:[
              (C
                (w <Lit_LBracket "[">)
                (w <Lit_Chars -z>)
                (w (DQ ($ content)))
                (w <Lit_RBracket "]">)
              )
              (command.ShAssignment
                left:<Lit_VarLike "content=">
                pairs:[
                  (AssignPair
                    left:...0x17c2
                    lhs:(sh_lhs.Name left:...0x17c2 name:content)
                    op:assign_op.Equal
                    rhs:(w
                      (CommandSub
                        left_token:<Left_DollarParen "$(">
                        child:(command.Redirect
                          child:(C (w <Lit_Chars cat>))
                          redirects:[
                            (Redir
                              op:<Redir_DLessDash "<<-">
                              loc:(redir_loc.Fd fd:0)
                              arg:(redir_param.HereDoc
                                here_begin:(w <Lit_Chars EOF>)
                                here_end_tok:<Undefined_Tok "EOF\n">
                                stdin_parts:[
                                  ($ start_tag)
                                  <Lit_Chars " by ">
                                  ($ generated_by)
                                  <Lit_Chars "\n">
                                  <
                                    Lit_Chars
                                    "# Do not modify this block, any modifications will be lost after reboot!\n"
                                  >
                                  ($ content)
                                  <Lit_Chars "\n">
                                  ($ end_tag)
                                  <Lit_Chars "\n">
                                ]
                              )
                            )
                          ]
                        )
                        right:<Eof_RParen ")">
                      )
                    )
                  )
                ]
              )
            ]
            ops:[<Op_DPipe "||">]
          )
          (command.If
            if_kw:<KW_If if>
            arms:[
              (IfArm
                keyword:...0x1686
                cond:[
                  (command.Sentence
                    child:(command.AndOr
                      children:[
                        (C
                          (w <Lit_LBracket "[">)
                          (w <Lit_Chars -f>)
                          (w (DQ ($ conf_file)))
                          (w <Lit_RBracket "]">)
                        )
                        (C
                          (w <Lit_Chars grep>)
                          (w <Lit_Chars -q>)
                          (w (DQ <Lit_Chars "^"> ($ start_tag)))
                          (w (DQ ($ conf_file)))
                        )
                      ]
                      ops:[<Op_DAmp "&&">]
                    )
                    terminator:<Op_Semi ";">
                  )
                ]
                then_kw:<KW_Then then>
                action:[
                  (command.If
                    if_kw:<KW_If if>
                    arms:[
                      (IfArm
                        keyword:...0x156a
                        cond:[
                          (command.Sentence
                            child:(C
                              (w <Lit_LBracket "[">)
                              (w (DQ ($ content)))
                              (w <Lit_RBracket "]">)
                            )
                            terminator:<Op_Semi ";">
                          )
                        ]
                        then_kw:<KW_Then then>
                        action:[
                          (command.ShAssignment
                            left:<Lit_VarLike "content=">
                            pairs:[
                              (AssignPair
                                left:...0x1f8e
                                lhs:(sh_lhs.Name left:...0x1f8e name:content)
                                op:assign_op.Equal
                                rhs:(w
                                  (BracedVarSub
                                    left:<Left_DollarBrace "${">
                                    name_tok:<VSub_Name content>
                                    var_name:content
                                    suffix_op:(suffix_op.PatSub
                                      pat:(w
                                        (SingleQuoted
                                          left:<Left_DollarSingleQuote "$'">
                                          sval:"\n"
                                          right:<Right_SingleQuote "'">
                                        )
                                      )
                                      replace:(w
                                        (word_part.EscapedLiteral
                                          token:<Lit_EscapedChar "\\\\">
                                          ch:"\\"
                                        )
                                        (SingleQuoted
                                          left:<Left_DollarSingleQuote "$'">
                                          sval:"\n"
                                          right:<Right_SingleQuote "'">
                                        )
                                      )
                                      replace_mode:Lit_Slash
                                      slash_tok:<VOp2_Slash />
                                    )
                                    right:<Right_DollarBrace "}">
                                  )
                                )
                              )
                            ]
                          )
                          (C
                            (w <Lit_Chars sed>)
                            (w <Lit_Chars -ni>)
                            (w
                              (DQ
                                <Lit_Chars "/^">
                                ($ start_tag)
                                <Lit_Chars "/ {\n">
                                <Lit_Chars "\t\t\t\t\ta">
                                (word_part.EscapedLiteral
                                  token:<Lit_EscapedChar "\\\\">
                                  ch:"\\"
                                )
                                ($ content)
                                <Lit_Chars "\n">
                                <
                                  Lit_Chars
                                  "\t\t\t\t\t# read and discard next line and repeat until "
                                >
                                ($ end_tag)
                                <Lit_Chars " or EOF\n">
                                <Lit_Chars "\t\t\t\t\t:a; n; /^">
                                ($ end_tag)
                                <Lit_Chars "/!ba; n\n">
                                <Lit_Chars "\t\t\t\t}; p">
                              )
                            )
                            (w (DQ ($ conf_file)))
                          )
                        ]
                        then_tok:...0x1faa
                      )
                    ]
                    else_kw:<KW_Else else>
                    else_action:[
                      (C
                        (w <Lit_Chars sed>)
                        (w <Lit_Chars -i>)
                        (w
                          (DQ
                            <Lit_Chars "/^">
                            ($ start_tag)
                            <Lit_Chars "/,/^">
                            ($ end_tag)
                            <Lit_Chars /d>
                          )
                        )
                        (w (DQ ($ conf_file)))
                      )
                    ]
                    fi_kw:<KW_Fi fi>
                  )
                ]
                then_tok:...0x1592
              )
              (IfArm
                keyword:<KW_Elif elif>
                cond:[
                  (command.Sentence
                    child:(C
                      (w <Lit_LBracket "[">)
                      (w (DQ ($ content)))
                      (w <Lit_RBracket "]">)
                    )
                    terminator:<Op_Semi ";">
                  )
                ]
                then_kw:<KW_Then then>
                action:[
                  (command.Redirect
                    child:(C
                      (w <Lit_Chars printf>)
                      (w (SQ "\\n%s\\n"))
                      (w (DQ ($ content)))
                    )
                    redirects:[
                      (Redir
                        op:<Redir_DGreat ">>">
                        loc:(redir_loc.Fd fd:1)
                        arg:(w (DQ ($ conf_file)))
                      )
                    ]
                  )
                ]
                then_tok:...0x1cce
              )
            ]
            else_action:[]
            fi_kw:<KW_Fi fi>
          )
        ]
        right:<Lit_RBrace "}">
      )
    )
    (command.ShFunction
      name_tok:<Lit_Chars getval>
      name:getval
      body:(BraceGroup
        left:<Lit_LBrace "{">
        children:[
          (C (w <Lit_Chars local>) (w <Lit_VarLike "var_name="> (DQ ($ 1))))
          (C
            (w <Lit_Chars local>)
            (w
              <Lit_VarLike "default=">
              (DQ
                (BracedVarSub
                  left:<Left_DollarBrace "${">
                  name_tok:<VSub_Number 2>
                  var_name:2
                  suffix_op:(suffix_op.Unary
                    op:<VTest_ColonHyphen ":-">
                    arg_word:(rhs_word.Empty)
                  )
                  right:<Right_DollarBrace "}">
                )
              )
            )
          )
          (C
            (w <Lit_Chars eval>)
            (w
              (DQ
                <Lit_Chars "printf '%s">
                <Lit_BadBackslash "\\">
                <Lit_Chars "n' ">
                (word_part.EscapedLiteral token:<Lit_EscapedChar "\\$"> ch:"$")
                <Lit_Chars "{">
                ($ var_name)
                <Lit_Chars ":-">
                ($ default)
                <Lit_Chars "}">
              )
            )
          )
        ]
        right:<Lit_RBrace "}">
      )
    )
    (command.ShFunction
      name_tok:<Lit_Chars yesno>
      name:yesno
      body:(BraceGroup
        left:<Lit_LBrace "{">
        children:[
          (command.Case
            case_kw:<KW_Case case>
            to_match:(case_arg.Word w:(w (DQ ($ 1))))
            arms_start:<KW_In in>
            arms:[
              (CaseArm
                left:<Lit_LBracket "[">
                pattern:(pat.Words
                  words:[
                    (w
                      <Lit_LBracket "[">
                      <Lit_Chars yY>
                      <Lit_RBracket "]">
                      <Lit_LBracket "[">
                      <Lit_Chars eE>
                      <Lit_RBracket "]">
                      <Lit_LBracket "[">
                      <Lit_Chars sS>
                      <Lit_RBracket "]">
                    )
                  ]
                )
                middle:<Right_CasePat ")">
                action:[
                  (command.ControlFlow
                    keyword:<ControlFlow_Return return>
                    arg_word:(w <Lit_Chars 0>)
                  )
                ]
                right:<Op_DSemi ";;">
              )
              (CaseArm
                left:<Lit_Star "*">
                pattern:(pat.Words words:[(w <Lit_Star "*">)])
                middle:<Right_CasePat ")">
                action:[
                  (command.ControlFlow
                    keyword:<ControlFlow_Return return>
                    arg_word:(w <Lit_Chars 1>)
                  )
                ]
                right:<Op_DSemi ";;">
              )
            ]
            arms_end:<KW_Esac esac>
          )
        ]
        right:<Lit_RBrace "}">
      )
    )
  ]
)
scripts/utils.sh                  PASS
>>> one-context: Entering fakeroot...
install: creating directory '/home/packager/aports/main/one-context/pkg'
install: creating directory '/home/packager/aports/main/one-context/pkg/one-context/etc'
install: creating directory '/home/packager/aports/main/one-context/pkg/one-context/etc/init.d'
install: creating directory '/home/packager/aports/main/one-context/pkg/one-context/etc/one-context.d'
install: creating directory '/home/packager/aports/main/one-context/pkg/one-context'
install: creating directory '/home/packager/aports/main/one-context/pkg/one-context/usr'
install: creating directory '/home/packager/aports/main/one-context/pkg/one-context/usr/share'
install: creating directory '/home/packager/aports/main/one-context/pkg/one-context/usr/share/one-context'
install: creating directory '/home/packager/aports/main/one-context/pkg/one-context/usr/share/one-context/scripts'
'scripts/utils.sh' -> '/home/packager/aports/main/one-context/pkg/one-context/usr/share/one-context/scripts/utils.sh'
'init.d/vmcontext' -> '/home/packager/aports/main/one-context/pkg/one-context/etc/init.d/vmcontext'
'/home/packager/aports/main/one-context/pkg/one-context/etc/one-context.d/00-network' -> '/usr/share/one-context/scripts/network'
'scripts/network' -> '/home/packager/aports/main/one-context/pkg/one-context/usr/share/one-context/scripts/network'
'/home/packager/aports/main/one-context/pkg/one-context/etc/one-context.d/05-hostname' -> '/usr/share/one-context/scripts/hostname'
'scripts/hostname' -> '/home/packager/aports/main/one-context/pkg/one-context/usr/share/one-context/scripts/hostname'
'/home/packager/aports/main/one-context/pkg/one-context/etc/one-context.d/10-hosts' -> '/usr/share/one-context/scripts/hosts'
'/home/packager/aports/main/one-context/pkg/one-context/etc/one-context.d/15-ntp' -> '/usr/share/one-context/scripts/ntp'
'scripts/hosts' -> '/home/packager/aports/main/one-context/pkg/one-context/usr/share/one-context/scripts/hosts'
'/home/packager/aports/main/one-context/pkg/one-context/etc/one-context.d/20-timezone' -> '/usr/share/one-context/scripts/timezone'
'/home/packager/aports/main/one-context/pkg/one-context/etc/one-context.d/50-sudo-user' -> '/usr/share/one-context/scripts/sudo-user'
'/home/packager/aports/main/one-context/pkg/one-context/etc/one-context.d/55-ssh-public-key' -> '/usr/share/one-context/scripts/ssh-public-key'
'scripts/ntp' -> '/home/packager/aports/main/one-context/pkg/one-context/usr/share/one-context/scripts/ntp'
'/home/packager/aports/main/one-context/pkg/one-context/etc/one-context.d/60-grow-fs' -> '/usr/share/one-context/scripts/grow-fs'
'/home/packager/aports/main/one-context/pkg/one-context/etc/one-context.d/65-ssmtp' -> '/usr/share/one-context/scripts/ssmtp'
'scripts/timezone' -> '/home/packager/aports/main/one-context/pkg/one-context/usr/share/one-context/scripts/timezone'
'/home/packager/aports/main/one-context/pkg/one-context/etc/one-context.d/90-start-script' -> '/usr/share/one-context/scripts/start-script'
'scripts/sudo-user' -> '/home/packager/aports/main/one-context/pkg/one-context/usr/share/one-context/scripts/sudo-user'
'scripts/ssh-public-key' -> '/home/packager/aports/main/one-context/pkg/one-context/usr/share/one-context/scripts/ssh-public-key'
'scripts/grow-fs' -> '/home/packager/aports/main/one-context/pkg/one-context/usr/share/one-context/scripts/grow-fs'
'scripts/ssmtp' -> '/home/packager/aports/main/one-context/pkg/one-context/usr/share/one-context/scripts/ssmtp'
'scripts/start-script' -> '/home/packager/aports/main/one-context/pkg/one-context/usr/share/one-context/scripts/start-script'
>>> one-context*: Running postcheck for one-context
>>> WARNING: one-context*: Found OpenRC directory (/etc/conf.d or /etc/init.d) but name doesn't end with -openrc
>>> one-context*: Preparing package one-context...
>>> one-context*: Tracing dependencies...
	blkid
	partx
	sfdisk
>>> one-context*: Package size: 14.6 KB
>>> one-context*: Compressing data...
>>> one-context*: Create checksum...
pigz: not found
>>> one-context*: Create one-context-0.9.0-r0.apk
>>> one-context: Build complete at Fri, 23 May 2025 03:19:36 +0000 elapsed time 0h 0m 8s
>>> one-context: Cleaning up srcdir
>>> one-context: Cleaning up pkgdir
>>> one-context: Uninstalling dependencies...
(1/9) Purging .makedepends-one-context (20250523.031932)
(2/9) Purging blkid (2.40.4-r1)
(3/9) Purging partx (2.40.4-r1)
(4/9) Purging sfdisk (2.40.4-r1)
(5/9) Purging libfdisk (2.40.4-r1)
(6/9) Purging libsmartcols (2.40.4-r1)
(7/9) Purging libuuid (2.40.4-r1)
(8/9) Purging libblkid (2.40.4-r1)
(9/9) Purging libeconf (0.6.3-r0)
Executing busybox-1.37.0-r12.trigger
OK: 313 MiB in 114 packages
>>> one-context: Updating the main/x86_64 repository index...
>>> one-context: Signing the index...
pigz: not found
